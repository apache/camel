The @{title} endpoint is configured using URI syntax:

----
@{syntax}
----

with the following path and query parameters:

=== Path Parameters (@{endpointPathOptions.size()} parameters):

@if{endpointPathOptions.isEmpty()}
The @{title} endpoint has no path parameters.
@else{}
[width="100%",cols="2,5,^1,2",options="header"]
|===@comment{ Render table cells. If description contains newline, prefix cell with `a`, so the content is rendered with formatting. }
| Name | Description | Default | Type
@foreach{row : endpointPathOptions}| *@{row.getShortName(30)}* @{row.description.?contains("\n") ? "a" : ""}| @{util.escape(row.description)} | @{row.getShortDefaultValue(20)} | @{row.getShortJavaType()}
@end{}|===
@end{}

=== Query Parameters (@{endpointParameterOptions.size()} parameters):

@if{endpointParameterOptions.isEmpty()}
The @{title} endpoint has no query parameters.
@else{}
[width="100%",cols="2,5,^1,2",options="header"]
|===@comment{ Render table cells. If description contains newline, prefix cell with `a`, so the content is rendered with formatting. }
| Name | Description | Default | Type
@foreach{row : endpointParameterOptions}| *@{row.getShortName(30)}* (@{row.shortGroup}) @{row.description.?contains("\n") ? "a" : ""}| @{util.escape(row.description)} | @{row.getShortDefaultValue(20)} | @{row.getShortJavaType()}
@end{}|===
@end{}

@if{!apiOptions.isEmpty()}

=== API Parameters (@{apiOptions.size()} APIs):

The @{title} endpoint is an API based component and has additional parameters based on which API name and API method is used.
The API name and API method is located in the endpoint URI as the @{apiSyntax} path parameters:

----
@{syntax}
----

There are @{apiOptions.size} API names as listed in the table below:

[width="100%",cols="2,2,6",options="header"]
|===@comment{ Render table cells. If description contains newline, prefix cell with `a`, so the content is rendered with formatting. }
| API Name | Type | Description
@foreach{api : apiOptions}| *@{api.name}* | @{util.producerOrConsumer(api)} | @{api.description}
@end{}|===

Each API is documented in the following sections to come.

@foreach{api : apiOptions}
==== API: @{api.name}
@if{api.consumerOnly}
*Only consumer is supported*
@elseif{api.producerOnly}
*Only producer is supported*
@else{}
*Both producer and consumer are supported*
@end{}

@if{api.methods.isEmpty()}
The @{api.name} has no API methods.
@else{}

The @{api.name} API has @{api.methods.size} method(s) which is represented by the following method signatures
(an API method may have multiple signatures due to overloading):

[source,java]
----
@foreach{method : api.methods}@foreach{signature : method.signatures}
@{util.formatSignature(signature)}
@end{}@end{}
----

The @{api.name} API is defined in the syntax as follows:

----
@{scheme}:${api.name}/methodName?[parameters]
----

The @{api.methods.size} method(s) is listed in the table below.
(API methods can have a shorthand alias name which can be used in the syntax instead of the name)

[width="100%",cols="2,2,6",options="header"]
|===@comment{ Render table cells. If description contains newline, prefix cell with `a`, so the content is rendered with formatting. }
| Method | Alias | Description
@foreach{method : api.methods}| *@{method.name}* | @{util.apiMethodAlias(api, method)} | @{method.description}
@end{}|===

The @{api.name} API method(s) has the following set of parameters listed in the table below:
[width="100%",cols="2,2,4,2",options="header"]
|===@comment{ Render table cells. If description contains newline, prefix cell with `a`, so the content is rendered with formatting. }
| Method | Parameter | Description | Type
@foreach{method : api.methods}@foreach{row : method.options}| @{method.name} | *@{row.getShortName(30)}* @{row.description.?contains("\n") ? "a" : ""}| @{row.optional ? "*Optional* " : ""} @{util.escape(row.description)} | @{row.getShortJavaType()}
@end{}@end{}|===

In addition to the parameters above, the @{api.name} API can also use from the @{endpointParameterOptions.size()} endpoint query option
which is listed in the _Query Parameters_ section.

Any of the parameters can be provided in either the endpoint URI, or dynamically in a message header.
The message header name must be of the format `Camel@{util.componentName(scheme)}.parameter`.
The `inBody` parameter overrides message header, i.e. the endpoint parameter `inBody=myParameterNameHere`
would override a `Camel@{util.componentName(scheme)}.myParameterNameHere` header.

@end{}
@end{}

@end{}
