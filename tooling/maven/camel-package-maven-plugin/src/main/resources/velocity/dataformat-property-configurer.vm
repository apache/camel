## ---------------------------------------------------------------------------
## Licensed to the Apache Software Foundation (ASF) under one or more
## contributor license agreements.  See the NOTICE file distributed with
## this work for additional information regarding copyright ownership.
## The ASF licenses this file to You under the Apache License, Version 2.0
## (the "License"); you may not use this file except in compliance with
## the License.  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ---------------------------------------------------------------------------
/* Generated by camel build tools - do NOT edit this file! */
package ${package};

import javax.annotation.processing.Generated;
import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class ${className} extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        ${type} dataformat = (${type}) target;
        switch (ignoreCase ? name.toLowerCase() : name) {
#foreach ( $option in $options )
    #if ( $option.name != "id" )
        #set ( $setter = "set" + $option.name.substring(0, 1).toUpperCase() + $option.name.substring(1) )
        #set ( $type = $mojo.canonicalClassName($option.getJavaType()) )
    #end
    #if ( ! $option.name.toLowerCase().equals($option.name) )
        case "${option.name.toLowerCase()}":
    #end
        case "${option.name}": dataformat.${setter}(property(camelContext, ${type}.class, value)); return true;
#end
        default: return false;
        }
    }

}

