## ---------------------------------------------------------------------------
## Licensed to the Apache Software Foundation (ASF) under one or more
## contributor license agreements.  See the NOTICE file distributed with
## this work for additional information regarding copyright ownership.
## The ASF licenses this file to You under the Apache License, Version 2.0
## (the "License"); you may not use this file except in compliance with
## the License.  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ---------------------------------------------------------------------------
#set( $newline="
")
/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${packageName};

import javax.annotation.processing.Generated;
import ${dslFactoriesPackage}.*;

/**
 * Component DSL builder.
 *
 * You can build a component as follows:
 * <pre>
 * KafkaComponent kafka =
 * ComponentBuilderFactory.kafka().setBrokers("{{host:port}}").build();
 * </pre>
 * This creates a new Kafka component, but often you want to register the
 * component to CamelContext, which can be done as follows:
 * <pre>
 * ComponentBuilderFactory.kafka().setBrokers("{{host:port}}").register(camelContext, "kafka");
 * </pre>
 * This configures and registers the component to CamelContext with the name
 * kafka. If you have separate Kafka brokers you can register more components
 * with their own name:
 * <pre>
 * ComponentBuilderFactory.kafka().setBrokers("{{host2:port}}").register(camelContext, "kafka2");
 * </pre>
 *
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("${generatorClass}")
public interface ${className} {

#foreach( $model in $models )
    #set( $lowerComponentName = $mojo.toCamelCaseLower($model.scheme) )
    #set( $componentName = $mojo.capitalize($lowerComponentName) )
    ${mojo.javadoc("    ", $mojo.getMainDescriptionWithoutPathOptions($model) + $newline + $newline + "@return the dsl builder" + $newline)}
    static ${componentName}ComponentBuilderFactory.${componentName}ComponentBuilder $lowerComponentName() {
        return ${componentName}ComponentBuilderFactory.$lowerComponentName();
    }
#end
}