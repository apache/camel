/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.tools.apt;

import java.io.IOException;
import java.io.Writer;
import java.util.Set;

import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.FileObject;
import javax.tools.StandardLocation;

import org.apache.camel.spi.annotations.Component;
import org.apache.camel.spi.annotations.Dataformat;
import org.apache.camel.spi.annotations.Factory;
import org.apache.camel.spi.annotations.Language;

import static org.apache.camel.tools.apt.helper.Strings.canonicalClassName;

@SupportedAnnotationTypes({"org.apache.camel.spi.annotations.*"})
public class SpiProcessor extends AbstractCamelAnnotationProcessor {

    @Override
    protected void doProcess(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) throws Exception {
        Set<? extends Element> factories = roundEnv.getElementsAnnotatedWith(Factory.class);
        roundEnv.getElementsAnnotatedWith(Component.class).stream()
                .filter(e -> e instanceof TypeElement)
                .map(TypeElement.class::cast)
                .forEach(e -> processComponent(e, factories));
        roundEnv.getElementsAnnotatedWith(Language.class).stream()
                .filter(e -> e instanceof TypeElement)
                .map(TypeElement.class::cast)
                .forEach(this::processLanguage);
        roundEnv.getElementsAnnotatedWith(Dataformat.class).stream()
                .filter(e -> e instanceof TypeElement)
                .map(TypeElement.class::cast)
                .forEach(this::processDataformat);
    }

    private void processComponent(TypeElement element, Set<? extends Element> factories) {
        try {
            final String javaTypeName = canonicalClassName(element.getQualifiedName().toString());
            String[] schemes = element.getAnnotation(Component.class).value().split(",");
            for (String scheme : schemes) {
                FileObject resource = processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,
                        "", "META-INF/services/org/apache/camel/component/" + scheme, element);
                try (Writer w = resource.openWriter()) {
                    w.append("# Generated by camel annotation processor\n");
                    w.append("class=").append(javaTypeName).append("\n");
                    for (AnnotationMirror am : element.getAnnotationMirrors()) {
                        Factory factory = am.getAnnotationType().asElement().getAnnotation(Factory.class);
                        if (factory != null) {
                            String key = factory.value();
                            String val = am.getElementValues().values().iterator().next().getValue().toString();
                            w.append(key).append(".class=").append(val).append("\n");
                        }
                    }
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void processLanguage(TypeElement element) {
        try {
            final String javaTypeName = canonicalClassName(element.getQualifiedName().toString());
            String[] schemes = element.getAnnotation(Language.class).value().split(",");
            for (String scheme : schemes) {
                FileObject resource = processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,
                        "", "META-INF/services/org/apache/camel/language/" + scheme, element);
                try (Writer w = resource.openWriter()) {
                    w.append("# Generated by camel annotation processor\n");
                    w.append("class=").append(javaTypeName).append("\n");
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void processDataformat(TypeElement element) {
        try {
            final String javaTypeName = canonicalClassName(element.getQualifiedName().toString());
            String[] schemes = element.getAnnotation(Dataformat.class).value().split(",");
            for (String scheme : schemes) {
                FileObject resource = processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,
                        "", "META-INF/services/org/apache/camel/dataformat/" + scheme, element);
                try (Writer w = resource.openWriter()) {
                    w.append("# Generated by camel annotation processor\n");
                    w.append("class=").append(javaTypeName).append("\n");
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

}