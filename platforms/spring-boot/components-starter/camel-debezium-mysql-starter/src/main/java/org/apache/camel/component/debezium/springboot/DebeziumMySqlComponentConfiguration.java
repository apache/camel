/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.debezium.springboot;

import javax.annotation.Generated;
import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon;
import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Represents a Debezium MySQL endpoint which is used to capture changes in
 * MySQL database so that that applications can see those changes and respond to
 * them.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo")
@ConfigurationProperties(prefix = "camel.component.debezium-mysql")
public class DebeziumMySqlComponentConfiguration
        extends
            ComponentConfigurationPropertiesCommon {

    /**
     * Whether to enable auto configuration of the debezium-mysql component.
     * This is enabled by default.
     */
    private Boolean enabled;
    /**
     * Allow pre-configured Configurations to be set.
     */
    private MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration configuration;
    /**
     * Whether the component should use basic property binding (Camel 2.x) or
     * the newer property binding with additional capabilities
     */
    private Boolean basicPropertyBinding = false;

    public MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration getConfiguration() {
        return configuration;
    }

    public void setConfiguration(
            MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration configuration) {
        this.configuration = configuration;
    }

    public Boolean getBasicPropertyBinding() {
        return basicPropertyBinding;
    }

    public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
        this.basicPropertyBinding = basicPropertyBinding;
    }

    public static class MySqlConnectorEmbeddedDebeziumConfigurationNestedConfiguration {
        public static final Class CAMEL_NESTED_CLASS = org.apache.camel.component.debezium.configuration.MySqlConnectorEmbeddedDebeziumConfiguration.class;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String snapshotLockingMode = "minimal";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String columnBlacklist;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String tableBlacklist;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean includeSchemaChanges = true;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String gtidSourceIncludes;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseJdbcDriver = "class com.mysql.cj.jdbc.Driver";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer databaseHistoryKafkaRecoveryPollIntervalMs = 100;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Long pollIntervalMs = 500L;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseInitialStatements;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String heartbeatTopicsPrefix = "__debezium-heartbeat";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer binlogBufferSize = 0;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer snapshotFetchSize;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseUser;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String gtidSourceExcludes;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseHistoryKafkaBootstrapServers;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseSslKeystore;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer heartbeatIntervalMs = 0;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseSslTruststorePassword;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String inconsistentSchemaHandlingMode = "fail";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean enableTimeAdjuster = true;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String gtidNewChannelPosition = "latest";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String ddlParserMode = "antlr";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databasePassword;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean databaseHistoryStoreOnlyMonitoredTablesDdl = false;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean gtidSourceFilterDmlEvents = true;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseBlacklist;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer maxBatchSize = 2048;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean connectKeepAlive = true;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseHistory = "io.debezium.relational.history.FileDatabaseHistory";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String snapshotMode = "initial";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer connectTimeoutMs = 30000;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer maxQueueSize = 8192;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseHistoryKafkaTopic;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Long snapshotDelayMs = 0L;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer databaseHistoryKafkaRecoveryAttempts = 100;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String tableWhitelist;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean tombstonesOnDelete = false;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String decimalHandlingMode = "precise";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String snapshotNewTables = "off";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean databaseHistorySkipUnparseableDdl = false;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean tableIgnoreBuiltin = true;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseWhitelist;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseHistoryFileFilename;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String bigintUnsignedHandlingMode = "long";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Long databaseServerId;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String eventDeserializationFailureHandlingMode = "fail";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String timePrecisionMode = "adaptive_time_microseconds";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseServerName;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Integer databasePort = 3306;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseSslTruststore;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseSslMode = "disabled";
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseSslKeystorePassword;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private String databaseHostname;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Long databaseServerIdOffset = 10000L;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Long connectKeepAliveIntervalMs = 60000L;
        /**
         * Whether the connector should include the original SQL query that
         * generated the change event. Note: This option requires MySQL be
         * configured with the binlog_rows_query_log_events option set to ON.
         * Query will not be present for events generated from snapshot.
         * WARNING: Enabling this option may expose tables or fields explicitly
         * blacklisted or masked by including the original SQL statement in the
         * change event. For this reason the default value is 'false'.
         */
        private Boolean includeQuery = false;
        /**
         * The name of the Java class for the connector
         */
        private Class connectorClass;
        /**
         * Unique name for the connector. Attempting to register again with the
         * same name will fail.
         */
        private String name;
        /**
         * The name of the Java class that is responsible for persistence of
         * connector offsets.
         */
        private String offsetStorage = "org.apache.kafka.connect.storage.FileOffsetBackingStore";
        /**
         * Path to file where offsets are to be stored. Required when
         * offset.storage is set to the FileOffsetBackingStore
         */
        private String offsetStorageFileName;
        /**
         * The name of the Kafka topic where offsets are to be stored. Required
         * when offset.storage is set to the KafkaOffsetBackingStore.
         */
        private String offsetStorageTopic;
        /**
         * Replication factor used when creating the offset storage topic.
         * Required when offset.storage is set to the KafkaOffsetBackingStore
         */
        private Integer offsetStorageReplicationFactor;
        /**
         * The name of the Java class of the commit policy. It defines when
         * offsets commit has to be triggered based on the number of events
         * processed and the time elapsed since the last commit. This class must
         * implement the interface <…​>.OffsetCommitPolicy. The default is a
         * periodic commit policy based upon time intervals.
         */
        private String offsetCommitPolicy = "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy";
        /**
         * Interval at which to try committing offsets. The default is 1 minute.
         */
        private Long offsetFlushIntervalMs = 60000L;
        /**
         * Maximum number of milliseconds to wait for records to flush and
         * partition offset data to be committed to offset storage before
         * cancelling the process and restoring the offset data to be committed
         * in a future attempt. The default is 5 seconds.
         */
        private Long offsetCommitTimeoutMs = 5000L;
        /**
         * The number of partitions used when creating the offset storage topic.
         * Required when offset.storage is set to the
         * <…​>.KafkaOffsetBackingStore.
         */
        private Integer offsetStoragePartitions;
        /**
         * The Converter class that should be used to serialize and deserialize
         * key data for offsets. The default is JSON converter.
         */
        private String internalKeyConverter = "org.apache.kafka.connect.json.JsonConverter";
        /**
         * The Converter class that should be used to serialize and deserialize
         * value data for offsets. The default is JSON converter.
         */
        private String internalValueConverter = "org.apache.kafka.connect.json.JsonConverter";

        public String getSnapshotLockingMode() {
            return snapshotLockingMode;
        }

        public void setSnapshotLockingMode(String snapshotLockingMode) {
            this.snapshotLockingMode = snapshotLockingMode;
        }

        public String getColumnBlacklist() {
            return columnBlacklist;
        }

        public void setColumnBlacklist(String columnBlacklist) {
            this.columnBlacklist = columnBlacklist;
        }

        public String getTableBlacklist() {
            return tableBlacklist;
        }

        public void setTableBlacklist(String tableBlacklist) {
            this.tableBlacklist = tableBlacklist;
        }

        public Boolean getIncludeSchemaChanges() {
            return includeSchemaChanges;
        }

        public void setIncludeSchemaChanges(Boolean includeSchemaChanges) {
            this.includeSchemaChanges = includeSchemaChanges;
        }

        public String getGtidSourceIncludes() {
            return gtidSourceIncludes;
        }

        public void setGtidSourceIncludes(String gtidSourceIncludes) {
            this.gtidSourceIncludes = gtidSourceIncludes;
        }

        public String getDatabaseJdbcDriver() {
            return databaseJdbcDriver;
        }

        public void setDatabaseJdbcDriver(String databaseJdbcDriver) {
            this.databaseJdbcDriver = databaseJdbcDriver;
        }

        public Integer getDatabaseHistoryKafkaRecoveryPollIntervalMs() {
            return databaseHistoryKafkaRecoveryPollIntervalMs;
        }

        public void setDatabaseHistoryKafkaRecoveryPollIntervalMs(
                Integer databaseHistoryKafkaRecoveryPollIntervalMs) {
            this.databaseHistoryKafkaRecoveryPollIntervalMs = databaseHistoryKafkaRecoveryPollIntervalMs;
        }

        public Long getPollIntervalMs() {
            return pollIntervalMs;
        }

        public void setPollIntervalMs(Long pollIntervalMs) {
            this.pollIntervalMs = pollIntervalMs;
        }

        public String getDatabaseInitialStatements() {
            return databaseInitialStatements;
        }

        public void setDatabaseInitialStatements(
                String databaseInitialStatements) {
            this.databaseInitialStatements = databaseInitialStatements;
        }

        public String getHeartbeatTopicsPrefix() {
            return heartbeatTopicsPrefix;
        }

        public void setHeartbeatTopicsPrefix(String heartbeatTopicsPrefix) {
            this.heartbeatTopicsPrefix = heartbeatTopicsPrefix;
        }

        public Integer getBinlogBufferSize() {
            return binlogBufferSize;
        }

        public void setBinlogBufferSize(Integer binlogBufferSize) {
            this.binlogBufferSize = binlogBufferSize;
        }

        public Integer getSnapshotFetchSize() {
            return snapshotFetchSize;
        }

        public void setSnapshotFetchSize(Integer snapshotFetchSize) {
            this.snapshotFetchSize = snapshotFetchSize;
        }

        public String getDatabaseUser() {
            return databaseUser;
        }

        public void setDatabaseUser(String databaseUser) {
            this.databaseUser = databaseUser;
        }

        public String getGtidSourceExcludes() {
            return gtidSourceExcludes;
        }

        public void setGtidSourceExcludes(String gtidSourceExcludes) {
            this.gtidSourceExcludes = gtidSourceExcludes;
        }

        public String getDatabaseHistoryKafkaBootstrapServers() {
            return databaseHistoryKafkaBootstrapServers;
        }

        public void setDatabaseHistoryKafkaBootstrapServers(
                String databaseHistoryKafkaBootstrapServers) {
            this.databaseHistoryKafkaBootstrapServers = databaseHistoryKafkaBootstrapServers;
        }

        public String getDatabaseSslKeystore() {
            return databaseSslKeystore;
        }

        public void setDatabaseSslKeystore(String databaseSslKeystore) {
            this.databaseSslKeystore = databaseSslKeystore;
        }

        public Integer getHeartbeatIntervalMs() {
            return heartbeatIntervalMs;
        }

        public void setHeartbeatIntervalMs(Integer heartbeatIntervalMs) {
            this.heartbeatIntervalMs = heartbeatIntervalMs;
        }

        public String getDatabaseSslTruststorePassword() {
            return databaseSslTruststorePassword;
        }

        public void setDatabaseSslTruststorePassword(
                String databaseSslTruststorePassword) {
            this.databaseSslTruststorePassword = databaseSslTruststorePassword;
        }

        public String getInconsistentSchemaHandlingMode() {
            return inconsistentSchemaHandlingMode;
        }

        public void setInconsistentSchemaHandlingMode(
                String inconsistentSchemaHandlingMode) {
            this.inconsistentSchemaHandlingMode = inconsistentSchemaHandlingMode;
        }

        public Boolean getEnableTimeAdjuster() {
            return enableTimeAdjuster;
        }

        public void setEnableTimeAdjuster(Boolean enableTimeAdjuster) {
            this.enableTimeAdjuster = enableTimeAdjuster;
        }

        public String getGtidNewChannelPosition() {
            return gtidNewChannelPosition;
        }

        public void setGtidNewChannelPosition(String gtidNewChannelPosition) {
            this.gtidNewChannelPosition = gtidNewChannelPosition;
        }

        public String getDdlParserMode() {
            return ddlParserMode;
        }

        public void setDdlParserMode(String ddlParserMode) {
            this.ddlParserMode = ddlParserMode;
        }

        public String getDatabasePassword() {
            return databasePassword;
        }

        public void setDatabasePassword(String databasePassword) {
            this.databasePassword = databasePassword;
        }

        public Boolean getDatabaseHistoryStoreOnlyMonitoredTablesDdl() {
            return databaseHistoryStoreOnlyMonitoredTablesDdl;
        }

        public void setDatabaseHistoryStoreOnlyMonitoredTablesDdl(
                Boolean databaseHistoryStoreOnlyMonitoredTablesDdl) {
            this.databaseHistoryStoreOnlyMonitoredTablesDdl = databaseHistoryStoreOnlyMonitoredTablesDdl;
        }

        public Boolean getGtidSourceFilterDmlEvents() {
            return gtidSourceFilterDmlEvents;
        }

        public void setGtidSourceFilterDmlEvents(
                Boolean gtidSourceFilterDmlEvents) {
            this.gtidSourceFilterDmlEvents = gtidSourceFilterDmlEvents;
        }

        public String getDatabaseBlacklist() {
            return databaseBlacklist;
        }

        public void setDatabaseBlacklist(String databaseBlacklist) {
            this.databaseBlacklist = databaseBlacklist;
        }

        public Integer getMaxBatchSize() {
            return maxBatchSize;
        }

        public void setMaxBatchSize(Integer maxBatchSize) {
            this.maxBatchSize = maxBatchSize;
        }

        public Boolean getConnectKeepAlive() {
            return connectKeepAlive;
        }

        public void setConnectKeepAlive(Boolean connectKeepAlive) {
            this.connectKeepAlive = connectKeepAlive;
        }

        public String getDatabaseHistory() {
            return databaseHistory;
        }

        public void setDatabaseHistory(String databaseHistory) {
            this.databaseHistory = databaseHistory;
        }

        public String getSnapshotMode() {
            return snapshotMode;
        }

        public void setSnapshotMode(String snapshotMode) {
            this.snapshotMode = snapshotMode;
        }

        public Integer getConnectTimeoutMs() {
            return connectTimeoutMs;
        }

        public void setConnectTimeoutMs(Integer connectTimeoutMs) {
            this.connectTimeoutMs = connectTimeoutMs;
        }

        public Integer getMaxQueueSize() {
            return maxQueueSize;
        }

        public void setMaxQueueSize(Integer maxQueueSize) {
            this.maxQueueSize = maxQueueSize;
        }

        public String getDatabaseHistoryKafkaTopic() {
            return databaseHistoryKafkaTopic;
        }

        public void setDatabaseHistoryKafkaTopic(
                String databaseHistoryKafkaTopic) {
            this.databaseHistoryKafkaTopic = databaseHistoryKafkaTopic;
        }

        public Long getSnapshotDelayMs() {
            return snapshotDelayMs;
        }

        public void setSnapshotDelayMs(Long snapshotDelayMs) {
            this.snapshotDelayMs = snapshotDelayMs;
        }

        public Integer getDatabaseHistoryKafkaRecoveryAttempts() {
            return databaseHistoryKafkaRecoveryAttempts;
        }

        public void setDatabaseHistoryKafkaRecoveryAttempts(
                Integer databaseHistoryKafkaRecoveryAttempts) {
            this.databaseHistoryKafkaRecoveryAttempts = databaseHistoryKafkaRecoveryAttempts;
        }

        public String getTableWhitelist() {
            return tableWhitelist;
        }

        public void setTableWhitelist(String tableWhitelist) {
            this.tableWhitelist = tableWhitelist;
        }

        public Boolean getTombstonesOnDelete() {
            return tombstonesOnDelete;
        }

        public void setTombstonesOnDelete(Boolean tombstonesOnDelete) {
            this.tombstonesOnDelete = tombstonesOnDelete;
        }

        public String getDecimalHandlingMode() {
            return decimalHandlingMode;
        }

        public void setDecimalHandlingMode(String decimalHandlingMode) {
            this.decimalHandlingMode = decimalHandlingMode;
        }

        public String getSnapshotNewTables() {
            return snapshotNewTables;
        }

        public void setSnapshotNewTables(String snapshotNewTables) {
            this.snapshotNewTables = snapshotNewTables;
        }

        public Boolean getDatabaseHistorySkipUnparseableDdl() {
            return databaseHistorySkipUnparseableDdl;
        }

        public void setDatabaseHistorySkipUnparseableDdl(
                Boolean databaseHistorySkipUnparseableDdl) {
            this.databaseHistorySkipUnparseableDdl = databaseHistorySkipUnparseableDdl;
        }

        public Boolean getTableIgnoreBuiltin() {
            return tableIgnoreBuiltin;
        }

        public void setTableIgnoreBuiltin(Boolean tableIgnoreBuiltin) {
            this.tableIgnoreBuiltin = tableIgnoreBuiltin;
        }

        public String getDatabaseWhitelist() {
            return databaseWhitelist;
        }

        public void setDatabaseWhitelist(String databaseWhitelist) {
            this.databaseWhitelist = databaseWhitelist;
        }

        public String getDatabaseHistoryFileFilename() {
            return databaseHistoryFileFilename;
        }

        public void setDatabaseHistoryFileFilename(
                String databaseHistoryFileFilename) {
            this.databaseHistoryFileFilename = databaseHistoryFileFilename;
        }

        public String getBigintUnsignedHandlingMode() {
            return bigintUnsignedHandlingMode;
        }

        public void setBigintUnsignedHandlingMode(
                String bigintUnsignedHandlingMode) {
            this.bigintUnsignedHandlingMode = bigintUnsignedHandlingMode;
        }

        public Long getDatabaseServerId() {
            return databaseServerId;
        }

        public void setDatabaseServerId(Long databaseServerId) {
            this.databaseServerId = databaseServerId;
        }

        public String getEventDeserializationFailureHandlingMode() {
            return eventDeserializationFailureHandlingMode;
        }

        public void setEventDeserializationFailureHandlingMode(
                String eventDeserializationFailureHandlingMode) {
            this.eventDeserializationFailureHandlingMode = eventDeserializationFailureHandlingMode;
        }

        public String getTimePrecisionMode() {
            return timePrecisionMode;
        }

        public void setTimePrecisionMode(String timePrecisionMode) {
            this.timePrecisionMode = timePrecisionMode;
        }

        public String getDatabaseServerName() {
            return databaseServerName;
        }

        public void setDatabaseServerName(String databaseServerName) {
            this.databaseServerName = databaseServerName;
        }

        public Integer getDatabasePort() {
            return databasePort;
        }

        public void setDatabasePort(Integer databasePort) {
            this.databasePort = databasePort;
        }

        public String getDatabaseSslTruststore() {
            return databaseSslTruststore;
        }

        public void setDatabaseSslTruststore(String databaseSslTruststore) {
            this.databaseSslTruststore = databaseSslTruststore;
        }

        public String getDatabaseSslMode() {
            return databaseSslMode;
        }

        public void setDatabaseSslMode(String databaseSslMode) {
            this.databaseSslMode = databaseSslMode;
        }

        public String getDatabaseSslKeystorePassword() {
            return databaseSslKeystorePassword;
        }

        public void setDatabaseSslKeystorePassword(
                String databaseSslKeystorePassword) {
            this.databaseSslKeystorePassword = databaseSslKeystorePassword;
        }

        public String getDatabaseHostname() {
            return databaseHostname;
        }

        public void setDatabaseHostname(String databaseHostname) {
            this.databaseHostname = databaseHostname;
        }

        public Long getDatabaseServerIdOffset() {
            return databaseServerIdOffset;
        }

        public void setDatabaseServerIdOffset(Long databaseServerIdOffset) {
            this.databaseServerIdOffset = databaseServerIdOffset;
        }

        public Long getConnectKeepAliveIntervalMs() {
            return connectKeepAliveIntervalMs;
        }

        public void setConnectKeepAliveIntervalMs(
                Long connectKeepAliveIntervalMs) {
            this.connectKeepAliveIntervalMs = connectKeepAliveIntervalMs;
        }

        public Boolean getIncludeQuery() {
            return includeQuery;
        }

        public void setIncludeQuery(Boolean includeQuery) {
            this.includeQuery = includeQuery;
        }

        public Class getConnectorClass() {
            return connectorClass;
        }

        public void setConnectorClass(Class connectorClass) {
            this.connectorClass = connectorClass;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getOffsetStorage() {
            return offsetStorage;
        }

        public void setOffsetStorage(String offsetStorage) {
            this.offsetStorage = offsetStorage;
        }

        public String getOffsetStorageFileName() {
            return offsetStorageFileName;
        }

        public void setOffsetStorageFileName(String offsetStorageFileName) {
            this.offsetStorageFileName = offsetStorageFileName;
        }

        public String getOffsetStorageTopic() {
            return offsetStorageTopic;
        }

        public void setOffsetStorageTopic(String offsetStorageTopic) {
            this.offsetStorageTopic = offsetStorageTopic;
        }

        public Integer getOffsetStorageReplicationFactor() {
            return offsetStorageReplicationFactor;
        }

        public void setOffsetStorageReplicationFactor(
                Integer offsetStorageReplicationFactor) {
            this.offsetStorageReplicationFactor = offsetStorageReplicationFactor;
        }

        public String getOffsetCommitPolicy() {
            return offsetCommitPolicy;
        }

        public void setOffsetCommitPolicy(String offsetCommitPolicy) {
            this.offsetCommitPolicy = offsetCommitPolicy;
        }

        public Long getOffsetFlushIntervalMs() {
            return offsetFlushIntervalMs;
        }

        public void setOffsetFlushIntervalMs(Long offsetFlushIntervalMs) {
            this.offsetFlushIntervalMs = offsetFlushIntervalMs;
        }

        public Long getOffsetCommitTimeoutMs() {
            return offsetCommitTimeoutMs;
        }

        public void setOffsetCommitTimeoutMs(Long offsetCommitTimeoutMs) {
            this.offsetCommitTimeoutMs = offsetCommitTimeoutMs;
        }

        public Integer getOffsetStoragePartitions() {
            return offsetStoragePartitions;
        }

        public void setOffsetStoragePartitions(Integer offsetStoragePartitions) {
            this.offsetStoragePartitions = offsetStoragePartitions;
        }

        public String getInternalKeyConverter() {
            return internalKeyConverter;
        }

        public void setInternalKeyConverter(String internalKeyConverter) {
            this.internalKeyConverter = internalKeyConverter;
        }

        public String getInternalValueConverter() {
            return internalValueConverter;
        }

        public void setInternalValueConverter(String internalValueConverter) {
            this.internalValueConverter = internalValueConverter;
        }
    }
}