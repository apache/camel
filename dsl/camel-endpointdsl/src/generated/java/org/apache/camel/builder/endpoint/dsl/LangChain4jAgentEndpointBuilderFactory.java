/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * LangChain4j Agent component
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface LangChain4jAgentEndpointBuilderFactory {

    /**
     * Builder for endpoint for the LangChain4j Agent component.
     */
    public interface LangChain4jAgentEndpointBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedLangChain4jAgentEndpointBuilder advanced() {
            return (AdvancedLangChain4jAgentEndpointBuilder) this;
        }

        /**
         * The agent to use for the component.
         * 
         * The option is a:
         * <code>org.apache.camel.component.langchain4j.agent.api.Agent</code>
         * type.
         * 
         * Group: producer
         * 
         * @param agent the value to set
         * @return the dsl builder
         */
        default LangChain4jAgentEndpointBuilder agent(org.apache.camel.component.langchain4j.agent.api.Agent agent) {
            doSetProperty("agent", agent);
            return this;
        }
        /**
         * The agent to use for the component.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.component.langchain4j.agent.api.Agent</code>
         * type.
         * 
         * Group: producer
         * 
         * @param agent the value to set
         * @return the dsl builder
         */
        default LangChain4jAgentEndpointBuilder agent(String agent) {
            doSetProperty("agent", agent);
            return this;
        }
        /**
         * The agent factory to use for creating agents if no Agent is provided.
         * 
         * The option is a:
         * <code>org.apache.camel.component.langchain4j.agent.api.AgentFactory</code> type.
         * 
         * Group: producer
         * 
         * @param agentFactory the value to set
         * @return the dsl builder
         */
        default LangChain4jAgentEndpointBuilder agentFactory(org.apache.camel.component.langchain4j.agent.api.AgentFactory agentFactory) {
            doSetProperty("agentFactory", agentFactory);
            return this;
        }
        /**
         * The agent factory to use for creating agents if no Agent is provided.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.component.langchain4j.agent.api.AgentFactory</code> type.
         * 
         * Group: producer
         * 
         * @param agentFactory the value to set
         * @return the dsl builder
         */
        default LangChain4jAgentEndpointBuilder agentFactory(String agentFactory) {
            doSetProperty("agentFactory", agentFactory);
            return this;
        }
        /**
         * Tags for discovering and calling Camel route tools.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param tags the value to set
         * @return the dsl builder
         */
        default LangChain4jAgentEndpointBuilder tags(String tags) {
            doSetProperty("tags", tags);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the LangChain4j Agent component.
     */
    public interface AdvancedLangChain4jAgentEndpointBuilder
            extends
                EndpointProducerBuilder {
        default LangChain4jAgentEndpointBuilder basic() {
            return (LangChain4jAgentEndpointBuilder) this;
        }

        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jAgentEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jAgentEndpointBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    public interface LangChain4jAgentBuilders {
        /**
         * LangChain4j Agent (camel-langchain4j-agent)
         * LangChain4j Agent component
         * 
         * Category: ai
         * Since: 4.14
         * Maven coordinates: org.apache.camel:camel-langchain4j-agent
         * 
         * @return the dsl builder for the headers' name.
         */
        default LangChain4jAgentHeaderNameBuilder langchain4jAgent() {
            return LangChain4jAgentHeaderNameBuilder.INSTANCE;
        }
        /**
         * LangChain4j Agent (camel-langchain4j-agent)
         * LangChain4j Agent component
         * 
         * Category: ai
         * Since: 4.14
         * Maven coordinates: org.apache.camel:camel-langchain4j-agent
         * 
         * Syntax: <code>langchain4j-agent:agentId</code>
         * 
         * Path parameter: agentId (required)
         * The Agent id
         * 
         * @param path agentId
         * @return the dsl builder
         */
        default LangChain4jAgentEndpointBuilder langchain4jAgent(String path) {
            return LangChain4jAgentEndpointBuilderFactory.endpointBuilder("langchain4j-agent", path);
        }
        /**
         * LangChain4j Agent (camel-langchain4j-agent)
         * LangChain4j Agent component
         * 
         * Category: ai
         * Since: 4.14
         * Maven coordinates: org.apache.camel:camel-langchain4j-agent
         * 
         * Syntax: <code>langchain4j-agent:agentId</code>
         * 
         * Path parameter: agentId (required)
         * The Agent id
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path agentId
         * @return the dsl builder
         */
        default LangChain4jAgentEndpointBuilder langchain4jAgent(String componentName, String path) {
            return LangChain4jAgentEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    /**
     * The builder of headers' name for the LangChain4j Agent component.
     */
    public static class LangChain4jAgentHeaderNameBuilder {
        /**
         * The internal instance of the builder used to access to all the
         * methods representing the name of headers.
         */
        private static final LangChain4jAgentHeaderNameBuilder INSTANCE = new LangChain4jAgentHeaderNameBuilder();

        /**
         * The system prompt.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code LangChain4jAgentSystemMessage}.
         */
        public String langChain4jAgentSystemMessage() {
            return "CamelLangChain4jAgentSystemMessage";
        }
        /**
         * Memory ID.
         * 
         * The option is a: {@code Object} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code LangChain4jAgentMemoryId}.
         */
        public String langChain4jAgentMemoryId() {
            return "CamelLangChain4jAgentMemoryId";
        }
    }
    static LangChain4jAgentEndpointBuilder endpointBuilder(String componentName, String path) {
        class LangChain4jAgentEndpointBuilderImpl extends AbstractEndpointBuilder implements LangChain4jAgentEndpointBuilder, AdvancedLangChain4jAgentEndpointBuilder {
            public LangChain4jAgentEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new LangChain4jAgentEndpointBuilderImpl(path);
    }
}