/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * Perform operations against Apache Lucene Solr.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SolrEndpointBuilderFactory {

    /**
     * Builder for endpoint for the Solr component.
     */
    public interface SolrEndpointBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedSolrEndpointBuilder advanced() {
            return (AdvancedSolrEndpointBuilder) this;
        }

        /**
         * Use async request processing (when supported by the solr client).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: producer
         * 
         * @param async the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder async(boolean async) {
            doSetProperty("async", async);
            return this;
        }
        /**
         * Use async request processing (when supported by the solr client).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: producer
         * 
         * @param async the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder async(String async) {
            doSetProperty("async", async);
            return this;
        }
        /**
         * If true, each producer insert/delete operation will be automatically
         * performing a commit.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param autoCommit the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder autoCommit(boolean autoCommit) {
            doSetProperty("autoCommit", autoCommit);
            return this;
        }
        /**
         * If true, each producer insert/delete operation will be automatically
         * performing a commit.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param autoCommit the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder autoCommit(String autoCommit) {
            doSetProperty("autoCommit", autoCommit);
            return this;
        }
        /**
         * The name of the collection to act against.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param collection the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder collection(String collection) {
            doSetProperty("collection", collection);
            return this;
        }
        /**
         * The time in ms to wait before connection will time out.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: producer
         * 
         * @param connectionTimeout the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder connectionTimeout(Long connectionTimeout) {
            doSetProperty("connectionTimeout", connectionTimeout);
            return this;
        }
        /**
         * The time in ms to wait before connection will time out.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: producer
         * 
         * @param connectionTimeout the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder connectionTimeout(String connectionTimeout) {
            doSetProperty("connectionTimeout", connectionTimeout);
            return this;
        }
        /**
         * maxConnectionsPerHost on the underlying HttpConnectionManager.
         * 
         * The option is a: <code>java.lang.Integer</code> type.
         * 
         * Group: producer
         * 
         * @param defaultMaxConnectionsPerHost the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder defaultMaxConnectionsPerHost(Integer defaultMaxConnectionsPerHost) {
            doSetProperty("defaultMaxConnectionsPerHost", defaultMaxConnectionsPerHost);
            return this;
        }
        /**
         * maxConnectionsPerHost on the underlying HttpConnectionManager.
         * 
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * 
         * Group: producer
         * 
         * @param defaultMaxConnectionsPerHost the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder defaultMaxConnectionsPerHost(String defaultMaxConnectionsPerHost) {
            doSetProperty("defaultMaxConnectionsPerHost", defaultMaxConnectionsPerHost);
            return this;
        }
        /**
         * For the delete instruction, interprete body as query/queries instead
         * of id/ids.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: producer
         * 
         * @param deleteByQuery the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder deleteByQuery(boolean deleteByQuery) {
            doSetProperty("deleteByQuery", deleteByQuery);
            return this;
        }
        /**
         * For the delete instruction, interprete body as query/queries instead
         * of id/ids.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: producer
         * 
         * @param deleteByQuery the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder deleteByQuery(String deleteByQuery) {
            doSetProperty("deleteByQuery", deleteByQuery);
            return this;
        }
        /**
         * Starting index of the response.
         * 
         * The option is a: <code>java.lang.Integer</code> type.
         * 
         * Group: producer
         * 
         * @param from the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder from(Integer from) {
            doSetProperty("from", from);
            return this;
        }
        /**
         * Starting index of the response.
         * 
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * 
         * Group: producer
         * 
         * @param from the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder from(String from) {
            doSetProperty("from", from);
            return this;
        }
        /**
         * Sets the http client to be used by the solrClient. This is only
         * applicable when solrClient is not set.
         * 
         * The option is a: <code>java.net.http.HttpClient</code> type.
         * 
         * Group: producer
         * 
         * @param httpClient the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder httpClient(java.net.http.HttpClient httpClient) {
            doSetProperty("httpClient", httpClient);
            return this;
        }
        /**
         * Sets the http client to be used by the solrClient. This is only
         * applicable when solrClient is not set.
         * 
         * The option will be converted to a
         * <code>java.net.http.HttpClient</code> type.
         * 
         * Group: producer
         * 
         * @param httpClient the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder httpClient(String httpClient) {
            doSetProperty("httpClient", httpClient);
            return this;
        }
        /**
         * Maximum number of retries to attempt in the event of transient
         * errors.
         * 
         * The option is a: <code>java.lang.Integer</code> type.
         * 
         * Group: producer
         * 
         * @param maxRetries the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder maxRetries(Integer maxRetries) {
            doSetProperty("maxRetries", maxRetries);
            return this;
        }
        /**
         * Maximum number of retries to attempt in the event of transient
         * errors.
         * 
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * 
         * Group: producer
         * 
         * @param maxRetries the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder maxRetries(String maxRetries) {
            doSetProperty("maxRetries", maxRetries);
            return this;
        }
        /**
         * maxTotalConnection on the underlying HttpConnectionManager.
         * 
         * The option is a: <code>java.lang.Integer</code> type.
         * 
         * Group: producer
         * 
         * @param maxTotalConnections the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder maxTotalConnections(Integer maxTotalConnections) {
            doSetProperty("maxTotalConnections", maxTotalConnections);
            return this;
        }
        /**
         * maxTotalConnection on the underlying HttpConnectionManager.
         * 
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * 
         * Group: producer
         * 
         * @param maxTotalConnections the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder maxTotalConnections(String maxTotalConnections) {
            doSetProperty("maxTotalConnections", maxTotalConnections);
            return this;
        }
        /**
         * What operation to perform.
         * 
         * The option is a:
         * <code>org.apache.camel.component.solr.SolrOperation</code> type.
         * 
         * Group: producer
         * 
         * @param operation the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder operation(org.apache.camel.component.solr.SolrOperation operation) {
            doSetProperty("operation", operation);
            return this;
        }
        /**
         * What operation to perform.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.component.solr.SolrOperation</code> type.
         * 
         * Group: producer
         * 
         * @param operation the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder operation(String operation) {
            doSetProperty("operation", operation);
            return this;
        }
        /**
         * The path of the update request handler (use for update requests / set
         * solr parameter qt for search requests).
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param requestHandler the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder requestHandler(String requestHandler) {
            doSetProperty("requestHandler", requestHandler);
            return this;
        }
        /**
         * The time in ms to wait before the request will time out (former
         * soTimeout).
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: producer
         * 
         * @param requestTimeout the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder requestTimeout(Long requestTimeout) {
            doSetProperty("requestTimeout", requestTimeout);
            return this;
        }
        /**
         * The time in ms to wait before the request will time out (former
         * soTimeout).
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: producer
         * 
         * @param requestTimeout the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder requestTimeout(String requestTimeout) {
            doSetProperty("requestTimeout", requestTimeout);
            return this;
        }
        /**
         * Size of the response.
         * 
         * The option is a: <code>java.lang.Integer</code> type.
         * 
         * Group: producer
         * 
         * @param size the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder size(Integer size) {
            doSetProperty("size", size);
            return this;
        }
        /**
         * Size of the response.
         * 
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * 
         * Group: producer
         * 
         * @param size the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder size(String size) {
            doSetProperty("size", size);
            return this;
        }
        /**
         * The solr client to connect to solr. When solrClient bean is provided,
         * all connection properties will be used from that solrClient (host,
         * port, username, password, connectionTimeout, requestTimeout,
         * enableSSL, ...). When not explicitly configured, camel uses the
         * HttpJdkSolrClient.
         * 
         * The option is a: <code>org.apache.solr.client.solrj.SolrClient</code>
         * type.
         * 
         * Group: producer
         * 
         * @param solrClient the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder solrClient(org.apache.solr.client.solrj.SolrClient solrClient) {
            doSetProperty("solrClient", solrClient);
            return this;
        }
        /**
         * The time in ms to wait before the request will time out (former
         * soTimeout).
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: producer
         * 
         * @param soTimeout the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder soTimeout(int soTimeout) {
            doSetProperty("soTimeout", soTimeout);
            return this;
        }
        /**
         * The time in ms to wait before the request will time out (former
         * soTimeout).
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: producer
         * 
         * @param soTimeout the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder soTimeout(String soTimeout) {
            doSetProperty("soTimeout", soTimeout);
            return this;
        }
        /**
         * Sets the queue size for the ConcurrentUpdateSolrClient.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: producer
         * 
         * @param streamingQueueSize the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder streamingQueueSize(int streamingQueueSize) {
            doSetProperty("streamingQueueSize", streamingQueueSize);
            return this;
        }
        /**
         * Sets the queue size for the ConcurrentUpdateSolrClient.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: producer
         * 
         * @param streamingQueueSize the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder streamingQueueSize(String streamingQueueSize) {
            doSetProperty("streamingQueueSize", streamingQueueSize);
            return this;
        }
        /**
         * Sets the number of threads for the ConcurrentUpdateSolrClient.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: producer
         * 
         * @param streamingThreadCount the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder streamingThreadCount(int streamingThreadCount) {
            doSetProperty("streamingThreadCount", streamingThreadCount);
            return this;
        }
        /**
         * Sets the number of threads for the ConcurrentUpdateSolrClient.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: producer
         * 
         * @param streamingThreadCount the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder streamingThreadCount(String streamingThreadCount) {
            doSetProperty("streamingThreadCount", streamingThreadCount);
            return this;
        }
        /**
         * Set the chroot of the zookeeper connection (include the leading
         * slash; e.g. '/mychroot').
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: CloudSolrClient
         * 
         * @param zkChroot the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder zkChroot(String zkChroot) {
            doSetProperty("zkChroot", zkChroot);
            return this;
        }
        /**
         * Set the ZooKeeper host(s) urls which the CloudSolrClient uses, e.g.
         * zkHost=localhost:2181,localhost:2182. Optionally add the chroot, e.g.
         * zkHost=localhost:2181,localhost:2182/rootformysolr. In case the first
         * part of the url path (='contextroot') is set to 'solr' (e.g.
         * 'localhost:2181/solr' or 'localhost:2181/solr/..'), then that path is
         * not considered as zookeeper chroot for backward compatibility reasons
         * (this behaviour can be overridden via zkChroot parameter).
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: CloudSolrClient
         * 
         * @param zkHost the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder zkHost(String zkHost) {
            doSetProperty("zkHost", zkHost);
            return this;
        }
        /**
         * Server side must support gzip or deflate for this to have any effect.
         * 
         * The option is a: <code>java.lang.Boolean</code> type.
         * 
         * Group: HttpSolrClient
         * 
         * @param allowCompression the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder allowCompression(Boolean allowCompression) {
            doSetProperty("allowCompression", allowCompression);
            return this;
        }
        /**
         * Server side must support gzip or deflate for this to have any effect.
         * 
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * 
         * Group: HttpSolrClient
         * 
         * @param allowCompression the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder allowCompression(String allowCompression) {
            doSetProperty("allowCompression", allowCompression);
            return this;
        }
        /**
         * Indicates whether redirects are used to get to the Solr server.
         * 
         * The option is a: <code>java.lang.Boolean</code> type.
         * 
         * Group: HttpSolrClient
         * 
         * @param followRedirects the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder followRedirects(Boolean followRedirects) {
            doSetProperty("followRedirects", followRedirects);
            return this;
        }
        /**
         * Indicates whether redirects are used to get to the Solr server.
         * 
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * 
         * Group: HttpSolrClient
         * 
         * @param followRedirects the value to set
         * @return the dsl builder
         */
        @Deprecated
        default SolrEndpointBuilder followRedirects(String followRedirects) {
            doSetProperty("followRedirects", followRedirects);
            return this;
        }
        /**
         * The certificate that can be used to access the solr host. It can be
         * loaded by default from classpath, but you can prefix with classpath:,
         * file:, or http: to load the resource from different systems.
         * 
         * This option can also be loaded from an existing file, by prefixing
         * with file: or classpath: followed by the location of the file.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         * 
         * @param certificatePath the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder certificatePath(String certificatePath) {
            doSetProperty("certificatePath", certificatePath);
            return this;
        }
        /**
         * Enable SSL.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: security
         * 
         * @param enableSSL the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder enableSSL(boolean enableSSL) {
            doSetProperty("enableSSL", enableSSL);
            return this;
        }
        /**
         * Enable SSL.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: security
         * 
         * @param enableSSL the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder enableSSL(String enableSSL) {
            doSetProperty("enableSSL", enableSSL);
            return this;
        }
        /**
         * Password for authenticating.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         * 
         * @param password the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * Basic authenticate user.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         * 
         * @param username the value to set
         * @return the dsl builder
         */
        default SolrEndpointBuilder username(String username) {
            doSetProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Solr component.
     */
    public interface AdvancedSolrEndpointBuilder
            extends
                EndpointProducerBuilder {
        default SolrEndpointBuilder basic() {
            return (SolrEndpointBuilder) this;
        }

        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedSolrEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedSolrEndpointBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    public interface SolrBuilders {
        /**
         * Solr (camel-solr)
         * Perform operations against Apache Lucene Solr.
         * 
         * Category: search,monitoring
         * Since: 4.8
         * Maven coordinates: org.apache.camel:camel-solr
         * 
         * @return the dsl builder for the headers' name.
         */
        default SolrHeaderNameBuilder solr() {
            return SolrHeaderNameBuilder.INSTANCE;
        }
        /**
         * Solr (camel-solr)
         * Perform operations against Apache Lucene Solr.
         * 
         * Category: search,monitoring
         * Since: 4.8
         * Maven coordinates: org.apache.camel:camel-solr
         * 
         * Syntax: <code>solr:host:port</code>
         * 
         * Path parameter: host (required)
         * The solr instance host name (set to 'default' to use the host name
         * defined on component level)
         * 
         * Path parameter: port
         * The solr instance port number
         * 
         * @param path host:port
         * @return the dsl builder
         */
        default SolrEndpointBuilder solr(String path) {
            return SolrEndpointBuilderFactory.endpointBuilder("solr", path);
        }
        /**
         * Solr (camel-solr)
         * Perform operations against Apache Lucene Solr.
         * 
         * Category: search,monitoring
         * Since: 4.8
         * Maven coordinates: org.apache.camel:camel-solr
         * 
         * Syntax: <code>solr:host:port</code>
         * 
         * Path parameter: host (required)
         * The solr instance host name (set to 'default' to use the host name
         * defined on component level)
         * 
         * Path parameter: port
         * The solr instance port number
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path host:port
         * @return the dsl builder
         */
        default SolrEndpointBuilder solr(String componentName, String path) {
            return SolrEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    /**
     * The builder of headers' name for the Solr component.
     */
    public static class SolrHeaderNameBuilder {
        /**
         * The internal instance of the builder used to access to all the
         * methods representing the name of headers.
         */
        private static final SolrHeaderNameBuilder INSTANCE = new SolrHeaderNameBuilder();

        /**
         * The operation to perform.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code operation}.
         */
        public String operation() {
            return "operation";
        }
        /**
         * The operation to perform. Deprecation note: Use header 'operation'
         * instead.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SolrOperation}.
         */
        @Deprecated
        public String solrOperation() {
            return "SolrOperation";
        }
        /**
         * The collection to execute the request against.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code collection}.
         */
        public String collection() {
            return "collection";
        }
        /**
         * The collection to execute the request against. Deprecation note: Use
         * header 'collection' instead.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SolrCollection}.
         */
        @Deprecated
        public String solrCollection() {
            return "CamelSolrCollection";
        }
        /**
         * The request handler to execute the solr request against.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code requestHandler}.
         */
        public String requestHandler() {
            return "requestHandler";
        }
        /**
         * The query to execute.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code queryString}.
         */
        public String queryString() {
            return "queryString";
        }
        /**
         * The query to execute. Deprecation note: Use header 'queryString'
         * instead.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SolrQueryString}.
         */
        @Deprecated
        public String solrQueryString() {
            return "CamelSolrQueryString";
        }
        /**
         * The size of the response.
         * 
         * The option is a: {@code Integer} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code size}.
         */
        public String size() {
            return "size";
        }
        /**
         * The starting index of the response.
         * 
         * The option is a: {@code Integer} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code from}.
         */
        public String from() {
            return "from";
        }
        /**
         * The solr client to use for the request.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code solrClient}.
         */
        public String solrClient() {
            return "solrClient";
        }
        /**
         * The solr parameters to use for the request.
         * 
         * The option is a: {@code SolrParams} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code solrParams}.
         */
        public String solrParams() {
            return "solrParams";
        }
        /**
         * For the delete instruction, interprete body as query/queries instead
         * of id/ids.
         * 
         * The option is a: {@code boolean} type.
         * 
         * Default: false
         * Group: producer
         * 
         * @return the name of the header {@code deleteByQuery}.
         */
        public String deleteByQuery() {
            return "deleteByQuery";
        }
        /**
         * The content type is used to identify the type when inserting files.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code Content-Type}.
         */
        public String contentType() {
            return "Content-Type";
        }
    }
    static SolrEndpointBuilder endpointBuilder(String componentName, String path) {
        class SolrEndpointBuilderImpl extends AbstractEndpointBuilder implements SolrEndpointBuilder, AdvancedSolrEndpointBuilder {
            public SolrEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new SolrEndpointBuilderImpl(path);
    }
}
