/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * Transforms fixed format data such as EDI message from/to XML using a Data
 * Format Description Language (DFDL).
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface DfdlEndpointBuilderFactory {

    /**
     * Builder for endpoint for the DFDL component.
     */
    public interface DfdlEndpointBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedDfdlEndpointBuilder advanced() {
            return (AdvancedDfdlEndpointBuilder) this;
        }

        /**
         * Transform direction. Either PARSE or UNPARSE.
         * 
         * The option is a:
         * <code>org.apache.camel.component.dfdl.ParseDirection</code> type.
         * 
         * Default: PARSE
         * Group: producer
         * 
         * @param parseDirection the value to set
         * @return the dsl builder
         */
        default DfdlEndpointBuilder parseDirection(org.apache.camel.component.dfdl.ParseDirection parseDirection) {
            doSetProperty("parseDirection", parseDirection);
            return this;
        }
        /**
         * Transform direction. Either PARSE or UNPARSE.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.component.dfdl.ParseDirection</code> type.
         * 
         * Default: PARSE
         * Group: producer
         * 
         * @param parseDirection the value to set
         * @return the dsl builder
         */
        default DfdlEndpointBuilder parseDirection(String parseDirection) {
            doSetProperty("parseDirection", parseDirection);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the DFDL component.
     */
    public interface AdvancedDfdlEndpointBuilder
            extends
                EndpointProducerBuilder {
        default DfdlEndpointBuilder basic() {
            return (DfdlEndpointBuilder) this;
        }

        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedDfdlEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedDfdlEndpointBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * The root element name of the schema to use. If not specified, the
         * first root element in the schema will be used.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         * 
         * @param rootElement the value to set
         * @return the dsl builder
         */
        default AdvancedDfdlEndpointBuilder rootElement(String rootElement) {
            doSetProperty("rootElement", rootElement);
            return this;
        }
        /**
         * The root namespace of the schema to use.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         * 
         * @param rootNamespace the value to set
         * @return the dsl builder
         */
        default AdvancedDfdlEndpointBuilder rootNamespace(String rootNamespace) {
            doSetProperty("rootNamespace", rootNamespace);
            return this;
        }
    }

    public interface DfdlBuilders {
        /**
         * DFDL (camel-dfdl)
         * Transforms fixed format data such as EDI message from/to XML using a
         * Data Format Description Language (DFDL).
         * 
         * Category: transformation
         * Since: 4.11
         * Maven coordinates: org.apache.camel:camel-dfdl
         * 
         * Syntax: <code>dfdl:schemaUri</code>
         * 
         * Path parameter: schemaUri (required)
         * The path to the DFDL schema file.
         * 
         * @param path schemaUri
         * @return the dsl builder
         */
        default DfdlEndpointBuilder dfdl(String path) {
            return DfdlEndpointBuilderFactory.endpointBuilder("dfdl", path);
        }
        /**
         * DFDL (camel-dfdl)
         * Transforms fixed format data such as EDI message from/to XML using a
         * Data Format Description Language (DFDL).
         * 
         * Category: transformation
         * Since: 4.11
         * Maven coordinates: org.apache.camel:camel-dfdl
         * 
         * Syntax: <code>dfdl:schemaUri</code>
         * 
         * Path parameter: schemaUri (required)
         * The path to the DFDL schema file.
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path schemaUri
         * @return the dsl builder
         */
        default DfdlEndpointBuilder dfdl(String componentName, String path) {
            return DfdlEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    static DfdlEndpointBuilder endpointBuilder(String componentName, String path) {
        class DfdlEndpointBuilderImpl extends AbstractEndpointBuilder implements DfdlEndpointBuilder, AdvancedDfdlEndpointBuilder {
            public DfdlEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new DfdlEndpointBuilderImpl(path);
    }
}