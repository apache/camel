/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * Dapr component which interfaces with Dapr Building Blocks.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface DaprEndpointBuilderFactory {

    /**
     * Builder for endpoint for the Dapr component.
     */
    public interface DaprEndpointBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedDaprEndpointBuilder advanced() {
            return (AdvancedDaprEndpointBuilder) this;
        }

        /**
         * HTTP method to use when invoking the service. Accepts verbs like GET,
         * POST, PUT, DELETE, etc. Creates a minimal HttpExtension with no
         * headers or query params. Takes precedence over verb.
         * 
         * The option is a: <code>io.dapr.client.domain.HttpExtension</code>
         * type.
         * 
         * Group: producer
         * 
         * @param httpExtension the value to set
         * @return the dsl builder
         */
        default DaprEndpointBuilder httpExtension(io.dapr.client.domain.HttpExtension httpExtension) {
            doSetProperty("httpExtension", httpExtension);
            return this;
        }
        /**
         * HTTP method to use when invoking the service. Accepts verbs like GET,
         * POST, PUT, DELETE, etc. Creates a minimal HttpExtension with no
         * headers or query params. Takes precedence over verb.
         * 
         * The option will be converted to a
         * <code>io.dapr.client.domain.HttpExtension</code> type.
         * 
         * Group: producer
         * 
         * @param httpExtension the value to set
         * @return the dsl builder
         */
        default DaprEndpointBuilder httpExtension(String httpExtension) {
            doSetProperty("httpExtension", httpExtension);
            return this;
        }
        /**
         * The name of the method or route to invoke on the target service.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param methodToInvoke the value to set
         * @return the dsl builder
         */
        default DaprEndpointBuilder methodToInvoke(String methodToInvoke) {
            doSetProperty("methodToInvoke", methodToInvoke);
            return this;
        }
        /**
         * Target service to invoke. Can be a Dapr App ID, a named HTTPEndpoint,
         * or a FQDN/public URL.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param serviceToInvoke the value to set
         * @return the dsl builder
         */
        default DaprEndpointBuilder serviceToInvoke(String serviceToInvoke) {
            doSetProperty("serviceToInvoke", serviceToInvoke);
            return this;
        }
        /**
         * The HTTP verb to use for invoking the method.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default: POST
         * Group: producer
         * 
         * @param verb the value to set
         * @return the dsl builder
         */
        default DaprEndpointBuilder verb(String verb) {
            doSetProperty("verb", verb);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Dapr component.
     */
    public interface AdvancedDaprEndpointBuilder
            extends
                EndpointProducerBuilder {
        default DaprEndpointBuilder basic() {
            return (DaprEndpointBuilder) this;
        }

        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedDaprEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedDaprEndpointBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    public interface DaprBuilders {
        /**
         * Dapr (camel-dapr)
         * Dapr component which interfaces with Dapr Building Blocks.
         * 
         * Category: cloud,saas
         * Since: 4.12
         * Maven coordinates: org.apache.camel:camel-dapr
         * 
         * @return the dsl builder for the headers' name.
         */
        default DaprHeaderNameBuilder dapr() {
            return DaprHeaderNameBuilder.INSTANCE;
        }
        /**
         * Dapr (camel-dapr)
         * Dapr component which interfaces with Dapr Building Blocks.
         * 
         * Category: cloud,saas
         * Since: 4.12
         * Maven coordinates: org.apache.camel:camel-dapr
         * 
         * Syntax: <code>dapr:operation</code>
         * 
         * Path parameter: operation (required)
         * The Dapr building block operation to perform with this component
         * There are 1 enums and the value can be one of: invokeService
         * 
         * @param path operation
         * @return the dsl builder
         */
        default DaprEndpointBuilder dapr(String path) {
            return DaprEndpointBuilderFactory.endpointBuilder("dapr", path);
        }
        /**
         * Dapr (camel-dapr)
         * Dapr component which interfaces with Dapr Building Blocks.
         * 
         * Category: cloud,saas
         * Since: 4.12
         * Maven coordinates: org.apache.camel:camel-dapr
         * 
         * Syntax: <code>dapr:operation</code>
         * 
         * Path parameter: operation (required)
         * The Dapr building block operation to perform with this component
         * There are 1 enums and the value can be one of: invokeService
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path operation
         * @return the dsl builder
         */
        default DaprEndpointBuilder dapr(String componentName, String path) {
            return DaprEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    /**
     * The builder of headers' name for the Dapr component.
     */
    public static class DaprHeaderNameBuilder {
        /**
         * The internal instance of the builder used to access to all the
         * methods representing the name of headers.
         */
        private static final DaprHeaderNameBuilder INSTANCE = new DaprHeaderNameBuilder();

        /**
         * Target service to invoke. Can be a Dapr App ID, a named HTTPEndpoint,
         * or a FQDN/public URL.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code DaprServiceToInvoke}.
         */
        public String daprServiceToInvoke() {
            return "CamelDaprServiceToInvoke";
        }
        /**
         * The name of the method or route to invoke on the target service.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code DaprMethodToInvoke}.
         */
        public String daprMethodToInvoke() {
            return "CamelDaprMethodToInvoke";
        }
        /**
         * The HTTP verb to use for service invocation.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code DaprVerb}.
         */
        public String daprVerb() {
            return "CamelDaprVerb";
        }
        /**
         * The query parameters for HTTP requests.
         * 
         * The option is a: {@code Map<String, List<String>>} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code DaprQueryParameters}.
         */
        public String daprQueryParameters() {
            return "CamelDaprQueryParameters";
        }
        /**
         * The headers for HTTP requests.
         * 
         * The option is a: {@code Map<String, String>} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code DaprHttpHeaders}.
         */
        public String daprHttpHeaders() {
            return "CamelDaprHttpHeaders";
        }
        /**
         * The HttpExtension object for service invocation. Takes precedence
         * over verb.
         * 
         * The option is a: {@code HttpExtension} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code DaprHttpExtension}.
         */
        public String daprHttpExtension() {
            return "CamelDaprHttpExtension";
        }
    }
    static DaprEndpointBuilder endpointBuilder(String componentName, String path) {
        class DaprEndpointBuilderImpl extends AbstractEndpointBuilder implements DaprEndpointBuilder, AdvancedDaprEndpointBuilder {
            public DaprEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new DaprEndpointBuilderImpl(path);
    }
}