/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * LangChain4j Embeddings
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface LangChain4jEmbeddingsEndpointBuilderFactory {

    /**
     * Builder for endpoint for the LangChain4j Embeddings component.
     */
    public interface LangChain4jEmbeddingsEndpointBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedLangChain4jEmbeddingsEndpointBuilder advanced() {
            return (AdvancedLangChain4jEmbeddingsEndpointBuilder) this;
        }

        /**
         * The EmbeddingModel engine to use.
         * 
         * The option is a:
         * <code>dev.langchain4j.model.embedding.EmbeddingModel</code> type.
         * 
         * Required: true
         * Group: producer
         * 
         * @param embeddingModel the value to set
         * @return the dsl builder
         */
        default LangChain4jEmbeddingsEndpointBuilder embeddingModel(dev.langchain4j.model.embedding.EmbeddingModel embeddingModel) {
            doSetProperty("embeddingModel", embeddingModel);
            return this;
        }
        /**
         * The EmbeddingModel engine to use.
         * 
         * The option will be converted to a
         * <code>dev.langchain4j.model.embedding.EmbeddingModel</code> type.
         * 
         * Required: true
         * Group: producer
         * 
         * @param embeddingModel the value to set
         * @return the dsl builder
         */
        default LangChain4jEmbeddingsEndpointBuilder embeddingModel(String embeddingModel) {
            doSetProperty("embeddingModel", embeddingModel);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the LangChain4j Embeddings component.
     */
    public interface AdvancedLangChain4jEmbeddingsEndpointBuilder
            extends
                EndpointProducerBuilder {
        default LangChain4jEmbeddingsEndpointBuilder basic() {
            return (LangChain4jEmbeddingsEndpointBuilder) this;
        }

        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jEmbeddingsEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jEmbeddingsEndpointBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    public interface LangChain4jEmbeddingsBuilders {
        /**
         * LangChain4j Embeddings (camel-langchain4j-embeddings)
         * LangChain4j Embeddings
         * 
         * Category: ai
         * Since: 4.5
         * Maven coordinates: org.apache.camel:camel-langchain4j-embeddings
         * 
         * @return the dsl builder for the headers' name.
         */
        default LangChain4jEmbeddingsHeaderNameBuilder langchain4jEmbeddings() {
            return LangChain4jEmbeddingsHeaderNameBuilder.INSTANCE;
        }
        /**
         * LangChain4j Embeddings (camel-langchain4j-embeddings)
         * LangChain4j Embeddings
         * 
         * Category: ai
         * Since: 4.5
         * Maven coordinates: org.apache.camel:camel-langchain4j-embeddings
         * 
         * Syntax: <code>langchain4j-embeddings:embeddingId</code>
         * 
         * Path parameter: embeddingId (required)
         * The id
         * 
         * @param path embeddingId
         * @return the dsl builder
         */
        default LangChain4jEmbeddingsEndpointBuilder langchain4jEmbeddings(String path) {
            return LangChain4jEmbeddingsEndpointBuilderFactory.endpointBuilder("langchain4j-embeddings", path);
        }
        /**
         * LangChain4j Embeddings (camel-langchain4j-embeddings)
         * LangChain4j Embeddings
         * 
         * Category: ai
         * Since: 4.5
         * Maven coordinates: org.apache.camel:camel-langchain4j-embeddings
         * 
         * Syntax: <code>langchain4j-embeddings:embeddingId</code>
         * 
         * Path parameter: embeddingId (required)
         * The id
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path embeddingId
         * @return the dsl builder
         */
        default LangChain4jEmbeddingsEndpointBuilder langchain4jEmbeddings(String componentName, String path) {
            return LangChain4jEmbeddingsEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    /**
     * The builder of headers' name for the LangChain4j Embeddings component.
     */
    public static class LangChain4jEmbeddingsHeaderNameBuilder {
        /**
         * The internal instance of the builder used to access to all the
         * methods representing the name of headers.
         */
        private static final LangChain4jEmbeddingsHeaderNameBuilder INSTANCE = new LangChain4jEmbeddingsHeaderNameBuilder();

        /**
         * The Finish Reason.
         * 
         * The option is a: {@code dev.langchain4j.model.output.FinishReason}
         * type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code
         * LangChain4jEmbeddingsFinishReason}.
         */
        public String langChain4jEmbeddingsFinishReason() {
            return "CamelLangChain4jEmbeddingsFinishReason";
        }
        /**
         * The Input Token Count.
         * 
         * The option is a: {@code int} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code
         * LangChain4jEmbeddingsInputTokenCount}.
         */
        public String langChain4jEmbeddingsInputTokenCount() {
            return "CamelLangChain4jEmbeddingsInputTokenCount";
        }
        /**
         * The Output Token Count.
         * 
         * The option is a: {@code int} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code
         * LangChain4jEmbeddingsOutputTokenCount}.
         */
        public String langChain4jEmbeddingsOutputTokenCount() {
            return "CamelLangChain4jEmbeddingsOutputTokenCount";
        }
        /**
         * The Total Token Count.
         * 
         * The option is a: {@code int} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code
         * LangChain4jEmbeddingsTotalTokenCount}.
         */
        public String langChain4jEmbeddingsTotalTokenCount() {
            return "CamelLangChain4jEmbeddingsTotalTokenCount";
        }
        /**
         * A dense vector embedding of a text.
         * 
         * The option is a: {@code float[]} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code LangChain4jEmbeddingsVector}.
         */
        public String langChain4jEmbeddingsVector() {
            return "CamelLangChain4jEmbeddingsVector";
        }
        /**
         * A TextSegment representation of the vector embedding input text.
         * 
         * The option is a: {@code  dev.langchain4j.data.segment.TextSegment}
         * type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code
         * LangChain4jEmbeddingsTextSegment}.
         */
        public String langChain4jEmbeddingsTextSegment() {
            return "CamelLangChain4jEmbeddingsTextSegment";
        }
    }
    static LangChain4jEmbeddingsEndpointBuilder endpointBuilder(String componentName, String path) {
        class LangChain4jEmbeddingsEndpointBuilderImpl extends AbstractEndpointBuilder implements LangChain4jEmbeddingsEndpointBuilder, AdvancedLangChain4jEmbeddingsEndpointBuilder {
            public LangChain4jEmbeddingsEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new LangChain4jEmbeddingsEndpointBuilderImpl(path);
    }
}