/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * Receives events from ClickUp
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface ClickUpEndpointBuilderFactory {

    /**
     * Builder for endpoint for the ClickUp component.
     */
    public interface ClickUpEndpointBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedClickUpEndpointBuilder advanced() {
            return (AdvancedClickUpEndpointBuilder) this;
        }

        /**
         * The comma separated list of events to which the webhook must
         * subscribe.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Required: true
         * Group: consumer
         * 
         * @param events the value to set
         * @return the dsl builder
         */
        default ClickUpEndpointBuilder events(String events) {
            doSetProperty("events", events);
            return this;
        }
        /**
         * The authorization token for authenticating against the ClickUp API.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         * 
         * @param authorizationToken the value to set
         * @return the dsl builder
         */
        default ClickUpEndpointBuilder authorizationToken(String authorizationToken) {
            doSetProperty("authorizationToken", authorizationToken);
            return this;
        }
        /**
         * The shared secret obtained in the webhook creation response.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         * 
         * @param webhookSecret the value to set
         * @return the dsl builder
         */
        default ClickUpEndpointBuilder webhookSecret(String webhookSecret) {
            doSetProperty("webhookSecret", webhookSecret);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the ClickUp component.
     */
    public interface AdvancedClickUpEndpointBuilder
            extends
                EndpointConsumerBuilder {
        default ClickUpEndpointBuilder basic() {
            return (ClickUpEndpointBuilder) this;
        }

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions (if possible) occurred while the Camel
         * consumer is trying to pickup incoming messages, or the likes, will
         * now be processed as a message and handled by the routing Error
         * Handler. Important: This is only possible if the 3rd party component
         * allows Camel to be alerted if an exception was thrown. Some
         * components handle this internally only, and therefore
         * bridgeErrorHandler is not possible. In other situations we may
         * improve the Camel component to hook into the 3rd party component and
         * make this possible for future releases. By default the consumer will
         * use the org.apache.camel.spi.ExceptionHandler to deal with
         * exceptions, that will be logged at WARN or ERROR level and ignored.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer (advanced)
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default AdvancedClickUpEndpointBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions (if possible) occurred while the Camel
         * consumer is trying to pickup incoming messages, or the likes, will
         * now be processed as a message and handled by the routing Error
         * Handler. Important: This is only possible if the 3rd party component
         * allows Camel to be alerted if an exception was thrown. Some
         * components handle this internally only, and therefore
         * bridgeErrorHandler is not possible. In other situations we may
         * improve the Camel component to hook into the 3rd party component and
         * make this possible for future releases. By default the consumer will
         * use the org.apache.camel.spi.ExceptionHandler to deal with
         * exceptions, that will be logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer (advanced)
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default AdvancedClickUpEndpointBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option is a: <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedClickUpEndpointBuilder exceptionHandler(org.apache.camel.spi.ExceptionHandler exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedClickUpEndpointBuilder exceptionHandler(String exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option is a: <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedClickUpEndpointBuilder exchangePattern(org.apache.camel.ExchangePattern exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedClickUpEndpointBuilder exchangePattern(String exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Can be used to set an alternative base URL, e.g. when you want to
         * test the component against a mock ClickUp API.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         * 
         * @param baseUrl the value to set
         * @return the dsl builder
         */
        default AdvancedClickUpEndpointBuilder baseUrl(String baseUrl) {
            doSetProperty("baseUrl", baseUrl);
            return this;
        }
    }

    public interface ClickUpBuilders {
        /**
         * ClickUp (camel-clickup)
         * Receives events from ClickUp
         * 
         * Category: cloud
         * Since: 4.9
         * Maven coordinates: org.apache.camel:camel-clickup
         * 
         * Syntax: <code>clickup:workspaceId</code>
         * 
         * Path parameter: workspaceId (required)
         * The WorkspaceID.
         * 
         * @param path workspaceId
         * @return the dsl builder
         */
        default ClickUpEndpointBuilder clickup(String path) {
            return ClickUpEndpointBuilderFactory.endpointBuilder("clickup", path);
        }
        /**
         * ClickUp (camel-clickup)
         * Receives events from ClickUp
         * 
         * Category: cloud
         * Since: 4.9
         * Maven coordinates: org.apache.camel:camel-clickup
         * 
         * Syntax: <code>clickup:workspaceId</code>
         * 
         * Path parameter: workspaceId (required)
         * The WorkspaceID.
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path workspaceId
         * @return the dsl builder
         */
        default ClickUpEndpointBuilder clickup(String componentName, String path) {
            return ClickUpEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    static ClickUpEndpointBuilder endpointBuilder(String componentName, String path) {
        class ClickUpEndpointBuilderImpl extends AbstractEndpointBuilder implements ClickUpEndpointBuilder, AdvancedClickUpEndpointBuilder {
            public ClickUpEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new ClickUpEndpointBuilderImpl(path);
    }
}