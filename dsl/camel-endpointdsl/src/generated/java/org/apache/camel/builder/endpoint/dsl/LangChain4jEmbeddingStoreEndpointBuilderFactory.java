/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * Perform operations on the Langchain4jEmbeddingStores.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface LangChain4jEmbeddingStoreEndpointBuilderFactory {

    /**
     * Builder for endpoint for the LangChain4j Embedding Store component.
     */
    public interface LangChain4jEmbeddingStoreEndpointBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedLangChain4jEmbeddingStoreEndpointBuilder advanced() {
            return (AdvancedLangChain4jEmbeddingStoreEndpointBuilder) this;
        }

        /**
         * Direct embedding store instance for vector operations.
         * 
         * The option is a:
         * <code>dev.langchain4j.store.embedding.EmbeddingStore&lt;dev.langchain4j.data.segment.TextSegment&gt;</code> type.
         * 
         * Group: producer
         * 
         * @param embeddingStore the value to set
         * @return the dsl builder
         */
        default LangChain4jEmbeddingStoreEndpointBuilder embeddingStore(dev.langchain4j.store.embedding.EmbeddingStore<dev.langchain4j.data.segment.TextSegment> embeddingStore) {
            doSetProperty("embeddingStore", embeddingStore);
            return this;
        }
        /**
         * Direct embedding store instance for vector operations.
         * 
         * The option will be converted to a
         * <code>dev.langchain4j.store.embedding.EmbeddingStore&lt;dev.langchain4j.data.segment.TextSegment&gt;</code> type.
         * 
         * Group: producer
         * 
         * @param embeddingStore the value to set
         * @return the dsl builder
         */
        default LangChain4jEmbeddingStoreEndpointBuilder embeddingStore(String embeddingStore) {
            doSetProperty("embeddingStore", embeddingStore);
            return this;
        }
        /**
         * The embedding store factory to use for creating embedding stores if
         * no embeddingstore is provided.
         * 
         * The option is a:
         * <code>org.apache.camel.component.langchain4j.embeddingstore.EmbeddingStoreFactory</code> type.
         * 
         * Group: producer
         * 
         * @param embeddingStoreFactory the value to set
         * @return the dsl builder
         */
        default LangChain4jEmbeddingStoreEndpointBuilder embeddingStoreFactory(org.apache.camel.component.langchain4j.embeddingstore.EmbeddingStoreFactory embeddingStoreFactory) {
            doSetProperty("embeddingStoreFactory", embeddingStoreFactory);
            return this;
        }
        /**
         * The embedding store factory to use for creating embedding stores if
         * no embeddingstore is provided.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.component.langchain4j.embeddingstore.EmbeddingStoreFactory</code> type.
         * 
         * Group: producer
         * 
         * @param embeddingStoreFactory the value to set
         * @return the dsl builder
         */
        default LangChain4jEmbeddingStoreEndpointBuilder embeddingStoreFactory(String embeddingStoreFactory) {
            doSetProperty("embeddingStoreFactory", embeddingStoreFactory);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the LangChain4j Embedding Store component.
     */
    public interface AdvancedLangChain4jEmbeddingStoreEndpointBuilder
            extends
                EndpointProducerBuilder {
        default LangChain4jEmbeddingStoreEndpointBuilder basic() {
            return (LangChain4jEmbeddingStoreEndpointBuilder) this;
        }

        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jEmbeddingStoreEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jEmbeddingStoreEndpointBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    public interface LangChain4jEmbeddingStoreBuilders {
        /**
         * LangChain4j Embedding Store (camel-langchain4j-embeddingstore)
         * Perform operations on the Langchain4jEmbeddingStores.
         * 
         * Category: database,ai
         * Since: 4.14
         * Maven coordinates: org.apache.camel:camel-langchain4j-embeddingstore
         * 
         * @return the dsl builder for the headers' name.
         */
        default LangChain4jEmbeddingStoreHeaderNameBuilder langchain4jEmbeddingstore() {
            return LangChain4jEmbeddingStoreHeaderNameBuilder.INSTANCE;
        }
        /**
         * LangChain4j Embedding Store (camel-langchain4j-embeddingstore)
         * Perform operations on the Langchain4jEmbeddingStores.
         * 
         * Category: database,ai
         * Since: 4.14
         * Maven coordinates: org.apache.camel:camel-langchain4j-embeddingstore
         * 
         * Syntax: <code>langchain4j-embeddingstore:embeddingStoreId</code>
         * 
         * Path parameter: embeddingStoreId (required)
         * The id of the embedding store
         * 
         * @param path embeddingStoreId
         * @return the dsl builder
         */
        default LangChain4jEmbeddingStoreEndpointBuilder langchain4jEmbeddingstore(String path) {
            return LangChain4jEmbeddingStoreEndpointBuilderFactory.endpointBuilder("langchain4j-embeddingstore", path);
        }
        /**
         * LangChain4j Embedding Store (camel-langchain4j-embeddingstore)
         * Perform operations on the Langchain4jEmbeddingStores.
         * 
         * Category: database,ai
         * Since: 4.14
         * Maven coordinates: org.apache.camel:camel-langchain4j-embeddingstore
         * 
         * Syntax: <code>langchain4j-embeddingstore:embeddingStoreId</code>
         * 
         * Path parameter: embeddingStoreId (required)
         * The id of the embedding store
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path embeddingStoreId
         * @return the dsl builder
         */
        default LangChain4jEmbeddingStoreEndpointBuilder langchain4jEmbeddingstore(String componentName, String path) {
            return LangChain4jEmbeddingStoreEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    /**
     * The builder of headers' name for the LangChain4j Embedding Store component.
     */
    public static class LangChain4jEmbeddingStoreHeaderNameBuilder {
        /**
         * The internal instance of the builder used to access to all the
         * methods representing the name of headers.
         */
        private static final LangChain4jEmbeddingStoreHeaderNameBuilder INSTANCE = new LangChain4jEmbeddingStoreHeaderNameBuilder();

        /**
         * The action to be performed.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code
         * Langchain4jEmbeddingStoreAction}.
         */
        public String langchain4jEmbeddingStoreAction() {
            return "CamelLangchain4jEmbeddingStoreAction";
        }
        /**
         * Maximum number of search results to return.
         * 
         * The option is a: {@code Integer} type.
         * 
         * Default: 5
         * Group: producer
         * 
         * @return the name of the header {@code
         * Langchain4jEmbeddingStoreMaxResults}.
         */
        public String langchain4jEmbeddingStoreMaxResults() {
            return "CamelLangchain4jEmbeddingStoreMaxResults";
        }
        /**
         * Minimum similarity score for search results.
         * 
         * The option is a: {@code Double} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code
         * Langchain4jEmbeddingStoreMinScore}.
         */
        public String langchain4jEmbeddingStoreMinScore() {
            return "CamelLangchain4jEmbeddingStoreMinScore";
        }
        /**
         * Search filter for metadata-based constraints.
         * 
         * The option is a: {@code
         * dev.langchain4j.store.embedding.filter.Filter} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code
         * Langchain4jEmbeddingStoreFilter}.
         */
        public String langchain4jEmbeddingStoreFilter() {
            return "CamelLangchain4jEmbeddingStoreFilter";
        }
    }
    static LangChain4jEmbeddingStoreEndpointBuilder endpointBuilder(String componentName, String path) {
        class LangChain4jEmbeddingStoreEndpointBuilderImpl extends AbstractEndpointBuilder implements LangChain4jEmbeddingStoreEndpointBuilder, AdvancedLangChain4jEmbeddingStoreEndpointBuilder {
            public LangChain4jEmbeddingStoreEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new LangChain4jEmbeddingStoreEndpointBuilderImpl(path);
    }
}