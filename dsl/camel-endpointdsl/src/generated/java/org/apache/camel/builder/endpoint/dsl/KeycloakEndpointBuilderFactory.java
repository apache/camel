/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * Manage Keycloak instances via Admin API.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface KeycloakEndpointBuilderFactory {

    /**
     * Builder for endpoint for the Keycloak component.
     */
    public interface KeycloakEndpointBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedKeycloakEndpointBuilder advanced() {
            return (AdvancedKeycloakEndpointBuilder) this;
        }

        /**
         * Keycloak client ID.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param clientId the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder clientId(String clientId) {
            doSetProperty("clientId", clientId);
            return this;
        }
        /**
         * Keycloak client secret.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param clientSecret the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder clientSecret(String clientSecret) {
            doSetProperty("clientSecret", clientSecret);
            return this;
        }
        /**
         * To use an existing configured Keycloak admin client.
         * 
         * The option is a: <code>org.keycloak.admin.client.Keycloak</code>
         * type.
         * 
         * Group: producer
         * 
         * @param keycloakClient the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder keycloakClient(org.keycloak.admin.client.Keycloak keycloakClient) {
            doSetProperty("keycloakClient", keycloakClient);
            return this;
        }
        /**
         * To use an existing configured Keycloak admin client.
         * 
         * The option will be converted to a
         * <code>org.keycloak.admin.client.Keycloak</code> type.
         * 
         * Group: producer
         * 
         * @param keycloakClient the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder keycloakClient(String keycloakClient) {
            doSetProperty("keycloakClient", keycloakClient);
            return this;
        }
        /**
         * The operation to perform.
         * 
         * The option is a:
         * <code>org.apache.camel.component.keycloak.KeycloakOperations</code>
         * type.
         * 
         * Group: producer
         * 
         * @param operation the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder operation(org.apache.camel.component.keycloak.KeycloakOperations operation) {
            doSetProperty("operation", operation);
            return this;
        }
        /**
         * The operation to perform.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.component.keycloak.KeycloakOperations</code>
         * type.
         * 
         * Group: producer
         * 
         * @param operation the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder operation(String operation) {
            doSetProperty("operation", operation);
            return this;
        }
        /**
         * Keycloak password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param password the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * If we want to use a POJO request as body or not.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param pojoRequest the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder pojoRequest(boolean pojoRequest) {
            doSetProperty("pojoRequest", pojoRequest);
            return this;
        }
        /**
         * If we want to use a POJO request as body or not.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param pojoRequest the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder pojoRequest(String pojoRequest) {
            doSetProperty("pojoRequest", pojoRequest);
            return this;
        }
        /**
         * Keycloak realm, the default is master because usually all the
         * operations are done starting from the master realm.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default: master
         * Group: producer
         * 
         * @param realm the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder realm(String realm) {
            doSetProperty("realm", realm);
            return this;
        }
        /**
         * Keycloak server URL.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param serverUrl the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder serverUrl(String serverUrl) {
            doSetProperty("serverUrl", serverUrl);
            return this;
        }
        /**
         * Keycloak username.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         * 
         * @param username the value to set
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder username(String username) {
            doSetProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Keycloak component.
     */
    public interface AdvancedKeycloakEndpointBuilder
            extends
                EndpointProducerBuilder {
        default KeycloakEndpointBuilder basic() {
            return (KeycloakEndpointBuilder) this;
        }

        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedKeycloakEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedKeycloakEndpointBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    public interface KeycloakBuilders {
        /**
         * Keycloak (camel-keycloak)
         * Manage Keycloak instances via Admin API.
         * 
         * Category: security,management
         * Since: 4.15
         * Maven coordinates: org.apache.camel:camel-keycloak
         * 
         * @return the dsl builder for the headers' name.
         */
        default KeycloakHeaderNameBuilder keycloak() {
            return KeycloakHeaderNameBuilder.INSTANCE;
        }
        /**
         * Keycloak (camel-keycloak)
         * Manage Keycloak instances via Admin API.
         * 
         * Category: security,management
         * Since: 4.15
         * Maven coordinates: org.apache.camel:camel-keycloak
         * 
         * Syntax: <code>keycloak:label</code>
         * 
         * Path parameter: label (required)
         * Logical name
         * 
         * @param path label
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder keycloak(String path) {
            return KeycloakEndpointBuilderFactory.endpointBuilder("keycloak", path);
        }
        /**
         * Keycloak (camel-keycloak)
         * Manage Keycloak instances via Admin API.
         * 
         * Category: security,management
         * Since: 4.15
         * Maven coordinates: org.apache.camel:camel-keycloak
         * 
         * Syntax: <code>keycloak:label</code>
         * 
         * Path parameter: label (required)
         * Logical name
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path label
         * @return the dsl builder
         */
        default KeycloakEndpointBuilder keycloak(String componentName, String path) {
            return KeycloakEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    /**
     * The builder of headers' name for the Keycloak component.
     */
    public static class KeycloakHeaderNameBuilder {
        /**
         * The internal instance of the builder used to access to all the
         * methods representing the name of headers.
         */
        private static final KeycloakHeaderNameBuilder INSTANCE = new KeycloakHeaderNameBuilder();

        /**
         * The operation to perform.
         * 
         * The option is a: {@code
         * org.apache.camel.component.keycloak.KeycloakOperations} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakOperation}.
         */
        public String keycloakOperation() {
            return "CamelKeycloakOperation";
        }
        /**
         * The realm name.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakRealmName}.
         */
        public String keycloakRealmName() {
            return "CamelKeycloakRealmName";
        }
        /**
         * The user ID.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakUserId}.
         */
        public String keycloakUserId() {
            return "CamelKeycloakUserId";
        }
        /**
         * The username.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakUsername}.
         */
        public String keycloakUsername() {
            return "CamelKeycloakUsername";
        }
        /**
         * The user email.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakUserEmail}.
         */
        public String keycloakUserEmail() {
            return "CamelKeycloakUserEmail";
        }
        /**
         * The user first name.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakUserFirstName}.
         */
        public String keycloakUserFirstName() {
            return "CamelKeycloakUserFirstName";
        }
        /**
         * The user last name.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakUserLastName}.
         */
        public String keycloakUserLastName() {
            return "CamelKeycloakUserLastName";
        }
        /**
         * The role ID.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakRoleId}.
         */
        public String keycloakRoleId() {
            return "CamelKeycloakRoleId";
        }
        /**
         * The role name.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakRoleName}.
         */
        public String keycloakRoleName() {
            return "CamelKeycloakRoleName";
        }
        /**
         * The role description.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code KeycloakRoleDescription}.
         */
        public String keycloakRoleDescription() {
            return "CamelKeycloakRoleDescription";
        }
    }
    static KeycloakEndpointBuilder endpointBuilder(String componentName, String path) {
        class KeycloakEndpointBuilderImpl extends AbstractEndpointBuilder implements KeycloakEndpointBuilder, AdvancedKeycloakEndpointBuilder {
            public KeycloakEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new KeycloakEndpointBuilderImpl(path);
    }
}