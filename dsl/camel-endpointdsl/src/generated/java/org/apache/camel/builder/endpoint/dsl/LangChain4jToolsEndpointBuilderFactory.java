/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.processing.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * LangChain4j Tools and Function Calling Features
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface LangChain4jToolsEndpointBuilderFactory {

    /**
     * Builder for endpoint consumers for the LangChain4j Tools component.
     */
    public interface LangChain4jToolsEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedLangChain4jToolsEndpointConsumerBuilder advanced() {
            return (AdvancedLangChain4jToolsEndpointConsumerBuilder) this;
        }
        /**
         * The tags for the tools.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Required: true
         * Group: common
         * 
         * @param tags the value to set
         * @return the dsl builder
         */
        default LangChain4jToolsEndpointConsumerBuilder tags(String tags) {
            doSetProperty("tags", tags);
            return this;
        }
        /**
         * Tool description.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: consumer
         * 
         * @param description the value to set
         * @return the dsl builder
         */
        default LangChain4jToolsEndpointConsumerBuilder description(String description) {
            doSetProperty("description", description);
            return this;
        }
        /**
         * List of Tool parameters in the form of parameter.=.
         * 
         * The option is a: <code>java.util.Map&lt;java.lang.String,
         * java.lang.String&gt;</code> type.
         * The option is multivalued, and you can use the parameters(String,
         * Object) method to add a value (call the method multiple times to set
         * more values).
         * 
         * Group: consumer
         * 
         * @param key the option key
         * @param value the option value
         * @return the dsl builder
         */
        default LangChain4jToolsEndpointConsumerBuilder parameters(String key, Object value) {
            doSetMultiValueProperty("parameters", "parameter." + key, value);
            return this;
        }
        /**
         * List of Tool parameters in the form of parameter.=.
         * 
         * The option is a: <code>java.util.Map&lt;java.lang.String,
         * java.lang.String&gt;</code> type.
         * The option is multivalued, and you can use the parameters(String,
         * Object) method to add a value (call the method multiple times to set
         * more values).
         * 
         * Group: consumer
         * 
         * @param values the values
         * @return the dsl builder
         */
        default LangChain4jToolsEndpointConsumerBuilder parameters(Map values) {
            doSetMultiValueProperties("parameters", "parameter.", values);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the LangChain4j Tools component.
     */
    public interface AdvancedLangChain4jToolsEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default LangChain4jToolsEndpointConsumerBuilder basic() {
            return (LangChain4jToolsEndpointConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions (if possible) occurred while the Camel
         * consumer is trying to pickup incoming messages, or the likes, will
         * now be processed as a message and handled by the routing Error
         * Handler. Important: This is only possible if the 3rd party component
         * allows Camel to be alerted if an exception was thrown. Some
         * components handle this internally only, and therefore
         * bridgeErrorHandler is not possible. In other situations we may
         * improve the Camel component to hook into the 3rd party component and
         * make this possible for future releases. By default the consumer will
         * use the org.apache.camel.spi.ExceptionHandler to deal with
         * exceptions, that will be logged at WARN or ERROR level and ignored.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer (advanced)
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions (if possible) occurred while the Camel
         * consumer is trying to pickup incoming messages, or the likes, will
         * now be processed as a message and handled by the routing Error
         * Handler. Important: This is only possible if the 3rd party component
         * allows Camel to be alerted if an exception was thrown. Some
         * components handle this internally only, and therefore
         * bridgeErrorHandler is not possible. In other situations we may
         * improve the Camel component to hook into the 3rd party component and
         * make this possible for future releases. By default the consumer will
         * use the org.apache.camel.spi.ExceptionHandler to deal with
         * exceptions, that will be logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer (advanced)
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Tool's Camel Parameters, programmatically define Tool description and
         * parameters.
         * 
         * The option is a:
         * <code>org.apache.camel.component.langchain4j.tools.spec.CamelSimpleToolParameter</code> type.
         * 
         * Group: consumer (advanced)
         * 
         * @param camelToolParameter the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder camelToolParameter(org.apache.camel.component.langchain4j.tools.spec.CamelSimpleToolParameter camelToolParameter) {
            doSetProperty("camelToolParameter", camelToolParameter);
            return this;
        }
        /**
         * Tool's Camel Parameters, programmatically define Tool description and
         * parameters.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.component.langchain4j.tools.spec.CamelSimpleToolParameter</code> type.
         * 
         * Group: consumer (advanced)
         * 
         * @param camelToolParameter the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder camelToolParameter(String camelToolParameter) {
            doSetProperty("camelToolParameter", camelToolParameter);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option is a: <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder exceptionHandler(org.apache.camel.spi.ExceptionHandler exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder exceptionHandler(String exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option is a: <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder exchangePattern(org.apache.camel.ExchangePattern exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder exchangePattern(String exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Chat Language Model of type
         * dev.langchain4j.model.chat.ChatLanguageModel.
         * 
         * The option is a:
         * <code>dev.langchain4j.model.chat.ChatLanguageModel</code> type.
         * 
         * Group: advanced
         * 
         * @param chatModel the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder chatModel(dev.langchain4j.model.chat.ChatLanguageModel chatModel) {
            doSetProperty("chatModel", chatModel);
            return this;
        }
        /**
         * Chat Language Model of type
         * dev.langchain4j.model.chat.ChatLanguageModel.
         * 
         * The option will be converted to a
         * <code>dev.langchain4j.model.chat.ChatLanguageModel</code> type.
         * 
         * Group: advanced
         * 
         * @param chatModel the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointConsumerBuilder chatModel(String chatModel) {
            doSetProperty("chatModel", chatModel);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the LangChain4j Tools component.
     */
    public interface LangChain4jToolsEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedLangChain4jToolsEndpointProducerBuilder advanced() {
            return (AdvancedLangChain4jToolsEndpointProducerBuilder) this;
        }

        /**
         * The tags for the tools.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Required: true
         * Group: common
         * 
         * @param tags the value to set
         * @return the dsl builder
         */
        default LangChain4jToolsEndpointProducerBuilder tags(String tags) {
            doSetProperty("tags", tags);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the LangChain4j Tools component.
     */
    public interface AdvancedLangChain4jToolsEndpointProducerBuilder extends EndpointProducerBuilder {
        default LangChain4jToolsEndpointProducerBuilder basic() {
            return (LangChain4jToolsEndpointProducerBuilder) this;
        }

        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointProducerBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointProducerBuilder lazyStartProducer(String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Chat Language Model of type
         * dev.langchain4j.model.chat.ChatLanguageModel.
         * 
         * The option is a:
         * <code>dev.langchain4j.model.chat.ChatLanguageModel</code> type.
         * 
         * Group: advanced
         * 
         * @param chatModel the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointProducerBuilder chatModel(dev.langchain4j.model.chat.ChatLanguageModel chatModel) {
            doSetProperty("chatModel", chatModel);
            return this;
        }
        /**
         * Chat Language Model of type
         * dev.langchain4j.model.chat.ChatLanguageModel.
         * 
         * The option will be converted to a
         * <code>dev.langchain4j.model.chat.ChatLanguageModel</code> type.
         * 
         * Group: advanced
         * 
         * @param chatModel the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointProducerBuilder chatModel(String chatModel) {
            doSetProperty("chatModel", chatModel);
            return this;
        }
    }

    /**
     * Builder for endpoint for the LangChain4j Tools component.
     */
    public interface LangChain4jToolsEndpointBuilder
            extends
                LangChain4jToolsEndpointConsumerBuilder,
                LangChain4jToolsEndpointProducerBuilder {
        default AdvancedLangChain4jToolsEndpointBuilder advanced() {
            return (AdvancedLangChain4jToolsEndpointBuilder) this;
        }

        /**
         * The tags for the tools.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Required: true
         * Group: common
         * 
         * @param tags the value to set
         * @return the dsl builder
         */
        default LangChain4jToolsEndpointBuilder tags(String tags) {
            doSetProperty("tags", tags);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the LangChain4j Tools component.
     */
    public interface AdvancedLangChain4jToolsEndpointBuilder
            extends
                AdvancedLangChain4jToolsEndpointConsumerBuilder,
                AdvancedLangChain4jToolsEndpointProducerBuilder {
        default LangChain4jToolsEndpointBuilder basic() {
            return (LangChain4jToolsEndpointBuilder) this;
        }

        /**
         * Chat Language Model of type
         * dev.langchain4j.model.chat.ChatLanguageModel.
         * 
         * The option is a:
         * <code>dev.langchain4j.model.chat.ChatLanguageModel</code> type.
         * 
         * Group: advanced
         * 
         * @param chatModel the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointBuilder chatModel(dev.langchain4j.model.chat.ChatLanguageModel chatModel) {
            doSetProperty("chatModel", chatModel);
            return this;
        }
        /**
         * Chat Language Model of type
         * dev.langchain4j.model.chat.ChatLanguageModel.
         * 
         * The option will be converted to a
         * <code>dev.langchain4j.model.chat.ChatLanguageModel</code> type.
         * 
         * Group: advanced
         * 
         * @param chatModel the value to set
         * @return the dsl builder
         */
        default AdvancedLangChain4jToolsEndpointBuilder chatModel(String chatModel) {
            doSetProperty("chatModel", chatModel);
            return this;
        }
    }

    public interface LangChain4jToolsBuilders {
        /**
         * LangChain4j Tools (camel-langchain4j-tools)
         * LangChain4j Tools and Function Calling Features
         * 
         * Category: ai
         * Since: 4.8
         * Maven coordinates: org.apache.camel:camel-langchain4j-tools
         * 
         * Syntax: <code>langchain4j-tools:toolId</code>
         * 
         * Path parameter: toolId (required)
         * The tool name
         * 
         * @param path toolId
         * @return the dsl builder
         */
        default LangChain4jToolsEndpointBuilder langchain4jTools(String path) {
            return LangChain4jToolsEndpointBuilderFactory.endpointBuilder("langchain4j-tools", path);
        }
        /**
         * LangChain4j Tools (camel-langchain4j-tools)
         * LangChain4j Tools and Function Calling Features
         * 
         * Category: ai
         * Since: 4.8
         * Maven coordinates: org.apache.camel:camel-langchain4j-tools
         * 
         * Syntax: <code>langchain4j-tools:toolId</code>
         * 
         * Path parameter: toolId (required)
         * The tool name
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path toolId
         * @return the dsl builder
         */
        default LangChain4jToolsEndpointBuilder langchain4jTools(String componentName, String path) {
            return LangChain4jToolsEndpointBuilderFactory.endpointBuilder(componentName, path);
        }

    }
    static LangChain4jToolsEndpointBuilder endpointBuilder(String componentName, String path) {
        class LangChain4jToolsEndpointBuilderImpl extends AbstractEndpointBuilder implements LangChain4jToolsEndpointBuilder, AdvancedLangChain4jToolsEndpointBuilder {
            public LangChain4jToolsEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new LangChain4jToolsEndpointBuilderImpl(path);
    }
}