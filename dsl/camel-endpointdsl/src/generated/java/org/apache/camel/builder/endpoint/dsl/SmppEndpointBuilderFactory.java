/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.annotation.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * Send and receive SMS messages using a SMSC (Short Message Service Center).
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SmppEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the SMPP component.
     */
    public interface SmppEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedSmppEndpointConsumerBuilder advanced() {
            return (AdvancedSmppEndpointConsumerBuilder) this;
        }
        /**
         * Defines the initial delay in milliseconds after the consumer/producer
         * tries to reconnect to the SMSC, after the connection was lost.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param initialReconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder initialReconnectDelay(
                long initialReconnectDelay) {
            doSetProperty("initialReconnectDelay", initialReconnectDelay);
            return this;
        }
        /**
         * Defines the initial delay in milliseconds after the consumer/producer
         * tries to reconnect to the SMSC, after the connection was lost.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param initialReconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder initialReconnectDelay(
                String initialReconnectDelay) {
            doSetProperty("initialReconnectDelay", initialReconnectDelay);
            return this;
        }
        /**
         * Defines the maximum number of attempts to reconnect to the SMSC, if
         * SMSC returns a negative bind response.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 2147483647
         * Group: common
         * 
         * @param maxReconnect the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder maxReconnect(int maxReconnect) {
            doSetProperty("maxReconnect", maxReconnect);
            return this;
        }
        /**
         * Defines the maximum number of attempts to reconnect to the SMSC, if
         * SMSC returns a negative bind response.
         * 
         * The option will be converted to a &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 2147483647
         * Group: common
         * 
         * @param maxReconnect the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder maxReconnect(String maxReconnect) {
            doSetProperty("maxReconnect", maxReconnect);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the reconnect attempts,
         * if the connection to the SMSC was lost and the previous was not
         * succeed.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param reconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder reconnectDelay(long reconnectDelay) {
            doSetProperty("reconnectDelay", reconnectDelay);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the reconnect attempts,
         * if the connection to the SMSC was lost and the previous was not
         * succeed.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param reconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder reconnectDelay(String reconnectDelay) {
            doSetProperty("reconnectDelay", reconnectDelay);
            return this;
        }
        /**
         * You can specify a policy for handling long messages: ALLOW - the
         * default, long messages are split to 140 bytes per message TRUNCATE -
         * long messages are split and only the first fragment will be sent to
         * the SMSC. Some carriers drop subsequent fragments so this reduces
         * load on the SMPP connection sending parts of a message that will
         * never be delivered. REJECT - if a message would need to be split, it
         * is rejected with an SMPP NegativeResponseException and the reason
         * code signifying the message is too long.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.smpp.SmppSplittingPolicy&lt;/code&gt; type.
         * 
         * Default: ALLOW
         * Group: common
         * 
         * @param splittingPolicy the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder splittingPolicy(
                org.apache.camel.component.smpp.SmppSplittingPolicy splittingPolicy) {
            doSetProperty("splittingPolicy", splittingPolicy);
            return this;
        }
        /**
         * You can specify a policy for handling long messages: ALLOW - the
         * default, long messages are split to 140 bytes per message TRUNCATE -
         * long messages are split and only the first fragment will be sent to
         * the SMSC. Some carriers drop subsequent fragments so this reduces
         * load on the SMPP connection sending parts of a message that will
         * never be delivered. REJECT - if a message would need to be split, it
         * is rejected with an SMPP NegativeResponseException and the reason
         * code signifying the message is too long.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.component.smpp.SmppSplittingPolicy&lt;/code&gt; type.
         * 
         * Default: ALLOW
         * Group: common
         * 
         * @param splittingPolicy the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder splittingPolicy(
                String splittingPolicy) {
            doSetProperty("splittingPolicy", splittingPolicy);
            return this;
        }
        /**
         * This parameter is used to categorize the type of ESME (External Short
         * Message Entity) that is binding to the SMSC (max. 13 characters).
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param systemType the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder systemType(String systemType) {
            doSetProperty("systemType", systemType);
            return this;
        }
        /**
         * You can specify the address range for the SmppConsumer as defined in
         * section 5.2.7 of the SMPP 3.4 specification. The SmppConsumer will
         * receive messages only from SMSC's which target an address (MSISDN or
         * IP address) within this range.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: consumer
         * 
         * @param addressRange the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder addressRange(String addressRange) {
            doSetProperty("addressRange", addressRange);
            return this;
        }
        /**
         * Defines encoding of data according the SMPP 3.4 specification,
         * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2
         * Alphabet.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param alphabet the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder alphabet(byte alphabet) {
            doSetProperty("alphabet", alphabet);
            return this;
        }
        /**
         * Defines encoding of data according the SMPP 3.4 specification,
         * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2
         * Alphabet.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param alphabet the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder alphabet(String alphabet) {
            doSetProperty("alphabet", alphabet);
            return this;
        }
        /**
         * Defines the data coding according the SMPP 3.4 specification, section
         * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin
         * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2
         * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param dataCoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder dataCoding(byte dataCoding) {
            doSetProperty("dataCoding", dataCoding);
            return this;
        }
        /**
         * Defines the data coding according the SMPP 3.4 specification, section
         * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin
         * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2
         * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param dataCoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder dataCoding(String dataCoding) {
            doSetProperty("dataCoding", dataCoding);
            return this;
        }
        /**
         * Defines the encoding scheme of the short message user data. Only for
         * SubmitSm, ReplaceSm and SubmitMulti.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: ISO-8859-1
         * Group: codec
         * 
         * @param encoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder encoding(String encoding) {
            doSetProperty("encoding", encoding);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the hostname or ip address of your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyHost the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder httpProxyHost(String httpProxyHost) {
            doSetProperty("httpProxyHost", httpProxyHost);
            return this;
        }
        /**
         * If your HTTP proxy requires basic authentication, set this attribute
         * to the password required for your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyPassword the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder httpProxyPassword(
                String httpProxyPassword) {
            doSetProperty("httpProxyPassword", httpProxyPassword);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the port of your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3128
         * Group: proxy
         * 
         * @param httpProxyPort the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder httpProxyPort(Integer httpProxyPort) {
            doSetProperty("httpProxyPort", httpProxyPort);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the port of your HTTP proxy.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3128
         * Group: proxy
         * 
         * @param httpProxyPort the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder httpProxyPort(String httpProxyPort) {
            doSetProperty("httpProxyPort", httpProxyPort);
            return this;
        }
        /**
         * If your HTTP proxy requires basic authentication, set this attribute
         * to the username required for your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyUsername the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder httpProxyUsername(
                String httpProxyUsername) {
            doSetProperty("httpProxyUsername", httpProxyUsername);
            return this;
        }
        /**
         * These headers will be passed to the proxy server while establishing
         * the connection.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.String&amp;gt;&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param proxyHeaders the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder proxyHeaders(
                Map<java.lang.String, java.lang.String> proxyHeaders) {
            doSetProperty("proxyHeaders", proxyHeaders);
            return this;
        }
        /**
         * These headers will be passed to the proxy server while establishing
         * the connection.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.String&amp;gt;&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param proxyHeaders the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder proxyHeaders(String proxyHeaders) {
            doSetProperty("proxyHeaders", proxyHeaders);
            return this;
        }
        /**
         * The password for connecting to SMSC server.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: security
         * 
         * @param password the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The system id (username) for connecting to SMSC server.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: smppclient
         * Group: security
         * 
         * @param systemId the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder systemId(String systemId) {
            doSetProperty("systemId", systemId);
            return this;
        }
        /**
         * Whether using SSL with the smpps protocol.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: security
         * 
         * @param usingSSL the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder usingSSL(boolean usingSSL) {
            doSetProperty("usingSSL", usingSSL);
            return this;
        }
        /**
         * Whether using SSL with the smpps protocol.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: security
         * 
         * @param usingSSL the value to set
         * @return the dsl builder
         */
        default SmppEndpointConsumerBuilder usingSSL(String usingSSL) {
            doSetProperty("usingSSL", usingSSL);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the SMPP component.
     */
    public interface AdvancedSmppEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default SmppEndpointConsumerBuilder basic() {
            return (SmppEndpointConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: consumer (advanced)
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: consumer (advanced)
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.spi.ExceptionHandler&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder exceptionHandler(
                org.apache.camel.spi.ExceptionHandler exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.spi.ExceptionHandler&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.ExchangePattern&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder exchangePattern(
                org.apache.camel.ExchangePattern exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.ExchangePattern&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the confidence checks.
         * The confidence check is used to test the communication path between
         * an ESME and an SMSC.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 60000
         * Group: advanced
         * 
         * @param enquireLinkTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder enquireLinkTimer(
                Integer enquireLinkTimer) {
            doSetProperty("enquireLinkTimer", enquireLinkTimer);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the confidence checks.
         * The confidence check is used to test the communication path between
         * an ESME and an SMSC.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 60000
         * Group: advanced
         * 
         * @param enquireLinkTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder enquireLinkTimer(
                String enquireLinkTimer) {
            doSetProperty("enquireLinkTimer", enquireLinkTimer);
            return this;
        }
        /**
         * Sets the number of threads which can read PDU and process them in
         * parallel.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3
         * Group: advanced
         * 
         * @param pduProcessorDegree the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder pduProcessorDegree(
                Integer pduProcessorDegree) {
            doSetProperty("pduProcessorDegree", pduProcessorDegree);
            return this;
        }
        /**
         * Sets the number of threads which can read PDU and process them in
         * parallel.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3
         * Group: advanced
         * 
         * @param pduProcessorDegree the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder pduProcessorDegree(
                String pduProcessorDegree) {
            doSetProperty("pduProcessorDegree", pduProcessorDegree);
            return this;
        }
        /**
         * Sets the capacity of the working queue for PDU processing.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 100
         * Group: advanced
         * 
         * @param pduProcessorQueueCapacity the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder pduProcessorQueueCapacity(
                Integer pduProcessorQueueCapacity) {
            doSetProperty("pduProcessorQueueCapacity", pduProcessorQueueCapacity);
            return this;
        }
        /**
         * Sets the capacity of the working queue for PDU processing.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 100
         * Group: advanced
         * 
         * @param pduProcessorQueueCapacity the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder pduProcessorQueueCapacity(
                String pduProcessorQueueCapacity) {
            doSetProperty("pduProcessorQueueCapacity", pduProcessorQueueCapacity);
            return this;
        }
        /**
         * You can refer to a org.jsmpp.session.SessionStateListener in the
         * Registry to receive callbacks when the session state changed.
         * 
         * The option is a:
         * &lt;code&gt;org.jsmpp.session.SessionStateListener&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param sessionStateListener the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder sessionStateListener(
                org.jsmpp.session.SessionStateListener sessionStateListener) {
            doSetProperty("sessionStateListener", sessionStateListener);
            return this;
        }
        /**
         * You can refer to a org.jsmpp.session.SessionStateListener in the
         * Registry to receive callbacks when the session state changed.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.jsmpp.session.SessionStateListener&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param sessionStateListener the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder sessionStateListener(
                String sessionStateListener) {
            doSetProperty("sessionStateListener", sessionStateListener);
            return this;
        }
        /**
         * When true, the SMSC delivery receipt would be requested only for the
         * last segment of a multi-segment (long) message. For short messages,
         * with only 1 segment the behaviour is unchanged.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param singleDLR the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder singleDLR(boolean singleDLR) {
            doSetProperty("singleDLR", singleDLR);
            return this;
        }
        /**
         * When true, the SMSC delivery receipt would be requested only for the
         * last segment of a multi-segment (long) message. For short messages,
         * with only 1 segment the behaviour is unchanged.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param singleDLR the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder singleDLR(String singleDLR) {
            doSetProperty("singleDLR", singleDLR);
            return this;
        }
        /**
         * Defines the maximum period of inactivity allowed after a transaction,
         * after which an SMPP entity may assume that the session is no longer
         * active. This timer may be active on either communicating SMPP entity
         * (i.e. SMSC or ESME).
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 10000
         * Group: advanced
         * 
         * @param transactionTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder transactionTimer(
                Integer transactionTimer) {
            doSetProperty("transactionTimer", transactionTimer);
            return this;
        }
        /**
         * Defines the maximum period of inactivity allowed after a transaction,
         * after which an SMPP entity may assume that the session is no longer
         * active. This timer may be active on either communicating SMPP entity
         * (i.e. SMSC or ESME).
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 10000
         * Group: advanced
         * 
         * @param transactionTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointConsumerBuilder transactionTimer(
                String transactionTimer) {
            doSetProperty("transactionTimer", transactionTimer);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the SMPP component.
     */
    public interface SmppEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedSmppEndpointProducerBuilder advanced() {
            return (AdvancedSmppEndpointProducerBuilder) this;
        }
        /**
         * Defines the initial delay in milliseconds after the consumer/producer
         * tries to reconnect to the SMSC, after the connection was lost.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param initialReconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder initialReconnectDelay(
                long initialReconnectDelay) {
            doSetProperty("initialReconnectDelay", initialReconnectDelay);
            return this;
        }
        /**
         * Defines the initial delay in milliseconds after the consumer/producer
         * tries to reconnect to the SMSC, after the connection was lost.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param initialReconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder initialReconnectDelay(
                String initialReconnectDelay) {
            doSetProperty("initialReconnectDelay", initialReconnectDelay);
            return this;
        }
        /**
         * Defines the maximum number of attempts to reconnect to the SMSC, if
         * SMSC returns a negative bind response.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 2147483647
         * Group: common
         * 
         * @param maxReconnect the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder maxReconnect(int maxReconnect) {
            doSetProperty("maxReconnect", maxReconnect);
            return this;
        }
        /**
         * Defines the maximum number of attempts to reconnect to the SMSC, if
         * SMSC returns a negative bind response.
         * 
         * The option will be converted to a &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 2147483647
         * Group: common
         * 
         * @param maxReconnect the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder maxReconnect(String maxReconnect) {
            doSetProperty("maxReconnect", maxReconnect);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the reconnect attempts,
         * if the connection to the SMSC was lost and the previous was not
         * succeed.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param reconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder reconnectDelay(long reconnectDelay) {
            doSetProperty("reconnectDelay", reconnectDelay);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the reconnect attempts,
         * if the connection to the SMSC was lost and the previous was not
         * succeed.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param reconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder reconnectDelay(String reconnectDelay) {
            doSetProperty("reconnectDelay", reconnectDelay);
            return this;
        }
        /**
         * You can specify a policy for handling long messages: ALLOW - the
         * default, long messages are split to 140 bytes per message TRUNCATE -
         * long messages are split and only the first fragment will be sent to
         * the SMSC. Some carriers drop subsequent fragments so this reduces
         * load on the SMPP connection sending parts of a message that will
         * never be delivered. REJECT - if a message would need to be split, it
         * is rejected with an SMPP NegativeResponseException and the reason
         * code signifying the message is too long.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.smpp.SmppSplittingPolicy&lt;/code&gt; type.
         * 
         * Default: ALLOW
         * Group: common
         * 
         * @param splittingPolicy the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder splittingPolicy(
                org.apache.camel.component.smpp.SmppSplittingPolicy splittingPolicy) {
            doSetProperty("splittingPolicy", splittingPolicy);
            return this;
        }
        /**
         * You can specify a policy for handling long messages: ALLOW - the
         * default, long messages are split to 140 bytes per message TRUNCATE -
         * long messages are split and only the first fragment will be sent to
         * the SMSC. Some carriers drop subsequent fragments so this reduces
         * load on the SMPP connection sending parts of a message that will
         * never be delivered. REJECT - if a message would need to be split, it
         * is rejected with an SMPP NegativeResponseException and the reason
         * code signifying the message is too long.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.component.smpp.SmppSplittingPolicy&lt;/code&gt; type.
         * 
         * Default: ALLOW
         * Group: common
         * 
         * @param splittingPolicy the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder splittingPolicy(
                String splittingPolicy) {
            doSetProperty("splittingPolicy", splittingPolicy);
            return this;
        }
        /**
         * This parameter is used to categorize the type of ESME (External Short
         * Message Entity) that is binding to the SMSC (max. 13 characters).
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param systemType the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder systemType(String systemType) {
            doSetProperty("systemType", systemType);
            return this;
        }
        /**
         * Defines the destination SME address. For mobile terminated messages,
         * this is the directory number of the recipient MS. Only for SubmitSm,
         * SubmitMulti, CancelSm and DataSm.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: 1717
         * Group: producer
         * 
         * @param destAddr the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder destAddr(String destAddr) {
            doSetProperty("destAddr", destAddr);
            return this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME destination
         * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and
         * DataSm. The following NPI values are defined: 0: Unknown 1: ISDN
         * (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8:
         * National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to
         * be defined by WAP Forum).
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param destAddrNpi the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder destAddrNpi(byte destAddrNpi) {
            doSetProperty("destAddrNpi", destAddrNpi);
            return this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME destination
         * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and
         * DataSm. The following NPI values are defined: 0: Unknown 1: ISDN
         * (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8:
         * National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to
         * be defined by WAP Forum).
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param destAddrNpi the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder destAddrNpi(String destAddrNpi) {
            doSetProperty("destAddrNpi", destAddrNpi);
            return this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME destination
         * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and
         * DataSm. The following TON values are defined: 0: Unknown 1:
         * International 2: National 3: Network Specific 4: Subscriber Number 5:
         * Alphanumeric 6: Abbreviated.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param destAddrTon the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder destAddrTon(byte destAddrTon) {
            doSetProperty("destAddrTon", destAddrTon);
            return this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME destination
         * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and
         * DataSm. The following TON values are defined: 0: Unknown 1:
         * International 2: National 3: Network Specific 4: Subscriber Number 5:
         * Alphanumeric 6: Abbreviated.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param destAddrTon the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder destAddrTon(String destAddrTon) {
            doSetProperty("destAddrTon", destAddrTon);
            return this;
        }
        /**
         * Sessions can be lazily created to avoid exceptions, if the SMSC is
         * not available when the Camel producer is started. Camel will check
         * the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of
         * the first exchange. If they are present, Camel will use these data to
         * connect to the SMSC.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazySessionCreation the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder lazySessionCreation(
                boolean lazySessionCreation) {
            doSetProperty("lazySessionCreation", lazySessionCreation);
            return this;
        }
        /**
         * Sessions can be lazily created to avoid exceptions, if the SMSC is
         * not available when the Camel producer is started. Camel will check
         * the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of
         * the first exchange. If they are present, Camel will use these data to
         * connect to the SMSC.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazySessionCreation the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder lazySessionCreation(
                String lazySessionCreation) {
            doSetProperty("lazySessionCreation", lazySessionCreation);
            return this;
        }
        /**
         * Defines the numeric plan indicator (NPI) to be used in the SME. The
         * following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2:
         * Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9:
         * Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined
         * by WAP Forum).
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param numberingPlanIndicator the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder numberingPlanIndicator(
                byte numberingPlanIndicator) {
            doSetProperty("numberingPlanIndicator", numberingPlanIndicator);
            return this;
        }
        /**
         * Defines the numeric plan indicator (NPI) to be used in the SME. The
         * following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2:
         * Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9:
         * Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined
         * by WAP Forum).
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param numberingPlanIndicator the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder numberingPlanIndicator(
                String numberingPlanIndicator) {
            doSetProperty("numberingPlanIndicator", numberingPlanIndicator);
            return this;
        }
        /**
         * Allows the originating SME to assign a priority level to the short
         * message. Only for SubmitSm and SubmitMulti. Four Priority Levels are
         * supported: 0: Level 0 (lowest) priority 1: Level 1 priority 2: Level
         * 2 priority 3: Level 3 (highest) priority.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param priorityFlag the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder priorityFlag(byte priorityFlag) {
            doSetProperty("priorityFlag", priorityFlag);
            return this;
        }
        /**
         * Allows the originating SME to assign a priority level to the short
         * message. Only for SubmitSm and SubmitMulti. Four Priority Levels are
         * supported: 0: Level 0 (lowest) priority 1: Level 1 priority 2: Level
         * 2 priority 3: Level 3 (highest) priority.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param priorityFlag the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder priorityFlag(String priorityFlag) {
            doSetProperty("priorityFlag", priorityFlag);
            return this;
        }
        /**
         * The protocol id.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param protocolId the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder protocolId(byte protocolId) {
            doSetProperty("protocolId", protocolId);
            return this;
        }
        /**
         * The protocol id.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param protocolId the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder protocolId(String protocolId) {
            doSetProperty("protocolId", protocolId);
            return this;
        }
        /**
         * Is used to request an SMSC delivery receipt and/or SME originated
         * acknowledgements. The following values are defined: 0: No SMSC
         * delivery receipt requested. 1: SMSC delivery receipt requested where
         * final delivery outcome is success or failure. 2: SMSC delivery
         * receipt requested where the final delivery outcome is delivery
         * failure.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param registeredDelivery the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder registeredDelivery(
                byte registeredDelivery) {
            doSetProperty("registeredDelivery", registeredDelivery);
            return this;
        }
        /**
         * Is used to request an SMSC delivery receipt and/or SME originated
         * acknowledgements. The following values are defined: 0: No SMSC
         * delivery receipt requested. 1: SMSC delivery receipt requested where
         * final delivery outcome is success or failure. 2: SMSC delivery
         * receipt requested where the final delivery outcome is delivery
         * failure.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param registeredDelivery the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder registeredDelivery(
                String registeredDelivery) {
            doSetProperty("registeredDelivery", registeredDelivery);
            return this;
        }
        /**
         * Used to request the SMSC to replace a previously submitted message,
         * that is still pending delivery. The SMSC will replace an existing
         * message provided that the source address, destination address and
         * service type match the same fields in the new message. The following
         * replace if present flag values are defined: 0: Don't replace 1:
         * Replace.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param replaceIfPresentFlag the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder replaceIfPresentFlag(
                byte replaceIfPresentFlag) {
            doSetProperty("replaceIfPresentFlag", replaceIfPresentFlag);
            return this;
        }
        /**
         * Used to request the SMSC to replace a previously submitted message,
         * that is still pending delivery. The SMSC will replace an existing
         * message provided that the source address, destination address and
         * service type match the same fields in the new message. The following
         * replace if present flag values are defined: 0: Don't replace 1:
         * Replace.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param replaceIfPresentFlag the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder replaceIfPresentFlag(
                String replaceIfPresentFlag) {
            doSetProperty("replaceIfPresentFlag", replaceIfPresentFlag);
            return this;
        }
        /**
         * The service type parameter can be used to indicate the SMS
         * Application service associated with the message. The following
         * generic service_types are defined: CMT: Cellular Messaging CPT:
         * Cellular Paging VMN: Voice Mail Notification VMA: Voice Mail Alerting
         * WAP: Wireless Application Protocol USSD: Unstructured Supplementary
         * Services Data.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param serviceType the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder serviceType(String serviceType) {
            doSetProperty("serviceType", serviceType);
            return this;
        }
        /**
         * Defines the address of SME (Short Message Entity) which originated
         * this message.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: 1616
         * Group: producer
         * 
         * @param sourceAddr the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder sourceAddr(String sourceAddr) {
            doSetProperty("sourceAddr", sourceAddr);
            return this;
        }
        /**
         * Defines the numeric plan indicator (NPI) to be used in the SME
         * originator address parameters. The following NPI values are defined:
         * 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6:
         * Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet
         * (IP) 18: WAP Client Id (to be defined by WAP Forum).
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param sourceAddrNpi the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder sourceAddrNpi(byte sourceAddrNpi) {
            doSetProperty("sourceAddrNpi", sourceAddrNpi);
            return this;
        }
        /**
         * Defines the numeric plan indicator (NPI) to be used in the SME
         * originator address parameters. The following NPI values are defined:
         * 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6:
         * Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet
         * (IP) 18: WAP Client Id (to be defined by WAP Forum).
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param sourceAddrNpi the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder sourceAddrNpi(String sourceAddrNpi) {
            doSetProperty("sourceAddrNpi", sourceAddrNpi);
            return this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME originator
         * address parameters. The following TON values are defined: 0: Unknown
         * 1: International 2: National 3: Network Specific 4: Subscriber Number
         * 5: Alphanumeric 6: Abbreviated.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param sourceAddrTon the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder sourceAddrTon(byte sourceAddrTon) {
            doSetProperty("sourceAddrTon", sourceAddrTon);
            return this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME originator
         * address parameters. The following TON values are defined: 0: Unknown
         * 1: International 2: National 3: Network Specific 4: Subscriber Number
         * 5: Alphanumeric 6: Abbreviated.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param sourceAddrTon the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder sourceAddrTon(String sourceAddrTon) {
            doSetProperty("sourceAddrTon", sourceAddrTon);
            return this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME. The following
         * TON values are defined: 0: Unknown 1: International 2: National 3:
         * Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param typeOfNumber the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder typeOfNumber(byte typeOfNumber) {
            doSetProperty("typeOfNumber", typeOfNumber);
            return this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME. The following
         * TON values are defined: 0: Unknown 1: International 2: National 3:
         * Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param typeOfNumber the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder typeOfNumber(String typeOfNumber) {
            doSetProperty("typeOfNumber", typeOfNumber);
            return this;
        }
        /**
         * Defines encoding of data according the SMPP 3.4 specification,
         * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2
         * Alphabet.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param alphabet the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder alphabet(byte alphabet) {
            doSetProperty("alphabet", alphabet);
            return this;
        }
        /**
         * Defines encoding of data according the SMPP 3.4 specification,
         * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2
         * Alphabet.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param alphabet the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder alphabet(String alphabet) {
            doSetProperty("alphabet", alphabet);
            return this;
        }
        /**
         * Defines the data coding according the SMPP 3.4 specification, section
         * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin
         * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2
         * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param dataCoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder dataCoding(byte dataCoding) {
            doSetProperty("dataCoding", dataCoding);
            return this;
        }
        /**
         * Defines the data coding according the SMPP 3.4 specification, section
         * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin
         * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2
         * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param dataCoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder dataCoding(String dataCoding) {
            doSetProperty("dataCoding", dataCoding);
            return this;
        }
        /**
         * Defines the encoding scheme of the short message user data. Only for
         * SubmitSm, ReplaceSm and SubmitMulti.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: ISO-8859-1
         * Group: codec
         * 
         * @param encoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder encoding(String encoding) {
            doSetProperty("encoding", encoding);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the hostname or ip address of your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyHost the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder httpProxyHost(String httpProxyHost) {
            doSetProperty("httpProxyHost", httpProxyHost);
            return this;
        }
        /**
         * If your HTTP proxy requires basic authentication, set this attribute
         * to the password required for your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyPassword the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder httpProxyPassword(
                String httpProxyPassword) {
            doSetProperty("httpProxyPassword", httpProxyPassword);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the port of your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3128
         * Group: proxy
         * 
         * @param httpProxyPort the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder httpProxyPort(Integer httpProxyPort) {
            doSetProperty("httpProxyPort", httpProxyPort);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the port of your HTTP proxy.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3128
         * Group: proxy
         * 
         * @param httpProxyPort the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder httpProxyPort(String httpProxyPort) {
            doSetProperty("httpProxyPort", httpProxyPort);
            return this;
        }
        /**
         * If your HTTP proxy requires basic authentication, set this attribute
         * to the username required for your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyUsername the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder httpProxyUsername(
                String httpProxyUsername) {
            doSetProperty("httpProxyUsername", httpProxyUsername);
            return this;
        }
        /**
         * These headers will be passed to the proxy server while establishing
         * the connection.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.String&amp;gt;&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param proxyHeaders the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder proxyHeaders(
                Map<java.lang.String, java.lang.String> proxyHeaders) {
            doSetProperty("proxyHeaders", proxyHeaders);
            return this;
        }
        /**
         * These headers will be passed to the proxy server while establishing
         * the connection.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.String&amp;gt;&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param proxyHeaders the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder proxyHeaders(String proxyHeaders) {
            doSetProperty("proxyHeaders", proxyHeaders);
            return this;
        }
        /**
         * The password for connecting to SMSC server.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: security
         * 
         * @param password the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The system id (username) for connecting to SMSC server.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: smppclient
         * Group: security
         * 
         * @param systemId the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder systemId(String systemId) {
            doSetProperty("systemId", systemId);
            return this;
        }
        /**
         * Whether using SSL with the smpps protocol.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: security
         * 
         * @param usingSSL the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder usingSSL(boolean usingSSL) {
            doSetProperty("usingSSL", usingSSL);
            return this;
        }
        /**
         * Whether using SSL with the smpps protocol.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: security
         * 
         * @param usingSSL the value to set
         * @return the dsl builder
         */
        default SmppEndpointProducerBuilder usingSSL(String usingSSL) {
            doSetProperty("usingSSL", usingSSL);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the SMPP component.
     */
    public interface AdvancedSmppEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default SmppEndpointProducerBuilder basic() {
            return (SmppEndpointProducerBuilder) this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: producer (advanced)
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the confidence checks.
         * The confidence check is used to test the communication path between
         * an ESME and an SMSC.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 60000
         * Group: advanced
         * 
         * @param enquireLinkTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder enquireLinkTimer(
                Integer enquireLinkTimer) {
            doSetProperty("enquireLinkTimer", enquireLinkTimer);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the confidence checks.
         * The confidence check is used to test the communication path between
         * an ESME and an SMSC.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 60000
         * Group: advanced
         * 
         * @param enquireLinkTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder enquireLinkTimer(
                String enquireLinkTimer) {
            doSetProperty("enquireLinkTimer", enquireLinkTimer);
            return this;
        }
        /**
         * Sets the number of threads which can read PDU and process them in
         * parallel.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3
         * Group: advanced
         * 
         * @param pduProcessorDegree the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder pduProcessorDegree(
                Integer pduProcessorDegree) {
            doSetProperty("pduProcessorDegree", pduProcessorDegree);
            return this;
        }
        /**
         * Sets the number of threads which can read PDU and process them in
         * parallel.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3
         * Group: advanced
         * 
         * @param pduProcessorDegree the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder pduProcessorDegree(
                String pduProcessorDegree) {
            doSetProperty("pduProcessorDegree", pduProcessorDegree);
            return this;
        }
        /**
         * Sets the capacity of the working queue for PDU processing.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 100
         * Group: advanced
         * 
         * @param pduProcessorQueueCapacity the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder pduProcessorQueueCapacity(
                Integer pduProcessorQueueCapacity) {
            doSetProperty("pduProcessorQueueCapacity", pduProcessorQueueCapacity);
            return this;
        }
        /**
         * Sets the capacity of the working queue for PDU processing.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 100
         * Group: advanced
         * 
         * @param pduProcessorQueueCapacity the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder pduProcessorQueueCapacity(
                String pduProcessorQueueCapacity) {
            doSetProperty("pduProcessorQueueCapacity", pduProcessorQueueCapacity);
            return this;
        }
        /**
         * You can refer to a org.jsmpp.session.SessionStateListener in the
         * Registry to receive callbacks when the session state changed.
         * 
         * The option is a:
         * &lt;code&gt;org.jsmpp.session.SessionStateListener&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param sessionStateListener the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder sessionStateListener(
                org.jsmpp.session.SessionStateListener sessionStateListener) {
            doSetProperty("sessionStateListener", sessionStateListener);
            return this;
        }
        /**
         * You can refer to a org.jsmpp.session.SessionStateListener in the
         * Registry to receive callbacks when the session state changed.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.jsmpp.session.SessionStateListener&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param sessionStateListener the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder sessionStateListener(
                String sessionStateListener) {
            doSetProperty("sessionStateListener", sessionStateListener);
            return this;
        }
        /**
         * When true, the SMSC delivery receipt would be requested only for the
         * last segment of a multi-segment (long) message. For short messages,
         * with only 1 segment the behaviour is unchanged.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param singleDLR the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder singleDLR(boolean singleDLR) {
            doSetProperty("singleDLR", singleDLR);
            return this;
        }
        /**
         * When true, the SMSC delivery receipt would be requested only for the
         * last segment of a multi-segment (long) message. For short messages,
         * with only 1 segment the behaviour is unchanged.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param singleDLR the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder singleDLR(String singleDLR) {
            doSetProperty("singleDLR", singleDLR);
            return this;
        }
        /**
         * Defines the maximum period of inactivity allowed after a transaction,
         * after which an SMPP entity may assume that the session is no longer
         * active. This timer may be active on either communicating SMPP entity
         * (i.e. SMSC or ESME).
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 10000
         * Group: advanced
         * 
         * @param transactionTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder transactionTimer(
                Integer transactionTimer) {
            doSetProperty("transactionTimer", transactionTimer);
            return this;
        }
        /**
         * Defines the maximum period of inactivity allowed after a transaction,
         * after which an SMPP entity may assume that the session is no longer
         * active. This timer may be active on either communicating SMPP entity
         * (i.e. SMSC or ESME).
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 10000
         * Group: advanced
         * 
         * @param transactionTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointProducerBuilder transactionTimer(
                String transactionTimer) {
            doSetProperty("transactionTimer", transactionTimer);
            return this;
        }
    }

    /**
     * Builder for endpoint for the SMPP component.
     */
    public interface SmppEndpointBuilder
            extends
                SmppEndpointConsumerBuilder,
                SmppEndpointProducerBuilder {
        default AdvancedSmppEndpointBuilder advanced() {
            return (AdvancedSmppEndpointBuilder) this;
        }
        /**
         * Defines the initial delay in milliseconds after the consumer/producer
         * tries to reconnect to the SMSC, after the connection was lost.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param initialReconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder initialReconnectDelay(
                long initialReconnectDelay) {
            doSetProperty("initialReconnectDelay", initialReconnectDelay);
            return this;
        }
        /**
         * Defines the initial delay in milliseconds after the consumer/producer
         * tries to reconnect to the SMSC, after the connection was lost.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param initialReconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder initialReconnectDelay(
                String initialReconnectDelay) {
            doSetProperty("initialReconnectDelay", initialReconnectDelay);
            return this;
        }
        /**
         * Defines the maximum number of attempts to reconnect to the SMSC, if
         * SMSC returns a negative bind response.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 2147483647
         * Group: common
         * 
         * @param maxReconnect the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder maxReconnect(int maxReconnect) {
            doSetProperty("maxReconnect", maxReconnect);
            return this;
        }
        /**
         * Defines the maximum number of attempts to reconnect to the SMSC, if
         * SMSC returns a negative bind response.
         * 
         * The option will be converted to a &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 2147483647
         * Group: common
         * 
         * @param maxReconnect the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder maxReconnect(String maxReconnect) {
            doSetProperty("maxReconnect", maxReconnect);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the reconnect attempts,
         * if the connection to the SMSC was lost and the previous was not
         * succeed.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param reconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder reconnectDelay(long reconnectDelay) {
            doSetProperty("reconnectDelay", reconnectDelay);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the reconnect attempts,
         * if the connection to the SMSC was lost and the previous was not
         * succeed.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: common
         * 
         * @param reconnectDelay the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder reconnectDelay(String reconnectDelay) {
            doSetProperty("reconnectDelay", reconnectDelay);
            return this;
        }
        /**
         * You can specify a policy for handling long messages: ALLOW - the
         * default, long messages are split to 140 bytes per message TRUNCATE -
         * long messages are split and only the first fragment will be sent to
         * the SMSC. Some carriers drop subsequent fragments so this reduces
         * load on the SMPP connection sending parts of a message that will
         * never be delivered. REJECT - if a message would need to be split, it
         * is rejected with an SMPP NegativeResponseException and the reason
         * code signifying the message is too long.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.smpp.SmppSplittingPolicy&lt;/code&gt; type.
         * 
         * Default: ALLOW
         * Group: common
         * 
         * @param splittingPolicy the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder splittingPolicy(
                org.apache.camel.component.smpp.SmppSplittingPolicy splittingPolicy) {
            doSetProperty("splittingPolicy", splittingPolicy);
            return this;
        }
        /**
         * You can specify a policy for handling long messages: ALLOW - the
         * default, long messages are split to 140 bytes per message TRUNCATE -
         * long messages are split and only the first fragment will be sent to
         * the SMSC. Some carriers drop subsequent fragments so this reduces
         * load on the SMPP connection sending parts of a message that will
         * never be delivered. REJECT - if a message would need to be split, it
         * is rejected with an SMPP NegativeResponseException and the reason
         * code signifying the message is too long.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.component.smpp.SmppSplittingPolicy&lt;/code&gt; type.
         * 
         * Default: ALLOW
         * Group: common
         * 
         * @param splittingPolicy the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder splittingPolicy(String splittingPolicy) {
            doSetProperty("splittingPolicy", splittingPolicy);
            return this;
        }
        /**
         * This parameter is used to categorize the type of ESME (External Short
         * Message Entity) that is binding to the SMSC (max. 13 characters).
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param systemType the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder systemType(String systemType) {
            doSetProperty("systemType", systemType);
            return this;
        }
        /**
         * Defines encoding of data according the SMPP 3.4 specification,
         * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2
         * Alphabet.
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param alphabet the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder alphabet(byte alphabet) {
            doSetProperty("alphabet", alphabet);
            return this;
        }
        /**
         * Defines encoding of data according the SMPP 3.4 specification,
         * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2
         * Alphabet.
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param alphabet the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder alphabet(String alphabet) {
            doSetProperty("alphabet", alphabet);
            return this;
        }
        /**
         * Defines the data coding according the SMPP 3.4 specification, section
         * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin
         * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2
         * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).
         * 
         * The option is a: &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param dataCoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder dataCoding(byte dataCoding) {
            doSetProperty("dataCoding", dataCoding);
            return this;
        }
        /**
         * Defines the data coding according the SMPP 3.4 specification, section
         * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin
         * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2
         * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).
         * 
         * The option will be converted to a &lt;code&gt;byte&lt;/code&gt; type.
         * 
         * Group: codec
         * 
         * @param dataCoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder dataCoding(String dataCoding) {
            doSetProperty("dataCoding", dataCoding);
            return this;
        }
        /**
         * Defines the encoding scheme of the short message user data. Only for
         * SubmitSm, ReplaceSm and SubmitMulti.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: ISO-8859-1
         * Group: codec
         * 
         * @param encoding the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder encoding(String encoding) {
            doSetProperty("encoding", encoding);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the hostname or ip address of your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyHost the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder httpProxyHost(String httpProxyHost) {
            doSetProperty("httpProxyHost", httpProxyHost);
            return this;
        }
        /**
         * If your HTTP proxy requires basic authentication, set this attribute
         * to the password required for your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyPassword the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder httpProxyPassword(String httpProxyPassword) {
            doSetProperty("httpProxyPassword", httpProxyPassword);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the port of your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3128
         * Group: proxy
         * 
         * @param httpProxyPort the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder httpProxyPort(Integer httpProxyPort) {
            doSetProperty("httpProxyPort", httpProxyPort);
            return this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the port of your HTTP proxy.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3128
         * Group: proxy
         * 
         * @param httpProxyPort the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder httpProxyPort(String httpProxyPort) {
            doSetProperty("httpProxyPort", httpProxyPort);
            return this;
        }
        /**
         * If your HTTP proxy requires basic authentication, set this attribute
         * to the username required for your HTTP proxy.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param httpProxyUsername the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder httpProxyUsername(String httpProxyUsername) {
            doSetProperty("httpProxyUsername", httpProxyUsername);
            return this;
        }
        /**
         * These headers will be passed to the proxy server while establishing
         * the connection.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.String&amp;gt;&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param proxyHeaders the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder proxyHeaders(
                Map<java.lang.String, java.lang.String> proxyHeaders) {
            doSetProperty("proxyHeaders", proxyHeaders);
            return this;
        }
        /**
         * These headers will be passed to the proxy server while establishing
         * the connection.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.String&amp;gt;&lt;/code&gt; type.
         * 
         * Group: proxy
         * 
         * @param proxyHeaders the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder proxyHeaders(String proxyHeaders) {
            doSetProperty("proxyHeaders", proxyHeaders);
            return this;
        }
        /**
         * The password for connecting to SMSC server.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: security
         * 
         * @param password the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The system id (username) for connecting to SMSC server.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: smppclient
         * Group: security
         * 
         * @param systemId the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder systemId(String systemId) {
            doSetProperty("systemId", systemId);
            return this;
        }
        /**
         * Whether using SSL with the smpps protocol.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: security
         * 
         * @param usingSSL the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder usingSSL(boolean usingSSL) {
            doSetProperty("usingSSL", usingSSL);
            return this;
        }
        /**
         * Whether using SSL with the smpps protocol.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: security
         * 
         * @param usingSSL the value to set
         * @return the dsl builder
         */
        default SmppEndpointBuilder usingSSL(String usingSSL) {
            doSetProperty("usingSSL", usingSSL);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the SMPP component.
     */
    public interface AdvancedSmppEndpointBuilder
            extends
                AdvancedSmppEndpointConsumerBuilder,
                AdvancedSmppEndpointProducerBuilder {
        default SmppEndpointBuilder basic() {
            return (SmppEndpointBuilder) this;
        }
        /**
         * Defines the interval in milliseconds between the confidence checks.
         * The confidence check is used to test the communication path between
         * an ESME and an SMSC.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 60000
         * Group: advanced
         * 
         * @param enquireLinkTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder enquireLinkTimer(
                Integer enquireLinkTimer) {
            doSetProperty("enquireLinkTimer", enquireLinkTimer);
            return this;
        }
        /**
         * Defines the interval in milliseconds between the confidence checks.
         * The confidence check is used to test the communication path between
         * an ESME and an SMSC.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 60000
         * Group: advanced
         * 
         * @param enquireLinkTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder enquireLinkTimer(
                String enquireLinkTimer) {
            doSetProperty("enquireLinkTimer", enquireLinkTimer);
            return this;
        }
        /**
         * Sets the number of threads which can read PDU and process them in
         * parallel.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3
         * Group: advanced
         * 
         * @param pduProcessorDegree the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder pduProcessorDegree(
                Integer pduProcessorDegree) {
            doSetProperty("pduProcessorDegree", pduProcessorDegree);
            return this;
        }
        /**
         * Sets the number of threads which can read PDU and process them in
         * parallel.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 3
         * Group: advanced
         * 
         * @param pduProcessorDegree the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder pduProcessorDegree(
                String pduProcessorDegree) {
            doSetProperty("pduProcessorDegree", pduProcessorDegree);
            return this;
        }
        /**
         * Sets the capacity of the working queue for PDU processing.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 100
         * Group: advanced
         * 
         * @param pduProcessorQueueCapacity the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder pduProcessorQueueCapacity(
                Integer pduProcessorQueueCapacity) {
            doSetProperty("pduProcessorQueueCapacity", pduProcessorQueueCapacity);
            return this;
        }
        /**
         * Sets the capacity of the working queue for PDU processing.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 100
         * Group: advanced
         * 
         * @param pduProcessorQueueCapacity the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder pduProcessorQueueCapacity(
                String pduProcessorQueueCapacity) {
            doSetProperty("pduProcessorQueueCapacity", pduProcessorQueueCapacity);
            return this;
        }
        /**
         * You can refer to a org.jsmpp.session.SessionStateListener in the
         * Registry to receive callbacks when the session state changed.
         * 
         * The option is a:
         * &lt;code&gt;org.jsmpp.session.SessionStateListener&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param sessionStateListener the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder sessionStateListener(
                org.jsmpp.session.SessionStateListener sessionStateListener) {
            doSetProperty("sessionStateListener", sessionStateListener);
            return this;
        }
        /**
         * You can refer to a org.jsmpp.session.SessionStateListener in the
         * Registry to receive callbacks when the session state changed.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.jsmpp.session.SessionStateListener&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param sessionStateListener the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder sessionStateListener(
                String sessionStateListener) {
            doSetProperty("sessionStateListener", sessionStateListener);
            return this;
        }
        /**
         * When true, the SMSC delivery receipt would be requested only for the
         * last segment of a multi-segment (long) message. For short messages,
         * with only 1 segment the behaviour is unchanged.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param singleDLR the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder singleDLR(boolean singleDLR) {
            doSetProperty("singleDLR", singleDLR);
            return this;
        }
        /**
         * When true, the SMSC delivery receipt would be requested only for the
         * last segment of a multi-segment (long) message. For short messages,
         * with only 1 segment the behaviour is unchanged.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param singleDLR the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder singleDLR(String singleDLR) {
            doSetProperty("singleDLR", singleDLR);
            return this;
        }
        /**
         * Defines the maximum period of inactivity allowed after a transaction,
         * after which an SMPP entity may assume that the session is no longer
         * active. This timer may be active on either communicating SMPP entity
         * (i.e. SMSC or ESME).
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 10000
         * Group: advanced
         * 
         * @param transactionTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder transactionTimer(
                Integer transactionTimer) {
            doSetProperty("transactionTimer", transactionTimer);
            return this;
        }
        /**
         * Defines the maximum period of inactivity allowed after a transaction,
         * after which an SMPP entity may assume that the session is no longer
         * active. This timer may be active on either communicating SMPP entity
         * (i.e. SMSC or ESME).
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 10000
         * Group: advanced
         * 
         * @param transactionTimer the value to set
         * @return the dsl builder
         */
        default AdvancedSmppEndpointBuilder transactionTimer(
                String transactionTimer) {
            doSetProperty("transactionTimer", transactionTimer);
            return this;
        }
    }

    public interface SmppBuilders {
        /**
         * SMPP (camel-smpp)
         * Send and receive SMS messages using a SMSC (Short Message Service
         * Center).
         * 
         * Category: mobile
         * Since: 2.2
         * Maven coordinates: org.apache.camel:camel-smpp
         * 
         * @return the dsl builder for the headers' name.
         */
        default SmppHeaderNameBuilder smpp() {
            return SmppHeaderNameBuilder.INSTANCE;
        }
        /**
         * SMPP (camel-smpp)
         * Send and receive SMS messages using a SMSC (Short Message Service
         * Center).
         * 
         * Category: mobile
         * Since: 2.2
         * Maven coordinates: org.apache.camel:camel-smpp
         * 
         * Syntax: <code>smpp:host:port</code>
         * 
         * Path parameter: host
         * Hostname for the SMSC server to use.
         * Default value: localhost
         * 
         * Path parameter: port
         * Port number for the SMSC server to use.
         * Default value: 2775
         * 
         * @param path host:port
         * @return the dsl builder
         */
        default SmppEndpointBuilder smpp(String path) {
            return SmppEndpointBuilderFactory.endpointBuilder("smpp", path);
        }
        /**
         * SMPP (camel-smpp)
         * Send and receive SMS messages using a SMSC (Short Message Service
         * Center).
         * 
         * Category: mobile
         * Since: 2.2
         * Maven coordinates: org.apache.camel:camel-smpp
         * 
         * Syntax: <code>smpp:host:port</code>
         * 
         * Path parameter: host
         * Hostname for the SMSC server to use.
         * Default value: localhost
         * 
         * Path parameter: port
         * Port number for the SMSC server to use.
         * Default value: 2775
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path host:port
         * @return the dsl builder
         */
        default SmppEndpointBuilder smpp(String componentName, String path) {
            return SmppEndpointBuilderFactory.endpointBuilder(componentName, path);
        }
        /**
         * SMPP (Secure) (camel-smpp)
         * Send and receive SMS messages using a SMSC (Short Message Service
         * Center).
         * 
         * Category: mobile
         * Since: 2.2
         * Maven coordinates: org.apache.camel:camel-smpp
         * 
         * Syntax: <code>smpps:host:port</code>
         * 
         * Path parameter: host
         * Hostname for the SMSC server to use.
         * Default value: localhost
         * 
         * Path parameter: port
         * Port number for the SMSC server to use.
         * Default value: 2775
         * 
         * @param path host:port
         * @return the dsl builder
         */
        default SmppEndpointBuilder smpps(String path) {
            return SmppEndpointBuilderFactory.endpointBuilder("smpps", path);
        }
    }

    /**
     * The builder of headers' name for the SMPP component.
     */
    public static class SmppHeaderNameBuilder {
        /**
         * The internal instance of the builder used to access to all the
         * methods representing the name of headers.
         */
        private static final SmppHeaderNameBuilder INSTANCE = new SmppHeaderNameBuilder();

        /**
         * For SubmitSm, SubmitMulti and ReplaceSm The data coding according to
         * the SMPP 3.4 specification, section 5.2.19. Use the URI option
         * alphabet settings above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppAlphabet}.
         */
        public String smppAlphabet() {
            return "SmppAlphabet";
        }

        /**
         * The command.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppCommand}.
         */
        public String smppCommand() {
            return "SmppCommand";
        }

        /**
         * only for AlertNotification, DeliverSm and DataSm The command id field
         * identifies the particular SMPP PDU. For the complete list of defined
         * values see chapter 5.1.2.1 in the smpp specification v3.4.
         * 
         * The option is a: {@code Integer} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppCommandId}.
         */
        public String smppCommandId() {
            return "SmppCommandId";
        }

        /**
         * only for DataSm The Command status of the message.
         * 
         * The option is a: {@code Integer} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppCommandStatus}.
         */
        public String smppCommandStatus() {
            return "SmppCommandStatus";
        }

        /**
         * For SubmitSm, SubmitMulti and ReplaceSm The data coding according to
         * the SMPP 3.4 specification, section 5.2.19. Use the URI option
         * alphabet settings above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppDataCoding}.
         */
        public String smppDataCoding() {
            return "SmppDataCoding";
        }

        /**
         * The splitter.
         * 
         * The option is a: {@code org.apache.camel.component.smpp.SmppSplitter}
         * type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppSplitter}.
         */
        public String smppSplitter() {
            return "SmppSplitter";
        }

        /**
         * only for smsc DeliveryReceipt Number of short messages delivered.
         * This is only relevant where the original message was submitted to a
         * distribution list.The value is padded with leading zeros if
         * necessary.
         * 
         * The option is a: {@code Integer} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppDelivered}.
         */
        public String smppDelivered() {
            return "SmppDelivered";
        }

        /**
         * Producer: only for SubmitSm, SubmitMulti, CancelSm and DataSm Defines
         * the destination SME address(es). For mobile terminated messages, this
         * is the directory number of the recipient MS. It must be a List for
         * SubmitMulti and a String otherwise. Consumer: only for DeliverSm and
         * DataSm: Defines the destination SME address. For mobile terminated
         * messages, this is the directory number of the recipient MS.
         * 
         * The option is a: {@code List or String} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppDestAddr}.
         */
        public String smppDestAddr() {
            return "SmppDestAddr";
        }

        /**
         * Producer: only for SubmitSm, SubmitMulti, CancelSm and DataSm Defines
         * the numeric plan indicator (NPI) to be used in the SME destination
         * address parameters. Use the URI option sourceAddrNpi values defined
         * above. Consumer: only for DataSm Defines the numeric plan indicator
         * (NPI) in the destination address parameters. Use the URI option
         * sourceAddrNpi values defined above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppDestAddrNpi}.
         */
        public String smppDestAddrNpi() {
            return "SmppDestAddrNpi";
        }

        /**
         * Producer: only for SubmitSm, SubmitMulti, CancelSm and DataSm Defines
         * the type of number (TON) to be used in the SME destination address
         * parameters. Use the sourceAddrTon URI option values defined above.
         * Consumer: only for DataSm Defines the type of number (TON) in the
         * destination address parameters. Use the sourceAddrTon URI option
         * values defined above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppDestAddrTon}.
         */
        public String smppDestAddrTon() {
            return "SmppDestAddrTon";
        }

        /**
         * only for smsc DeliveryReceipt The time and date at which the short
         * message reached it's final state. The format is as follows:
         * YYMMDDhhmm.
         * 
         * The option is a: {@code Date} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppDoneDate}.
         */
        public String smppDoneDate() {
            return "SmppDoneDate";
        }

        /**
         * only for SubmitSm, SubmitMulti and DataSm. Specifies the encoding
         * (character set name) of the bytes in the message body. If the message
         * body is a string then this is not relevant because Java Strings are
         * always Unicode. If the body is a byte array then this header can be
         * used to indicate that it is ISO-8859-1 or some other value. Default
         * value is specified by the endpoint configuration parameter
         * _encoding_.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppEncoding}.
         */
        public String smppEncoding() {
            return "SmppEncoding";
        }

        /**
         * Producer: only for SubmitMultiSm The errors which occurred by sending
         * the short message(s) the form Map (messageID : (destAddr : address,
         * error : errorCode)). Consumer: only for smsc DeliveryReceipt Where
         * appropriate this may hold a Network specific error code or an SMSC
         * error code for the attempted delivery of the message. These errors
         * are Network or SMSC specific and are not included here.
         * 
         * The option is a: {@code String or Map<String, List<Map<String,
         * Object>>>} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppError}.
         */
        public String smppError() {
            return "SmppError";
        }

        /**
         * the ASM class.
         * 
         * The option is a: {@code org.jsmpp.bean.ESMClass} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppClass}.
         */
        public String smppClass() {
            return "SmppClass";
        }

        /**
         * only for AlertNotification Defines the destination ESME address. For
         * mobile terminated messages, this is the directory number of the
         * recipient MS.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppEsmeAddr}.
         */
        public String smppEsmeAddr() {
            return "SmppEsmeAddr";
        }

        /**
         * only for AlertNotification Defines the numeric plan indicator (NPI)
         * to be used in the ESME originator address parameters. Use the URI
         * option sourceAddrNpi values defined above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppEsmeAddrNpi}.
         */
        public String smppEsmeAddrNpi() {
            return "SmppEsmeAddrNpi";
        }

        /**
         * only for AlertNotification Defines the type of number (TON) to be
         * used in the ESME originator address parameters. Use the sourceAddrTon
         * URI option values defined above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppEsmeAddrTon}.
         */
        public String smppEsmeAddrTon() {
            return "SmppEsmeAddrTon";
        }

        /**
         * The final date.
         * 
         * The option is a: {@code java.util.Date} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppFinalDate}.
         */
        public String smppFinalDate() {
            return "SmppFinalDate";
        }

        /**
         * only for smsc DeliveryReceipt: The final status of the message.
         * 
         * The option is a: {@code org.jsmpp.util.DeliveryReceiptState} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppStatus}.
         */
        public String smppStatus() {
            return "SmppStatus";
        }

        /**
         * Producer: The id to identify the submitted short message(s) for later
         * use. In case of a ReplaceSm, QuerySm, CancelSm and DataSm this header
         * value is a String. In case of a SubmitSm or SubmitMultiSm this header
         * value is a List. Consumer: only for smsc DeliveryReceipt and DataSm
         * The message ID allocated to the message by the SMSC when originally
         * submitted.
         * 
         * The option is a: {@code String or List<String>} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppId}.
         */
        public String smppId() {
            return "SmppId";
        }

        /**
         * The message date.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppMessageState}.
         */
        public String smppMessageState() {
            return "SmppMessageState";
        }

        /**
         * Identifies the type of an incoming message: AlertNotification: an
         * SMSC alert notification, DataSm: an SMSC data short message,
         * DeliveryReceipt: an SMSC delivery receipt, DeliverSm: an SMSC deliver
         * short message.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppMessageType}.
         */
        public String smppMessageType() {
            return "SmppMessageType";
        }

        /**
         * only for SubmitSm and SubmitMulti Allows the originating SME to
         * assign a priority level to the short message. Use the URI option
         * priorityFlag settings above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppPriorityFlag}.
         */
        public String smppPriorityFlag() {
            return "SmppPriorityFlag";
        }

        /**
         * The protocol id.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppProtocolId}.
         */
        public String smppProtocolId() {
            return "SmppProtocolId";
        }

        /**
         * Producer: only for SubmitSm, ReplaceSm, SubmitMulti and DataSm Is
         * used to request an SMSC delivery receipt and/or SME originated
         * acknowledgements. Use the URI option registeredDelivery settings
         * above. Consumer: only for DataSm Is used to request an delivery
         * receipt and/or SME originated acknowledgements. Same values as in
         * Producer header list above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppRegisteredDelivery}.
         */
        public String smppRegisteredDelivery() {
            return "SmppRegisteredDelivery";
        }

        /**
         * only for SubmitSm, SubmitMulti Is used to request the SMSC delivery
         * receipt only on the last segment of multi-segment (long) messages.
         * Use the URI option singleDLR settings above.
         * 
         * The option is a: {@code Boolean} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppSingleDLR}.
         */
        public String smppSingleDLR() {
            return "SmppSingleDLR";
        }

        /**
         * only for SubmitSm and SubmitMulti The replace if present flag
         * parameter is used to request the SMSC to replace a previously
         * submitted message, that is still pending delivery. The SMSC will
         * replace an existing message provided that the source address,
         * destination address and service type match the same fields in the new
         * message. The following values are defined: 0, Don't replace and 1,
         * Replace.
         * 
         * The option is a: {@code Boolean} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppReplaceIfPresentFlag}.
         */
        public String smppReplaceIfPresentFlag() {
            return "SmppReplaceIfPresentFlag";
        }

        /**
         * Producer: only for SubmitSm, SubmitMulti and ReplaceSm This parameter
         * specifies the scheduled time at which the message delivery should be
         * first attempted. It defines either the absolute date and time or
         * relative time from the current SMSC time at which delivery of this
         * message will be attempted by the SMSC. It can be specified in either
         * absolute time format or relative time format. The encoding of a time
         * format is specified in chapter 7.1.1. in the smpp specification v3.4.
         * Consumer: only for DeliverSm: This parameter specifies the scheduled
         * time at which the message delivery should be first attempted. It
         * defines either the absolute date and time or relative time from the
         * current SMSC time at which delivery of this message will be attempted
         * by the SMSC. It can be specified in either absolute time format or
         * relative time format. The encoding of a time format is specified in
         * Section 7.1.1. in the smpp specification v3.4.
         * 
         * The option is a: {@code Date} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppScheduleDeliveryTime}.
         */
        public String smppScheduleDeliveryTime() {
            return "SmppScheduleDeliveryTime";
        }

        /**
         * only for SubmitSm and SubmitMultiSm The total number of messages
         * which has been sent.
         * 
         * The option is a: {@code Integer} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppSentMessageCount}.
         */
        public String smppSentMessageCount() {
            return "SmppSentMessageCount";
        }

        /**
         * only for AlertNotification, DeliverSm and DataSm A sequence number
         * allows a response PDU to be correlated with a request PDU. The
         * associated SMPP response PDU must preserve this field.
         * 
         * The option is a: {@code int} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppSequenceNumber}.
         */
        public String smppSequenceNumber() {
            return "SmppSequenceNumber";
        }

        /**
         * Producer: The service type parameter can be used to indicate the SMS
         * Application service associated with the message. Use the URI option
         * serviceType settings above. Consumer: only for DeliverSm and DataSm
         * The service type parameter indicates the SMS Application service
         * associated with the message.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppServiceType}.
         */
        public String smppServiceType() {
            return "SmppServiceType";
        }

        /**
         * Producer: Defines the address of SME (Short Message Entity) which
         * originated this message. Consumer: Only for AlertNotification,
         * DeliverSm and DataSm Defines the address of SME (Short Message
         * Entity) which originated this message.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppSourceAddr}.
         */
        public String smppSourceAddr() {
            return "SmppSourceAddr";
        }

        /**
         * Producer: Defines the numeric plan indicator (NPI) to be used in the
         * SME originator address parameters. Use the URI option sourceAddrNpi
         * values defined above. Consumer: only for AlertNotification and DataSm
         * Defines the numeric plan indicator (NPI) to be used in the SME
         * originator address parameters. Use the URI option sourceAddrNpi
         * values defined above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppSourceAddrNpi}.
         */
        public String smppSourceAddrNpi() {
            return "SmppSourceAddrNpi";
        }

        /**
         * Producer: Defines the type of number (TON) to be used in the SME
         * originator address parameters. Use the sourceAddrTon URI option
         * values defined above. Consumer: only for AlertNotification and DataSm
         * Defines the type of number (TON) to be used in the SME originator
         * address parameters. Use the sourceAddrTon URI option values defined
         * above.
         * 
         * The option is a: {@code Byte} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppSourceAddrTon}.
         */
        public String smppSourceAddrTon() {
            return "SmppSourceAddrTon";
        }

        /**
         * only for smsc DeliveryReceipt Number of short messages originally
         * submitted. This is only relevant when the original message was
         * submitted to a distribution list.The value is padded with leading
         * zeros if necessary.
         * 
         * The option is a: {@code Integer} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppSubmitted}.
         */
        public String smppSubmitted() {
            return "SmppSubmitted";
        }

        /**
         * only for smsc DeliveryReceipt The time and date at which the short
         * message was submitted. In the case of a message which has been
         * replaced, this is the date that the original message was replaced.
         * The format is as follows: YYMMDDhhmm.
         * 
         * The option is a: {@code Date} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppSubmitDate}.
         */
        public String smppSubmitDate() {
            return "SmppSubmitDate";
        }

        /**
         * The system id.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppSystemId}.
         */
        public String smppSystemId() {
            return "SmppSystemId";
        }

        /**
         * The password.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppPassword}.
         */
        public String smppPassword() {
            return "SmppPassword";
        }

        /**
         * Producer: only for SubmitSm, SubmitMulti and ReplaceSm The validity
         * period parameter indicates the SMSC expiration time, after which the
         * message should be discarded if not delivered to the destination. If
         * it's provided as Date, it's interpreted as absolute time or relative
         * time format if you provide it as String as specified in chapter 7.1.1
         * in the smpp specification v3.4. Consumer: only for DeliverSm The
         * validity period parameter indicates the SMSC expiration time, after
         * which the message should be discarded if not delivered to the
         * destination. It can be defined in absolute time format or relative
         * time format. The encoding of absolute and relative time format is
         * specified in Section 7.1.1 in the smpp specification v3.4.
         * 
         * The option is a: {@code String or Date} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppValidityPeriod}.
         */
        public String smppValidityPeriod() {
            return "SmppValidityPeriod";
        }

        /**
         * The optional parameters by name. Deprecation note: Use
         * CamelSmppOptionalParameter instead.
         * 
         * The option is a: {@code Map<String, Object>} type.
         * 
         * Group: consumer
         * 
         * @return the name of the header {@code SmppOptionalParameters}.
         */
        public String smppOptionalParameters() {
            return "SmppOptionalParameters";
        }

        /**
         * Producer: only for SubmitSm, SubmitMulti and DataSm The optional
         * parameter which are send to the SMSC. The value is converted in the
         * following way: String -
         * org.jsmpp.bean.OptionalParameter.COctetString, byte -
         * org.jsmpp.bean.OptionalParameter.OctetString, Byte -
         * org.jsmpp.bean.OptionalParameter.Byte, Integer -
         * org.jsmpp.bean.OptionalParameter.Int, Short -
         * org.jsmpp.bean.OptionalParameter.Short, null -
         * org.jsmpp.bean.OptionalParameter.Null Consumer: only for DeliverSm
         * The optional parameters send back by the SMSC. The key is the Short
         * code for the optional parameter. The value is converted in the
         * following way: org.jsmpp.bean.OptionalParameter.COctetString -
         * String, org.jsmpp.bean.OptionalParameter.OctetString - byte,
         * org.jsmpp.bean.OptionalParameter.Byte - Byte,
         * org.jsmpp.bean.OptionalParameter.Int - Integer,
         * org.jsmpp.bean.OptionalParameter.Short - Short,
         * org.jsmpp.bean.OptionalParameter.Null - null.
         * 
         * The option is a: {@code Map<Short, Object>} type.
         * 
         * Group: common
         * 
         * @return the name of the header {@code SmppOptionalParameter}.
         */
        public String smppOptionalParameter() {
            return "SmppOptionalParameter";
        }

        /**
         * only for SubmitSm, SubmitMulti and DataSm. Specifies the policy for
         * message splitting for this exchange. Possible values are described in
         * the endpoint configuration parameter _splittingPolicy_.
         * 
         * The option is a: {@code String} type.
         * 
         * Group: producer
         * 
         * @return the name of the header {@code SmppSplittingPolicy}.
         */
        public String smppSplittingPolicy() {
            return "SmppSplittingPolicy";
        }
    }
    static SmppEndpointBuilder endpointBuilder(String componentName, String path) {
        class SmppEndpointBuilderImpl extends AbstractEndpointBuilder implements SmppEndpointBuilder, AdvancedSmppEndpointBuilder {
            public SmppEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new SmppEndpointBuilderImpl(path);
    }
}