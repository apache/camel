/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.component.dsl;

import javax.annotation.processing.Generated;
import org.apache.camel.Component;
import org.apache.camel.builder.component.AbstractComponentBuilder;
import org.apache.camel.builder.component.ComponentBuilder;
import org.apache.camel.component.torchserve.TorchServeComponent;

/**
 * Provide access to PyTorch TorchServe servers to run inference with PyTorch
 * models remotely
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.ComponentDslMojo")
public interface TorchserveComponentBuilderFactory {

    /**
     * TorchServe (camel-torchserve)
     * Provide access to PyTorch TorchServe servers to run inference with
     * PyTorch models remotely
     * 
     * Category: ai
     * Since: 4.9
     * Maven coordinates: org.apache.camel:camel-torchserve
     * 
     * @return the dsl builder
     */
    static TorchserveComponentBuilder torchserve() {
        return new TorchserveComponentBuilderImpl();
    }

    /**
     * Builder for the TorchServe component.
     */
    interface TorchserveComponentBuilder extends ComponentBuilder<TorchServeComponent> {
    
        /**
         * The configuration.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.torchserve.TorchServeConfiguration&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param configuration the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder configuration(org.apache.camel.component.torchserve.TorchServeConfiguration configuration) {
            doSetProperty("configuration", configuration);
            return this;
        }
    
        /**
         * The name of model.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param modelName the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder modelName(java.lang.String modelName) {
            doSetProperty("modelName", modelName);
            return this;
        }
    
        /**
         * The version of model.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param modelVersion the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder modelVersion(java.lang.String modelVersion) {
            doSetProperty("modelVersion", modelVersion);
            return this;
        }
    
        
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    
        
        /**
         * Whether autowiring is enabled. This is used for automatic autowiring
         * options (the option must be marked as autowired) by looking up in the
         * registry to find if there is a single instance of matching type,
         * which then gets configured on the component. This can be used for
         * automatic configuring JDBC data sources, JMS connection factories,
         * AWS Clients, etc.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: advanced
         * 
         * @param autowiredEnabled the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder autowiredEnabled(boolean autowiredEnabled) {
            doSetProperty("autowiredEnabled", autowiredEnabled);
            return this;
        }
    
        
        /**
         * Used for enabling or disabling all consumer based health checks from
         * this component.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: health
         * 
         * @param healthCheckConsumerEnabled the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder healthCheckConsumerEnabled(boolean healthCheckConsumerEnabled) {
            doSetProperty("healthCheckConsumerEnabled", healthCheckConsumerEnabled);
            return this;
        }
    
        
        /**
         * Used for enabling or disabling all producer based health checks from
         * this component. Notice: Camel has by default disabled all producer
         * based health-checks. You can turn on producer checks globally by
         * setting camel.health.producersEnabled=true.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: health
         * 
         * @param healthCheckProducerEnabled the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder healthCheckProducerEnabled(boolean healthCheckProducerEnabled) {
            doSetProperty("healthCheckProducerEnabled", healthCheckProducerEnabled);
            return this;
        }
    
        /**
         * The address of the inference API endpoint.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: inference
         * 
         * @param inferenceAddress the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder inferenceAddress(java.lang.String inferenceAddress) {
            doSetProperty("inferenceAddress", inferenceAddress);
            return this;
        }
    
        
        /**
         * The port of the inference API endpoint.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 8080
         * Group: inference
         * 
         * @param inferencePort the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder inferencePort(int inferencePort) {
            doSetProperty("inferencePort", inferencePort);
            return this;
        }
    
        
        /**
         * The maximum number of items to return for the list operation. When
         * this value is present, TorchServe does not return more than the
         * specified number of items, but it might return fewer. This value is
         * optional. If you include a value, it must be between 1 and 1000,
         * inclusive. If you do not include a value, it defaults to 100.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 100
         * Group: management
         * 
         * @param listLimit the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder listLimit(int listLimit) {
            doSetProperty("listLimit", listLimit);
            return this;
        }
    
        /**
         * The token to retrieve the next set of results for the list operation.
         * TorchServe provides the token when the response from a previous call
         * has more results than the maximum page size.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: management
         * 
         * @param listNextPageToken the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder listNextPageToken(java.lang.String listNextPageToken) {
            doSetProperty("listNextPageToken", listNextPageToken);
            return this;
        }
    
        /**
         * The address of the management API endpoint.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: management
         * 
         * @param managementAddress the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder managementAddress(java.lang.String managementAddress) {
            doSetProperty("managementAddress", managementAddress);
            return this;
        }
    
        
        /**
         * The port of the management API endpoint.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 8081
         * Group: management
         * 
         * @param managementPort the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder managementPort(int managementPort) {
            doSetProperty("managementPort", managementPort);
            return this;
        }
    
        /**
         * Additional options for the register operation.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.torchserve.client.model.RegisterOptions&lt;/code&gt; type.
         * 
         * Group: management
         * 
         * @param registerOptions the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder registerOptions(org.apache.camel.component.torchserve.client.model.RegisterOptions registerOptions) {
            doSetProperty("registerOptions", registerOptions);
            return this;
        }
    
        /**
         * Additional options for the scale-worker operation.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions&lt;/code&gt; type.
         * 
         * Group: management
         * 
         * @param scaleWorkerOptions the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder scaleWorkerOptions(org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions scaleWorkerOptions) {
            doSetProperty("scaleWorkerOptions", scaleWorkerOptions);
            return this;
        }
    
        /**
         * Additional options for the unregister operation.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.torchserve.client.model.UnregisterOptions&lt;/code&gt; type.
         * 
         * Group: management
         * 
         * @param unregisterOptions the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder unregisterOptions(org.apache.camel.component.torchserve.client.model.UnregisterOptions unregisterOptions) {
            doSetProperty("unregisterOptions", unregisterOptions);
            return this;
        }
    
        /**
         * Model archive download url, support local file or HTTP(s) protocol.
         * For S3, consider using pre-signed url.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: management
         * 
         * @param url the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder url(java.lang.String url) {
            doSetProperty("url", url);
            return this;
        }
    
        /**
         * The address of the metrics API endpoint.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: metrics
         * 
         * @param metricsAddress the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder metricsAddress(java.lang.String metricsAddress) {
            doSetProperty("metricsAddress", metricsAddress);
            return this;
        }
    
        /**
         * Names of metrics to filter.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: metrics
         * 
         * @param metricsName the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder metricsName(java.lang.String metricsName) {
            doSetProperty("metricsName", metricsName);
            return this;
        }
    
        
        /**
         * The port of the metrics API endpoint.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Default: 8082
         * Group: metrics
         * 
         * @param metricsPort the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder metricsPort(int metricsPort) {
            doSetProperty("metricsPort", metricsPort);
            return this;
        }
    
        /**
         * The token authorization key for accessing the inference API.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: security
         * 
         * @param inferenceKey the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder inferenceKey(java.lang.String inferenceKey) {
            doSetProperty("inferenceKey", inferenceKey);
            return this;
        }
    
        /**
         * The token authorization key for accessing the management API.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: security
         * 
         * @param managementKey the value to set
         * @return the dsl builder
         */
        default TorchserveComponentBuilder managementKey(java.lang.String managementKey) {
            doSetProperty("managementKey", managementKey);
            return this;
        }
    }

    class TorchserveComponentBuilderImpl
            extends AbstractComponentBuilder<TorchServeComponent>
            implements TorchserveComponentBuilder {
        @Override
        protected TorchServeComponent buildConcreteComponent() {
            return new TorchServeComponent();
        }
        private org.apache.camel.component.torchserve.TorchServeConfiguration getOrCreateConfiguration(TorchServeComponent component) {
            if (component.getConfiguration() == null) {
                component.setConfiguration(new org.apache.camel.component.torchserve.TorchServeConfiguration());
            }
            return component.getConfiguration();
        }
        @Override
        protected boolean setPropertyOnComponent(
                Component component,
                String name,
                Object value) {
            switch (name) {
            case "configuration": ((TorchServeComponent) component).setConfiguration((org.apache.camel.component.torchserve.TorchServeConfiguration) value); return true;
            case "modelName": getOrCreateConfiguration((TorchServeComponent) component).setModelName((java.lang.String) value); return true;
            case "modelVersion": getOrCreateConfiguration((TorchServeComponent) component).setModelVersion((java.lang.String) value); return true;
            case "lazyStartProducer": ((TorchServeComponent) component).setLazyStartProducer((boolean) value); return true;
            case "autowiredEnabled": ((TorchServeComponent) component).setAutowiredEnabled((boolean) value); return true;
            case "healthCheckConsumerEnabled": ((TorchServeComponent) component).setHealthCheckConsumerEnabled((boolean) value); return true;
            case "healthCheckProducerEnabled": ((TorchServeComponent) component).setHealthCheckProducerEnabled((boolean) value); return true;
            case "inferenceAddress": getOrCreateConfiguration((TorchServeComponent) component).setInferenceAddress((java.lang.String) value); return true;
            case "inferencePort": getOrCreateConfiguration((TorchServeComponent) component).setInferencePort((int) value); return true;
            case "listLimit": getOrCreateConfiguration((TorchServeComponent) component).setListLimit((int) value); return true;
            case "listNextPageToken": getOrCreateConfiguration((TorchServeComponent) component).setListNextPageToken((java.lang.String) value); return true;
            case "managementAddress": getOrCreateConfiguration((TorchServeComponent) component).setManagementAddress((java.lang.String) value); return true;
            case "managementPort": getOrCreateConfiguration((TorchServeComponent) component).setManagementPort((int) value); return true;
            case "registerOptions": getOrCreateConfiguration((TorchServeComponent) component).setRegisterOptions((org.apache.camel.component.torchserve.client.model.RegisterOptions) value); return true;
            case "scaleWorkerOptions": getOrCreateConfiguration((TorchServeComponent) component).setScaleWorkerOptions((org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions) value); return true;
            case "unregisterOptions": getOrCreateConfiguration((TorchServeComponent) component).setUnregisterOptions((org.apache.camel.component.torchserve.client.model.UnregisterOptions) value); return true;
            case "url": getOrCreateConfiguration((TorchServeComponent) component).setUrl((java.lang.String) value); return true;
            case "metricsAddress": getOrCreateConfiguration((TorchServeComponent) component).setMetricsAddress((java.lang.String) value); return true;
            case "metricsName": getOrCreateConfiguration((TorchServeComponent) component).setMetricsName((java.lang.String) value); return true;
            case "metricsPort": getOrCreateConfiguration((TorchServeComponent) component).setMetricsPort((int) value); return true;
            case "inferenceKey": getOrCreateConfiguration((TorchServeComponent) component).setInferenceKey((java.lang.String) value); return true;
            case "managementKey": getOrCreateConfiguration((TorchServeComponent) component).setManagementKey((java.lang.String) value); return true;
            default: return false;
            }
        }
    }
}