/* Generated by camel build tools - do NOT edit this file! */
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.component.dsl;

import javax.annotation.processing.Generated;
import org.apache.camel.Component;
import org.apache.camel.builder.component.AbstractComponentBuilder;
import org.apache.camel.builder.component.ComponentBuilder;
import org.apache.camel.component.pinecone.PineconeVectorDbComponent;

/**
 * Perform operations on the Pinecone Vector Database.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.ComponentDslMojo")
public interface PineconeComponentBuilderFactory {

    /**
     * Pinecone (camel-pinecone)
     * Perform operations on the Pinecone Vector Database.
     * 
     * Category: database,ai
     * Since: 4.6
     * Maven coordinates: org.apache.camel:camel-pinecone
     * 
     * @return the dsl builder
     */
    static PineconeComponentBuilder pinecone() {
        return new PineconeComponentBuilderImpl();
    }

    /**
     * Builder for the Pinecone component.
     */
    interface PineconeComponentBuilder extends ComponentBuilder<PineconeVectorDbComponent> {
    
        /**
         * Sets the cloud type to use (aws/gcp/azure).
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param cloud the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder cloud(java.lang.String cloud) {
            doSetProperty("cloud", cloud);
            return this;
        }
    
        /**
         * Sets the cloud region.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param cloudRegion the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder cloudRegion(java.lang.String cloudRegion) {
            doSetProperty("cloudRegion", cloudRegion);
            return this;
        }
    
        
        /**
         * Sets the Collection Dimension to use (1-1536).
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Default: 1536
         * Group: producer
         * 
         * @param collectionDimension the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder collectionDimension(java.lang.Integer collectionDimension) {
            doSetProperty("collectionDimension", collectionDimension);
            return this;
        }
    
        /**
         * Sets the Collection Similarity Metric to use
         * (cosine/euclidean/dotproduct).
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param collectionSimilarityMetric the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder collectionSimilarityMetric(java.lang.String collectionSimilarityMetric) {
            doSetProperty("collectionSimilarityMetric", collectionSimilarityMetric);
            return this;
        }
    
        /**
         * The configuration;.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.pinecone.PineconeVectorDbConfiguration&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param configuration the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder configuration(org.apache.camel.component.pinecone.PineconeVectorDbConfiguration configuration) {
            doSetProperty("configuration", configuration);
            return this;
        }
    
        /**
         * Sets a custom host URL to connect to.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param host the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder host(java.lang.String host) {
            doSetProperty("host", host);
            return this;
        }
    
        /**
         * Sets the index name to use.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param indexName the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder indexName(java.lang.String indexName) {
            doSetProperty("indexName", indexName);
            return this;
        }
    
        
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder lazyStartProducer(boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    
        /**
         * Set the proxy host.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param proxyHost the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder proxyHost(java.lang.String proxyHost) {
            doSetProperty("proxyHost", proxyHost);
            return this;
        }
    
        /**
         * Set the proxy port.
         * 
         * The option is a: &lt;code&gt;java.lang.Integer&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param proxyPort the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder proxyPort(java.lang.Integer proxyPort) {
            doSetProperty("proxyPort", proxyPort);
            return this;
        }
    
        
        /**
         * Whether the client uses Transport Layer Security (TLS) to secure
         * communications.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: producer
         * 
         * @param tls the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder tls(boolean tls) {
            doSetProperty("tls", tls);
            return this;
        }
    
        /**
         * Sets the API key to use for authentication.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: producer
         * 
         * @param token the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder token(java.lang.String token) {
            doSetProperty("token", token);
            return this;
        }
    
        
        /**
         * Whether autowiring is enabled. This is used for automatic autowiring
         * options (the option must be marked as autowired) by looking up in the
         * registry to find if there is a single instance of matching type,
         * which then gets configured on the component. This can be used for
         * automatic configuring JDBC data sources, JMS connection factories,
         * AWS Clients, etc.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: advanced
         * 
         * @param autowiredEnabled the value to set
         * @return the dsl builder
         */
        default PineconeComponentBuilder autowiredEnabled(boolean autowiredEnabled) {
            doSetProperty("autowiredEnabled", autowiredEnabled);
            return this;
        }
    }

    class PineconeComponentBuilderImpl
            extends AbstractComponentBuilder<PineconeVectorDbComponent>
            implements PineconeComponentBuilder {
        @Override
        protected PineconeVectorDbComponent buildConcreteComponent() {
            return new PineconeVectorDbComponent();
        }
        private org.apache.camel.component.pinecone.PineconeVectorDbConfiguration getOrCreateConfiguration(PineconeVectorDbComponent component) {
            if (component.getConfiguration() == null) {
                component.setConfiguration(new org.apache.camel.component.pinecone.PineconeVectorDbConfiguration());
            }
            return component.getConfiguration();
        }
        @Override
        protected boolean setPropertyOnComponent(
                Component component,
                String name,
                Object value) {
            switch (name) {
            case "cloud": getOrCreateConfiguration((PineconeVectorDbComponent) component).setCloud((java.lang.String) value); return true;
            case "cloudRegion": getOrCreateConfiguration((PineconeVectorDbComponent) component).setCloudRegion((java.lang.String) value); return true;
            case "collectionDimension": getOrCreateConfiguration((PineconeVectorDbComponent) component).setCollectionDimension((java.lang.Integer) value); return true;
            case "collectionSimilarityMetric": getOrCreateConfiguration((PineconeVectorDbComponent) component).setCollectionSimilarityMetric((java.lang.String) value); return true;
            case "configuration": ((PineconeVectorDbComponent) component).setConfiguration((org.apache.camel.component.pinecone.PineconeVectorDbConfiguration) value); return true;
            case "host": getOrCreateConfiguration((PineconeVectorDbComponent) component).setHost((java.lang.String) value); return true;
            case "indexName": getOrCreateConfiguration((PineconeVectorDbComponent) component).setIndexName((java.lang.String) value); return true;
            case "lazyStartProducer": ((PineconeVectorDbComponent) component).setLazyStartProducer((boolean) value); return true;
            case "proxyHost": getOrCreateConfiguration((PineconeVectorDbComponent) component).setProxyHost((java.lang.String) value); return true;
            case "proxyPort": getOrCreateConfiguration((PineconeVectorDbComponent) component).setProxyPort((java.lang.Integer) value); return true;
            case "tls": getOrCreateConfiguration((PineconeVectorDbComponent) component).setTls((boolean) value); return true;
            case "token": getOrCreateConfiguration((PineconeVectorDbComponent) component).setToken((java.lang.String) value); return true;
            case "autowiredEnabled": ((PineconeVectorDbComponent) component).setAutowiredEnabled((boolean) value); return true;
            default: return false;
            }
        }
    }
}