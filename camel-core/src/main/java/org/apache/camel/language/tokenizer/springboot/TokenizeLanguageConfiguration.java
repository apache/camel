/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.language.tokenizer.springboot;

import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * For expressions and predicates using a body or header tokenizer.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@ConfigurationProperties(prefix = "camel.language.tokenize")
public class TokenizeLanguageConfiguration {

    /**
     * The (start) token to use as tokenizer for example \n for a new line
     * token. You can use simple language as the token to support dynamic
     * tokens.
     */
    private String token;
    /**
     * The end token to use as tokenizer if using start/end token pairs. You can
     * use simple language as the token to support dynamic tokens.
     */
    private String endToken;
    /**
     * To inherit namespaces from a root/parent tag name when using XML You can
     * use simple language as the tag name to support dynamic names.
     */
    private String inheritNamespaceTagName;
    /**
     * Name of header to tokenize instead of using the message body.
     */
    private String headerName;
    /**
     * If the token is a regular expression pattern. The default value is false
     */
    private Boolean regex = false;
    /**
     * Whether the input is XML messages. This option must be set to true if
     * working with XML payloads.
     */
    private Boolean xml = false;
    /**
     * Whether to include the tokens in the parts when using pairs The default
     * value is false
     */
    private Boolean includeTokens = false;
    /**
     * To group N parts together for example to split big files into chunks of
     * 1000 lines.
     */
    private Integer group;
    /**
     * To skip the very first element
     */
    private Boolean skipFirst = false;
    /**
     * Whether to trim the value to remove leading and trailing whitespaces and
     * line breaks
     */
    private Boolean trim = true;

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public String getEndToken() {
        return endToken;
    }

    public void setEndToken(String endToken) {
        this.endToken = endToken;
    }

    public String getInheritNamespaceTagName() {
        return inheritNamespaceTagName;
    }

    public void setInheritNamespaceTagName(String inheritNamespaceTagName) {
        this.inheritNamespaceTagName = inheritNamespaceTagName;
    }

    public String getHeaderName() {
        return headerName;
    }

    public void setHeaderName(String headerName) {
        this.headerName = headerName;
    }

    public Boolean getRegex() {
        return regex;
    }

    public void setRegex(Boolean regex) {
        this.regex = regex;
    }

    public Boolean getXml() {
        return xml;
    }

    public void setXml(Boolean xml) {
        this.xml = xml;
    }

    public Boolean getIncludeTokens() {
        return includeTokens;
    }

    public void setIncludeTokens(Boolean includeTokens) {
        this.includeTokens = includeTokens;
    }

    public Integer getGroup() {
        return group;
    }

    public void setGroup(Integer group) {
        this.group = group;
    }

    public Boolean getSkipFirst() {
        return skipFirst;
    }

    public void setSkipFirst(Boolean skipFirst) {
        this.skipFirst = skipFirst;
    }

    public Boolean getTrim() {
        return trim;
    }

    public void setTrim(Boolean trim) {
        this.trim = trim;
    }
}