<?xml version="1.0" encoding="UTF-8"?>
<xs:schema 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  elementFormDefault="qualified" 
  attributeFormDefault="unqualified"
  targetNamespace="http://activemq.apache.org/camel/schema/camel-1.0.xsd" 
  xmlns:c="http://activemq.apache.org/camel/schema/camel-1.0.xsd"
  xmlns:s="http://www.springframework.org/schema/beans"
  >
 
  <xs:import namespace="http://www.springframework.org/schema/beans"/>
  <xs:element name="routeBuilder">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="s:identifiedType">
		  <xs:sequence>
		    <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:route"/>
		  </xs:sequence>
	    </xs:extension>
  	  </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="route">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="c:from"/>
        <xs:choice>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:filter"/>
          <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:intercept"/>
        </xs:choice>
        <xs:choice minOccurs="0">
          <xs:element ref="c:choice"/>
          <xs:element ref="c:process"/>
          <xs:element ref="c:recipientList"/>
        </xs:choice>
        <xs:element minOccurs="0" ref="c:splitter"/>
        <xs:element minOccurs="0" ref="c:to"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="from">
    <xs:complexType>
      <xs:attribute name="endpoint" type="xs:NMTOKEN"/>
      <xs:attribute name="endpoints" type="xs:NMTOKEN"/>
      <xs:attribute name="uri" type="xs:anyURI"/>
      <xs:attribute name="uris" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="filter" type="c:predicate"/>
  <xs:element name="intercept">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="c:interceptor"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="interceptor">
    <xs:complexType>
      <xs:attribute name="ref" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="choice">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="c:when"/>
        <xs:element ref="c:otherwise"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="when">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="c:predicate">
          <xs:sequence>
            <xs:element ref="c:to"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="otherwise">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="c:to"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="process">
    <xs:complexType>
      <xs:attribute name="ref" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="recipientList" type="c:recipients"/>
  <xs:element name="splitter" type="c:recipients"/>

  <xs:element name="idempotentConsumer">
    <xs:complexType>
      <!--<xs:attribute name="messageIdRepositoryRef" use="required"/>-->
    </xs:complexType>
  </xs:element>

  <xs:complexType name="predicate">
    <xs:sequence>
      <xs:element ref="c:predicate"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="predicate">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref="c:body"/>
          <xs:element ref="c:header"/>
        </xs:choice>
        <xs:choice>
          <xs:element ref="c:isEqualTo"/>
          <xs:element ref="c:isNotEqualTo"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="isEqualTo">
    <xs:complexType>
      <xs:attribute name="value" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="isNotEqualTo">
    <xs:complexType>
      <xs:attribute name="value" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="to">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="c:uri"/>
      </xs:sequence>
      <xs:attribute name="endpoint" type="xs:NMTOKEN"/>
      <xs:attribute name="endpoints" type="xs:NMTOKEN"/>
      <xs:attribute name="uri" type="xs:anyURI"/>
      <xs:attribute name="uris" type="xs:anyURI"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="uri" type="xs:anyURI"/>
  <xs:complexType name="recipients">
    <xs:sequence>
      <xs:element ref="c:recipients"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="recipients">
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs="0">
          <xs:element ref="c:header"/>
          <xs:element ref="c:bodyAs"/>
        </xs:choice>
        <xs:choice minOccurs="0">
          <xs:element ref="c:body"/>
          <xs:element ref="c:tokenize"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="bodyAs">
    <xs:complexType>
      <xs:attribute name="class" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tokenize">
    <xs:complexType>
      <xs:attribute name="token" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="header">
    <xs:complexType>
      <xs:attribute name="name" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="body">
    <xs:complexType/>
  </xs:element>
</xs:schema>
