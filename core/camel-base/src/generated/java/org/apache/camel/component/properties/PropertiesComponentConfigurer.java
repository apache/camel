/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.properties;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.properties.PropertiesComponent;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class PropertiesComponentConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.properties.PropertiesComponent target = (org.apache.camel.component.properties.PropertiesComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autodiscoverpropertiessources":
        case "AutoDiscoverPropertiesSources": target.setAutoDiscoverPropertiesSources(property(camelContext, boolean.class, value)); return true;
        case "camelcontext":
        case "CamelContext": target.setCamelContext(property(camelContext, org.apache.camel.CamelContext.class, value)); return true;
        case "defaultfallbackenabled":
        case "DefaultFallbackEnabled": target.setDefaultFallbackEnabled(property(camelContext, boolean.class, value)); return true;
        case "encoding":
        case "Encoding": target.setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "environmentvariablemode":
        case "EnvironmentVariableMode": target.setEnvironmentVariableMode(property(camelContext, int.class, value)); return true;
        case "ignoremissinglocation":
        case "IgnoreMissingLocation": target.setIgnoreMissingLocation(property(camelContext, boolean.class, value)); return true;
        case "initialproperties":
        case "InitialProperties": target.setInitialProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "localproperties":
        case "LocalProperties": target.setLocalProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "location":
        case "Location": target.setLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "locations":
        case "Locations": target.setLocations(property(camelContext, java.util.List.class, value)); return true;
        case "nestedplaceholder":
        case "NestedPlaceholder": target.setNestedPlaceholder(property(camelContext, boolean.class, value)); return true;
        case "overrideproperties":
        case "OverrideProperties": target.setOverrideProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "propertiesfunctionresolver":
        case "PropertiesFunctionResolver": target.setPropertiesFunctionResolver(property(camelContext, org.apache.camel.component.properties.PropertiesFunctionResolver.class, value)); return true;
        case "propertiesparser":
        case "PropertiesParser": target.setPropertiesParser(property(camelContext, org.apache.camel.component.properties.PropertiesParser.class, value)); return true;
        case "systempropertiesmode":
        case "SystemPropertiesMode": target.setSystemPropertiesMode(property(camelContext, int.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autodiscoverpropertiessources":
        case "AutoDiscoverPropertiesSources": return boolean.class;
        case "camelcontext":
        case "CamelContext": return org.apache.camel.CamelContext.class;
        case "defaultfallbackenabled":
        case "DefaultFallbackEnabled": return boolean.class;
        case "encoding":
        case "Encoding": return java.lang.String.class;
        case "environmentvariablemode":
        case "EnvironmentVariableMode": return int.class;
        case "ignoremissinglocation":
        case "IgnoreMissingLocation": return boolean.class;
        case "initialproperties":
        case "InitialProperties": return java.util.Properties.class;
        case "localproperties":
        case "LocalProperties": return java.util.Properties.class;
        case "location":
        case "Location": return java.lang.String.class;
        case "locations":
        case "Locations": return java.util.List.class;
        case "nestedplaceholder":
        case "NestedPlaceholder": return boolean.class;
        case "overrideproperties":
        case "OverrideProperties": return java.util.Properties.class;
        case "propertiesfunctionresolver":
        case "PropertiesFunctionResolver": return org.apache.camel.component.properties.PropertiesFunctionResolver.class;
        case "propertiesparser":
        case "PropertiesParser": return org.apache.camel.component.properties.PropertiesParser.class;
        case "systempropertiesmode":
        case "SystemPropertiesMode": return int.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.properties.PropertiesComponent target = (org.apache.camel.component.properties.PropertiesComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autodiscoverpropertiessources":
        case "AutoDiscoverPropertiesSources": return target.isAutoDiscoverPropertiesSources();
        case "camelcontext":
        case "CamelContext": return target.getCamelContext();
        case "defaultfallbackenabled":
        case "DefaultFallbackEnabled": return target.isDefaultFallbackEnabled();
        case "encoding":
        case "Encoding": return target.getEncoding();
        case "environmentvariablemode":
        case "EnvironmentVariableMode": return target.getEnvironmentVariableMode();
        case "ignoremissinglocation":
        case "IgnoreMissingLocation": return target.isIgnoreMissingLocation();
        case "initialproperties":
        case "InitialProperties": return target.getInitialProperties();
        case "localproperties":
        case "LocalProperties": return target.getLocalProperties();
        case "location":
        case "Location": return target.getLocation();
        case "locations":
        case "Locations": return target.getLocations();
        case "nestedplaceholder":
        case "NestedPlaceholder": return target.isNestedPlaceholder();
        case "overrideproperties":
        case "OverrideProperties": return target.getOverrideProperties();
        case "propertiesfunctionresolver":
        case "PropertiesFunctionResolver": return target.getPropertiesFunctionResolver();
        case "propertiesparser":
        case "PropertiesParser": return target.getPropertiesParser();
        case "systempropertiesmode":
        case "SystemPropertiesMode": return target.getSystemPropertiesMode();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "locations":
        case "Locations": return org.apache.camel.component.properties.PropertiesLocation.class;
        default: return null;
        }
    }
}

