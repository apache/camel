/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.properties;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.properties.PropertiesComponent;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class PropertiesComponentConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.properties.PropertiesComponent target = (org.apache.camel.component.properties.PropertiesComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autodiscoverpropertiessources":
        case "autoDiscoverPropertiesSources": target.setAutoDiscoverPropertiesSources(property(camelContext, boolean.class, value)); return true;
        case "camelcontext":
        case "camelContext": target.setCamelContext(property(camelContext, org.apache.camel.CamelContext.class, value)); return true;
        case "defaultfallbackenabled":
        case "defaultFallbackEnabled": target.setDefaultFallbackEnabled(property(camelContext, boolean.class, value)); return true;
        case "encoding": target.setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "environmentvariablemode":
        case "environmentVariableMode": target.setEnvironmentVariableMode(property(camelContext, int.class, value)); return true;
        case "ignoremissinglocation":
        case "ignoreMissingLocation": target.setIgnoreMissingLocation(property(camelContext, boolean.class, value)); return true;
        case "ignoremissingproperty":
        case "ignoreMissingProperty": target.setIgnoreMissingProperty(property(camelContext, boolean.class, value)); return true;
        case "initialproperties":
        case "initialProperties": target.setInitialProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "localproperties":
        case "localProperties": target.setLocalProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "location": target.setLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "locations": target.setLocations(property(camelContext, java.util.List.class, value)); return true;
        case "nestedplaceholder":
        case "nestedPlaceholder": target.setNestedPlaceholder(property(camelContext, boolean.class, value)); return true;
        case "overrideproperties":
        case "overrideProperties": target.setOverrideProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "propertiesfunctionresolver":
        case "propertiesFunctionResolver": target.setPropertiesFunctionResolver(property(camelContext, org.apache.camel.component.properties.PropertiesFunctionResolver.class, value)); return true;
        case "propertiesparser":
        case "propertiesParser": target.setPropertiesParser(property(camelContext, org.apache.camel.component.properties.PropertiesParser.class, value)); return true;
        case "systempropertiesmode":
        case "systemPropertiesMode": target.setSystemPropertiesMode(property(camelContext, int.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autodiscoverpropertiessources":
        case "autoDiscoverPropertiesSources": return boolean.class;
        case "camelcontext":
        case "camelContext": return org.apache.camel.CamelContext.class;
        case "defaultfallbackenabled":
        case "defaultFallbackEnabled": return boolean.class;
        case "encoding": return java.lang.String.class;
        case "environmentvariablemode":
        case "environmentVariableMode": return int.class;
        case "ignoremissinglocation":
        case "ignoreMissingLocation": return boolean.class;
        case "ignoremissingproperty":
        case "ignoreMissingProperty": return boolean.class;
        case "initialproperties":
        case "initialProperties": return java.util.Properties.class;
        case "localproperties":
        case "localProperties": return java.util.Properties.class;
        case "location": return java.lang.String.class;
        case "locations": return java.util.List.class;
        case "nestedplaceholder":
        case "nestedPlaceholder": return boolean.class;
        case "overrideproperties":
        case "overrideProperties": return java.util.Properties.class;
        case "propertiesfunctionresolver":
        case "propertiesFunctionResolver": return org.apache.camel.component.properties.PropertiesFunctionResolver.class;
        case "propertiesparser":
        case "propertiesParser": return org.apache.camel.component.properties.PropertiesParser.class;
        case "systempropertiesmode":
        case "systemPropertiesMode": return int.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.properties.PropertiesComponent target = (org.apache.camel.component.properties.PropertiesComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autodiscoverpropertiessources":
        case "autoDiscoverPropertiesSources": return target.isAutoDiscoverPropertiesSources();
        case "camelcontext":
        case "camelContext": return target.getCamelContext();
        case "defaultfallbackenabled":
        case "defaultFallbackEnabled": return target.isDefaultFallbackEnabled();
        case "encoding": return target.getEncoding();
        case "environmentvariablemode":
        case "environmentVariableMode": return target.getEnvironmentVariableMode();
        case "ignoremissinglocation":
        case "ignoreMissingLocation": return target.isIgnoreMissingLocation();
        case "ignoremissingproperty":
        case "ignoreMissingProperty": return target.isIgnoreMissingProperty();
        case "initialproperties":
        case "initialProperties": return target.getInitialProperties();
        case "localproperties":
        case "localProperties": return target.getLocalProperties();
        case "location": return target.getLocation();
        case "locations": return target.getLocations();
        case "nestedplaceholder":
        case "nestedPlaceholder": return target.isNestedPlaceholder();
        case "overrideproperties":
        case "overrideProperties": return target.getOverrideProperties();
        case "propertiesfunctionresolver":
        case "propertiesFunctionResolver": return target.getPropertiesFunctionResolver();
        case "propertiesparser":
        case "propertiesParser": return target.getPropertiesParser();
        case "systempropertiesmode":
        case "systemPropertiesMode": return target.getSystemPropertiesMode();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "locations": return org.apache.camel.component.properties.PropertiesLocation.class;
        default: return null;
        }
    }
}

