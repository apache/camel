/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.component.dsl;

import javax.annotation.Generated;
import org.apache.camel.builder.component.AbstractComponentBuilder;
import org.apache.camel.builder.component.ComponentBuilder;
import org.apache.camel.component.twitter.timeline.TwitterTimelineComponent;

/**
 * The Twitter Timeline component consumes twitter timeline or update the status
 * of specific user.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.ComponentDslMojo")
public interface TwitterTimelineComponentBuilderFactory {

    /**
     * Twitter Timeline (camel-twitter)
     * The Twitter Timeline component consumes twitter timeline or update the
     * status of specific user.
     * 
     * Category: api,social
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-twitter
     */
    static TwitterTimelineComponentBuilder twitterTimeline() {
        return new TwitterTimelineComponentBuilderImpl();
    }

    /**
     * Builder for the Twitter Timeline component.
     */
    interface TwitterTimelineComponentBuilder
            extends
                ComponentBuilder<TwitterTimelineComponent> {
        /**
         * The access token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default:
         * Group: security
         */
        default TwitterTimelineComponentBuilder setAccessToken(
                java.lang.String accessToken) {
            doSetProperty("accessToken", accessToken);
            return this;
        }
        /**
         * The access token secret.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default:
         * Group: security
         */
        default TwitterTimelineComponentBuilder setAccessTokenSecret(
                java.lang.String accessTokenSecret) {
            doSetProperty("accessTokenSecret", accessTokenSecret);
            return this;
        }
        /**
         * The consumer key.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default:
         * Group: security
         */
        default TwitterTimelineComponentBuilder setConsumerKey(
                java.lang.String consumerKey) {
            doSetProperty("consumerKey", consumerKey);
            return this;
        }
        /**
         * The consumer secret.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default:
         * Group: security
         */
        default TwitterTimelineComponentBuilder setConsumerSecret(
                java.lang.String consumerSecret) {
            doSetProperty("consumerSecret", consumerSecret);
            return this;
        }
        /**
         * The http proxy host which can be used for the camel-twitter.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default:
         * Group: proxy
         */
        default TwitterTimelineComponentBuilder setHttpProxyHost(
                java.lang.String httpProxyHost) {
            doSetProperty("httpProxyHost", httpProxyHost);
            return this;
        }
        /**
         * The http proxy user which can be used for the camel-twitter.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default:
         * Group: proxy
         */
        default TwitterTimelineComponentBuilder setHttpProxyUser(
                java.lang.String httpProxyUser) {
            doSetProperty("httpProxyUser", httpProxyUser);
            return this;
        }
        /**
         * The http proxy password which can be used for the camel-twitter.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default:
         * Group: proxy
         */
        default TwitterTimelineComponentBuilder setHttpProxyPassword(
                java.lang.String httpProxyPassword) {
            doSetProperty("httpProxyPassword", httpProxyPassword);
            return this;
        }
        /**
         * The http proxy port which can be used for the camel-twitter.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Default:
         * Group: proxy
         */
        default TwitterTimelineComponentBuilder setHttpProxyPort(
                int httpProxyPort) {
            doSetProperty("httpProxyPort", httpProxyPort);
            return this;
        }
        /**
         * Whether the component should use basic property binding (Camel 2.x)
         * or the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default TwitterTimelineComponentBuilder setBasicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default TwitterTimelineComponentBuilder setLazyStartProducer(
                boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default TwitterTimelineComponentBuilder setBridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
    }

    class TwitterTimelineComponentBuilderImpl
            extends
                AbstractComponentBuilder<TwitterTimelineComponent>
            implements
                TwitterTimelineComponentBuilder {
        @Override
        protected TwitterTimelineComponent buildConcreteComponent() {
            return new TwitterTimelineComponent();
        }
    }
}