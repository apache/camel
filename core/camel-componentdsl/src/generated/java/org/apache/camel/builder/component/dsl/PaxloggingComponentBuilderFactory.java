/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.component.dsl;

import javax.annotation.Generated;
import org.apache.camel.Component;
import org.apache.camel.builder.component.AbstractComponentBuilder;
import org.apache.camel.builder.component.ComponentBuilder;
import org.apache.camel.component.paxlogging.PaxLoggingComponent;

/**
 * The paxlogging component can be used in an OSGi environment to receive
 * PaxLogging events and process them.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.ComponentDslMojo")
public interface PaxloggingComponentBuilderFactory {

    /**
     * OSGi PAX Logging (camel-paxlogging)
     * The paxlogging component can be used in an OSGi environment to receive
     * PaxLogging events and process them.
     * 
     * Category: monitoring
     * Since: 2.6
     * Maven coordinates: org.apache.camel:camel-paxlogging
     */
    static PaxloggingComponentBuilder paxlogging() {
        return new PaxloggingComponentBuilderImpl();
    }

    /**
     * Builder for the OSGi PAX Logging component.
     */
    interface PaxloggingComponentBuilder
            extends
                ComponentBuilder<PaxLoggingComponent> {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default PaxloggingComponentBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * The OSGi BundleContext is automatic injected by Camel.
         * 
         * The option is a: <code>org.osgi.framework.BundleContext</code> type.
         * 
         * Group: consumer
         */
        default PaxloggingComponentBuilder bundleContext(
                org.osgi.framework.BundleContext bundleContext) {
            doSetProperty("bundleContext", bundleContext);
            return this;
        }
        /**
         * Whether the component should use basic property binding (Camel 2.x)
         * or the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default PaxloggingComponentBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
    }

    class PaxloggingComponentBuilderImpl
            extends
                AbstractComponentBuilder<PaxLoggingComponent>
            implements
                PaxloggingComponentBuilder {
        @Override
        protected PaxLoggingComponent buildConcreteComponent() {
            return new PaxLoggingComponent();
        }
        @Override
        protected boolean setPropertyOnComponent(
                Component component,
                String name,
                Object value) {
            switch (name) {
            case "bridgeErrorHandler": ((PaxLoggingComponent) component).setBridgeErrorHandler((boolean) value); return true;
            case "bundleContext": ((PaxLoggingComponent) component).setBundleContext((org.osgi.framework.BundleContext) value); return true;
            case "basicPropertyBinding": ((PaxLoggingComponent) component).setBasicPropertyBinding((boolean) value); return true;
            default: return false;
            }
        }
    }
}