/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.component.dsl;

import javax.annotation.Generated;
import org.apache.camel.Component;
import org.apache.camel.builder.component.AbstractComponentBuilder;
import org.apache.camel.builder.component.ComponentBuilder;
import org.apache.camel.component.sparkrest.SparkRestComponent;

/**
 * The spark-rest component is used for hosting REST services which has been
 * defined using Camel rest-dsl.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.ComponentDslMojo")
public interface SparkRestComponentBuilderFactory {

    /**
     * Spark Rest (camel-spark-rest)
     * The spark-rest component is used for hosting REST services which has been
     * defined using Camel rest-dsl.
     * 
     * Category: rest
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-spark-rest
     */
    static SparkRestComponentBuilder sparkRest() {
        return new SparkRestComponentBuilderImpl();
    }

    /**
     * Builder for the Spark Rest component.
     */
    interface SparkRestComponentBuilder
            extends
                ComponentBuilder<SparkRestComponent> {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default SparkRestComponentBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Determines whether or not the raw input stream from Spark
         * HttpRequest#getContent() is cached or not (Camel will read the stream
         * into a in light-weight memory based Stream caching) cache. By default
         * Camel will cache the Netty input stream to support reading it
         * multiple times to ensure Camel can retrieve all data from the stream.
         * However you can set this option to true when you for example need to
         * access the raw stream, such as streaming it directly to a file or
         * other persistent store. Mind that if you enable this option, then you
         * cannot read the Netty stream multiple times out of the box, and you
         * would need manually to reset the reader index on the Spark raw
         * stream.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default SparkRestComponentBuilder disableStreamCache(
                boolean disableStreamCache) {
            doSetProperty("disableStreamCache", disableStreamCache);
            return this;
        }
        /**
         * Set the IP address that Spark should listen on. If not called the
         * default address is '0.0.0.0'.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Default: 0.0.0.0
         * Group: consumer
         */
        default SparkRestComponentBuilder ipAddress(java.lang.String ipAddress) {
            doSetProperty("ipAddress", ipAddress);
            return this;
        }
        /**
         * If this option is enabled, then during binding from Spark to Camel
         * Message then the headers will be mapped as well (eg added as header
         * to the Camel Message as well). You can turn off this option to
         * disable this. The headers can still be accessed from the
         * org.apache.camel.component.sparkrest.SparkMessage message with the
         * method getRequest() that returns the Spark HTTP request instance.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: consumer
         */
        default SparkRestComponentBuilder mapHeaders(boolean mapHeaders) {
            doSetProperty("mapHeaders", mapHeaders);
            return this;
        }
        /**
         * Port number. Will by default use 4567.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Default: 4567
         * Group: consumer
         */
        default SparkRestComponentBuilder port(int port) {
            doSetProperty("port", port);
            return this;
        }
        /**
         * If enabled and an Exchange failed processing on the consumer side,
         * and if the caused Exception was send back serialized in the response
         * as a application/x-java-serialized-object content type. This is by
         * default turned off. If you enable this then be aware that Java will
         * deserialize the incoming data from the request to Java and that can
         * be a potential security risk.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default SparkRestComponentBuilder transferException(
                boolean transferException) {
            doSetProperty("transferException", transferException);
            return this;
        }
        /**
         * If this option is enabled, then during binding from Spark to Camel
         * Message then the header values will be URL decoded (eg %20 will be a
         * space character.).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default SparkRestComponentBuilder urlDecodeHeaders(
                boolean urlDecodeHeaders) {
            doSetProperty("urlDecodeHeaders", urlDecodeHeaders);
            return this;
        }
        /**
         * Whether the component should use basic property binding (Camel 2.x)
         * or the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default SparkRestComponentBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether or not the consumer should try to find a target consumer by
         * matching the URI prefix if no exact match is found.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default SparkRestComponentBuilder matchOnUriPrefix(
                boolean matchOnUriPrefix) {
            doSetProperty("matchOnUriPrefix", matchOnUriPrefix);
            return this;
        }
        /**
         * Maximum number of threads in Spark thread-pool (shared globally).
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: advanced
         */
        default SparkRestComponentBuilder maxThreads(int maxThreads) {
            doSetProperty("maxThreads", maxThreads);
            return this;
        }
        /**
         * Minimum number of threads in Spark thread-pool (shared globally).
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: advanced
         */
        default SparkRestComponentBuilder minThreads(int minThreads) {
            doSetProperty("minThreads", minThreads);
            return this;
        }
        /**
         * To use a custom SparkBinding to map to/from Camel message.
         * 
         * The option is a:
         * <code>org.apache.camel.component.sparkrest.SparkBinding</code> type.
         * 
         * Group: advanced
         */
        default SparkRestComponentBuilder sparkBinding(
                org.apache.camel.component.sparkrest.SparkBinding sparkBinding) {
            doSetProperty("sparkBinding", sparkBinding);
            return this;
        }
        /**
         * To use the shared SparkConfiguration.
         * 
         * The option is a:
         * <code>org.apache.camel.component.sparkrest.SparkConfiguration</code>
         * type.
         * 
         * Group: advanced
         */
        default SparkRestComponentBuilder sparkConfiguration(
                org.apache.camel.component.sparkrest.SparkConfiguration sparkConfiguration) {
            doSetProperty("sparkConfiguration", sparkConfiguration);
            return this;
        }
        /**
         * Thread idle timeout in millis where threads that has been idle for a
         * longer period will be terminated from the thread pool.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: advanced
         */
        default SparkRestComponentBuilder timeOutMillis(int timeOutMillis) {
            doSetProperty("timeOutMillis", timeOutMillis);
            return this;
        }
        /**
         * Configures connection to be secure to use the keystore file.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default SparkRestComponentBuilder keystoreFile(
                java.lang.String keystoreFile) {
            doSetProperty("keystoreFile", keystoreFile);
            return this;
        }
        /**
         * Configures connection to be secure to use the keystore password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default SparkRestComponentBuilder keystorePassword(
                java.lang.String keystorePassword) {
            doSetProperty("keystorePassword", keystorePassword);
            return this;
        }
        /**
         * Configures connection to be secure to use the truststore file.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default SparkRestComponentBuilder truststoreFile(
                java.lang.String truststoreFile) {
            doSetProperty("truststoreFile", truststoreFile);
            return this;
        }
        /**
         * Configures connection to be secure to use the truststore password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default SparkRestComponentBuilder truststorePassword(
                java.lang.String truststorePassword) {
            doSetProperty("truststorePassword", truststorePassword);
            return this;
        }
    }

    class SparkRestComponentBuilderImpl
            extends
                AbstractComponentBuilder<SparkRestComponent>
            implements
                SparkRestComponentBuilder {
        @Override
        protected SparkRestComponent buildConcreteComponent() {
            return new SparkRestComponent();
        }
        private org.apache.camel.component.sparkrest.SparkConfiguration getOrCreateConfiguration(
                org.apache.camel.component.sparkrest.SparkRestComponent component) {
            if (component.getSparkConfiguration() == null) {
                component.setSparkConfiguration(new org.apache.camel.component.sparkrest.SparkConfiguration());
            }
            return component.getSparkConfiguration();
        }
        @Override
        protected boolean setPropertyOnComponent(
                Component component,
                String name,
                Object value) {
            switch (name) {
            case "bridgeErrorHandler": ((SparkRestComponent) component).setBridgeErrorHandler((boolean) value); return true;
            case "disableStreamCache": getOrCreateConfiguration((SparkRestComponent) component).setDisableStreamCache((boolean) value); return true;
            case "ipAddress": ((SparkRestComponent) component).setIpAddress((java.lang.String) value); return true;
            case "mapHeaders": getOrCreateConfiguration((SparkRestComponent) component).setMapHeaders((boolean) value); return true;
            case "port": ((SparkRestComponent) component).setPort((int) value); return true;
            case "transferException": getOrCreateConfiguration((SparkRestComponent) component).setTransferException((boolean) value); return true;
            case "urlDecodeHeaders": getOrCreateConfiguration((SparkRestComponent) component).setUrlDecodeHeaders((boolean) value); return true;
            case "basicPropertyBinding": ((SparkRestComponent) component).setBasicPropertyBinding((boolean) value); return true;
            case "matchOnUriPrefix": getOrCreateConfiguration((SparkRestComponent) component).setMatchOnUriPrefix((boolean) value); return true;
            case "maxThreads": ((SparkRestComponent) component).setMaxThreads((int) value); return true;
            case "minThreads": ((SparkRestComponent) component).setMinThreads((int) value); return true;
            case "sparkBinding": ((SparkRestComponent) component).setSparkBinding((org.apache.camel.component.sparkrest.SparkBinding) value); return true;
            case "sparkConfiguration": ((SparkRestComponent) component).setSparkConfiguration((org.apache.camel.component.sparkrest.SparkConfiguration) value); return true;
            case "timeOutMillis": ((SparkRestComponent) component).setTimeOutMillis((int) value); return true;
            case "keystoreFile": ((SparkRestComponent) component).setKeystoreFile((java.lang.String) value); return true;
            case "keystorePassword": ((SparkRestComponent) component).setKeystorePassword((java.lang.String) value); return true;
            case "truststoreFile": ((SparkRestComponent) component).setTruststoreFile((java.lang.String) value); return true;
            case "truststorePassword": ((SparkRestComponent) component).setTruststorePassword((java.lang.String) value); return true;
            default: return false;
            }
        }
    }
}