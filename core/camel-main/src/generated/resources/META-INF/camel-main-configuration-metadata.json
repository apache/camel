{
  "groups": [
    { "name": "camel.main", "description": "Camel Main configurations", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties" },
    { "name": "camel.routecontroller", "description": "Camel Route Controller configurations", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties" },
    { "name": "camel.server", "description": "Camel Embedded HTTP Server (only for standalone; not Spring Boot or Quarkus) configurations", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties" },
    { "name": "camel.debug", "description": "Camel Debugger configurations", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties" },
    { "name": "camel.trace", "description": "Camel Tracer configurations", "sourceType": "org.apache.camel.main.TracerConfigurationProperties" },
    { "name": "camel.ssl", "description": "Camel SSL configurations", "sourceType": "org.apache.camel.main.SSLConfigurationProperties" },
    { "name": "camel.threadpool", "description": "Camel Thread Pool configurations", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties" },
    { "name": "camel.health", "description": "Camel Health Check configurations", "sourceType": "org.apache.camel.main.HealthConfigurationProperties" },
    { "name": "camel.rest", "description": "Camel Rest-DSL configurations", "sourceType": "org.apache.camel.spi.RestConfiguration" },
    { "name": "camel.vault.aws", "description": "Camel AWS Vault configurations", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration" },
    { "name": "camel.vault.gcp", "description": "Camel GCP Vault configurations", "sourceType": "org.apache.camel.vault.GcpVaultConfiguration" },
    { "name": "camel.vault.azure", "description": "Camel Azure Key Vault configurations", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration" },
    { "name": "camel.opentelemetry", "description": "Camel OpenTelemtry configurations", "sourceType": "org.apache.camel.main.OtelConfigurationProperties" },
    { "name": "camel.metrics", "description": "Camel Micrometer Metrics configurations", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties" },
    { "name": "camel.faulttolerance", "description": "Fault Tolerance EIP Circuit Breaker configurations", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties" },
    { "name": "camel.resilience4j", "description": "Resilience4j EIP Circuit Breaker configurations", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties" },
    { "name": "camel.lra", "description": "Camel Saga EIP (Long Running Actions) configurations", "sourceType": "org.apache.camel.main.LraConfigurationProperties" }
  ],
  "properties": [
    { "name": "camel.main.allowUseOriginalMessage", "description": "Determines if access to the original message from Camel's error handler is allowed, or if it should be accessed from org.apache.camel.spi.UnitOfWork.getOriginalInMessage() . Disabling this feature can improve performance by eliminating the need for a defensive copy of the original message. Defaults to false .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.autoConfigurationEnabled", "description": "Whether auto configuration of components, dataformats, languages is enabled or not. When enabled the configuration parameters are loaded from the properties component. You can prefix the parameters in the properties file with: - camel.component.name.option1=value1 - camel.component.name.option2=value2 - camel.dataformat.name.option1=value1 - camel.dataformat.name.option2=value2 - camel.language.name.option1=value1 - camel.language.name.option2=value2 Where name is the name of the component, dataformat or language such as seda,direct,jaxb. The auto configuration also works for any options on components that is a complex type (not standard Java type) and there has been an explicit single bean instance registered to the Camel registry via the org.apache.camel.spi.Registry#bind(String,Object) method or by using the org.apache.camel.BindToRegistry annotation style. This option is default enabled.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.autoConfigurationEnvironmentVariablesEnabled", "description": "Whether auto configuration should include OS environment variables as well. When enabled this allows to overrule any configuration using an OS environment variable. For example to set a shutdown timeout of 5 seconds: CAMEL_MAIN_SHUTDOWNTIMEOUT=5. This option is default enabled.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.autoConfigurationFailFast", "description": "Whether auto configuration should fail fast when configuring one ore more properties fails for whatever reason such as a invalid property name, etc. This option is default enabled.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.autoConfigurationLogSummary", "description": "Whether auto configuration should log a summary with the configured properties. This option is default enabled.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.autoConfigurationSystemPropertiesEnabled", "description": "Whether auto configuration should include JVM system properties as well. When enabled this allows to overrule any configuration using a JVM system property. For example to set a shutdown timeout of 5 seconds: -D camel.main.shutdown-timeout=5. Note that JVM system properties take precedence over OS environment variables. This option is default enabled.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.autoStartup", "description": "Specifies if the object should start automatically when Camel is initiated. It is important to note that only routes can be disabled at the moment, as CamelContexts are always started. If auto startup is set to false on CamelContext, it will take precedence and no routes will be started. In this case, CamelContext must be started explicitly using the org.apache.camel.CamelContext.start() method, followed by manual starting of routes using CamelContext.getRouteController().startRoute(String) . By default, the object will start up automatically.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.autowiredEnabled", "description": "Indicates if autowiring is enabled. This flag is used to enable automatic autowiring options (the option must be marked as autowired) by searching the registry for a single instance of the matching type, which is then configured on the component. This feature can be utilized for automatically configuring JDBC data sources, JMS connection factories, AWS Clients, etc. The default setting is true .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.basePackageScan", "description": "Package name to use as base (offset) for classpath scanning of RouteBuilder , org.apache.camel.TypeConverter , CamelConfiguration classes, and also classes annotated with org.apache.camel.Converter , or org.apache.camel.BindToRegistry . If you are using Spring Boot then it is instead recommended to use Spring Boots component scanning and annotate your route builder classes with Component. In other words only use this for Camel Main in standalone mode.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.basePackageScanEnabled", "description": "Whether base package scan is enabled.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.beanIntrospectionExtendedStatistics", "description": "Sets whether bean introspection uses extended statistics. The default is false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.beanIntrospectionLoggingLevel", "description": "Configures the logging level for bean introspection, logging its usage activity. The default logging level is {link LoggingLevel#TRACE TRACE} .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "object", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "OFF" ] },
    { "name": "camel.main.beanPostProcessorEnabled", "description": "Enables or disables bean post processing. Please exercise caution when disabling this feature, as it will prevent beans that utilize Camel annotations such as {code EndpointInject} , {code ProducerTemplate} , {code Produce} , {code Consume} , etc. from being injected and used. Disabling this feature should only be done if you are certain that you are not using any of these Camel features. Keep in mind that not all runtimes support disabling this feature (such as camel-blueprint or camel-cdi with XML). The default setting is true (enabled).", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.camelEventsTimestampEnabled", "description": "Specifies whether timestamps should be included for all emitted Camel Events. Enabling this option allows for fine-grained tracking of when each event was emitted, which can be useful for accurate reporting of event timing. By default, this option is set to false in order to avoid the overhead of including this additional information.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.caseInsensitiveHeaders", "description": "Determines whether to use case-sensitive or case-insensitive headers. Important: When using case-insensitive headers (this is set to false), the map is case-sensitive. This means that headers such as content-type and Content-Type are considered two different keys, which can be problematic for protocols such as HTTP that rely on case-insensitive headers. However, case-sensitive implementations can result in faster performance. Therefore, use case-sensitive implementations carefully. Defaults to true .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.compileWorkDir", "description": "Compiler working directory. Can be used to write compiled classes or other resources.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.configurationClasses", "description": "Sets classes names that will be used to configure the camel context as example by providing custom beans through org.apache.camel.BindToRegistry annotation.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.configurations", "description": "Sets the configuration objects used to configure the camel context.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "object", "javaType": "java.util.List" },
    { "name": "camel.main.consumerTemplateCacheSize", "description": "Consumer template cache size.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 1000 },
    { "name": "camel.main.contextReloadEnabled", "description": "Used to enable context reloading. If enabled, Camel allows external systems such as security vaults (AWS Secret Manager, etc.) to trigger Camel refresh by updating property placeholders and reloading all routes existing to take into account the modifications.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.description", "description": "Sets the description (intended for humans) of the Camel application.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.devConsoleEnabled", "description": "Whether to enable the developer console (requires camel-console on the classpath). The developer console is only to help you during development. This is NOT intended for production use.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.dumpRoutes", "description": "Enables route dumping during startup, which outputs all loaded routes (including RESTs and route templates) as XML\/YAML DSL into the log. This feature is intended for troubleshooting or development assistance. Sensitive information may be included in the dump output, so it is not recommended for production use. Requires camel-xml-io\/camel-yaml-io on the classpath to dump routes as XML\/YAML.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "enum": [ "xml", "yaml" ] },
    { "name": "camel.main.dumpRoutesGeneratedIds", "description": "Specifies whether to include auto-generated IDs in the dumped output. Defaults to false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.dumpRoutesInclude", "description": "Specifies what to include in the output for route dumping. Possible values: all , routes , rests , routeConfigurations , routeTemplates , beans . Multiple values can be separated by a comma. Default is routes .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "routes" },
    { "name": "camel.main.dumpRoutesLog", "description": "Determines whether route dumps should be logged to the Logger.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.dumpRoutesOutput", "description": "Determines whether route dumps should be saved to an output file. If the output is a filename, all content will be saved to this file. If the output is a directory name, one or more files will be saved to the directory. The names of the files are based on the original source file names or auto-generated names.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.dumpRoutesResolvePlaceholders", "description": "Specifies whether property placeholders in the dumped output should be resolved. Default is true.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.dumpRoutesUriAsParameters", "description": "Determines whether endpoint URIs should be expanded into key\/value parameters when dumping routes to YAML format.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.durationHitExitCode", "description": "Sets the exit code for the application if duration was hit", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "integer", "javaType": "int" },
    { "name": "camel.main.durationMaxAction", "description": "Controls whether the Camel application should shut down the JVM or stop all routes when the maximum duration is triggered.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "shutdown", "enum": [ "shutdown", "stop" ] },
    { "name": "camel.main.durationMaxIdleSeconds", "description": "Specifies how long in seconds Camel can remain idle before automatically terminating the JVM. You can use it to run Camel for a short time.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int" },
    { "name": "camel.main.durationMaxMessages", "description": "Specifies the number of messages to be processed by Camel before the JVM automatically terminates. You can use it to run Camel for a short time.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int" },
    { "name": "camel.main.durationMaxSeconds", "description": "Specifies how long in seconds to continue running the JVM before automatic terminating the JVM. You can use it to run Camel for a short time.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int" },
    { "name": "camel.main.endpointBridgeErrorHandler", "description": "Allows for bridging the consumer to the Camel routing Error Handler, which means any exceptions occurring while the consumer is trying to pick up incoming messages, or similar actions, will now be processed as a message and handled by the routing Error Handler. By default, the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, which will be logged at the WARN\/ERROR level and ignored. The default value is false .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.endpointLazyStartProducer", "description": "Whether the producer should be started lazily (on the first message). Starting lazily allows you to use this option to enable the CamelContext and routes to start in situations where a producer may fail during startup, causing the route to fail to start. By deferring this startup to be lazy, any startup failures can be handled during message routing using Camel's routing error handlers. Keep in mind that the creation and startup of the producer may take some time when the first message is processed, potentially prolonging the overall processing time. The default value is false .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.endpointRuntimeStatisticsEnabled", "description": "Sets whether endpoint runtime statistics are enabled (which gather runtime usage data for each incoming and outgoing endpoint). The default value is false .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.exchangeFactory", "description": "Controls whether to pool ( reuse ) exchanges or create new exchanges ( prototype ). Using pooled will reduce JVM garbage collection overhead by avoiding recreating Exchange instances per message received by each consumer. The default is prototype mode.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "default", "enum": [ "default", "prototype", "pooled" ] },
    { "name": "camel.main.exchangeFactoryCapacity", "description": "Sets the capacity of the pool used by each consumer for storing exchanges. The default capacity is 100.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 100 },
    { "name": "camel.main.exchangeFactoryStatisticsEnabled", "description": "Configures whether statistics are enabled on the exchange factory.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.extraShutdownTimeout", "description": "Extra timeout in seconds to graceful shutdown Camel. When Camel is shutting down then Camel first shutdown all the routes (shutdownTimeout). Then additional services is shutdown (extraShutdownTimeout).", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 15 },
    { "name": "camel.main.fileConfigurations", "description": "Directory for loading additional configuration files containing configuration values that take precedence over any other configuration. This can be used to refer to files that may have secret configuration mounted on the file system for containers. You can specify a pattern to load from subdirectories and a name pattern such as \/var\/app\/secret\/.properties, multiple directories can be separated by a comma.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.globalOptions", "description": "Sets global options that can be referenced in the Camel context. Important: This is unrelated to property placeholders and consists of key\/value pairs used to configure global options on CamelContext, such as maximum debug logging length, etc.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "object", "javaType": "java.util.Map" },
    { "name": "camel.main.inflightRepositoryBrowseEnabled", "description": "Defines whether the in-flight repository should allow navigation in each in-flight exchange. This is disabled by default because there is a very slight performance overhead when enabled.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.javaRoutesExcludePattern", "description": "Used for exclusive filtering of RouteBuilder classes which are collected from the registry or via classpath scanning. The exclusive filtering takes precedence over inclusive filtering. The pattern is using Ant-path style pattern and multiple patterns can be specified separated by comma. For instance, to exclude all classes starting with Foo , use {code &#42;&#42;\/Foo} . To exclude all routes form a specific package use {code com\/mycompany\/foo\/&#42;} . To exclude all routes form a specific package and its sub-packages use {code com\/mycompany\/foo\/&#42;&#42;} with double wildcards. And to exclude all routes from two specific packages use {code com\/mycompany\/foo\/&#42;,com\/mycompany\/stuff\/&#42;} .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.javaRoutesIncludePattern", "description": "Used for inclusive filtering of RouteBuilder classes which are collected from the registry or via classpath scanning. The exclusive filtering takes precedence over inclusive filtering. The pattern is using Ant-path style pattern and multiple patterns can be specified separated by comma. For instance, to include all classes starting with Foo , use {code &#42;&#42;\/Foo} . To include all routes form a specific package use: {code com\/mycompany\/foo\/&#42;} . To include all routes form a specific package and its sub-packages use double wildcards: {code com\/mycompany\/foo\/&#42;&#42;} . And to include all routes from two specific packages use: {code com\/mycompany\/foo\/&#42;,com\/mycompany\/stuff\/&#42;} .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.jmxEnabled", "description": "Enables JMX in your Camel application.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.jmxManagementMBeansLevel", "description": "Sets the mbeans registration level. The default value is ManagementMBeansLevel#Default .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "object", "javaType": "org.apache.camel.ManagementMBeansLevel", "defaultValue": "Default" },
    { "name": "camel.main.jmxManagementNamePattern", "description": "The naming pattern used to create the management name for the CamelContext in JMX. The default pattern is name#", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "#name#" },
    { "name": "camel.main.jmxManagementRegisterRoutesCreateByKamelet", "description": "Whether routes created by Kamelets should be registered for JMX management. Enabling this allows for fine-grained monitoring and management of every route created via Kamelets. This is disabled by default as a Kamelet is intended as a component (black-box) and its implementation details as a Camel route makes the overall management and monitoring of Camel applications more verbose. During development of Kamelets, enabling this will make it possible for developers to perform fine-grained performance inspection and identify potential bottlenecks in the Kamelet routes. However, for production usage, it is recommended to keep this disabled.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.jmxManagementRegisterRoutesCreateByTemplate", "description": "Determines if routes created by route templates (not Kamelets) should be registered for JMX management. Enabling this feature allows for detailed monitoring and management of every route created via route templates. By default, this setting is enabled (unlike Kamelets) as routes created via templates are considered standard routes and should be accessible for management and monitoring purposes.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.jmxManagementStatisticsLevel", "description": "Sets the JMX statistics level, the level can be set to Extended to gather additional information The default value is ManagementMBeansLevel#Default .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "object", "javaType": "org.apache.camel.ManagementStatisticsLevel", "defaultValue": "Default", "enum": [ "Extended", "Default", "RoutesOnly", "Off" ] },
    { "name": "camel.main.jmxUpdateRouteEnabled", "description": "Whether to allow updating routes at runtime via JMX using ManagedRouteMBean. This is disabled by default, but can be enabled for development and troubleshooting purposes, such as updating routes in an existing Camel running via JMX and other tools.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.lightweight", "description": "Configure the context to be lightweight. This will trigger some optimizations and memory reduction options. The lightweight context has some limitations. Currently, dynamic endpoint destinations are not supported.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.loadHealthChecks", "description": "Whether to load custom health checks by parsing the classpath.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.loadStatisticsEnabled", "description": "Sets whether context load statistics are enabled (similar to the Unix load average). These statistics require having camel-management on the classpath as JMX is necessary. The default value is false .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.loadTypeConverters", "description": "Whether to load custom type converters by parsing the classpath. This is used for backward compatibility with Camel 2.x. It is recommended to migrate to use fast type converter loading by setting Converter(generateLoader = true) on your custom type converter classes.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.logDebugMaxChars", "description": "Used to limit the maximum body length of Camel logging messages. If the message body is longer than the limit, the log message is truncated. Use -1 to have unlimited length. For example, use 1000 to store a maximum of 1000 characters.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int" },
    { "name": "camel.main.logExhaustedMessageBody", "description": "Defines whether to log exhausted message body with message history. Default is false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.logMask", "description": "Defines whether the log mask is enabled or not. Default is false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.mdcLoggingKeysPattern", "description": "Sets the pattern used to determine which custom MDC keys should be propagated during message routing when the routing engine continues routing asynchronously for the given message. Setting this pattern to {code } will propagate all custom keys. Setting the pattern to {code foo,bar} will propagate any keys starting with either foo or bar. Note that a set of standard Camel MDC keys starting with camel. as the key name are always propagated. The match rules are applied in the following order (case insensitive): 1. exact match, returns true 2. wildcard match (pattern ends with a and the name starts with the pattern), returns true 3. regular expression match, returns true 4. otherwise returns false", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.messageHistory", "description": "Sets whether message history is enabled or not. Default is false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.modeline", "description": "Specifies whether camel-k style modeling is also enabled when not using camel-k. Enabling this allows you to use a camel-k like experience by being able to configure various settings using modeline directly in your route's source code.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.name", "description": "Sets the name of the CamelContext.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.producerTemplateCacheSize", "description": "Producer template cache size.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 1000 },
    { "name": "camel.main.profile", "description": "Camel profile to use when running. The dev profile is for development, which enables a set of additional developer focus functionality, tracing, debugging, and gathering additional runtime statistics that are useful during development. However, those additional features has a slight overhead cost, and are not enabled for production profile. The default profile is prod.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "string", "javaType": "java.lang.String", "enum": [ "dev", "test", "prod" ] },
    { "name": "camel.main.routeFilterExcludePattern", "description": "Used for filtering routes that match the specified patterns. The pattern is used to first match routes by their ID, then by route input endpoint URI. The matching process employs exact match, wildcard, and regular expression techniques as documented in PatternHelper#matchPattern(String,String) . For instance, to include only routes with route IDs starting with foo, use: {code include=foo} . To exclude routes originating from JMS endpoints, use: {code exclude=jms:} . Multiple patterns can be separated by a comma. For example, to exclude both foo and bar routes, use: {code exclude=foo,bar} . Exclude specifications take precedence over include specifications.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.routeFilterIncludePattern", "description": "Used for filtering routes that match the specified patterns. The pattern is used to first match routes by their ID, then by route input endpoint URI. The matching process employs exact match, wildcard, and regular expression techniques as documented in PatternHelper#matchPattern(String,String) . For instance, to include only routes with route IDs starting with foo, use: {code include=foo} . To exclude routes originating from JMS endpoints, use: {code exclude=jms:} . Multiple patterns can be separated by a comma. For example, to exclude both foo and bar routes, use: {code exclude=foo,bar} . Exclude specifications take precedence over include specifications.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.routesBuilderClasses", "description": "Sets classes names that implement RoutesBuilder .", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.routesBuilders", "description": "Sets the RoutesBuilder instances.", "sourceType": "org.apache.camel.main.MainConfigurationProperties", "type": "object", "javaType": "java.util.List" },
    { "name": "camel.main.routesCollectorEnabled", "description": "Determines whether the routes collector is enabled or not. Enabling the routes collector allows Camel to auto-discover RouteBuilder instances from the registry and load additional routes from the file system. By default, the routes collector is enabled.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.routesCollectorIgnoreLoadingError", "description": "Indicates whether the route collector should ignore errors when loading and compiling routes. This is only intended for development or tooling.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.routesExcludePattern", "description": "Used for exclusive filtering of routes from directories. The exclusive filtering takes precedence over inclusive filtering. The pattern is using Ant-path style pattern and multiple patterns can be specified and separated by a comma. For example, to exclude all routes from a directory whose name contains foo, use {code &#42;&#42;\/&#42;foo&#42;} .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.routesIncludePattern", "description": "Used for inclusive filtering of routes from directories. The exclusive filtering takes precedence over inclusive filtering. The pattern is using Ant-path style pattern and multiple patterns can be specified and separated by a comma. For example, to include all routes from a directory whose name contains foo, use {code &#42;&#42;\/&#42;foo&#42;} .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "classpath:camel\/*,classpath:camel-template\/*,classpath:camel-rest\/*" },
    { "name": "camel.main.routesReloadDirectory", "description": "Directory to search for route changes. Camel is unable to parse the classpath, therefore, a file directory must be configured. When using Maven as a build tool, you can configure the {code src\/main\/resources} directory to search for Camel routes in XML or YAML files.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "src\/main\/resources\/camel" },
    { "name": "camel.main.routesReloadDirectoryRecursive", "description": "Indicates whether the directory scan should include subdirectories. Depending on the number of subdirectories, this may slow down JVM startup because Camel uses the JDK file monitoring service to check for file changes.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.routesReloadEnabled", "description": "Used to enable automatic route reloading. If enabled, Camel will monitor file changes in the given reload directory and trigger reload routes if files are changed.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.routesReloadPattern", "description": "Used for inclusive filtering of directory routes. Typically used to specify route acceptance in XML or YAML files, such as {code .yaml,.xml} . Multiple patterns can be specified separated by a comma.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.routesReloadRemoveAllRoutes", "description": "Determines whether all existing routes should be stopped and removed when reloading routes. By default, Camel stops and removes all existing routes before reloading routes, ensuring that only the reloaded routes remain active. If disabled, only routes with the same route ID will be updated, and any existing routes will continue to run.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.routesReloadRestartDuration", "description": "Determines whether all existing routes should be stopped and removed when reloading routes. By default, Camel stops and removes all existing routes before reloading routes, ensuring that only the reloade routes remain active. If disabled, only routes with the same route ID will be updated, and any existing routes will continue to run.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.shutdownLogInflightExchangesOnTimeout", "description": "Defines whether to record information about ongoing trades that are still in progress during a shutdown that has not completed without the given timeout. This requires enabling the inflightRepositoryBrowseEnabled option.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.shutdownNowOnTimeout", "description": "Defines whether to force shutdown all consumers after the grace period has expired and therefore not all consumers have been shutdown during this period. You should have good reason to set this option to false because it means that routes continue to run and terminate abruptly when CamelContext is stopped.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.shutdownRoutesInReverseOrder", "description": "Defines whether routes should be stopped in reverse order or in the same order in which they were started.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.shutdownSuppressLoggingOnTimeout", "description": "Indicates whether Camel should attempt to clear logging during shutdown when the timeout has been triggered, meaning a forced shutdown occurs. And during a forced shutdown, we want to avoid logging errors\/warnings and everything else in the logs as a side effect of the forced timeout. Note that deleting is a significant effort, as there may still be logs from third-party libraries, etc., which Camel cannot control. This option is false by default.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.shutdownTimeout", "description": "Duration in seconds that all Camel routes can gracefully shut down.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 45 },
    { "name": "camel.main.sourceLocationEnabled", "description": "Defines whether to capture the precise source location: line number for all EIPs in Camel routes. Enabling this option will impact the parsing of Java-based routes (also Groovy, Kotlin, etc.) on startup, as this uses JDK StackTraceElement to calculate the location from the Camel route, which incurs a performance cost. This only impacts startup, not route performance at runtime.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.startupRecorder", "description": "Enables the startup recorder for capturing execution time during Camel startup. The recorder can be set to one of the following options: false (or off ), logging , backlog , {code java-flight-recorder} (or jfr ).", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "enum": [ "false", "off", "java-flight-recorder", "jfr", "logging", "backlog" ] },
    { "name": "camel.main.startupRecorderDir", "description": "Sets the directory where the recording will be stored. By default, the current directory is used. Set to false to disable saving the recording to disk.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.startupRecorderDuration", "description": "Determines the duration for running the startup recorder. Use 0 (default) to keep the recorder running until the JVM is exited. Use -1 to stop the recorder right after Camel has been started (to only focus on potential Camel startup performance bottlenecks). Use a positive value to keep recording for N seconds. When the recorder is stopped, the recording is automatically saved to disk. This can be disabled by setting startupRecorderDir to false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "long" },
    { "name": "camel.main.startupRecorderMaxDepth", "description": "Filters out sub steps based on the maximum depth specified. Use -1 to indicate no maximum depth, Use 0 to exclude all sub steps, Use 1 to allow only one sub step at maximum, and so on. The default value is -1.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": -1 },
    { "name": "camel.main.startupRecorderProfile", "description": "Specifies a specific Java Flight Recorder profile configuration, such as default or profile. The default is default .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "default" },
    { "name": "camel.main.startupRecorderRecording", "description": "Enables Java Flight Recorder to start a recording and automatically dump the recording to disk after startup is complete. This functionality requires that camel-jfr is on the classpath and that this setting is enabled.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.startupSummaryLevel", "description": "Controls the level of information logged when starting (and stopping) CamelContext.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "object", "javaType": "org.apache.camel.StartupSummaryLevel", "defaultValue": "Default" },
    { "name": "camel.main.streamCachingAllowClasses", "description": "To filter stream caching of a given set of allowed\/denied classes. By default, all java.io.InputStream classes are allowed. Multiple class names can be separated by a comma.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.streamCachingAnySpoolRules", "description": "To enable spooling to disk, the method shouldSpoolCache(long) will return true if any of the {code org.apache.camel.spi.StreamCachingStrategy.SpoolRule} rules evaluates to true. Conversely, if this option is set to false, all {code org.apache.camel.spi.StreamCachingStrategy.SpoolRule} rules must return true in order for spooling to disk to be enabled. The default value is false which means that all the rules must return true.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.streamCachingBufferSize", "description": "Sets the stream caching buffer size to use when allocating in-memory buffers used for in-memory stream caches. The default size is 4096.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int" },
    { "name": "camel.main.streamCachingDenyClasses", "description": "To filter stream caching of a given set of allowed\/denied classes. By default, all classes that inherit from java.io.InputStream are allowed. Multiple class names can be separated by a comma.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.streamCachingEnabled", "description": "Defines whether stream caching is enabled or not. Although stream types (like StreamSource, InputStream, and Reader) are commonly used in messaging for performance reasons, they also have a major drawback: they can only be read once. In order to be able to work with the message content multiple times, the stream must be cached. Streams are cached only in memory (default). If streamCachingSpoolEnabled=true, then for large stream messages (over 128 KB by default), they will be cached in a temporary file, and Camel will take care of deleting the temporary file once the cached stream is no longer available. is no longer necessary. The default is true.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.streamCachingRemoveSpoolDirectoryWhenStopping", "description": "Whether to delete the temporary directory used for stream caching on shutdown. This option is true by default.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.main.streamCachingSpoolCipher", "description": "Defines the encryption name to use to encrypt data when spooling to disk. By default, data is not encrypted.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.streamCachingSpoolDirectory", "description": "Sets the temporary directory to use for overflowing and spooling streams to disk. If no spool directory has been explicit configured, then a temporary directory is created in the java.io.tmpdir directory.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.streamCachingSpoolEnabled", "description": "To enable stream caching on disk. This means that large streams (over 128 KB by default) will be cached in a temporary file and Camel will take care of deleting the temporary file once the cached stream is no longer needed. Default is false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.streamCachingSpoolThreshold", "description": "Stream caching threshold in bytes when overflow to disk is activated. Use -1 to disable overflow to disk. The default threshold is 128kb.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "long" },
    { "name": "camel.main.streamCachingSpoolUsedHeapMemoryLimit", "description": "Sets what the upper bounds should be when streamCachingSpoolUsedHeapMemoryThreshold is in use. Can be either Max or Committed .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.streamCachingSpoolUsedHeapMemoryThreshold", "description": "Sets a percentage (1-99) of used heap memory threshold above which stream caching spooling to disk is activated.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "integer", "javaType": "int" },
    { "name": "camel.main.streamCachingStatisticsEnabled", "description": "Defines whether stream caching statistics are enabled.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.threadNamePattern", "description": "Establishes the thread name pattern utilized for generating the complete thread name. Here, camelId# represents the name of the CamelContext. counter# represents a unique incrementing counter, and name# denotes the regular thread name. Additionally, you can use longName# which represents the long thread name. This may include endpoint parameters and other details. The default pattern is: {code Camel (#camelId#) thread ##counter# - #name#} .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.tracing", "description": "Defines whether tracing is enabled or not. Default is false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.tracingLoggingFormat", "description": "Custom logging format used for tracing. The default format (arrow, routeId, label) is: {code %-4.4s %-12.12s %-33.33s}", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "%-4.4s [%-12.12s] [%-33.33s]" },
    { "name": "camel.main.tracingPattern", "description": "Tracing model corresponding to the node EIPs to follow. For example, to match all To EIP nodes, use {code to}. The model matches by node and route ID. Multiple models can be separated by a comma.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.main.tracingStandby", "description": "Defines whether to put tracing to sleep. In case of standby, the tracker is installed and made available. Then the tracer can be enabled later at runtime via JMX or via Tracer#setEnabled(boolean) .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.tracingTemplates", "description": "Indicates whether tracing should trace the internal details of route models (or kamelets). Enabling this option increases the verbosity of tracing by including internal route events in models or kamelets. Default is false.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.typeConverterStatisticsEnabled", "description": "Sets whether type converter statistics are enabled. By default, type converter usage statistics are disabled. Note: If this option is enabled, there is a slight impact on performance under very heavy load.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.useBreadcrumb", "description": "Enable or disable the breadcrumb. The default value is false .", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.useDataType", "description": "Determines whether to allow the use of data types on Camel messages. Data type are automatic turned on if one ore more routes has been explicit configured with input and output types. Otherwise data type is default off.", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.useMdcLogging", "description": "To turn on MDC logging", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.main.uuidGenerator", "description": "UUID generator to use. Possible values are: default (32 bytes), short (16 bytes), classic (32 bytes or more), simple (long incrementing counter), off (turned off for exchanges - only intended for performance profiling).", "sourceType": "org.apache.camel.main.DefaultConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "default", "enum": [ "classic", "default", "short", "simple", "off" ] },
    { "name": "camel.debug.bodyIncludeFiles", "description": "Whether to include the message body of file based messages. The overhead is that the file content has to be read from the file.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.debug.bodyIncludeStreams", "description": "Whether to include the message body of stream based messages. If enabled then beware the stream may not be re-readable later. See more about Stream Caching.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.debug.bodyMaxChars", "description": "To limit the message body to a maximum size in the traced message. Use 0 or negative value to use unlimited size.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 131072 },
    { "name": "camel.debug.breakpoints", "description": "Allows to pre-configure breakpoints (node ids) to use with debugger on startup. Multiple ids can be separated by comma. Use special value _all_routes_ to add a breakpoint for the first node for every route, in other words this makes it easy to debug from the beginning of every route without knowing the exact node ids.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.debug.enabled", "description": "Enables Debugger in your Camel application.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.debug.fallbackTimeout", "description": "Fallback Timeout in seconds (300 seconds as default) when block the message processing in Camel. A timeout used for waiting for a message to arrive at a given breakpoint.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "integer", "javaType": "long", "defaultValue": 300 },
    { "name": "camel.debug.includeException", "description": "Trace messages to include exception if the message failed", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.debug.includeExchangeProperties", "description": "Whether to include the exchange properties in the traced message", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.debug.includeExchangeVariables", "description": "Whether to include the exchange variables in the traced message", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.debug.loggingLevel", "description": "The debugger logging level to use when logging activity.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "object", "javaType": "org.apache.camel.LoggingLevel", "defaultValue": "INFO", "enum": [ "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "OFF" ] },
    { "name": "camel.debug.singleStepIncludeStartEnd", "description": "In single step mode, then when the exchange is created and completed, then simulate a breakpoint at start and end, that allows to suspend and watch the incoming\/complete exchange at the route (you can see message body as response, failed exception etc).", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.debug.standby", "description": "To set the debugger in standby mode, where the debugger will be installed by not automatic enabled. The debugger can then later be enabled explicit from Java, JMX or tooling.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.debug.waitForAttach", "description": "Whether the debugger should suspend on startup, and wait for a remote debugger to attach. This is what the IDEA and VSCode tooling is using.", "sourceType": "org.apache.camel.main.DebuggerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.faulttolerance.bulkheadEnabled", "description": "Whether bulkhead is enabled or not on the circuit breaker. Default is false.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": false },
    { "name": "camel.faulttolerance.bulkheadExecutorService", "description": "References to a custom thread pool to use when bulkhead is enabled.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.faulttolerance.bulkheadMaxConcurrentCalls", "description": "Configures the max amount of concurrent calls the bulkhead will support. Default value is 10.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 10 },
    { "name": "camel.faulttolerance.bulkheadWaitingTaskQueue", "description": "Configures the task queue size for holding waiting tasks to be processed by the bulkhead. Default value is 10.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 10 },
    { "name": "camel.faulttolerance.circuitBreaker", "description": "Refers to an existing io.smallrye.faulttolerance.core.circuit.breaker.CircuitBreaker instance to lookup and use from the registry. When using this, then any other circuit breaker options are not in use.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.faulttolerance.delay", "description": "Control how long the circuit breaker stays open. The value are in seconds and the default is 5 seconds.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "integer", "javaType": "java.lang.Long", "defaultValue": 5 },
    { "name": "camel.faulttolerance.failureRatio", "description": "Configures the failure rate threshold in percentage. If the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 50 percentage.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 50 },
    { "name": "camel.faulttolerance.requestVolumeThreshold", "description": "Controls the size of the rolling window used when the circuit breaker is closed Default value is 20.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 20 },
    { "name": "camel.faulttolerance.successThreshold", "description": "Controls the number of trial calls which are allowed when the circuit breaker is half-open Default value is 1.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 1 },
    { "name": "camel.faulttolerance.timeoutDuration", "description": "Configures the thread execution timeout. Default value is 1000 milliseconds.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "integer", "javaType": "java.lang.Long", "defaultValue": 1000 },
    { "name": "camel.faulttolerance.timeoutEnabled", "description": "Whether timeout is enabled or not on the circuit breaker. Default is false.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": false },
    { "name": "camel.faulttolerance.timeoutPoolSize", "description": "Configures the pool size of the thread pool when timeout is enabled. Default value is 10.", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 10 },
    { "name": "camel.faulttolerance.timeoutScheduledExecutorService", "description": "References to a custom thread pool to use when timeout is enabled", "sourceType": "org.apache.camel.main.FaultToleranceConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.health.consumersEnabled", "description": "Whether consumers health check is enabled", "sourceType": "org.apache.camel.main.HealthConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": true },
    { "name": "camel.health.enabled", "description": "Whether health check is enabled globally", "sourceType": "org.apache.camel.main.HealthConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": true },
    { "name": "camel.health.excludePattern", "description": "Pattern to exclude health checks from being invoked by Camel when checking healths. Multiple patterns can be separated by comma.", "sourceType": "org.apache.camel.main.HealthConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.health.exposureLevel", "description": "Sets the level of details to exposure as result of invoking health checks. There are the following levels: full, default, oneline The full level will include all details and status from all the invoked health checks. The default level will report UP if everything is okay, and only include detailed information for health checks that was DOWN. The oneline level will only report either UP or DOWN.", "sourceType": "org.apache.camel.main.HealthConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "default", "enum": [ "full", "default", "oneline" ] },
    { "name": "camel.health.initialState", "description": "The initial state of health-checks (readiness). There are the following states: UP, DOWN, UNKNOWN. By default, the state is DOWN, is regarded as being pessimistic\/careful. This means that the overall health checks may report as DOWN during startup and then only if everything is up and running flip to being UP. Setting the initial state to UP, is regarded as being optimistic. This means that the overall health checks may report as UP during startup and then if a consumer or other service is in fact un-healthy, then the health-checks can flip being DOWN. Setting the state to UNKNOWN means that some health-check would be reported in unknown state, especially during early bootstrap where a consumer may not be fully initialized or validated a connection to a remote system. This option allows to pre-configure the state for different modes.", "sourceType": "org.apache.camel.main.HealthConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "down", "enum": [ "up", "down", "unknown" ] },
    { "name": "camel.health.producersEnabled", "description": "Whether producers health check is enabled", "sourceType": "org.apache.camel.main.HealthConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": false },
    { "name": "camel.health.registryEnabled", "description": "Whether registry health check is enabled", "sourceType": "org.apache.camel.main.HealthConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": true },
    { "name": "camel.health.routesEnabled", "description": "Whether routes health check is enabled", "sourceType": "org.apache.camel.main.HealthConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": true },
    { "name": "camel.lra.coordinatorContextPath", "description": "The context-path for the LRA coordinator. Is default \/lra-coordinator", "sourceType": "org.apache.camel.main.LraConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "\/lra-coordinator" },
    { "name": "camel.lra.coordinatorUrl", "description": "The URL for the LRA coordinator service that orchestrates the transactions", "sourceType": "org.apache.camel.main.LraConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.lra.enabled", "description": "To enable Saga LRA", "sourceType": "org.apache.camel.main.LraConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": false },
    { "name": "camel.lra.localParticipantContextPath", "description": "The context-path for the local participant. Is default \/lra-participant", "sourceType": "org.apache.camel.main.LraConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "\/lra-participant" },
    { "name": "camel.lra.localParticipantUrl", "description": "The URL for the local participant", "sourceType": "org.apache.camel.main.LraConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.metrics.binders", "description": "Additional Micrometer binders to include such as jvm-memory, processor, jvm-thread, and so forth. Multiple binders can be separated by comma. The following binders currently is available from Micrometer: class-loader, commons-object-pool2, file-descriptor, hystrix-metrics-binder, jvm-compilation, jvm-gc, jvm-heap-pressure, jvm-info, jvm-memory, jvm-thread, log4j2, logback, processor, uptime", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.metrics.clearOnReload", "description": "Clear the captured metrics data when Camel is reloading routes such as when using Camel JBang.", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.metrics.enabled", "description": "To enable Micrometer metrics.", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.metrics.enableExchangeEventNotifier", "description": "Set whether to enable the MicrometerExchangeEventNotifier for capturing metrics on exchange processing times.", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.metrics.enableMessageHistory", "description": "Set whether to enable the MicrometerMessageHistoryFactory for capturing metrics on individual route node processing times. Depending on the number of configured route nodes, there is the potential to create a large volume of metrics. Therefore, this option is disabled by default.", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.metrics.enableRouteEventNotifier", "description": "Set whether to enable the MicrometerRouteEventNotifier for capturing metrics on the total number of routes and total number of routes running.", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.metrics.enableRoutePolicy", "description": "Set whether to enable the MicrometerRoutePolicyFactory for capturing metrics on route processing times.", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.metrics.namingStrategy", "description": "Controls the name style to use for metrics. Default = uses micrometer naming convention. Legacy = uses the classic naming style (camelCase)", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "default", "enum": [ "default", "legacy" ] },
    { "name": "camel.metrics.routePolicyLevel", "description": "Sets the level of information to capture. all = both context and routes.", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "all", "enum": [ "all", "route", "context" ] },
    { "name": "camel.metrics.textFormatVersion", "description": "The text-format version to use with Prometheus scraping. 0.0.4 = text\/plain; version=0.0.4; charset=utf-8 1.0.0 = application\/openmetrics-text; version=1.0.0; charset=utf-8", "sourceType": "org.apache.camel.main.MetricsConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "0.0.4", "enum": [ "0.0.4", "1.0.0" ] },
    { "name": "camel.opentelemetry.enabled", "description": "To enable OpenTelemetry", "sourceType": "org.apache.camel.main.OtelConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.opentelemetry.encoding", "description": "Sets whether the header keys need to be encoded (connector specific) or not. The value is a boolean. Dashes need for instances to be encoded for JMS property keys.", "sourceType": "org.apache.camel.main.OtelConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.opentelemetry.excludePatterns", "description": "Adds an exclude pattern that will disable tracing for Camel messages that matches the pattern. Multiple patterns can be separated by comma.", "sourceType": "org.apache.camel.main.OtelConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.opentelemetry.instrumentationName", "description": "A name uniquely identifying the instrumentation scope, such as the instrumentation library, package, or fully qualified class name. Must not be null.", "sourceType": "org.apache.camel.main.OtelConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "camel" },
    { "name": "camel.resilience4j.automaticTransitionFromOpenToHalfOpenEnabled", "description": "Enables automatic transition from OPEN to HALF_OPEN state once the waitDurationInOpenState has passed.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": "false" },
    { "name": "camel.resilience4j.bulkheadEnabled", "description": "Whether bulkhead is enabled or not on the circuit breaker.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": false },
    { "name": "camel.resilience4j.bulkheadMaxConcurrentCalls", "description": "Configures the max amount of concurrent calls the bulkhead will support.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer" },
    { "name": "camel.resilience4j.bulkheadMaxWaitDuration", "description": "Configures a maximum amount of time which the calling thread will wait to enter the bulkhead. If bulkhead has space available, entry is guaranteed and immediate. If bulkhead is full, calling threads will contest for space, if it becomes available. maxWaitDuration can be set to 0. Note: for threads running on an event-loop or equivalent (rx computation pool, etc), setting maxWaitDuration to 0 is highly recommended. Blocking an event-loop thread will most likely have a negative effect on application throughput.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer" },
    { "name": "camel.resilience4j.circuitBreaker", "description": "Refers to an existing io.github.resilience4j.circuitbreaker.CircuitBreaker instance to lookup and use from the registry. When using this, then any other circuit breaker options are not in use.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.resilience4j.config", "description": "Refers to an existing io.github.resilience4j.circuitbreaker.CircuitBreakerConfig instance to lookup and use from the registry.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.resilience4j.failureRateThreshold", "description": "Configures the failure rate threshold in percentage. If the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 50 percentage.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "number", "javaType": "java.lang.Float", "defaultValue": "50" },
    { "name": "camel.resilience4j.minimumNumberOfCalls", "description": "Configures configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate. For example, if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be calculated. If only 9 calls have been recorded the CircuitBreaker will not transition to open even if all 9 calls have failed. Default minimumNumberOfCalls is 100", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 100 },
    { "name": "camel.resilience4j.permittedNumberOfCallsInHalfOpenState", "description": "Configures the number of permitted calls when the CircuitBreaker is half open. The size must be greater than 0. Default size is 10.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 10 },
    { "name": "camel.resilience4j.slidingWindowSize", "description": "Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. slidingWindowSize configures the size of the sliding window. Sliding window can either be count-based or time-based. If slidingWindowType is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize seconds are recorded and aggregated. The slidingWindowSize must be greater than 0. The minimumNumberOfCalls must be greater than 0. If the slidingWindowType is COUNT_BASED, the minimumNumberOfCalls cannot be greater than slidingWindowSize . If the slidingWindowType is TIME_BASED, you can pick whatever you want. Default slidingWindowSize is 100.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 100 },
    { "name": "camel.resilience4j.slidingWindowType", "description": "Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. Sliding window can either be count-based or time-based. If slidingWindowType is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If slidingWindowType is TIME_BASED, the calls of the last slidingWindowSize seconds are recorded and aggregated. Default slidingWindowType is COUNT_BASED.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "COUNT_BASED", "enum": [ "COUNT_BASED", "TIME_BASED" ] },
    { "name": "camel.resilience4j.slowCallDurationThreshold", "description": "Configures the duration threshold (seconds) above which calls are considered as slow and increase the slow calls percentage. Default value is 60 seconds.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 60 },
    { "name": "camel.resilience4j.slowCallRateThreshold", "description": "Configures a threshold in percentage. The CircuitBreaker considers a call as slow when the call duration is greater than slowCallDurationThreshold(Duration. When the percentage of slow calls is equal or greater the threshold, the CircuitBreaker transitions to open and starts short-circuiting calls. The threshold must be greater than 0 and not greater than 100. Default value is 100 percentage which means that all recorded calls must be slower than slowCallDurationThreshold.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "number", "javaType": "java.lang.Float", "defaultValue": "100" },
    { "name": "camel.resilience4j.throwExceptionWhenHalfOpenOrOpenState", "description": "Whether to throw io.github.resilience4j.circuitbreaker.CallNotPermittedException when the call is rejected due circuit breaker is half open or open.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": false },
    { "name": "camel.resilience4j.timeoutCancelRunningFuture", "description": "Configures whether cancel is called on the running future. Defaults to true.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": true },
    { "name": "camel.resilience4j.timeoutDuration", "description": "Configures the thread execution timeout (millis). Default value is 1000 millis (1 second).", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 1000 },
    { "name": "camel.resilience4j.timeoutEnabled", "description": "Whether timeout is enabled or not on the circuit breaker. Default is false.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": false },
    { "name": "camel.resilience4j.timeoutExecutorService", "description": "References to a custom thread pool to use when timeout is enabled (uses ForkJoinPool#commonPool() by default)", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.resilience4j.waitDurationInOpenState", "description": "Configures the wait duration (in seconds) which specifies how long the CircuitBreaker should stay open, before it switches to half open. Default value is 60 seconds.", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer", "defaultValue": 60 },
    { "name": "camel.resilience4j.writableStackTraceEnabled", "description": "Enables writable stack traces. When set to false, Exception.getStackTrace returns a zero length array. This may be used to reduce log spam when the circuit breaker is open as the cause of the exceptions is already known (the circuit breaker is short-circuiting calls).", "sourceType": "org.apache.camel.main.Resilience4jConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": "false" },
    { "name": "camel.rest.apiComponent", "description": "Sets the name of the Camel component to use as the REST API (such as swagger or openapi)", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.apiContextPath", "description": "Sets a leading API context-path the REST API services will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.apiContextRouteId", "description": "Sets the route id to use for the route that services the REST API. The route will by default use an auto assigned route id.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.apiHost", "description": "To use a specific hostname for the API documentation (such as swagger or openapi) This can be used to override the generated host with this configured hostname", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.apiProperties", "description": "Sets additional options on api level", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "object", "javaType": "java.util.Map" },
    { "name": "camel.rest.apiVendorExtension", "description": "Whether vendor extension is enabled in the Rest APIs. If enabled then Camel will include additional information as vendor extension (eg keys starting with x-) such as route ids, class names etc. Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.rest.bindingMode", "description": "Sets the binding mode to be used by the REST consumer", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "object", "javaType": "org.apache.camel.spi.RestBindingMode", "defaultValue": "RestBindingMode.off", "enum": [ "auto", "off", "json", "xml", "json_xml" ] },
    { "name": "camel.rest.clientRequestValidation", "description": "Whether to enable validation of the client request to check: 1) Content-Type header matches what the Rest DSL consumes; returns HTTP Status 415 if validation error. 2) Accept header matches what the Rest DSL produces; returns HTTP Status 406 if validation error. 3) Missing required data (query parameters, HTTP headers, body); returns HTTP Status 400 if validation error. 4) Parsing error of the message body (JSon, XML or Auto binding mode must be enabled); returns HTTP Status 400 if validation error.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.rest.component", "description": "Sets the name of the Camel component to use as the REST consumer", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.componentProperties", "description": "Sets additional options on component level", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "object", "javaType": "java.util.Map" },
    { "name": "camel.rest.consumerProperties", "description": "Sets additional options on consumer level", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "object", "javaType": "java.util.Map" },
    { "name": "camel.rest.contextPath", "description": "Sets a leading context-path the REST services will be using. This can be used when using components such as camel-servlet where the deployed web application is deployed using a context-path. Or for components such as camel-jetty or camel-netty-http that includes a HTTP server.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.corsHeaders", "description": "Sets the CORS headers to use if CORS has been enabled.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "object", "javaType": "java.util.Map" },
    { "name": "camel.rest.dataFormatProperties", "description": "Sets additional options on data format level", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "object", "javaType": "java.util.Map" },
    { "name": "camel.rest.enableCORS", "description": "To specify whether to enable CORS which means Camel will automatic include CORS in the HTTP headers in the response. This option is default false", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.rest.enableNoContentResponse", "description": "Whether to return HTTP 204 with an empty body when a response contains an empty JSON object or XML root object. The default value is false.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.rest.endpointProperties", "description": "Sets additional options on endpoint level", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "object", "javaType": "java.util.Map" },
    { "name": "camel.rest.host", "description": "Sets the hostname to use by the REST consumer", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.hostNameResolver", "description": "Sets the resolver to use for resolving hostname", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "object", "javaType": "org.apache.camel.spi.RestHostNameResolver", "defaultValue": "RestHostNameResolver.allLocalIp", "enum": [ "allLocalIp", "localIp", "localHostName" ] },
    { "name": "camel.rest.inlineRoutes", "description": "Inline routes in rest-dsl which are linked using direct endpoints. Each service in Rest DSL is an individual route, meaning that you would have at least two routes per service (rest-dsl, and the route linked from rest-dsl). By inlining (default) allows Camel to optimize and inline this as a single route, however this requires to use direct endpoints, which must be unique per service. If a route is not using direct endpoint then the rest-dsl is not inlined, and will become an individual route. This option is default true.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.rest.jsonDataFormat", "description": "Sets a custom json data format to be used Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.port", "description": "Sets the port to use by the REST consumer", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "integer", "javaType": "int" },
    { "name": "camel.rest.producerApiDoc", "description": "Sets the location of the api document (swagger api) the REST producer will use to validate the REST uri and query parameters are valid accordingly to the api document. This requires adding camel-openapi-java to the classpath, and any miss configuration will let Camel fail on startup and report the error(s). The location of the api document is loaded from classpath by default, but you can use file: or http: to refer to resources to load from file or http url.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.producerComponent", "description": "Sets the name of the Camel component to use as the REST producer", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.scheme", "description": "Sets the scheme to use by the REST consumer", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.rest.skipBindingOnErrorCode", "description": "Whether to skip binding output if there is a custom HTTP error code, and instead use the response body as-is. This option is default true.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.rest.useXForwardHeaders", "description": "Whether to use X-Forward headers to set host etc. for OpenApi. This may be needed in special cases involving reverse-proxy and networking going from HTTP to HTTPS etc. Then the proxy can send X-Forward headers (X-Forwarded-Proto) that influences the host names in the OpenAPI schema that camel-openapi-java generates from Rest DSL routes.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.rest.xmlDataFormat", "description": "Sets a custom xml data format to be used. Important: This option is only for setting a custom name of the data format, not to refer to an existing data format instance.", "sourceType": "org.apache.camel.spi.RestConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.routecontroller.backOffDelay", "description": "Backoff delay in millis when restarting a route that failed to startup.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "integer", "javaType": "long", "defaultValue": 2000 },
    { "name": "camel.routecontroller.backOffMaxAttempts", "description": "Backoff maximum number of attempts to restart a route that failed to startup. When this threshold has been exceeded then the controller will give up attempting to restart the route, and the route will remain as stopped.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "integer", "javaType": "long" },
    { "name": "camel.routecontroller.backOffMaxDelay", "description": "Backoff maximum delay in millis when restarting a route that failed to startup.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "integer", "javaType": "long" },
    { "name": "camel.routecontroller.backOffMaxElapsedTime", "description": "Backoff maximum elapsed time in millis, after which the backoff should be considered exhausted and no more attempts should be made.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "integer", "javaType": "long" },
    { "name": "camel.routecontroller.backOffMultiplier", "description": "Backoff multiplier to use for exponential backoff. This is used to extend the delay between restart attempts.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "number", "javaType": "double" },
    { "name": "camel.routecontroller.enabled", "description": "To enable using supervising route controller which allows Camel to startup and then the controller takes care of starting the routes in a safe manner. This can be used when you want to startup Camel despite a route may otherwise fail fast during startup and cause Camel to fail to startup as well. By delegating the route startup to the supervising route controller then its manages the startup using a background thread. The controller allows to be configured with various settings to attempt to restart failing routes.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.routecontroller.excludeRoutes", "description": "Pattern for filtering routes to be excluded as supervised. The pattern is matching on route id, and endpoint uri for the route. Multiple patterns can be separated by comma. For example to exclude all JMS routes, you can say jms:. And to exclude routes with specific route ids mySpecialRoute,myOtherSpecialRoute. The pattern supports wildcards and uses the matcher from org.apache.camel.support.PatternHelper#matchPattern.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.routecontroller.includeRoutes", "description": "Pattern for filtering routes to be included as supervised. The pattern is matching on route id, and endpoint uri for the route. Multiple patterns can be separated by comma. For example to include all kafka routes, you can say kafka:. And to include routes with specific route ids myRoute,myOtherRoute. The pattern supports wildcards and uses the matcher from org.apache.camel.support.PatternHelper#matchPattern.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.routecontroller.initialDelay", "description": "Initial delay in milli seconds before the route controller starts, after CamelContext has been started.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "integer", "javaType": "long" },
    { "name": "camel.routecontroller.threadPoolSize", "description": "The number of threads used by the route controller scheduled thread pool that are used for restarting routes. The pool uses 1 thread by default, but you can increase this to allow the controller to concurrently attempt to restart multiple routes in case more than one route has problems starting.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 1 },
    { "name": "camel.routecontroller.unhealthyOnExhausted", "description": "Whether to mark the route as unhealthy (down) when all restarting attempts (backoff) have failed and the route is not successfully started and the route manager is giving up. Setting this to true allows health checks to know about this and can report the Camel application as DOWN. The default is false.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.routecontroller.unhealthyOnRestarting", "description": "Whether to mark the route as unhealthy (down) when the route failed to initially start, and is being controlled for restarting (backoff). Setting this to true allows health checks to know about this and can report the Camel application as DOWN. The default is false.", "sourceType": "org.apache.camel.main.RouteControllerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.server.devConsoleEnabled", "description": "Whether to enable developer console (not intended for production use). Dev console must also be enabled on CamelContext. For example by setting camel.context.dev-console=true in application.properties, or via code camelContext.setDevConsole(true); If enabled then you can access a basic developer console on context-path: \/q\/dev.", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.server.enabled", "description": "Whether embedded HTTP server is enabled. By default, the server is not enabled.", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.server.healthCheckEnabled", "description": "Whether to enable health-check console. If enabled then you can access health-check status on context-path: \/q\/health", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.server.host", "description": "Hostname to use for binding embedded HTTP server", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "0.0.0.0" },
    { "name": "camel.server.infoEnabled", "description": "Whether to enable info console. If enabled then you can see some basic Camel information at \/q\/info", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.server.jolokiaEnabled", "description": "Whether to enable jolokia. If enabled then you can access jolokia api on context-path: \/q\/jolokia", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.server.maxBodySize", "description": "Maximum HTTP body size the embedded HTTP server can accept.", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "integer", "javaType": "java.lang.Long" },
    { "name": "camel.server.metricsEnabled", "description": "Whether to enable metrics. If enabled then you can access metrics on context-path: \/q\/metrics", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.server.path", "description": "Context-path to use for embedded HTTP server", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "\/" },
    { "name": "camel.server.port", "description": "Port to use for binding embedded HTTP server", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 8080 },
    { "name": "camel.server.uploadEnabled", "description": "Whether to enable file upload via HTTP (not intended for production use). This functionality is for development to be able to reload Camel routes and code with source changes (if reload is enabled). If enabled then you can upload\/delete files via HTTP PUT\/DELETE on context-path: \/q\/upload\/{name}. You must also configure the uploadSourceDir option.", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.server.uploadSourceDir", "description": "Source directory when upload is enabled.", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.server.useGlobalSslContextParameters", "description": "Whether to use global SSL configuration for securing the embedded HTTP server.", "sourceType": "org.apache.camel.main.HttpServerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.ssl.clientAuthentication", "description": "Sets the configuration for server-side client-authentication requirements", "sourceType": "org.apache.camel.main.SSLConfigurationProperties", "type": "string", "javaType": "java.lang.String", "defaultValue": "NONE", "enum": [ "NONE", "WANT", "REQUIRE" ] },
    { "name": "camel.ssl.enabled", "description": "Enables SSL in your Camel application.", "sourceType": "org.apache.camel.main.SSLConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.ssl.keyStore", "description": "Sets the SSL Keystore resource.", "sourceType": "org.apache.camel.main.SSLConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.ssl.keystorePassword", "description": "Sets the SSL Keystore password.", "sourceType": "org.apache.camel.main.SSLConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.ssl.trustStore", "description": "Sets the SSL Truststore resource.", "sourceType": "org.apache.camel.main.SSLConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.ssl.trustStorePassword", "description": "Sets the SSL Truststore password.", "sourceType": "org.apache.camel.main.SSLConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.threadpool.allowCoreThreadTimeOut", "description": "Sets default whether to allow core threads to timeout", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties", "type": "boolean", "javaType": "java.lang.Boolean", "defaultValue": "false" },
    { "name": "camel.threadpool.config", "description": "Adds a configuration for a specific thread pool profile (inherits default values)", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties", "type": "object", "javaType": "java.util.Map" },
    { "name": "camel.threadpool.keepAliveTime", "description": "Sets the default keep alive time for inactive threads", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties", "type": "integer", "javaType": "java.lang.Long" },
    { "name": "camel.threadpool.maxPoolSize", "description": "Sets the default maximum pool size", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer" },
    { "name": "camel.threadpool.maxQueueSize", "description": "Sets the default maximum number of tasks in the work queue. Use -1 or an unbounded queue", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer" },
    { "name": "camel.threadpool.poolSize", "description": "Sets the default core pool size (threads to keep minimum in pool)", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties", "type": "integer", "javaType": "java.lang.Integer" },
    { "name": "camel.threadpool.rejectedPolicy", "description": "Sets the default handler for tasks which cannot be executed by the thread pool.", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties", "type": "object", "javaType": "org.apache.camel.util.concurrent.ThreadPoolRejectedPolicy", "enum": [ "Abort", "CallerRuns", "DiscardOldest", "Discard" ] },
    { "name": "camel.threadpool.timeUnit", "description": "Sets the default time unit used for keep alive time", "sourceType": "org.apache.camel.main.ThreadPoolConfigurationProperties", "type": "object", "javaType": "java.util.concurrent.TimeUnit" },
    { "name": "camel.trace.backlogSize", "description": "Defines how many of the last messages to keep in the tracer.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 1000 },
    { "name": "camel.trace.bodyIncludeFiles", "description": "Whether to include the message body of file based messages. The overhead is that the file content has to be read from the file.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.trace.bodyIncludeStreams", "description": "Whether to include the message body of stream based messages. If enabled then beware the stream may not be re-readable later. See more about Stream Caching.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.trace.bodyMaxChars", "description": "To limit the message body to a maximum size in the traced message. Use 0 or negative value to use unlimited size.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "integer", "javaType": "int", "defaultValue": 131072 },
    { "name": "camel.trace.enabled", "description": "Enables tracer in your Camel application.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.trace.includeException", "description": "Trace messages to include exception if the message failed", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.trace.includeExchangeProperties", "description": "Whether to include the exchange properties in the traced message", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.trace.includeExchangeVariables", "description": "Whether to include the exchange variables in the traced message", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.trace.removeOnDump", "description": "Whether all traced messages should be removed when the tracer is dumping. By default, the messages are removed, which means that dumping will not contain previous dumped messages.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": true },
    { "name": "camel.trace.standby", "description": "To set the tracer in standby mode, where the tracer will be installed by not automatic enabled. The tracer can then later be enabled explicit from Java, JMX or tooling.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.trace.traceFilter", "description": "Filter for tracing messages", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.trace.tracePattern", "description": "Filter for tracing by route or node id", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.trace.traceRests", "description": "Whether to trace routes that is created from Rest DSL.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.trace.traceTemplates", "description": "Whether to trace routes that is created from route templates or kamelets.", "sourceType": "org.apache.camel.main.TracerConfigurationProperties", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.vault.aws.accessKey", "description": "The AWS access key", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.aws.defaultCredentialsProvider", "description": "Define if we want to use the AWS Default Credentials Provider or not", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.vault.aws.profileCredentialsProvider", "description": "Define if we want to use the AWS Profile Credentials Provider or not", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.vault.aws.profileName", "description": "Define the profile name to use if Profile Credentials Provider is selected", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.aws.refreshEnabled", "description": "Whether to automatically reload Camel upon secrets being updated in AWS.", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.vault.aws.refreshPeriod", "description": "The period (millis) between checking AWS for updated secrets.", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "integer", "javaType": "long", "defaultValue": 30000 },
    { "name": "camel.vault.aws.region", "description": "The AWS region", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.aws.secretKey", "description": "The AWS secret key", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.aws.secrets", "description": "Specify the secret names (or pattern) to check for updates. Multiple secrets can be separated by comma.", "sourceType": "org.apache.camel.vault.AwsVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.azureIdentityEnabled", "description": "Whether the Azure Identity Authentication should be used or not.", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.vault.azure.blobAccessKey", "description": "The Eventhubs Blob Access Key for CheckpointStore purpose", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.blobAccountName", "description": "The Eventhubs Blob Account Name for CheckpointStore purpose", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.blobContainerName", "description": "The Eventhubs Blob Container Name for CheckpointStore purpose", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.clientId", "description": "The client Id for accessing Azure Key Vault", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.clientSecret", "description": "The client Secret for accessing Azure Key Vault", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.eventhubConnectionString", "description": "The Eventhubs connection String for Key Vault Secret events notifications", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.refreshEnabled", "description": "Whether to automatically reload Camel upon secrets being updated in Azure.", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.vault.azure.refreshPeriod", "description": "The period (millis) between checking Azure for updated secrets.", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "integer", "javaType": "long", "defaultValue": 30000 },
    { "name": "camel.vault.azure.secrets", "description": "Specify the secret names (or pattern) to check for updates. Multiple secrets can be separated by comma.", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.tenantId", "description": "The Tenant Id for accessing Azure Key Vault", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.azure.vaultName", "description": "The vault Name in Azure Key Vault", "sourceType": "org.apache.camel.vault.AzureVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.gcp.projectId", "description": "The GCP Project ID", "sourceType": "org.apache.camel.vault.GcpVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.gcp.refreshEnabled", "description": "Whether to automatically reload Camel upon secrets being updated in AWS.", "sourceType": "org.apache.camel.vault.GcpVaultConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" },
    { "name": "camel.vault.gcp.refreshPeriod", "description": "The period (millis) between checking Google for updated secrets.", "sourceType": "org.apache.camel.vault.GcpVaultConfiguration", "type": "integer", "javaType": "long", "defaultValue": 30000 },
    { "name": "camel.vault.gcp.secrets", "description": "Specify the secret names (or pattern) to check for updates. Multiple secrets can be separated by comma.", "sourceType": "org.apache.camel.vault.GcpVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.gcp.serviceAccountKey", "description": "The Service Account Key location", "sourceType": "org.apache.camel.vault.GcpVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.gcp.subscriptionName", "description": "Define the Google Pubsub subscription Name to be used when checking for updates", "sourceType": "org.apache.camel.vault.GcpVaultConfiguration", "type": "string", "javaType": "java.lang.String" },
    { "name": "camel.vault.gcp.useDefaultInstance", "description": "Define if we want to use the GCP Client Default Instance or not", "sourceType": "org.apache.camel.vault.GcpVaultConfiguration", "type": "boolean", "javaType": "boolean", "defaultValue": "false" }
  ]
}
