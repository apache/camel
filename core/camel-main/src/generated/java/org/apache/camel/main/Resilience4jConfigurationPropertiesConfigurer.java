/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.main;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.main.Resilience4jConfigurationProperties;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class Resilience4jConfigurationPropertiesConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("AutomaticTransitionFromOpenToHalfOpenEnabled", java.lang.Boolean.class);
        map.put("BulkheadEnabled", java.lang.Boolean.class);
        map.put("BulkheadMaxConcurrentCalls", java.lang.Integer.class);
        map.put("BulkheadMaxWaitDuration", java.lang.Integer.class);
        map.put("CircuitBreaker", java.lang.String.class);
        map.put("Config", java.lang.String.class);
        map.put("FailureRateThreshold", java.lang.Float.class);
        map.put("MinimumNumberOfCalls", java.lang.Integer.class);
        map.put("PermittedNumberOfCallsInHalfOpenState", java.lang.Integer.class);
        map.put("SlidingWindowSize", java.lang.Integer.class);
        map.put("SlidingWindowType", java.lang.String.class);
        map.put("SlowCallDurationThreshold", java.lang.Integer.class);
        map.put("SlowCallRateThreshold", java.lang.Float.class);
        map.put("ThrowExceptionWhenHalfOpenOrOpenState", java.lang.Boolean.class);
        map.put("TimeoutCancelRunningFuture", java.lang.Boolean.class);
        map.put("TimeoutDuration", java.lang.Integer.class);
        map.put("TimeoutEnabled", java.lang.Boolean.class);
        map.put("TimeoutExecutorService", java.lang.String.class);
        map.put("WaitDurationInOpenState", java.lang.Integer.class);
        map.put("WritableStackTraceEnabled", java.lang.Boolean.class);
        ALL_OPTIONS = map;
        ConfigurerStrategy.addBootstrapConfigurerClearer(Resilience4jConfigurationPropertiesConfigurer::clearBootstrapConfigurers);
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.main.Resilience4jConfigurationProperties target = (org.apache.camel.main.Resilience4jConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "automatictransitionfromopentohalfopenenabled":
        case "automaticTransitionFromOpenToHalfOpenEnabled": target.setAutomaticTransitionFromOpenToHalfOpenEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "bulkheadenabled":
        case "bulkheadEnabled": target.setBulkheadEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "bulkheadmaxconcurrentcalls":
        case "bulkheadMaxConcurrentCalls": target.setBulkheadMaxConcurrentCalls(property(camelContext, java.lang.Integer.class, value)); return true;
        case "bulkheadmaxwaitduration":
        case "bulkheadMaxWaitDuration": target.setBulkheadMaxWaitDuration(property(camelContext, java.lang.Integer.class, value)); return true;
        case "circuitbreaker":
        case "circuitBreaker": target.setCircuitBreaker(property(camelContext, java.lang.String.class, value)); return true;
        case "config": target.setConfig(property(camelContext, java.lang.String.class, value)); return true;
        case "failureratethreshold":
        case "failureRateThreshold": target.setFailureRateThreshold(property(camelContext, java.lang.Float.class, value)); return true;
        case "minimumnumberofcalls":
        case "minimumNumberOfCalls": target.setMinimumNumberOfCalls(property(camelContext, java.lang.Integer.class, value)); return true;
        case "permittednumberofcallsinhalfopenstate":
        case "permittedNumberOfCallsInHalfOpenState": target.setPermittedNumberOfCallsInHalfOpenState(property(camelContext, java.lang.Integer.class, value)); return true;
        case "slidingwindowsize":
        case "slidingWindowSize": target.setSlidingWindowSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "slidingwindowtype":
        case "slidingWindowType": target.setSlidingWindowType(property(camelContext, java.lang.String.class, value)); return true;
        case "slowcalldurationthreshold":
        case "slowCallDurationThreshold": target.setSlowCallDurationThreshold(property(camelContext, java.lang.Integer.class, value)); return true;
        case "slowcallratethreshold":
        case "slowCallRateThreshold": target.setSlowCallRateThreshold(property(camelContext, java.lang.Float.class, value)); return true;
        case "throwexceptionwhenhalfopenoropenstate":
        case "throwExceptionWhenHalfOpenOrOpenState": target.setThrowExceptionWhenHalfOpenOrOpenState(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "timeoutcancelrunningfuture":
        case "timeoutCancelRunningFuture": target.setTimeoutCancelRunningFuture(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "timeoutduration":
        case "timeoutDuration": target.setTimeoutDuration(property(camelContext, java.lang.Integer.class, value)); return true;
        case "timeoutenabled":
        case "timeoutEnabled": target.setTimeoutEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "timeoutexecutorservice":
        case "timeoutExecutorService": target.setTimeoutExecutorService(property(camelContext, java.lang.String.class, value)); return true;
        case "waitdurationinopenstate":
        case "waitDurationInOpenState": target.setWaitDurationInOpenState(property(camelContext, java.lang.Integer.class, value)); return true;
        case "writablestacktraceenabled":
        case "writableStackTraceEnabled": target.setWritableStackTraceEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    public static void clearBootstrapConfigurers() {
        ALL_OPTIONS.clear();
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "automatictransitionfromopentohalfopenenabled":
        case "automaticTransitionFromOpenToHalfOpenEnabled": return java.lang.Boolean.class;
        case "bulkheadenabled":
        case "bulkheadEnabled": return java.lang.Boolean.class;
        case "bulkheadmaxconcurrentcalls":
        case "bulkheadMaxConcurrentCalls": return java.lang.Integer.class;
        case "bulkheadmaxwaitduration":
        case "bulkheadMaxWaitDuration": return java.lang.Integer.class;
        case "circuitbreaker":
        case "circuitBreaker": return java.lang.String.class;
        case "config": return java.lang.String.class;
        case "failureratethreshold":
        case "failureRateThreshold": return java.lang.Float.class;
        case "minimumnumberofcalls":
        case "minimumNumberOfCalls": return java.lang.Integer.class;
        case "permittednumberofcallsinhalfopenstate":
        case "permittedNumberOfCallsInHalfOpenState": return java.lang.Integer.class;
        case "slidingwindowsize":
        case "slidingWindowSize": return java.lang.Integer.class;
        case "slidingwindowtype":
        case "slidingWindowType": return java.lang.String.class;
        case "slowcalldurationthreshold":
        case "slowCallDurationThreshold": return java.lang.Integer.class;
        case "slowcallratethreshold":
        case "slowCallRateThreshold": return java.lang.Float.class;
        case "throwexceptionwhenhalfopenoropenstate":
        case "throwExceptionWhenHalfOpenOrOpenState": return java.lang.Boolean.class;
        case "timeoutcancelrunningfuture":
        case "timeoutCancelRunningFuture": return java.lang.Boolean.class;
        case "timeoutduration":
        case "timeoutDuration": return java.lang.Integer.class;
        case "timeoutenabled":
        case "timeoutEnabled": return java.lang.Boolean.class;
        case "timeoutexecutorservice":
        case "timeoutExecutorService": return java.lang.String.class;
        case "waitdurationinopenstate":
        case "waitDurationInOpenState": return java.lang.Integer.class;
        case "writablestacktraceenabled":
        case "writableStackTraceEnabled": return java.lang.Boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.main.Resilience4jConfigurationProperties target = (org.apache.camel.main.Resilience4jConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "automatictransitionfromopentohalfopenenabled":
        case "automaticTransitionFromOpenToHalfOpenEnabled": return target.getAutomaticTransitionFromOpenToHalfOpenEnabled();
        case "bulkheadenabled":
        case "bulkheadEnabled": return target.getBulkheadEnabled();
        case "bulkheadmaxconcurrentcalls":
        case "bulkheadMaxConcurrentCalls": return target.getBulkheadMaxConcurrentCalls();
        case "bulkheadmaxwaitduration":
        case "bulkheadMaxWaitDuration": return target.getBulkheadMaxWaitDuration();
        case "circuitbreaker":
        case "circuitBreaker": return target.getCircuitBreaker();
        case "config": return target.getConfig();
        case "failureratethreshold":
        case "failureRateThreshold": return target.getFailureRateThreshold();
        case "minimumnumberofcalls":
        case "minimumNumberOfCalls": return target.getMinimumNumberOfCalls();
        case "permittednumberofcallsinhalfopenstate":
        case "permittedNumberOfCallsInHalfOpenState": return target.getPermittedNumberOfCallsInHalfOpenState();
        case "slidingwindowsize":
        case "slidingWindowSize": return target.getSlidingWindowSize();
        case "slidingwindowtype":
        case "slidingWindowType": return target.getSlidingWindowType();
        case "slowcalldurationthreshold":
        case "slowCallDurationThreshold": return target.getSlowCallDurationThreshold();
        case "slowcallratethreshold":
        case "slowCallRateThreshold": return target.getSlowCallRateThreshold();
        case "throwexceptionwhenhalfopenoropenstate":
        case "throwExceptionWhenHalfOpenOrOpenState": return target.getThrowExceptionWhenHalfOpenOrOpenState();
        case "timeoutcancelrunningfuture":
        case "timeoutCancelRunningFuture": return target.getTimeoutCancelRunningFuture();
        case "timeoutduration":
        case "timeoutDuration": return target.getTimeoutDuration();
        case "timeoutenabled":
        case "timeoutEnabled": return target.getTimeoutEnabled();
        case "timeoutexecutorservice":
        case "timeoutExecutorService": return target.getTimeoutExecutorService();
        case "waitdurationinopenstate":
        case "waitDurationInOpenState": return target.getWaitDurationInOpenState();
        case "writablestacktraceenabled":
        case "writableStackTraceEnabled": return target.getWritableStackTraceEnabled();
        default: return null;
        }
    }
}

