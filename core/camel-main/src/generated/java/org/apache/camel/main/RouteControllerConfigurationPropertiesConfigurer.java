/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.main;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.main.RouteControllerConfigurationProperties;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class RouteControllerConfigurationPropertiesConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.main.RouteControllerConfigurationProperties target = (org.apache.camel.main.RouteControllerConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "backoffdelay":
        case "backOffDelay": target.setBackOffDelay(property(camelContext, long.class, value)); return true;
        case "backoffmaxattempts":
        case "backOffMaxAttempts": target.setBackOffMaxAttempts(property(camelContext, long.class, value)); return true;
        case "backoffmaxdelay":
        case "backOffMaxDelay": target.setBackOffMaxDelay(property(camelContext, long.class, value)); return true;
        case "backoffmaxelapsedtime":
        case "backOffMaxElapsedTime": target.setBackOffMaxElapsedTime(property(camelContext, long.class, value)); return true;
        case "backoffmultiplier":
        case "backOffMultiplier": target.setBackOffMultiplier(property(camelContext, double.class, value)); return true;
        case "enabled": target.setEnabled(property(camelContext, boolean.class, value)); return true;
        case "excluderoutes":
        case "excludeRoutes": target.setExcludeRoutes(property(camelContext, java.lang.String.class, value)); return true;
        case "includeroutes":
        case "includeRoutes": target.setIncludeRoutes(property(camelContext, java.lang.String.class, value)); return true;
        case "initialdelay":
        case "initialDelay": target.setInitialDelay(property(camelContext, long.class, value)); return true;
        case "threadpoolsize":
        case "threadPoolSize": target.setThreadPoolSize(property(camelContext, int.class, value)); return true;
        case "unhealthyonexhausted":
        case "unhealthyOnExhausted": target.setUnhealthyOnExhausted(property(camelContext, boolean.class, value)); return true;
        case "unhealthyonrestarting":
        case "unhealthyOnRestarting": target.setUnhealthyOnRestarting(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "backoffdelay":
        case "backOffDelay": return long.class;
        case "backoffmaxattempts":
        case "backOffMaxAttempts": return long.class;
        case "backoffmaxdelay":
        case "backOffMaxDelay": return long.class;
        case "backoffmaxelapsedtime":
        case "backOffMaxElapsedTime": return long.class;
        case "backoffmultiplier":
        case "backOffMultiplier": return double.class;
        case "enabled": return boolean.class;
        case "excluderoutes":
        case "excludeRoutes": return java.lang.String.class;
        case "includeroutes":
        case "includeRoutes": return java.lang.String.class;
        case "initialdelay":
        case "initialDelay": return long.class;
        case "threadpoolsize":
        case "threadPoolSize": return int.class;
        case "unhealthyonexhausted":
        case "unhealthyOnExhausted": return boolean.class;
        case "unhealthyonrestarting":
        case "unhealthyOnRestarting": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.main.RouteControllerConfigurationProperties target = (org.apache.camel.main.RouteControllerConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "backoffdelay":
        case "backOffDelay": return target.getBackOffDelay();
        case "backoffmaxattempts":
        case "backOffMaxAttempts": return target.getBackOffMaxAttempts();
        case "backoffmaxdelay":
        case "backOffMaxDelay": return target.getBackOffMaxDelay();
        case "backoffmaxelapsedtime":
        case "backOffMaxElapsedTime": return target.getBackOffMaxElapsedTime();
        case "backoffmultiplier":
        case "backOffMultiplier": return target.getBackOffMultiplier();
        case "enabled": return target.isEnabled();
        case "excluderoutes":
        case "excludeRoutes": return target.getExcludeRoutes();
        case "includeroutes":
        case "includeRoutes": return target.getIncludeRoutes();
        case "initialdelay":
        case "initialDelay": return target.getInitialDelay();
        case "threadpoolsize":
        case "threadPoolSize": return target.getThreadPoolSize();
        case "unhealthyonexhausted":
        case "unhealthyOnExhausted": return target.isUnhealthyOnExhausted();
        case "unhealthyonrestarting":
        case "unhealthyOnRestarting": return target.isUnhealthyOnRestarting();
        default: return null;
        }
    }
}

