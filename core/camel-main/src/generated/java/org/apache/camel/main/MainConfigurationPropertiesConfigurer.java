/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.main;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.main.MainConfigurationProperties;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class MainConfigurationPropertiesConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.main.MainConfigurationProperties target = (org.apache.camel.main.MainConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowuseoriginalmessage":
        case "allowUseOriginalMessage": target.setAllowUseOriginalMessage(property(camelContext, boolean.class, value)); return true;
        case "autoconfigurationenabled":
        case "autoConfigurationEnabled": target.setAutoConfigurationEnabled(property(camelContext, boolean.class, value)); return true;
        case "autoconfigurationenvironmentvariablesenabled":
        case "autoConfigurationEnvironmentVariablesEnabled": target.setAutoConfigurationEnvironmentVariablesEnabled(property(camelContext, boolean.class, value)); return true;
        case "autoconfigurationfailfast":
        case "autoConfigurationFailFast": target.setAutoConfigurationFailFast(property(camelContext, boolean.class, value)); return true;
        case "autoconfigurationlogsummary":
        case "autoConfigurationLogSummary": target.setAutoConfigurationLogSummary(property(camelContext, boolean.class, value)); return true;
        case "autoconfigurationsystempropertiesenabled":
        case "autoConfigurationSystemPropertiesEnabled": target.setAutoConfigurationSystemPropertiesEnabled(property(camelContext, boolean.class, value)); return true;
        case "autostartup":
        case "autoStartup": target.setAutoStartup(property(camelContext, boolean.class, value)); return true;
        case "autowiredenabled":
        case "autowiredEnabled": target.setAutowiredEnabled(property(camelContext, boolean.class, value)); return true;
        case "basepackagescan":
        case "basePackageScan": target.setBasePackageScan(property(camelContext, java.lang.String.class, value)); return true;
        case "basepackagescanenabled":
        case "basePackageScanEnabled": target.setBasePackageScanEnabled(property(camelContext, boolean.class, value)); return true;
        case "beanintrospectionextendedstatistics":
        case "beanIntrospectionExtendedStatistics": target.setBeanIntrospectionExtendedStatistics(property(camelContext, boolean.class, value)); return true;
        case "beanintrospectionlogginglevel":
        case "beanIntrospectionLoggingLevel": target.setBeanIntrospectionLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "beanpostprocessorenabled":
        case "beanPostProcessorEnabled": target.setBeanPostProcessorEnabled(property(camelContext, boolean.class, value)); return true;
        case "cameleventstimestampenabled":
        case "camelEventsTimestampEnabled": target.setCamelEventsTimestampEnabled(property(camelContext, boolean.class, value)); return true;
        case "caseinsensitiveheaders":
        case "caseInsensitiveHeaders": target.setCaseInsensitiveHeaders(property(camelContext, boolean.class, value)); return true;
        case "compileworkdir":
        case "compileWorkDir": target.setCompileWorkDir(property(camelContext, java.lang.String.class, value)); return true;
        case "configurationclasses":
        case "configurationClasses": target.setConfigurationClasses(property(camelContext, java.lang.String.class, value)); return true;
        case "configurations": target.setConfigurations(property(camelContext, java.util.List.class, value)); return true;
        case "consumertemplatecachesize":
        case "consumerTemplateCacheSize": target.setConsumerTemplateCacheSize(property(camelContext, int.class, value)); return true;
        case "contextreloadenabled":
        case "contextReloadEnabled": target.setContextReloadEnabled(property(camelContext, boolean.class, value)); return true;
        case "description": target.setDescription(property(camelContext, java.lang.String.class, value)); return true;
        case "devconsoleenabled":
        case "devConsoleEnabled": target.setDevConsoleEnabled(property(camelContext, boolean.class, value)); return true;
        case "dumproutes":
        case "dumpRoutes": target.setDumpRoutes(property(camelContext, java.lang.String.class, value)); return true;
        case "dumproutesgeneratedids":
        case "dumpRoutesGeneratedIds": target.setDumpRoutesGeneratedIds(property(camelContext, boolean.class, value)); return true;
        case "dumproutesinclude":
        case "dumpRoutesInclude": target.setDumpRoutesInclude(property(camelContext, java.lang.String.class, value)); return true;
        case "dumprouteslog":
        case "dumpRoutesLog": target.setDumpRoutesLog(property(camelContext, boolean.class, value)); return true;
        case "dumproutesoutput":
        case "dumpRoutesOutput": target.setDumpRoutesOutput(property(camelContext, java.lang.String.class, value)); return true;
        case "dumproutesresolveplaceholders":
        case "dumpRoutesResolvePlaceholders": target.setDumpRoutesResolvePlaceholders(property(camelContext, boolean.class, value)); return true;
        case "dumproutesuriasparameters":
        case "dumpRoutesUriAsParameters": target.setDumpRoutesUriAsParameters(property(camelContext, boolean.class, value)); return true;
        case "durationhitexitcode":
        case "durationHitExitCode": target.setDurationHitExitCode(property(camelContext, int.class, value)); return true;
        case "durationmaxaction":
        case "durationMaxAction": target.setDurationMaxAction(property(camelContext, java.lang.String.class, value)); return true;
        case "durationmaxidleseconds":
        case "durationMaxIdleSeconds": target.setDurationMaxIdleSeconds(property(camelContext, int.class, value)); return true;
        case "durationmaxmessages":
        case "durationMaxMessages": target.setDurationMaxMessages(property(camelContext, int.class, value)); return true;
        case "durationmaxseconds":
        case "durationMaxSeconds": target.setDurationMaxSeconds(property(camelContext, int.class, value)); return true;
        case "endpointbridgeerrorhandler":
        case "endpointBridgeErrorHandler": target.setEndpointBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "endpointlazystartproducer":
        case "endpointLazyStartProducer": target.setEndpointLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "endpointruntimestatisticsenabled":
        case "endpointRuntimeStatisticsEnabled": target.setEndpointRuntimeStatisticsEnabled(property(camelContext, boolean.class, value)); return true;
        case "exchangefactory":
        case "exchangeFactory": target.setExchangeFactory(property(camelContext, java.lang.String.class, value)); return true;
        case "exchangefactorycapacity":
        case "exchangeFactoryCapacity": target.setExchangeFactoryCapacity(property(camelContext, int.class, value)); return true;
        case "exchangefactorystatisticsenabled":
        case "exchangeFactoryStatisticsEnabled": target.setExchangeFactoryStatisticsEnabled(property(camelContext, boolean.class, value)); return true;
        case "extrashutdowntimeout":
        case "extraShutdownTimeout": target.setExtraShutdownTimeout(property(camelContext, int.class, value)); return true;
        case "fileconfigurations":
        case "fileConfigurations": target.setFileConfigurations(property(camelContext, java.lang.String.class, value)); return true;
        case "globaloptions":
        case "globalOptions": target.setGlobalOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "inflightrepositorybrowseenabled":
        case "inflightRepositoryBrowseEnabled": target.setInflightRepositoryBrowseEnabled(property(camelContext, boolean.class, value)); return true;
        case "javaroutesexcludepattern":
        case "javaRoutesExcludePattern": target.setJavaRoutesExcludePattern(property(camelContext, java.lang.String.class, value)); return true;
        case "javaroutesincludepattern":
        case "javaRoutesIncludePattern": target.setJavaRoutesIncludePattern(property(camelContext, java.lang.String.class, value)); return true;
        case "jmxenabled":
        case "jmxEnabled": target.setJmxEnabled(property(camelContext, boolean.class, value)); return true;
        case "jmxmanagementmbeanslevel":
        case "jmxManagementMBeansLevel": target.setJmxManagementMBeansLevel(property(camelContext, org.apache.camel.ManagementMBeansLevel.class, value)); return true;
        case "jmxmanagementnamepattern":
        case "jmxManagementNamePattern": target.setJmxManagementNamePattern(property(camelContext, java.lang.String.class, value)); return true;
        case "jmxmanagementregisterroutescreatebykamelet":
        case "jmxManagementRegisterRoutesCreateByKamelet": target.setJmxManagementRegisterRoutesCreateByKamelet(property(camelContext, boolean.class, value)); return true;
        case "jmxmanagementregisterroutescreatebytemplate":
        case "jmxManagementRegisterRoutesCreateByTemplate": target.setJmxManagementRegisterRoutesCreateByTemplate(property(camelContext, boolean.class, value)); return true;
        case "jmxmanagementstatisticslevel":
        case "jmxManagementStatisticsLevel": target.setJmxManagementStatisticsLevel(property(camelContext, org.apache.camel.ManagementStatisticsLevel.class, value)); return true;
        case "jmxupdaterouteenabled":
        case "jmxUpdateRouteEnabled": target.setJmxUpdateRouteEnabled(property(camelContext, boolean.class, value)); return true;
        case "lightweight": target.setLightweight(property(camelContext, boolean.class, value)); return true;
        case "loadhealthchecks":
        case "loadHealthChecks": target.setLoadHealthChecks(property(camelContext, boolean.class, value)); return true;
        case "loadstatisticsenabled":
        case "loadStatisticsEnabled": target.setLoadStatisticsEnabled(property(camelContext, boolean.class, value)); return true;
        case "loadtypeconverters":
        case "loadTypeConverters": target.setLoadTypeConverters(property(camelContext, boolean.class, value)); return true;
        case "logdebugmaxchars":
        case "logDebugMaxChars": target.setLogDebugMaxChars(property(camelContext, int.class, value)); return true;
        case "logexhaustedmessagebody":
        case "logExhaustedMessageBody": target.setLogExhaustedMessageBody(property(camelContext, boolean.class, value)); return true;
        case "logmask":
        case "logMask": target.setLogMask(property(camelContext, boolean.class, value)); return true;
        case "mdcloggingkeyspattern":
        case "mdcLoggingKeysPattern": target.setMdcLoggingKeysPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "messagehistory":
        case "messageHistory": target.setMessageHistory(property(camelContext, boolean.class, value)); return true;
        case "modeline": target.setModeline(property(camelContext, boolean.class, value)); return true;
        case "name": target.setName(property(camelContext, java.lang.String.class, value)); return true;
        case "producertemplatecachesize":
        case "producerTemplateCacheSize": target.setProducerTemplateCacheSize(property(camelContext, int.class, value)); return true;
        case "profile": target.setProfile(property(camelContext, java.lang.String.class, value)); return true;
        case "routefilterexcludepattern":
        case "routeFilterExcludePattern": target.setRouteFilterExcludePattern(property(camelContext, java.lang.String.class, value)); return true;
        case "routefilterincludepattern":
        case "routeFilterIncludePattern": target.setRouteFilterIncludePattern(property(camelContext, java.lang.String.class, value)); return true;
        case "routesbuilderclasses":
        case "routesBuilderClasses": target.setRoutesBuilderClasses(property(camelContext, java.lang.String.class, value)); return true;
        case "routesbuilders":
        case "routesBuilders": target.setRoutesBuilders(property(camelContext, java.util.List.class, value)); return true;
        case "routescollectorenabled":
        case "routesCollectorEnabled": target.setRoutesCollectorEnabled(property(camelContext, boolean.class, value)); return true;
        case "routescollectorignoreloadingerror":
        case "routesCollectorIgnoreLoadingError": target.setRoutesCollectorIgnoreLoadingError(property(camelContext, boolean.class, value)); return true;
        case "routesexcludepattern":
        case "routesExcludePattern": target.setRoutesExcludePattern(property(camelContext, java.lang.String.class, value)); return true;
        case "routesincludepattern":
        case "routesIncludePattern": target.setRoutesIncludePattern(property(camelContext, java.lang.String.class, value)); return true;
        case "routesreloaddirectory":
        case "routesReloadDirectory": target.setRoutesReloadDirectory(property(camelContext, java.lang.String.class, value)); return true;
        case "routesreloaddirectoryrecursive":
        case "routesReloadDirectoryRecursive": target.setRoutesReloadDirectoryRecursive(property(camelContext, boolean.class, value)); return true;
        case "routesreloadenabled":
        case "routesReloadEnabled": target.setRoutesReloadEnabled(property(camelContext, boolean.class, value)); return true;
        case "routesreloadpattern":
        case "routesReloadPattern": target.setRoutesReloadPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "routesreloadremoveallroutes":
        case "routesReloadRemoveAllRoutes": target.setRoutesReloadRemoveAllRoutes(property(camelContext, boolean.class, value)); return true;
        case "routesreloadrestartduration":
        case "routesReloadRestartDuration": target.setRoutesReloadRestartDuration(property(camelContext, boolean.class, value)); return true;
        case "shutdownloginflightexchangesontimeout":
        case "shutdownLogInflightExchangesOnTimeout": target.setShutdownLogInflightExchangesOnTimeout(property(camelContext, boolean.class, value)); return true;
        case "shutdownnowontimeout":
        case "shutdownNowOnTimeout": target.setShutdownNowOnTimeout(property(camelContext, boolean.class, value)); return true;
        case "shutdownroutesinreverseorder":
        case "shutdownRoutesInReverseOrder": target.setShutdownRoutesInReverseOrder(property(camelContext, boolean.class, value)); return true;
        case "shutdownsuppressloggingontimeout":
        case "shutdownSuppressLoggingOnTimeout": target.setShutdownSuppressLoggingOnTimeout(property(camelContext, boolean.class, value)); return true;
        case "shutdowntimeout":
        case "shutdownTimeout": target.setShutdownTimeout(property(camelContext, int.class, value)); return true;
        case "sourcelocationenabled":
        case "sourceLocationEnabled": target.setSourceLocationEnabled(property(camelContext, boolean.class, value)); return true;
        case "startuprecorder":
        case "startupRecorder": target.setStartupRecorder(property(camelContext, java.lang.String.class, value)); return true;
        case "startuprecorderdir":
        case "startupRecorderDir": target.setStartupRecorderDir(property(camelContext, java.lang.String.class, value)); return true;
        case "startuprecorderduration":
        case "startupRecorderDuration": target.setStartupRecorderDuration(property(camelContext, long.class, value)); return true;
        case "startuprecordermaxdepth":
        case "startupRecorderMaxDepth": target.setStartupRecorderMaxDepth(property(camelContext, int.class, value)); return true;
        case "startuprecorderprofile":
        case "startupRecorderProfile": target.setStartupRecorderProfile(property(camelContext, java.lang.String.class, value)); return true;
        case "startuprecorderrecording":
        case "startupRecorderRecording": target.setStartupRecorderRecording(property(camelContext, boolean.class, value)); return true;
        case "startupsummarylevel":
        case "startupSummaryLevel": target.setStartupSummaryLevel(property(camelContext, org.apache.camel.StartupSummaryLevel.class, value)); return true;
        case "streamcachingallowclasses":
        case "streamCachingAllowClasses": target.setStreamCachingAllowClasses(property(camelContext, java.lang.String.class, value)); return true;
        case "streamcachinganyspoolrules":
        case "streamCachingAnySpoolRules": target.setStreamCachingAnySpoolRules(property(camelContext, boolean.class, value)); return true;
        case "streamcachingbuffersize":
        case "streamCachingBufferSize": target.setStreamCachingBufferSize(property(camelContext, int.class, value)); return true;
        case "streamcachingdenyclasses":
        case "streamCachingDenyClasses": target.setStreamCachingDenyClasses(property(camelContext, java.lang.String.class, value)); return true;
        case "streamcachingenabled":
        case "streamCachingEnabled": target.setStreamCachingEnabled(property(camelContext, boolean.class, value)); return true;
        case "streamcachingremovespooldirectorywhenstopping":
        case "streamCachingRemoveSpoolDirectoryWhenStopping": target.setStreamCachingRemoveSpoolDirectoryWhenStopping(property(camelContext, boolean.class, value)); return true;
        case "streamcachingspoolcipher":
        case "streamCachingSpoolCipher": target.setStreamCachingSpoolCipher(property(camelContext, java.lang.String.class, value)); return true;
        case "streamcachingspooldirectory":
        case "streamCachingSpoolDirectory": target.setStreamCachingSpoolDirectory(property(camelContext, java.lang.String.class, value)); return true;
        case "streamcachingspoolenabled":
        case "streamCachingSpoolEnabled": target.setStreamCachingSpoolEnabled(property(camelContext, boolean.class, value)); return true;
        case "streamcachingspoolthreshold":
        case "streamCachingSpoolThreshold": target.setStreamCachingSpoolThreshold(property(camelContext, long.class, value)); return true;
        case "streamcachingspoolusedheapmemorylimit":
        case "streamCachingSpoolUsedHeapMemoryLimit": target.setStreamCachingSpoolUsedHeapMemoryLimit(property(camelContext, java.lang.String.class, value)); return true;
        case "streamcachingspoolusedheapmemorythreshold":
        case "streamCachingSpoolUsedHeapMemoryThreshold": target.setStreamCachingSpoolUsedHeapMemoryThreshold(property(camelContext, int.class, value)); return true;
        case "streamcachingstatisticsenabled":
        case "streamCachingStatisticsEnabled": target.setStreamCachingStatisticsEnabled(property(camelContext, boolean.class, value)); return true;
        case "threadnamepattern":
        case "threadNamePattern": target.setThreadNamePattern(property(camelContext, java.lang.String.class, value)); return true;
        case "tracing": target.setTracing(property(camelContext, boolean.class, value)); return true;
        case "tracingloggingformat":
        case "tracingLoggingFormat": target.setTracingLoggingFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "tracingpattern":
        case "tracingPattern": target.setTracingPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "tracingstandby":
        case "tracingStandby": target.setTracingStandby(property(camelContext, boolean.class, value)); return true;
        case "tracingtemplates":
        case "tracingTemplates": target.setTracingTemplates(property(camelContext, boolean.class, value)); return true;
        case "typeconverterstatisticsenabled":
        case "typeConverterStatisticsEnabled": target.setTypeConverterStatisticsEnabled(property(camelContext, boolean.class, value)); return true;
        case "usebreadcrumb":
        case "useBreadcrumb": target.setUseBreadcrumb(property(camelContext, boolean.class, value)); return true;
        case "usedatatype":
        case "useDataType": target.setUseDataType(property(camelContext, boolean.class, value)); return true;
        case "usemdclogging":
        case "useMdcLogging": target.setUseMdcLogging(property(camelContext, boolean.class, value)); return true;
        case "uuidgenerator":
        case "uuidGenerator": target.setUuidGenerator(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowuseoriginalmessage":
        case "allowUseOriginalMessage": return boolean.class;
        case "autoconfigurationenabled":
        case "autoConfigurationEnabled": return boolean.class;
        case "autoconfigurationenvironmentvariablesenabled":
        case "autoConfigurationEnvironmentVariablesEnabled": return boolean.class;
        case "autoconfigurationfailfast":
        case "autoConfigurationFailFast": return boolean.class;
        case "autoconfigurationlogsummary":
        case "autoConfigurationLogSummary": return boolean.class;
        case "autoconfigurationsystempropertiesenabled":
        case "autoConfigurationSystemPropertiesEnabled": return boolean.class;
        case "autostartup":
        case "autoStartup": return boolean.class;
        case "autowiredenabled":
        case "autowiredEnabled": return boolean.class;
        case "basepackagescan":
        case "basePackageScan": return java.lang.String.class;
        case "basepackagescanenabled":
        case "basePackageScanEnabled": return boolean.class;
        case "beanintrospectionextendedstatistics":
        case "beanIntrospectionExtendedStatistics": return boolean.class;
        case "beanintrospectionlogginglevel":
        case "beanIntrospectionLoggingLevel": return org.apache.camel.LoggingLevel.class;
        case "beanpostprocessorenabled":
        case "beanPostProcessorEnabled": return boolean.class;
        case "cameleventstimestampenabled":
        case "camelEventsTimestampEnabled": return boolean.class;
        case "caseinsensitiveheaders":
        case "caseInsensitiveHeaders": return boolean.class;
        case "compileworkdir":
        case "compileWorkDir": return java.lang.String.class;
        case "configurationclasses":
        case "configurationClasses": return java.lang.String.class;
        case "configurations": return java.util.List.class;
        case "consumertemplatecachesize":
        case "consumerTemplateCacheSize": return int.class;
        case "contextreloadenabled":
        case "contextReloadEnabled": return boolean.class;
        case "description": return java.lang.String.class;
        case "devconsoleenabled":
        case "devConsoleEnabled": return boolean.class;
        case "dumproutes":
        case "dumpRoutes": return java.lang.String.class;
        case "dumproutesgeneratedids":
        case "dumpRoutesGeneratedIds": return boolean.class;
        case "dumproutesinclude":
        case "dumpRoutesInclude": return java.lang.String.class;
        case "dumprouteslog":
        case "dumpRoutesLog": return boolean.class;
        case "dumproutesoutput":
        case "dumpRoutesOutput": return java.lang.String.class;
        case "dumproutesresolveplaceholders":
        case "dumpRoutesResolvePlaceholders": return boolean.class;
        case "dumproutesuriasparameters":
        case "dumpRoutesUriAsParameters": return boolean.class;
        case "durationhitexitcode":
        case "durationHitExitCode": return int.class;
        case "durationmaxaction":
        case "durationMaxAction": return java.lang.String.class;
        case "durationmaxidleseconds":
        case "durationMaxIdleSeconds": return int.class;
        case "durationmaxmessages":
        case "durationMaxMessages": return int.class;
        case "durationmaxseconds":
        case "durationMaxSeconds": return int.class;
        case "endpointbridgeerrorhandler":
        case "endpointBridgeErrorHandler": return boolean.class;
        case "endpointlazystartproducer":
        case "endpointLazyStartProducer": return boolean.class;
        case "endpointruntimestatisticsenabled":
        case "endpointRuntimeStatisticsEnabled": return boolean.class;
        case "exchangefactory":
        case "exchangeFactory": return java.lang.String.class;
        case "exchangefactorycapacity":
        case "exchangeFactoryCapacity": return int.class;
        case "exchangefactorystatisticsenabled":
        case "exchangeFactoryStatisticsEnabled": return boolean.class;
        case "extrashutdowntimeout":
        case "extraShutdownTimeout": return int.class;
        case "fileconfigurations":
        case "fileConfigurations": return java.lang.String.class;
        case "globaloptions":
        case "globalOptions": return java.util.Map.class;
        case "inflightrepositorybrowseenabled":
        case "inflightRepositoryBrowseEnabled": return boolean.class;
        case "javaroutesexcludepattern":
        case "javaRoutesExcludePattern": return java.lang.String.class;
        case "javaroutesincludepattern":
        case "javaRoutesIncludePattern": return java.lang.String.class;
        case "jmxenabled":
        case "jmxEnabled": return boolean.class;
        case "jmxmanagementmbeanslevel":
        case "jmxManagementMBeansLevel": return org.apache.camel.ManagementMBeansLevel.class;
        case "jmxmanagementnamepattern":
        case "jmxManagementNamePattern": return java.lang.String.class;
        case "jmxmanagementregisterroutescreatebykamelet":
        case "jmxManagementRegisterRoutesCreateByKamelet": return boolean.class;
        case "jmxmanagementregisterroutescreatebytemplate":
        case "jmxManagementRegisterRoutesCreateByTemplate": return boolean.class;
        case "jmxmanagementstatisticslevel":
        case "jmxManagementStatisticsLevel": return org.apache.camel.ManagementStatisticsLevel.class;
        case "jmxupdaterouteenabled":
        case "jmxUpdateRouteEnabled": return boolean.class;
        case "lightweight": return boolean.class;
        case "loadhealthchecks":
        case "loadHealthChecks": return boolean.class;
        case "loadstatisticsenabled":
        case "loadStatisticsEnabled": return boolean.class;
        case "loadtypeconverters":
        case "loadTypeConverters": return boolean.class;
        case "logdebugmaxchars":
        case "logDebugMaxChars": return int.class;
        case "logexhaustedmessagebody":
        case "logExhaustedMessageBody": return boolean.class;
        case "logmask":
        case "logMask": return boolean.class;
        case "mdcloggingkeyspattern":
        case "mdcLoggingKeysPattern": return java.lang.String.class;
        case "messagehistory":
        case "messageHistory": return boolean.class;
        case "modeline": return boolean.class;
        case "name": return java.lang.String.class;
        case "producertemplatecachesize":
        case "producerTemplateCacheSize": return int.class;
        case "profile": return java.lang.String.class;
        case "routefilterexcludepattern":
        case "routeFilterExcludePattern": return java.lang.String.class;
        case "routefilterincludepattern":
        case "routeFilterIncludePattern": return java.lang.String.class;
        case "routesbuilderclasses":
        case "routesBuilderClasses": return java.lang.String.class;
        case "routesbuilders":
        case "routesBuilders": return java.util.List.class;
        case "routescollectorenabled":
        case "routesCollectorEnabled": return boolean.class;
        case "routescollectorignoreloadingerror":
        case "routesCollectorIgnoreLoadingError": return boolean.class;
        case "routesexcludepattern":
        case "routesExcludePattern": return java.lang.String.class;
        case "routesincludepattern":
        case "routesIncludePattern": return java.lang.String.class;
        case "routesreloaddirectory":
        case "routesReloadDirectory": return java.lang.String.class;
        case "routesreloaddirectoryrecursive":
        case "routesReloadDirectoryRecursive": return boolean.class;
        case "routesreloadenabled":
        case "routesReloadEnabled": return boolean.class;
        case "routesreloadpattern":
        case "routesReloadPattern": return java.lang.String.class;
        case "routesreloadremoveallroutes":
        case "routesReloadRemoveAllRoutes": return boolean.class;
        case "routesreloadrestartduration":
        case "routesReloadRestartDuration": return boolean.class;
        case "shutdownloginflightexchangesontimeout":
        case "shutdownLogInflightExchangesOnTimeout": return boolean.class;
        case "shutdownnowontimeout":
        case "shutdownNowOnTimeout": return boolean.class;
        case "shutdownroutesinreverseorder":
        case "shutdownRoutesInReverseOrder": return boolean.class;
        case "shutdownsuppressloggingontimeout":
        case "shutdownSuppressLoggingOnTimeout": return boolean.class;
        case "shutdowntimeout":
        case "shutdownTimeout": return int.class;
        case "sourcelocationenabled":
        case "sourceLocationEnabled": return boolean.class;
        case "startuprecorder":
        case "startupRecorder": return java.lang.String.class;
        case "startuprecorderdir":
        case "startupRecorderDir": return java.lang.String.class;
        case "startuprecorderduration":
        case "startupRecorderDuration": return long.class;
        case "startuprecordermaxdepth":
        case "startupRecorderMaxDepth": return int.class;
        case "startuprecorderprofile":
        case "startupRecorderProfile": return java.lang.String.class;
        case "startuprecorderrecording":
        case "startupRecorderRecording": return boolean.class;
        case "startupsummarylevel":
        case "startupSummaryLevel": return org.apache.camel.StartupSummaryLevel.class;
        case "streamcachingallowclasses":
        case "streamCachingAllowClasses": return java.lang.String.class;
        case "streamcachinganyspoolrules":
        case "streamCachingAnySpoolRules": return boolean.class;
        case "streamcachingbuffersize":
        case "streamCachingBufferSize": return int.class;
        case "streamcachingdenyclasses":
        case "streamCachingDenyClasses": return java.lang.String.class;
        case "streamcachingenabled":
        case "streamCachingEnabled": return boolean.class;
        case "streamcachingremovespooldirectorywhenstopping":
        case "streamCachingRemoveSpoolDirectoryWhenStopping": return boolean.class;
        case "streamcachingspoolcipher":
        case "streamCachingSpoolCipher": return java.lang.String.class;
        case "streamcachingspooldirectory":
        case "streamCachingSpoolDirectory": return java.lang.String.class;
        case "streamcachingspoolenabled":
        case "streamCachingSpoolEnabled": return boolean.class;
        case "streamcachingspoolthreshold":
        case "streamCachingSpoolThreshold": return long.class;
        case "streamcachingspoolusedheapmemorylimit":
        case "streamCachingSpoolUsedHeapMemoryLimit": return java.lang.String.class;
        case "streamcachingspoolusedheapmemorythreshold":
        case "streamCachingSpoolUsedHeapMemoryThreshold": return int.class;
        case "streamcachingstatisticsenabled":
        case "streamCachingStatisticsEnabled": return boolean.class;
        case "threadnamepattern":
        case "threadNamePattern": return java.lang.String.class;
        case "tracing": return boolean.class;
        case "tracingloggingformat":
        case "tracingLoggingFormat": return java.lang.String.class;
        case "tracingpattern":
        case "tracingPattern": return java.lang.String.class;
        case "tracingstandby":
        case "tracingStandby": return boolean.class;
        case "tracingtemplates":
        case "tracingTemplates": return boolean.class;
        case "typeconverterstatisticsenabled":
        case "typeConverterStatisticsEnabled": return boolean.class;
        case "usebreadcrumb":
        case "useBreadcrumb": return boolean.class;
        case "usedatatype":
        case "useDataType": return boolean.class;
        case "usemdclogging":
        case "useMdcLogging": return boolean.class;
        case "uuidgenerator":
        case "uuidGenerator": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.main.MainConfigurationProperties target = (org.apache.camel.main.MainConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowuseoriginalmessage":
        case "allowUseOriginalMessage": return target.isAllowUseOriginalMessage();
        case "autoconfigurationenabled":
        case "autoConfigurationEnabled": return target.isAutoConfigurationEnabled();
        case "autoconfigurationenvironmentvariablesenabled":
        case "autoConfigurationEnvironmentVariablesEnabled": return target.isAutoConfigurationEnvironmentVariablesEnabled();
        case "autoconfigurationfailfast":
        case "autoConfigurationFailFast": return target.isAutoConfigurationFailFast();
        case "autoconfigurationlogsummary":
        case "autoConfigurationLogSummary": return target.isAutoConfigurationLogSummary();
        case "autoconfigurationsystempropertiesenabled":
        case "autoConfigurationSystemPropertiesEnabled": return target.isAutoConfigurationSystemPropertiesEnabled();
        case "autostartup":
        case "autoStartup": return target.isAutoStartup();
        case "autowiredenabled":
        case "autowiredEnabled": return target.isAutowiredEnabled();
        case "basepackagescan":
        case "basePackageScan": return target.getBasePackageScan();
        case "basepackagescanenabled":
        case "basePackageScanEnabled": return target.isBasePackageScanEnabled();
        case "beanintrospectionextendedstatistics":
        case "beanIntrospectionExtendedStatistics": return target.isBeanIntrospectionExtendedStatistics();
        case "beanintrospectionlogginglevel":
        case "beanIntrospectionLoggingLevel": return target.getBeanIntrospectionLoggingLevel();
        case "beanpostprocessorenabled":
        case "beanPostProcessorEnabled": return target.isBeanPostProcessorEnabled();
        case "cameleventstimestampenabled":
        case "camelEventsTimestampEnabled": return target.isCamelEventsTimestampEnabled();
        case "caseinsensitiveheaders":
        case "caseInsensitiveHeaders": return target.isCaseInsensitiveHeaders();
        case "compileworkdir":
        case "compileWorkDir": return target.getCompileWorkDir();
        case "configurationclasses":
        case "configurationClasses": return target.getConfigurationClasses();
        case "configurations": return target.getConfigurations();
        case "consumertemplatecachesize":
        case "consumerTemplateCacheSize": return target.getConsumerTemplateCacheSize();
        case "contextreloadenabled":
        case "contextReloadEnabled": return target.isContextReloadEnabled();
        case "description": return target.getDescription();
        case "devconsoleenabled":
        case "devConsoleEnabled": return target.isDevConsoleEnabled();
        case "dumproutes":
        case "dumpRoutes": return target.getDumpRoutes();
        case "dumproutesgeneratedids":
        case "dumpRoutesGeneratedIds": return target.isDumpRoutesGeneratedIds();
        case "dumproutesinclude":
        case "dumpRoutesInclude": return target.getDumpRoutesInclude();
        case "dumprouteslog":
        case "dumpRoutesLog": return target.isDumpRoutesLog();
        case "dumproutesoutput":
        case "dumpRoutesOutput": return target.getDumpRoutesOutput();
        case "dumproutesresolveplaceholders":
        case "dumpRoutesResolvePlaceholders": return target.isDumpRoutesResolvePlaceholders();
        case "dumproutesuriasparameters":
        case "dumpRoutesUriAsParameters": return target.isDumpRoutesUriAsParameters();
        case "durationhitexitcode":
        case "durationHitExitCode": return target.getDurationHitExitCode();
        case "durationmaxaction":
        case "durationMaxAction": return target.getDurationMaxAction();
        case "durationmaxidleseconds":
        case "durationMaxIdleSeconds": return target.getDurationMaxIdleSeconds();
        case "durationmaxmessages":
        case "durationMaxMessages": return target.getDurationMaxMessages();
        case "durationmaxseconds":
        case "durationMaxSeconds": return target.getDurationMaxSeconds();
        case "endpointbridgeerrorhandler":
        case "endpointBridgeErrorHandler": return target.isEndpointBridgeErrorHandler();
        case "endpointlazystartproducer":
        case "endpointLazyStartProducer": return target.isEndpointLazyStartProducer();
        case "endpointruntimestatisticsenabled":
        case "endpointRuntimeStatisticsEnabled": return target.isEndpointRuntimeStatisticsEnabled();
        case "exchangefactory":
        case "exchangeFactory": return target.getExchangeFactory();
        case "exchangefactorycapacity":
        case "exchangeFactoryCapacity": return target.getExchangeFactoryCapacity();
        case "exchangefactorystatisticsenabled":
        case "exchangeFactoryStatisticsEnabled": return target.isExchangeFactoryStatisticsEnabled();
        case "extrashutdowntimeout":
        case "extraShutdownTimeout": return target.getExtraShutdownTimeout();
        case "fileconfigurations":
        case "fileConfigurations": return target.getFileConfigurations();
        case "globaloptions":
        case "globalOptions": return target.getGlobalOptions();
        case "inflightrepositorybrowseenabled":
        case "inflightRepositoryBrowseEnabled": return target.isInflightRepositoryBrowseEnabled();
        case "javaroutesexcludepattern":
        case "javaRoutesExcludePattern": return target.getJavaRoutesExcludePattern();
        case "javaroutesincludepattern":
        case "javaRoutesIncludePattern": return target.getJavaRoutesIncludePattern();
        case "jmxenabled":
        case "jmxEnabled": return target.isJmxEnabled();
        case "jmxmanagementmbeanslevel":
        case "jmxManagementMBeansLevel": return target.getJmxManagementMBeansLevel();
        case "jmxmanagementnamepattern":
        case "jmxManagementNamePattern": return target.getJmxManagementNamePattern();
        case "jmxmanagementregisterroutescreatebykamelet":
        case "jmxManagementRegisterRoutesCreateByKamelet": return target.isJmxManagementRegisterRoutesCreateByKamelet();
        case "jmxmanagementregisterroutescreatebytemplate":
        case "jmxManagementRegisterRoutesCreateByTemplate": return target.isJmxManagementRegisterRoutesCreateByTemplate();
        case "jmxmanagementstatisticslevel":
        case "jmxManagementStatisticsLevel": return target.getJmxManagementStatisticsLevel();
        case "jmxupdaterouteenabled":
        case "jmxUpdateRouteEnabled": return target.isJmxUpdateRouteEnabled();
        case "lightweight": return target.isLightweight();
        case "loadhealthchecks":
        case "loadHealthChecks": return target.isLoadHealthChecks();
        case "loadstatisticsenabled":
        case "loadStatisticsEnabled": return target.isLoadStatisticsEnabled();
        case "loadtypeconverters":
        case "loadTypeConverters": return target.isLoadTypeConverters();
        case "logdebugmaxchars":
        case "logDebugMaxChars": return target.getLogDebugMaxChars();
        case "logexhaustedmessagebody":
        case "logExhaustedMessageBody": return target.isLogExhaustedMessageBody();
        case "logmask":
        case "logMask": return target.isLogMask();
        case "mdcloggingkeyspattern":
        case "mdcLoggingKeysPattern": return target.getMdcLoggingKeysPattern();
        case "messagehistory":
        case "messageHistory": return target.isMessageHistory();
        case "modeline": return target.isModeline();
        case "name": return target.getName();
        case "producertemplatecachesize":
        case "producerTemplateCacheSize": return target.getProducerTemplateCacheSize();
        case "profile": return target.getProfile();
        case "routefilterexcludepattern":
        case "routeFilterExcludePattern": return target.getRouteFilterExcludePattern();
        case "routefilterincludepattern":
        case "routeFilterIncludePattern": return target.getRouteFilterIncludePattern();
        case "routesbuilderclasses":
        case "routesBuilderClasses": return target.getRoutesBuilderClasses();
        case "routesbuilders":
        case "routesBuilders": return target.getRoutesBuilders();
        case "routescollectorenabled":
        case "routesCollectorEnabled": return target.isRoutesCollectorEnabled();
        case "routescollectorignoreloadingerror":
        case "routesCollectorIgnoreLoadingError": return target.isRoutesCollectorIgnoreLoadingError();
        case "routesexcludepattern":
        case "routesExcludePattern": return target.getRoutesExcludePattern();
        case "routesincludepattern":
        case "routesIncludePattern": return target.getRoutesIncludePattern();
        case "routesreloaddirectory":
        case "routesReloadDirectory": return target.getRoutesReloadDirectory();
        case "routesreloaddirectoryrecursive":
        case "routesReloadDirectoryRecursive": return target.isRoutesReloadDirectoryRecursive();
        case "routesreloadenabled":
        case "routesReloadEnabled": return target.isRoutesReloadEnabled();
        case "routesreloadpattern":
        case "routesReloadPattern": return target.getRoutesReloadPattern();
        case "routesreloadremoveallroutes":
        case "routesReloadRemoveAllRoutes": return target.isRoutesReloadRemoveAllRoutes();
        case "routesreloadrestartduration":
        case "routesReloadRestartDuration": return target.isRoutesReloadRestartDuration();
        case "shutdownloginflightexchangesontimeout":
        case "shutdownLogInflightExchangesOnTimeout": return target.isShutdownLogInflightExchangesOnTimeout();
        case "shutdownnowontimeout":
        case "shutdownNowOnTimeout": return target.isShutdownNowOnTimeout();
        case "shutdownroutesinreverseorder":
        case "shutdownRoutesInReverseOrder": return target.isShutdownRoutesInReverseOrder();
        case "shutdownsuppressloggingontimeout":
        case "shutdownSuppressLoggingOnTimeout": return target.isShutdownSuppressLoggingOnTimeout();
        case "shutdowntimeout":
        case "shutdownTimeout": return target.getShutdownTimeout();
        case "sourcelocationenabled":
        case "sourceLocationEnabled": return target.isSourceLocationEnabled();
        case "startuprecorder":
        case "startupRecorder": return target.getStartupRecorder();
        case "startuprecorderdir":
        case "startupRecorderDir": return target.getStartupRecorderDir();
        case "startuprecorderduration":
        case "startupRecorderDuration": return target.getStartupRecorderDuration();
        case "startuprecordermaxdepth":
        case "startupRecorderMaxDepth": return target.getStartupRecorderMaxDepth();
        case "startuprecorderprofile":
        case "startupRecorderProfile": return target.getStartupRecorderProfile();
        case "startuprecorderrecording":
        case "startupRecorderRecording": return target.isStartupRecorderRecording();
        case "startupsummarylevel":
        case "startupSummaryLevel": return target.getStartupSummaryLevel();
        case "streamcachingallowclasses":
        case "streamCachingAllowClasses": return target.getStreamCachingAllowClasses();
        case "streamcachinganyspoolrules":
        case "streamCachingAnySpoolRules": return target.isStreamCachingAnySpoolRules();
        case "streamcachingbuffersize":
        case "streamCachingBufferSize": return target.getStreamCachingBufferSize();
        case "streamcachingdenyclasses":
        case "streamCachingDenyClasses": return target.getStreamCachingDenyClasses();
        case "streamcachingenabled":
        case "streamCachingEnabled": return target.isStreamCachingEnabled();
        case "streamcachingremovespooldirectorywhenstopping":
        case "streamCachingRemoveSpoolDirectoryWhenStopping": return target.isStreamCachingRemoveSpoolDirectoryWhenStopping();
        case "streamcachingspoolcipher":
        case "streamCachingSpoolCipher": return target.getStreamCachingSpoolCipher();
        case "streamcachingspooldirectory":
        case "streamCachingSpoolDirectory": return target.getStreamCachingSpoolDirectory();
        case "streamcachingspoolenabled":
        case "streamCachingSpoolEnabled": return target.isStreamCachingSpoolEnabled();
        case "streamcachingspoolthreshold":
        case "streamCachingSpoolThreshold": return target.getStreamCachingSpoolThreshold();
        case "streamcachingspoolusedheapmemorylimit":
        case "streamCachingSpoolUsedHeapMemoryLimit": return target.getStreamCachingSpoolUsedHeapMemoryLimit();
        case "streamcachingspoolusedheapmemorythreshold":
        case "streamCachingSpoolUsedHeapMemoryThreshold": return target.getStreamCachingSpoolUsedHeapMemoryThreshold();
        case "streamcachingstatisticsenabled":
        case "streamCachingStatisticsEnabled": return target.isStreamCachingStatisticsEnabled();
        case "threadnamepattern":
        case "threadNamePattern": return target.getThreadNamePattern();
        case "tracing": return target.isTracing();
        case "tracingloggingformat":
        case "tracingLoggingFormat": return target.getTracingLoggingFormat();
        case "tracingpattern":
        case "tracingPattern": return target.getTracingPattern();
        case "tracingstandby":
        case "tracingStandby": return target.isTracingStandby();
        case "tracingtemplates":
        case "tracingTemplates": return target.isTracingTemplates();
        case "typeconverterstatisticsenabled":
        case "typeConverterStatisticsEnabled": return target.isTypeConverterStatisticsEnabled();
        case "usebreadcrumb":
        case "useBreadcrumb": return target.isUseBreadcrumb();
        case "usedatatype":
        case "useDataType": return target.isUseDataType();
        case "usemdclogging":
        case "useMdcLogging": return target.isUseMdcLogging();
        case "uuidgenerator":
        case "uuidGenerator": return target.getUuidGenerator();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "configurations": return org.apache.camel.CamelConfiguration.class;
        case "globaloptions":
        case "globalOptions": return java.lang.String.class;
        case "routesbuilders":
        case "routesBuilders": return org.apache.camel.RoutesBuilder.class;
        default: return null;
        }
    }
}

