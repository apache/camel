/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.main;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.main.SSLConfigurationProperties;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class SSLConfigurationPropertiesConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("CertAlias", java.lang.String.class);
        map.put("CipherSuites", java.lang.String.class);
        map.put("CipherSuitesExclude", java.lang.String.class);
        map.put("CipherSuitesInclude", java.lang.String.class);
        map.put("ClientAuthentication", java.lang.String.class);
        map.put("Enabled", boolean.class);
        map.put("KeyManagerAlgorithm", java.lang.String.class);
        map.put("KeyManagerProvider", java.lang.String.class);
        map.put("KeyStore", java.lang.String.class);
        map.put("KeyStoreProvider", java.lang.String.class);
        map.put("KeyStoreType", java.lang.String.class);
        map.put("KeystorePassword", java.lang.String.class);
        map.put("Provider", java.lang.String.class);
        map.put("SecureRandomAlgorithm", java.lang.String.class);
        map.put("SecureRandomProvider", java.lang.String.class);
        map.put("SecureSocketProtocol", java.lang.String.class);
        map.put("SessionTimeout", int.class);
        map.put("TrustAllCertificates", boolean.class);
        map.put("TrustStore", java.lang.String.class);
        map.put("TrustStorePassword", java.lang.String.class);
        ALL_OPTIONS = map;
        ConfigurerStrategy.addBootstrapConfigurerClearer(SSLConfigurationPropertiesConfigurer::clearBootstrapConfigurers);
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.main.SSLConfigurationProperties target = (org.apache.camel.main.SSLConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "certalias":
        case "certAlias": target.setCertAlias(property(camelContext, java.lang.String.class, value)); return true;
        case "ciphersuites":
        case "cipherSuites": target.setCipherSuites(property(camelContext, java.lang.String.class, value)); return true;
        case "ciphersuitesexclude":
        case "cipherSuitesExclude": target.setCipherSuitesExclude(property(camelContext, java.lang.String.class, value)); return true;
        case "ciphersuitesinclude":
        case "cipherSuitesInclude": target.setCipherSuitesInclude(property(camelContext, java.lang.String.class, value)); return true;
        case "clientauthentication":
        case "clientAuthentication": target.setClientAuthentication(property(camelContext, java.lang.String.class, value)); return true;
        case "enabled": target.setEnabled(property(camelContext, boolean.class, value)); return true;
        case "keymanageralgorithm":
        case "keyManagerAlgorithm": target.setKeyManagerAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "keymanagerprovider":
        case "keyManagerProvider": target.setKeyManagerProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "keystore":
        case "keyStore": target.setKeyStore(property(camelContext, java.lang.String.class, value)); return true;
        case "keystoreprovider":
        case "keyStoreProvider": target.setKeyStoreProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "keystoretype":
        case "keyStoreType": target.setKeyStoreType(property(camelContext, java.lang.String.class, value)); return true;
        case "keystorepassword":
        case "keystorePassword": target.setKeystorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "provider": target.setProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "securerandomalgorithm":
        case "secureRandomAlgorithm": target.setSecureRandomAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "securerandomprovider":
        case "secureRandomProvider": target.setSecureRandomProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "securesocketprotocol":
        case "secureSocketProtocol": target.setSecureSocketProtocol(property(camelContext, java.lang.String.class, value)); return true;
        case "sessiontimeout":
        case "sessionTimeout": target.setSessionTimeout(property(camelContext, int.class, value)); return true;
        case "trustallcertificates":
        case "trustAllCertificates": target.setTrustAllCertificates(property(camelContext, boolean.class, value)); return true;
        case "truststore":
        case "trustStore": target.setTrustStore(property(camelContext, java.lang.String.class, value)); return true;
        case "truststorepassword":
        case "trustStorePassword": target.setTrustStorePassword(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    public static void clearBootstrapConfigurers() {
        ALL_OPTIONS.clear();
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "certalias":
        case "certAlias": return java.lang.String.class;
        case "ciphersuites":
        case "cipherSuites": return java.lang.String.class;
        case "ciphersuitesexclude":
        case "cipherSuitesExclude": return java.lang.String.class;
        case "ciphersuitesinclude":
        case "cipherSuitesInclude": return java.lang.String.class;
        case "clientauthentication":
        case "clientAuthentication": return java.lang.String.class;
        case "enabled": return boolean.class;
        case "keymanageralgorithm":
        case "keyManagerAlgorithm": return java.lang.String.class;
        case "keymanagerprovider":
        case "keyManagerProvider": return java.lang.String.class;
        case "keystore":
        case "keyStore": return java.lang.String.class;
        case "keystoreprovider":
        case "keyStoreProvider": return java.lang.String.class;
        case "keystoretype":
        case "keyStoreType": return java.lang.String.class;
        case "keystorepassword":
        case "keystorePassword": return java.lang.String.class;
        case "provider": return java.lang.String.class;
        case "securerandomalgorithm":
        case "secureRandomAlgorithm": return java.lang.String.class;
        case "securerandomprovider":
        case "secureRandomProvider": return java.lang.String.class;
        case "securesocketprotocol":
        case "secureSocketProtocol": return java.lang.String.class;
        case "sessiontimeout":
        case "sessionTimeout": return int.class;
        case "trustallcertificates":
        case "trustAllCertificates": return boolean.class;
        case "truststore":
        case "trustStore": return java.lang.String.class;
        case "truststorepassword":
        case "trustStorePassword": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.main.SSLConfigurationProperties target = (org.apache.camel.main.SSLConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "certalias":
        case "certAlias": return target.getCertAlias();
        case "ciphersuites":
        case "cipherSuites": return target.getCipherSuites();
        case "ciphersuitesexclude":
        case "cipherSuitesExclude": return target.getCipherSuitesExclude();
        case "ciphersuitesinclude":
        case "cipherSuitesInclude": return target.getCipherSuitesInclude();
        case "clientauthentication":
        case "clientAuthentication": return target.getClientAuthentication();
        case "enabled": return target.isEnabled();
        case "keymanageralgorithm":
        case "keyManagerAlgorithm": return target.getKeyManagerAlgorithm();
        case "keymanagerprovider":
        case "keyManagerProvider": return target.getKeyManagerProvider();
        case "keystore":
        case "keyStore": return target.getKeyStore();
        case "keystoreprovider":
        case "keyStoreProvider": return target.getKeyStoreProvider();
        case "keystoretype":
        case "keyStoreType": return target.getKeyStoreType();
        case "keystorepassword":
        case "keystorePassword": return target.getKeystorePassword();
        case "provider": return target.getProvider();
        case "securerandomalgorithm":
        case "secureRandomAlgorithm": return target.getSecureRandomAlgorithm();
        case "securerandomprovider":
        case "secureRandomProvider": return target.getSecureRandomProvider();
        case "securesocketprotocol":
        case "secureSocketProtocol": return target.getSecureSocketProtocol();
        case "sessiontimeout":
        case "sessionTimeout": return target.getSessionTimeout();
        case "trustallcertificates":
        case "trustAllCertificates": return target.isTrustAllCertificates();
        case "truststore":
        case "trustStore": return target.getTrustStore();
        case "truststorepassword":
        case "trustStorePassword": return target.getTrustStorePassword();
        default: return null;
        }
    }
}

