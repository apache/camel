/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.main;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.main.DebuggerConfigurationProperties;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DebuggerConfigurationPropertiesConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.main.DebuggerConfigurationProperties target = (org.apache.camel.main.DebuggerConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bodyincludefiles":
        case "BodyIncludeFiles": target.setBodyIncludeFiles(property(camelContext, boolean.class, value)); return true;
        case "bodyincludestreams":
        case "BodyIncludeStreams": target.setBodyIncludeStreams(property(camelContext, boolean.class, value)); return true;
        case "bodymaxchars":
        case "BodyMaxChars": target.setBodyMaxChars(property(camelContext, int.class, value)); return true;
        case "breakpoints":
        case "Breakpoints": target.setBreakpoints(property(camelContext, java.lang.String.class, value)); return true;
        case "enabled":
        case "Enabled": target.setEnabled(property(camelContext, boolean.class, value)); return true;
        case "fallbacktimeout":
        case "FallbackTimeout": target.setFallbackTimeout(property(camelContext, long.class, value)); return true;
        case "includeexception":
        case "IncludeException": target.setIncludeException(property(camelContext, boolean.class, value)); return true;
        case "includeexchangeproperties":
        case "IncludeExchangeProperties": target.setIncludeExchangeProperties(property(camelContext, boolean.class, value)); return true;
        case "logginglevel":
        case "LoggingLevel": target.setLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "singlestepincludestartend":
        case "SingleStepIncludeStartEnd": target.setSingleStepIncludeStartEnd(property(camelContext, boolean.class, value)); return true;
        case "standby":
        case "Standby": target.setStandby(property(camelContext, boolean.class, value)); return true;
        case "waitforattach":
        case "WaitForAttach": target.setWaitForAttach(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bodyincludefiles":
        case "BodyIncludeFiles": return boolean.class;
        case "bodyincludestreams":
        case "BodyIncludeStreams": return boolean.class;
        case "bodymaxchars":
        case "BodyMaxChars": return int.class;
        case "breakpoints":
        case "Breakpoints": return java.lang.String.class;
        case "enabled":
        case "Enabled": return boolean.class;
        case "fallbacktimeout":
        case "FallbackTimeout": return long.class;
        case "includeexception":
        case "IncludeException": return boolean.class;
        case "includeexchangeproperties":
        case "IncludeExchangeProperties": return boolean.class;
        case "logginglevel":
        case "LoggingLevel": return org.apache.camel.LoggingLevel.class;
        case "singlestepincludestartend":
        case "SingleStepIncludeStartEnd": return boolean.class;
        case "standby":
        case "Standby": return boolean.class;
        case "waitforattach":
        case "WaitForAttach": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.main.DebuggerConfigurationProperties target = (org.apache.camel.main.DebuggerConfigurationProperties) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bodyincludefiles":
        case "BodyIncludeFiles": return target.isBodyIncludeFiles();
        case "bodyincludestreams":
        case "BodyIncludeStreams": return target.isBodyIncludeStreams();
        case "bodymaxchars":
        case "BodyMaxChars": return target.getBodyMaxChars();
        case "breakpoints":
        case "Breakpoints": return target.getBreakpoints();
        case "enabled":
        case "Enabled": return target.isEnabled();
        case "fallbacktimeout":
        case "FallbackTimeout": return target.getFallbackTimeout();
        case "includeexception":
        case "IncludeException": return target.isIncludeException();
        case "includeexchangeproperties":
        case "IncludeExchangeProperties": return target.isIncludeExchangeProperties();
        case "logginglevel":
        case "LoggingLevel": return target.getLoggingLevel();
        case "singlestepincludestartend":
        case "SingleStepIncludeStartEnd": return target.isSingleStepIncludeStartEnd();
        case "standby":
        case "Standby": return target.isStandby();
        case "waitforattach":
        case "WaitForAttach": return target.isWaitForAttach();
        default: return null;
        }
    }
}

