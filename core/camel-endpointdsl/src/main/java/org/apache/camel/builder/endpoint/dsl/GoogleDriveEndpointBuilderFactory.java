/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The google-drive component provides access to Google Drive file storage
 * service.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface GoogleDriveEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Google Drive component.
     */
    public interface GoogleDriveEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedGoogleDriveEndpointConsumerBuilder advanced() {
            return (AdvancedGoogleDriveEndpointConsumerBuilder) this;
        }
        /**
         * What kind of operation to perform.
         * The option is a
         * <code>org.apache.camel.component.google.drive.internal.GoogleDriveApiName</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder apiName(
                GoogleDriveApiName apiName) {
            setProperty("apiName", apiName);
            return this;
        }
        /**
         * What kind of operation to perform.
         * The option will be converted to a
         * <code>org.apache.camel.component.google.drive.internal.GoogleDriveApiName</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder apiName(String apiName) {
            setProperty("apiName", apiName);
            return this;
        }
        /**
         * What sub operation to use for the selected operation.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder methodName(String methodName) {
            setProperty("methodName", methodName);
            return this;
        }
        /**
         * OAuth 2 access token. This typically expires after an hour so
         * refreshToken is recommended for long term usage.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder accessToken(
                String accessToken) {
            setProperty("accessToken", accessToken);
            return this;
        }
        /**
         * Google drive application name. Example would be
         * camel-google-drive/1.0.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder applicationName(
                String applicationName) {
            setProperty("applicationName", applicationName);
            return this;
        }
        /**
         * To use the GoogleCalendarClientFactory as factory for creating the
         * client. Will by default use BatchGoogleDriveClientFactory.
         * The option is a
         * <code>org.apache.camel.component.google.drive.GoogleDriveClientFactory</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder clientFactory(
                Object clientFactory) {
            setProperty("clientFactory", clientFactory);
            return this;
        }
        /**
         * To use the GoogleCalendarClientFactory as factory for creating the
         * client. Will by default use BatchGoogleDriveClientFactory.
         * The option will be converted to a
         * <code>org.apache.camel.component.google.drive.GoogleDriveClientFactory</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder clientFactory(
                String clientFactory) {
            setProperty("clientFactory", clientFactory);
            return this;
        }
        /**
         * Client ID of the drive application.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder clientId(String clientId) {
            setProperty("clientId", clientId);
            return this;
        }
        /**
         * Client secret of the drive application.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder clientSecret(
                String clientSecret) {
            setProperty("clientSecret", clientSecret);
            return this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder inBody(String inBody) {
            setProperty("inBody", inBody);
            return this;
        }
        /**
         * OAuth 2 refresh token. Using this, the Google Calendar component can
         * obtain a new accessToken whenever the current one expires - a
         * necessity if the application is long-lived.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder refreshToken(
                String refreshToken) {
            setProperty("refreshToken", refreshToken);
            return this;
        }
        /**
         * Specifies the level of permissions you want a drive application to
         * have to a user account. See
         * https://developers.google.com/drive/web/scopes for more info.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder scopes(List<String> scopes) {
            setProperty("scopes", scopes);
            return this;
        }
        /**
         * Specifies the level of permissions you want a drive application to
         * have to a user account. See
         * https://developers.google.com/drive/web/scopes for more info.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group common
         */
        default GoogleDriveEndpointConsumerBuilder scopes(String scopes) {
            setProperty("scopes", scopes);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default GoogleDriveEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default GoogleDriveEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Google Drive component.
     */
    public interface AdvancedGoogleDriveEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default GoogleDriveEndpointConsumerBuilder basic() {
            return (GoogleDriveEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        default AdvancedGoogleDriveEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        default AdvancedGoogleDriveEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedGoogleDriveEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedGoogleDriveEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Google Drive component.
     */
    public interface GoogleDriveEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedGoogleDriveEndpointProducerBuilder advanced() {
            return (AdvancedGoogleDriveEndpointProducerBuilder) this;
        }
        /**
         * What kind of operation to perform.
         * The option is a
         * <code>org.apache.camel.component.google.drive.internal.GoogleDriveApiName</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder apiName(
                GoogleDriveApiName apiName) {
            setProperty("apiName", apiName);
            return this;
        }
        /**
         * What kind of operation to perform.
         * The option will be converted to a
         * <code>org.apache.camel.component.google.drive.internal.GoogleDriveApiName</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder apiName(String apiName) {
            setProperty("apiName", apiName);
            return this;
        }
        /**
         * What sub operation to use for the selected operation.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder methodName(String methodName) {
            setProperty("methodName", methodName);
            return this;
        }
        /**
         * OAuth 2 access token. This typically expires after an hour so
         * refreshToken is recommended for long term usage.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder accessToken(
                String accessToken) {
            setProperty("accessToken", accessToken);
            return this;
        }
        /**
         * Google drive application name. Example would be
         * camel-google-drive/1.0.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder applicationName(
                String applicationName) {
            setProperty("applicationName", applicationName);
            return this;
        }
        /**
         * To use the GoogleCalendarClientFactory as factory for creating the
         * client. Will by default use BatchGoogleDriveClientFactory.
         * The option is a
         * <code>org.apache.camel.component.google.drive.GoogleDriveClientFactory</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder clientFactory(
                Object clientFactory) {
            setProperty("clientFactory", clientFactory);
            return this;
        }
        /**
         * To use the GoogleCalendarClientFactory as factory for creating the
         * client. Will by default use BatchGoogleDriveClientFactory.
         * The option will be converted to a
         * <code>org.apache.camel.component.google.drive.GoogleDriveClientFactory</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder clientFactory(
                String clientFactory) {
            setProperty("clientFactory", clientFactory);
            return this;
        }
        /**
         * Client ID of the drive application.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder clientId(String clientId) {
            setProperty("clientId", clientId);
            return this;
        }
        /**
         * Client secret of the drive application.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder clientSecret(
                String clientSecret) {
            setProperty("clientSecret", clientSecret);
            return this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder inBody(String inBody) {
            setProperty("inBody", inBody);
            return this;
        }
        /**
         * OAuth 2 refresh token. Using this, the Google Calendar component can
         * obtain a new accessToken whenever the current one expires - a
         * necessity if the application is long-lived.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder refreshToken(
                String refreshToken) {
            setProperty("refreshToken", refreshToken);
            return this;
        }
        /**
         * Specifies the level of permissions you want a drive application to
         * have to a user account. See
         * https://developers.google.com/drive/web/scopes for more info.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder scopes(List<String> scopes) {
            setProperty("scopes", scopes);
            return this;
        }
        /**
         * Specifies the level of permissions you want a drive application to
         * have to a user account. See
         * https://developers.google.com/drive/web/scopes for more info.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group common
         */
        default GoogleDriveEndpointProducerBuilder scopes(String scopes) {
            setProperty("scopes", scopes);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default GoogleDriveEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default GoogleDriveEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Google Drive component.
     */
    public interface AdvancedGoogleDriveEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default GoogleDriveEndpointProducerBuilder basic() {
            return (GoogleDriveEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Google Drive component.
     */
    public interface GoogleDriveEndpointBuilder
            extends
                GoogleDriveEndpointConsumerBuilder, GoogleDriveEndpointProducerBuilder {
        default AdvancedGoogleDriveEndpointBuilder advanced() {
            return (AdvancedGoogleDriveEndpointBuilder) this;
        }
        /**
         * What kind of operation to perform.
         * The option is a
         * <code>org.apache.camel.component.google.drive.internal.GoogleDriveApiName</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder apiName(GoogleDriveApiName apiName) {
            setProperty("apiName", apiName);
            return this;
        }
        /**
         * What kind of operation to perform.
         * The option will be converted to a
         * <code>org.apache.camel.component.google.drive.internal.GoogleDriveApiName</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder apiName(String apiName) {
            setProperty("apiName", apiName);
            return this;
        }
        /**
         * What sub operation to use for the selected operation.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder methodName(String methodName) {
            setProperty("methodName", methodName);
            return this;
        }
        /**
         * OAuth 2 access token. This typically expires after an hour so
         * refreshToken is recommended for long term usage.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder accessToken(String accessToken) {
            setProperty("accessToken", accessToken);
            return this;
        }
        /**
         * Google drive application name. Example would be
         * camel-google-drive/1.0.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder applicationName(
                String applicationName) {
            setProperty("applicationName", applicationName);
            return this;
        }
        /**
         * To use the GoogleCalendarClientFactory as factory for creating the
         * client. Will by default use BatchGoogleDriveClientFactory.
         * The option is a
         * <code>org.apache.camel.component.google.drive.GoogleDriveClientFactory</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder clientFactory(Object clientFactory) {
            setProperty("clientFactory", clientFactory);
            return this;
        }
        /**
         * To use the GoogleCalendarClientFactory as factory for creating the
         * client. Will by default use BatchGoogleDriveClientFactory.
         * The option will be converted to a
         * <code>org.apache.camel.component.google.drive.GoogleDriveClientFactory</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder clientFactory(String clientFactory) {
            setProperty("clientFactory", clientFactory);
            return this;
        }
        /**
         * Client ID of the drive application.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder clientId(String clientId) {
            setProperty("clientId", clientId);
            return this;
        }
        /**
         * Client secret of the drive application.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder clientSecret(String clientSecret) {
            setProperty("clientSecret", clientSecret);
            return this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder inBody(String inBody) {
            setProperty("inBody", inBody);
            return this;
        }
        /**
         * OAuth 2 refresh token. Using this, the Google Calendar component can
         * obtain a new accessToken whenever the current one expires - a
         * necessity if the application is long-lived.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder refreshToken(String refreshToken) {
            setProperty("refreshToken", refreshToken);
            return this;
        }
        /**
         * Specifies the level of permissions you want a drive application to
         * have to a user account. See
         * https://developers.google.com/drive/web/scopes for more info.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group common
         */
        default GoogleDriveEndpointBuilder scopes(List<String> scopes) {
            setProperty("scopes", scopes);
            return this;
        }
        /**
         * Specifies the level of permissions you want a drive application to
         * have to a user account. See
         * https://developers.google.com/drive/web/scopes for more info.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group common
         */
        default GoogleDriveEndpointBuilder scopes(String scopes) {
            setProperty("scopes", scopes);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Google Drive component.
     */
    public interface AdvancedGoogleDriveEndpointBuilder
            extends
                AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {
        default GoogleDriveEndpointBuilder basic() {
            return (GoogleDriveEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleDriveEndpointBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.google.drive.internal.GoogleDriveApiName</code> enum.
     */
    enum GoogleDriveApiName {
        DRIVE_ABOUT,
        DRIVE_APPS,
        DRIVE_CHANGES,
        DRIVE_CHANNELS,
        DRIVE_CHILDREN,
        DRIVE_COMMENTS,
        DRIVE_FILES,
        DRIVE_PARENTS,
        DRIVE_PERMISSIONS,
        DRIVE_PROPERTIES,
        DRIVE_REALTIME,
        DRIVE_REPLIES,
        DRIVE_REVISIONS;
    }
    /**
     * The google-drive component provides access to Google Drive file storage
     * service.
     * Maven coordinates: org.apache.camel:camel-google-drive
     */
    default GoogleDriveEndpointBuilder googleDrive(String path) {
        class GoogleDriveEndpointBuilderImpl extends AbstractEndpointBuilder implements GoogleDriveEndpointBuilder, AdvancedGoogleDriveEndpointBuilder {
            public GoogleDriveEndpointBuilderImpl(String path) {
                super("google-drive", path);
            }
        }
        return new GoogleDriveEndpointBuilderImpl(path);
    }
}