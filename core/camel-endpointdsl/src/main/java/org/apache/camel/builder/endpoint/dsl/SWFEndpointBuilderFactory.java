/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The aws-swf component is used for managing workflows from Amazon Simple
 * Workflow.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SWFEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the AWS Simple Workflow component.
     */
    public interface SWFEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedSWFEndpointConsumerBuilder advanced() {
            return (AdvancedSWFEndpointConsumerBuilder) this;
        }
        /**
         * Activity or workflow.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointConsumerBuilder type(String type) {
            setProperty("type", type);
            return this;
        }
        /**
         * To use the given AmazonSimpleWorkflowClient as client.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.
         * @group common
         */
        default SWFEndpointConsumerBuilder amazonSWClient(Object amazonSWClient) {
            setProperty("amazonSWClient", amazonSWClient);
            return this;
        }
        /**
         * To use the given AmazonSimpleWorkflowClient as client.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.
         * @group common
         */
        default SWFEndpointConsumerBuilder amazonSWClient(String amazonSWClient) {
            setProperty("amazonSWClient", amazonSWClient);
            return this;
        }
        /**
         * An instance of
         * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for
         * serializing/deserializing the data.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>
         * type.
         * @group common
         */
        default SWFEndpointConsumerBuilder dataConverter(Object dataConverter) {
            setProperty("dataConverter", dataConverter);
            return this;
        }
        /**
         * An instance of
         * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for
         * serializing/deserializing the data.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>
         * type.
         * @group common
         */
        default SWFEndpointConsumerBuilder dataConverter(String dataConverter) {
            setProperty("dataConverter", dataConverter);
            return this;
        }
        /**
         * The workflow domain to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointConsumerBuilder domainName(String domainName) {
            setProperty("domainName", domainName);
            return this;
        }
        /**
         * The workflow or activity event name to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointConsumerBuilder eventName(String eventName) {
            setProperty("eventName", eventName);
            return this;
        }
        /**
         * Amazon AWS Region.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointConsumerBuilder region(String region) {
            setProperty("region", region);
            return this;
        }
        /**
         * The workflow or activity event version to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointConsumerBuilder version(String version) {
            setProperty("version", version);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default SWFEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default SWFEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * The list name to consume activities from.
         * The option is a <code>java.lang.String</code> type.
         * @group activity
         */
        default SWFEndpointConsumerBuilder activityList(String activityList) {
            setProperty("activityList", activityList);
            return this;
        }
        /**
         * Maximum number of threads in work pool for activity.
         * The option is a <code>int</code> type.
         * @group activity
         */
        default SWFEndpointConsumerBuilder activityThreadPoolSize(
                int activityThreadPoolSize) {
            setProperty("activityThreadPoolSize", activityThreadPoolSize);
            return this;
        }
        /**
         * Maximum number of threads in work pool for activity.
         * The option will be converted to a <code>int</code> type.
         * @group activity
         */
        default SWFEndpointConsumerBuilder activityThreadPoolSize(
                String activityThreadPoolSize) {
            setProperty("activityThreadPoolSize", activityThreadPoolSize);
            return this;
        }
        /**
         * Activity execution options.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeExecutionOptions</code> type.
         * @group activity
         */
        default SWFEndpointConsumerBuilder activityTypeExecutionOptions(
                Object activityTypeExecutionOptions) {
            setProperty("activityTypeExecutionOptions", activityTypeExecutionOptions);
            return this;
        }
        /**
         * Activity execution options.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeExecutionOptions</code> type.
         * @group activity
         */
        default SWFEndpointConsumerBuilder activityTypeExecutionOptions(
                String activityTypeExecutionOptions) {
            setProperty("activityTypeExecutionOptions", activityTypeExecutionOptions);
            return this;
        }
        /**
         * Activity registration options.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeRegistrationOptions</code> type.
         * @group activity
         */
        default SWFEndpointConsumerBuilder activityTypeRegistrationOptions(
                Object activityTypeRegistrationOptions) {
            setProperty("activityTypeRegistrationOptions", activityTypeRegistrationOptions);
            return this;
        }
        /**
         * Activity registration options.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeRegistrationOptions</code> type.
         * @group activity
         */
        default SWFEndpointConsumerBuilder activityTypeRegistrationOptions(
                String activityTypeRegistrationOptions) {
            setProperty("activityTypeRegistrationOptions", activityTypeRegistrationOptions);
            return this;
        }
        /**
         * The list name to consume workflows from.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointConsumerBuilder workflowList(String workflowList) {
            setProperty("workflowList", workflowList);
            return this;
        }
        /**
         * Workflow registration options.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions</code> type.
         * @group workflow
         */
        default SWFEndpointConsumerBuilder workflowTypeRegistrationOptions(
                Object workflowTypeRegistrationOptions) {
            setProperty("workflowTypeRegistrationOptions", workflowTypeRegistrationOptions);
            return this;
        }
        /**
         * Workflow registration options.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions</code> type.
         * @group workflow
         */
        default SWFEndpointConsumerBuilder workflowTypeRegistrationOptions(
                String workflowTypeRegistrationOptions) {
            setProperty("workflowTypeRegistrationOptions", workflowTypeRegistrationOptions);
            return this;
        }
        /**
         * Amazon AWS Access Key.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default SWFEndpointConsumerBuilder accessKey(String accessKey) {
            setProperty("accessKey", accessKey);
            return this;
        }
        /**
         * Amazon AWS Secret Key.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default SWFEndpointConsumerBuilder secretKey(String secretKey) {
            setProperty("secretKey", secretKey);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the AWS Simple Workflow
     * component.
     */
    public interface AdvancedSWFEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default SWFEndpointConsumerBuilder basic() {
            return (SWFEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        default AdvancedSWFEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        default AdvancedSWFEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedSWFEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedSWFEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * To configure the ClientConfiguration using the key/values from the
         * Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder clientConfigurationParameters(
                Map<String, Object> clientConfigurationParameters) {
            setProperty("clientConfigurationParameters", clientConfigurationParameters);
            return this;
        }
        /**
         * To configure the ClientConfiguration using the key/values from the
         * Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder clientConfigurationParameters(
                String clientConfigurationParameters) {
            setProperty("clientConfigurationParameters", clientConfigurationParameters);
            return this;
        }
        /**
         * To configure the StartWorkflowOptions using the key/values from the
         * Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder startWorkflowOptionsParameters(
                Map<String, Object> startWorkflowOptionsParameters) {
            setProperty("startWorkflowOptionsParameters", startWorkflowOptionsParameters);
            return this;
        }
        /**
         * To configure the StartWorkflowOptions using the key/values from the
         * Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder startWorkflowOptionsParameters(
                String startWorkflowOptionsParameters) {
            setProperty("startWorkflowOptionsParameters", startWorkflowOptionsParameters);
            return this;
        }
        /**
         * To configure the AmazonSimpleWorkflowClient using the key/values from
         * the Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder sWClientParameters(
                Map<String, Object> sWClientParameters) {
            setProperty("sWClientParameters", sWClientParameters);
            return this;
        }
        /**
         * To configure the AmazonSimpleWorkflowClient using the key/values from
         * the Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder sWClientParameters(
                String sWClientParameters) {
            setProperty("sWClientParameters", sWClientParameters);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the AWS Simple Workflow component.
     */
    public interface SWFEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedSWFEndpointProducerBuilder advanced() {
            return (AdvancedSWFEndpointProducerBuilder) this;
        }
        /**
         * Activity or workflow.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointProducerBuilder type(String type) {
            setProperty("type", type);
            return this;
        }
        /**
         * To use the given AmazonSimpleWorkflowClient as client.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.
         * @group common
         */
        default SWFEndpointProducerBuilder amazonSWClient(Object amazonSWClient) {
            setProperty("amazonSWClient", amazonSWClient);
            return this;
        }
        /**
         * To use the given AmazonSimpleWorkflowClient as client.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.
         * @group common
         */
        default SWFEndpointProducerBuilder amazonSWClient(String amazonSWClient) {
            setProperty("amazonSWClient", amazonSWClient);
            return this;
        }
        /**
         * An instance of
         * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for
         * serializing/deserializing the data.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>
         * type.
         * @group common
         */
        default SWFEndpointProducerBuilder dataConverter(Object dataConverter) {
            setProperty("dataConverter", dataConverter);
            return this;
        }
        /**
         * An instance of
         * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for
         * serializing/deserializing the data.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>
         * type.
         * @group common
         */
        default SWFEndpointProducerBuilder dataConverter(String dataConverter) {
            setProperty("dataConverter", dataConverter);
            return this;
        }
        /**
         * The workflow domain to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointProducerBuilder domainName(String domainName) {
            setProperty("domainName", domainName);
            return this;
        }
        /**
         * The workflow or activity event name to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointProducerBuilder eventName(String eventName) {
            setProperty("eventName", eventName);
            return this;
        }
        /**
         * Amazon AWS Region.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointProducerBuilder region(String region) {
            setProperty("region", region);
            return this;
        }
        /**
         * The workflow or activity event version to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointProducerBuilder version(String version) {
            setProperty("version", version);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default SWFEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default SWFEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Activity scheduling options.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions</code> type.
         * @group activity
         */
        default SWFEndpointProducerBuilder activitySchedulingOptions(
                Object activitySchedulingOptions) {
            setProperty("activitySchedulingOptions", activitySchedulingOptions);
            return this;
        }
        /**
         * Activity scheduling options.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions</code> type.
         * @group activity
         */
        default SWFEndpointProducerBuilder activitySchedulingOptions(
                String activitySchedulingOptions) {
            setProperty("activitySchedulingOptions", activitySchedulingOptions);
            return this;
        }
        /**
         * The policy to use on child workflows when terminating a workflow.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointProducerBuilder childPolicy(String childPolicy) {
            setProperty("childPolicy", childPolicy);
            return this;
        }
        /**
         * Set the execution start to close timeout.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointProducerBuilder executionStartToCloseTimeout(
                String executionStartToCloseTimeout) {
            setProperty("executionStartToCloseTimeout", executionStartToCloseTimeout);
            return this;
        }
        /**
         * Workflow operation.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointProducerBuilder operation(String operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * The name of the signal to send to the workflow.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointProducerBuilder signalName(String signalName) {
            setProperty("signalName", signalName);
            return this;
        }
        /**
         * The type of the result when a workflow state is queried.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointProducerBuilder stateResultType(
                String stateResultType) {
            setProperty("stateResultType", stateResultType);
            return this;
        }
        /**
         * Set the task start to close timeout.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointProducerBuilder taskStartToCloseTimeout(
                String taskStartToCloseTimeout) {
            setProperty("taskStartToCloseTimeout", taskStartToCloseTimeout);
            return this;
        }
        /**
         * Details for terminating a workflow.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointProducerBuilder terminationDetails(
                String terminationDetails) {
            setProperty("terminationDetails", terminationDetails);
            return this;
        }
        /**
         * The reason for terminating a workflow.
         * The option is a <code>java.lang.String</code> type.
         * @group workflow
         */
        default SWFEndpointProducerBuilder terminationReason(
                String terminationReason) {
            setProperty("terminationReason", terminationReason);
            return this;
        }
        /**
         * Amazon AWS Access Key.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default SWFEndpointProducerBuilder accessKey(String accessKey) {
            setProperty("accessKey", accessKey);
            return this;
        }
        /**
         * Amazon AWS Secret Key.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default SWFEndpointProducerBuilder secretKey(String secretKey) {
            setProperty("secretKey", secretKey);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the AWS Simple Workflow
     * component.
     */
    public interface AdvancedSWFEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default SWFEndpointProducerBuilder basic() {
            return (SWFEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * To configure the ClientConfiguration using the key/values from the
         * Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder clientConfigurationParameters(
                Map<String, Object> clientConfigurationParameters) {
            setProperty("clientConfigurationParameters", clientConfigurationParameters);
            return this;
        }
        /**
         * To configure the ClientConfiguration using the key/values from the
         * Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder clientConfigurationParameters(
                String clientConfigurationParameters) {
            setProperty("clientConfigurationParameters", clientConfigurationParameters);
            return this;
        }
        /**
         * To configure the StartWorkflowOptions using the key/values from the
         * Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder startWorkflowOptionsParameters(
                Map<String, Object> startWorkflowOptionsParameters) {
            setProperty("startWorkflowOptionsParameters", startWorkflowOptionsParameters);
            return this;
        }
        /**
         * To configure the StartWorkflowOptions using the key/values from the
         * Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder startWorkflowOptionsParameters(
                String startWorkflowOptionsParameters) {
            setProperty("startWorkflowOptionsParameters", startWorkflowOptionsParameters);
            return this;
        }
        /**
         * To configure the AmazonSimpleWorkflowClient using the key/values from
         * the Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder sWClientParameters(
                Map<String, Object> sWClientParameters) {
            setProperty("sWClientParameters", sWClientParameters);
            return this;
        }
        /**
         * To configure the AmazonSimpleWorkflowClient using the key/values from
         * the Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder sWClientParameters(
                String sWClientParameters) {
            setProperty("sWClientParameters", sWClientParameters);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the AWS Simple Workflow component.
     */
    public interface SWFEndpointBuilder
            extends
                SWFEndpointConsumerBuilder, SWFEndpointProducerBuilder {
        default AdvancedSWFEndpointBuilder advanced() {
            return (AdvancedSWFEndpointBuilder) this;
        }
        /**
         * Activity or workflow.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointBuilder type(String type) {
            setProperty("type", type);
            return this;
        }
        /**
         * To use the given AmazonSimpleWorkflowClient as client.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.
         * @group common
         */
        default SWFEndpointBuilder amazonSWClient(Object amazonSWClient) {
            setProperty("amazonSWClient", amazonSWClient);
            return this;
        }
        /**
         * To use the given AmazonSimpleWorkflowClient as client.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.
         * @group common
         */
        default SWFEndpointBuilder amazonSWClient(String amazonSWClient) {
            setProperty("amazonSWClient", amazonSWClient);
            return this;
        }
        /**
         * An instance of
         * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for
         * serializing/deserializing the data.
         * The option is a
         * <code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>
         * type.
         * @group common
         */
        default SWFEndpointBuilder dataConverter(Object dataConverter) {
            setProperty("dataConverter", dataConverter);
            return this;
        }
        /**
         * An instance of
         * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for
         * serializing/deserializing the data.
         * The option will be converted to a
         * <code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>
         * type.
         * @group common
         */
        default SWFEndpointBuilder dataConverter(String dataConverter) {
            setProperty("dataConverter", dataConverter);
            return this;
        }
        /**
         * The workflow domain to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointBuilder domainName(String domainName) {
            setProperty("domainName", domainName);
            return this;
        }
        /**
         * The workflow or activity event name to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointBuilder eventName(String eventName) {
            setProperty("eventName", eventName);
            return this;
        }
        /**
         * Amazon AWS Region.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointBuilder region(String region) {
            setProperty("region", region);
            return this;
        }
        /**
         * The workflow or activity event version to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default SWFEndpointBuilder version(String version) {
            setProperty("version", version);
            return this;
        }
        /**
         * Amazon AWS Access Key.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default SWFEndpointBuilder accessKey(String accessKey) {
            setProperty("accessKey", accessKey);
            return this;
        }
        /**
         * Amazon AWS Secret Key.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default SWFEndpointBuilder secretKey(String secretKey) {
            setProperty("secretKey", secretKey);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the AWS Simple Workflow component.
     */
    public interface AdvancedSWFEndpointBuilder
            extends
                AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {
        default SWFEndpointBuilder basic() {
            return (SWFEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * To configure the ClientConfiguration using the key/values from the
         * Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder clientConfigurationParameters(
                Map<String, Object> clientConfigurationParameters) {
            setProperty("clientConfigurationParameters", clientConfigurationParameters);
            return this;
        }
        /**
         * To configure the ClientConfiguration using the key/values from the
         * Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder clientConfigurationParameters(
                String clientConfigurationParameters) {
            setProperty("clientConfigurationParameters", clientConfigurationParameters);
            return this;
        }
        /**
         * To configure the StartWorkflowOptions using the key/values from the
         * Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder startWorkflowOptionsParameters(
                Map<String, Object> startWorkflowOptionsParameters) {
            setProperty("startWorkflowOptionsParameters", startWorkflowOptionsParameters);
            return this;
        }
        /**
         * To configure the StartWorkflowOptions using the key/values from the
         * Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder startWorkflowOptionsParameters(
                String startWorkflowOptionsParameters) {
            setProperty("startWorkflowOptionsParameters", startWorkflowOptionsParameters);
            return this;
        }
        /**
         * To configure the AmazonSimpleWorkflowClient using the key/values from
         * the Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder sWClientParameters(
                Map<String, Object> sWClientParameters) {
            setProperty("sWClientParameters", sWClientParameters);
            return this;
        }
        /**
         * To configure the AmazonSimpleWorkflowClient using the key/values from
         * the Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder sWClientParameters(
                String sWClientParameters) {
            setProperty("sWClientParameters", sWClientParameters);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder synchronous(boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSWFEndpointBuilder synchronous(String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }
    /**
     * The aws-swf component is used for managing workflows from Amazon Simple
     * Workflow.
     * Maven coordinates: org.apache.camel:camel-aws-swf
     */
    default SWFEndpointBuilder sWF(String path) {
        class SWFEndpointBuilderImpl extends AbstractEndpointBuilder implements SWFEndpointBuilder, AdvancedSWFEndpointBuilder {
            public SWFEndpointBuilderImpl(String path) {
                super("aws-swf", path);
            }
        }
        return new SWFEndpointBuilderImpl(path);
    }
}