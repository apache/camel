/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * The google-sheets component provides access to Google Sheets.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface GoogleSheetsStreamEndpointBuilderFactory {


    /**
     * Builder for endpoint for the Google Sheets Stream component.
     */
    public interface GoogleSheetsStreamEndpointBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedGoogleSheetsStreamEndpointBuilder advanced() {
            return (AdvancedGoogleSheetsStreamEndpointBuilder) this;
        }
        /**
         * Sets the apiName.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder apiName(String apiName) {
            setProperty("apiName", apiName);
            return this;
        }
        /**
         * OAuth 2 access token. This typically expires after an hour so
         * refreshToken is recommended for long term usage.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder accessToken(String accessToken) {
            setProperty("accessToken", accessToken);
            return this;
        }
        /**
         * Google sheets application name. Example would be
         * camel-google-sheets/1.0.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder applicationName(
                String applicationName) {
            setProperty("applicationName", applicationName);
            return this;
        }
        /**
         * Client ID of the sheets application.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder clientId(String clientId) {
            setProperty("clientId", clientId);
            return this;
        }
        /**
         * Client secret of the sheets application.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder clientSecret(
                String clientSecret) {
            setProperty("clientSecret", clientSecret);
            return this;
        }
        /**
         * True if grid data should be returned.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder includeGridData(
                boolean includeGridData) {
            setProperty("includeGridData", includeGridData);
            return this;
        }
        /**
         * True if grid data should be returned.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder includeGridData(
                String includeGridData) {
            setProperty("includeGridData", includeGridData);
            return this;
        }
        /**
         * Specifies the major dimension that results should use..
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder majorDimension(
                String majorDimension) {
            setProperty("majorDimension", majorDimension);
            return this;
        }
        /**
         * Specify the maximum number of returned results. This will limit the
         * number of rows in a returned value range data set or the number of
         * returned value ranges in a batch request.
         * The option is a <code>int</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder maxResults(int maxResults) {
            setProperty("maxResults", maxResults);
            return this;
        }
        /**
         * Specify the maximum number of returned results. This will limit the
         * number of rows in a returned value range data set or the number of
         * returned value ranges in a batch request.
         * The option will be converted to a <code>int</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder maxResults(String maxResults) {
            setProperty("maxResults", maxResults);
            return this;
        }
        /**
         * Specifies the range of rows and columns in a sheet to get data from.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder range(String range) {
            setProperty("range", range);
            return this;
        }
        /**
         * OAuth 2 refresh token. Using this, the Google Calendar component can
         * obtain a new accessToken whenever the current one expires - a
         * necessity if the application is long-lived.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder refreshToken(
                String refreshToken) {
            setProperty("refreshToken", refreshToken);
            return this;
        }
        /**
         * Specifies the level of permissions you want a sheets application to
         * have to a user account. See
         * https://developers.google.com/identity/protocols/googlescopes for
         * more info.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder scopes(List<String> scopes) {
            setProperty("scopes", scopes);
            return this;
        }
        /**
         * Specifies the level of permissions you want a sheets application to
         * have to a user account. See
         * https://developers.google.com/identity/protocols/googlescopes for
         * more info.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder scopes(String scopes) {
            setProperty("scopes", scopes);
            return this;
        }
        /**
         * True if value range result should be split into rows or columns to
         * process each of them individually. When true each row or column is
         * represented with a separate exchange in batch processing. Otherwise
         * value range object is used as exchange junk size.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder splitResults(
                boolean splitResults) {
            setProperty("splitResults", splitResults);
            return this;
        }
        /**
         * True if value range result should be split into rows or columns to
         * process each of them individually. When true each row or column is
         * represented with a separate exchange in batch processing. Otherwise
         * value range object is used as exchange junk size.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder splitResults(
                String splitResults) {
            setProperty("splitResults", splitResults);
            return this;
        }
        /**
         * Specifies the spreadsheet identifier that is used to identify the
         * target to obtain.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder spreadsheetId(
                String spreadsheetId) {
            setProperty("spreadsheetId", spreadsheetId);
            return this;
        }
        /**
         * Determines how values should be rendered in the output.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default GoogleSheetsStreamEndpointBuilder valueRenderOption(
                String valueRenderOption) {
            setProperty("valueRenderOption", valueRenderOption);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Google Sheets Stream component.
     */
    public interface AdvancedGoogleSheetsStreamEndpointBuilder
            extends
                EndpointConsumerBuilder {
        default GoogleSheetsStreamEndpointBuilder basic() {
            return (GoogleSheetsStreamEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleSheetsStreamEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleSheetsStreamEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleSheetsStreamEndpointBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedGoogleSheetsStreamEndpointBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }
    /**
     * The google-sheets component provides access to Google Sheets.
     * Maven coordinates: org.apache.camel:camel-google-sheets
     */
    default GoogleSheetsStreamEndpointBuilder googleSheetsStream(String path) {
        class GoogleSheetsStreamEndpointBuilderImpl extends AbstractEndpointBuilder implements GoogleSheetsStreamEndpointBuilder, AdvancedGoogleSheetsStreamEndpointBuilder {
            public GoogleSheetsStreamEndpointBuilderImpl(String path) {
                super("google-sheets-stream", path);
            }
        }
        return new GoogleSheetsStreamEndpointBuilderImpl(path);
    }
}