/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The properties component is used for using property placeholders in endpoint
 * uris.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface PropertiesEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Properties component.
     */
    public interface PropertiesEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedPropertiesEndpointConsumerBuilder advanced() {
            return (AdvancedPropertiesEndpointConsumerBuilder) this;
        }
        /**
         * Property key to use as placeholder.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default PropertiesEndpointConsumerBuilder key(String key) {
            setProperty("key", key);
            return this;
        }
        /**
         * Whether to silently ignore if a location cannot be located, such as a
         * properties file not found.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default PropertiesEndpointConsumerBuilder ignoreMissingLocation(
                boolean ignoreMissingLocation) {
            setProperty("ignoreMissingLocation", ignoreMissingLocation);
            return this;
        }
        /**
         * Whether to silently ignore if a location cannot be located, such as a
         * properties file not found.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default PropertiesEndpointConsumerBuilder ignoreMissingLocation(
                String ignoreMissingLocation) {
            setProperty("ignoreMissingLocation", ignoreMissingLocation);
            return this;
        }
        /**
         * A list of locations to load properties. You can use comma to separate
         * multiple locations. This option will override any default locations
         * and only use the locations from this option.
         * The option is a
         * <code>java.util.List&lt;org.apache.camel.component.properties.PropertiesLocation&gt;</code> type.
         * @group common
         */
        default PropertiesEndpointConsumerBuilder locations(
                List<Object> locations) {
            setProperty("locations", locations);
            return this;
        }
        /**
         * A list of locations to load properties. You can use comma to separate
         * multiple locations. This option will override any default locations
         * and only use the locations from this option.
         * The option will be converted to a
         * <code>java.util.List&lt;org.apache.camel.component.properties.PropertiesLocation&gt;</code> type.
         * @group common
         */
        default PropertiesEndpointConsumerBuilder locations(String locations) {
            setProperty("locations", locations);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default PropertiesEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default PropertiesEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Properties component.
     */
    public interface AdvancedPropertiesEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default PropertiesEndpointConsumerBuilder basic() {
            return (PropertiesEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        default AdvancedPropertiesEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        default AdvancedPropertiesEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedPropertiesEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedPropertiesEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Properties component.
     */
    public interface PropertiesEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedPropertiesEndpointProducerBuilder advanced() {
            return (AdvancedPropertiesEndpointProducerBuilder) this;
        }
        /**
         * Property key to use as placeholder.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default PropertiesEndpointProducerBuilder key(String key) {
            setProperty("key", key);
            return this;
        }
        /**
         * Whether to silently ignore if a location cannot be located, such as a
         * properties file not found.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default PropertiesEndpointProducerBuilder ignoreMissingLocation(
                boolean ignoreMissingLocation) {
            setProperty("ignoreMissingLocation", ignoreMissingLocation);
            return this;
        }
        /**
         * Whether to silently ignore if a location cannot be located, such as a
         * properties file not found.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default PropertiesEndpointProducerBuilder ignoreMissingLocation(
                String ignoreMissingLocation) {
            setProperty("ignoreMissingLocation", ignoreMissingLocation);
            return this;
        }
        /**
         * A list of locations to load properties. You can use comma to separate
         * multiple locations. This option will override any default locations
         * and only use the locations from this option.
         * The option is a
         * <code>java.util.List&lt;org.apache.camel.component.properties.PropertiesLocation&gt;</code> type.
         * @group common
         */
        default PropertiesEndpointProducerBuilder locations(
                List<Object> locations) {
            setProperty("locations", locations);
            return this;
        }
        /**
         * A list of locations to load properties. You can use comma to separate
         * multiple locations. This option will override any default locations
         * and only use the locations from this option.
         * The option will be converted to a
         * <code>java.util.List&lt;org.apache.camel.component.properties.PropertiesLocation&gt;</code> type.
         * @group common
         */
        default PropertiesEndpointProducerBuilder locations(String locations) {
            setProperty("locations", locations);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default PropertiesEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default PropertiesEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Properties component.
     */
    public interface AdvancedPropertiesEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default PropertiesEndpointProducerBuilder basic() {
            return (PropertiesEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Properties component.
     */
    public interface PropertiesEndpointBuilder
            extends
                PropertiesEndpointConsumerBuilder, PropertiesEndpointProducerBuilder {
        default AdvancedPropertiesEndpointBuilder advanced() {
            return (AdvancedPropertiesEndpointBuilder) this;
        }
        /**
         * Property key to use as placeholder.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default PropertiesEndpointBuilder key(String key) {
            setProperty("key", key);
            return this;
        }
        /**
         * Whether to silently ignore if a location cannot be located, such as a
         * properties file not found.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default PropertiesEndpointBuilder ignoreMissingLocation(
                boolean ignoreMissingLocation) {
            setProperty("ignoreMissingLocation", ignoreMissingLocation);
            return this;
        }
        /**
         * Whether to silently ignore if a location cannot be located, such as a
         * properties file not found.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default PropertiesEndpointBuilder ignoreMissingLocation(
                String ignoreMissingLocation) {
            setProperty("ignoreMissingLocation", ignoreMissingLocation);
            return this;
        }
        /**
         * A list of locations to load properties. You can use comma to separate
         * multiple locations. This option will override any default locations
         * and only use the locations from this option.
         * The option is a
         * <code>java.util.List&lt;org.apache.camel.component.properties.PropertiesLocation&gt;</code> type.
         * @group common
         */
        default PropertiesEndpointBuilder locations(List<Object> locations) {
            setProperty("locations", locations);
            return this;
        }
        /**
         * A list of locations to load properties. You can use comma to separate
         * multiple locations. This option will override any default locations
         * and only use the locations from this option.
         * The option will be converted to a
         * <code>java.util.List&lt;org.apache.camel.component.properties.PropertiesLocation&gt;</code> type.
         * @group common
         */
        default PropertiesEndpointBuilder locations(String locations) {
            setProperty("locations", locations);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Properties component.
     */
    public interface AdvancedPropertiesEndpointBuilder
            extends
                AdvancedPropertiesEndpointConsumerBuilder, AdvancedPropertiesEndpointProducerBuilder {
        default PropertiesEndpointBuilder basic() {
            return (PropertiesEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedPropertiesEndpointBuilder synchronous(String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }
    /**
     * The properties component is used for using property placeholders in
     * endpoint uris.
     * Maven coordinates: org.apache.camel:camel-properties
     */
    default PropertiesEndpointBuilder properties(String path) {
        class PropertiesEndpointBuilderImpl extends AbstractEndpointBuilder implements PropertiesEndpointBuilder, AdvancedPropertiesEndpointBuilder {
            public PropertiesEndpointBuilderImpl(String path) {
                super("properties", path);
            }
        }
        return new PropertiesEndpointBuilderImpl(path);
    }
}