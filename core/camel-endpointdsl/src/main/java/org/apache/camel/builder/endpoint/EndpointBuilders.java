/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint;

// CHECKSTYLE:OFF
/**
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@javax.annotation.Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface EndpointBuilders {

    /**
     * AMQP (camel-amqp)
     * Messaging with AMQP protocol using Apache QPid Client.
     *
     * Category: messaging
     * Since: 1.2
     * Maven coordinates: org.apache.camel:camel-amqp
     *
     * Syntax: <code>amqp:destinationType:destinationName</code>
     *
     * Path parameter: destinationType
     * The kind of destination to use
     * Default value: queue
     * The value can be one of: queue, topic, temp-queue, temp-topic
     *
     * Path parameter: destinationName (required)
     * Name of the queue or topic to use as destination
     */
    static org.apache.camel.builder.endpoint.dsl.AMQPEndpointBuilderFactory.AMQPEndpointBuilder amqp(String path) {
        return org.apache.camel.builder.endpoint.dsl.AMQPEndpointBuilderFactory.amqp(path);
    }

    /**
     * AS2 (camel-as2)
     * Component used for transferring data secure and reliable over the
     * internet using the AS2 protocol.
     *
     * Category: AS2
     * Since: 2.22
     * Maven coordinates: org.apache.camel:camel-as2
     *
     * Syntax: <code>as2:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: CLIENT, SERVER
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     */
    static org.apache.camel.builder.endpoint.dsl.AS2EndpointBuilderFactory.AS2EndpointBuilder as2(String path) {
        return org.apache.camel.builder.endpoint.dsl.AS2EndpointBuilderFactory.as2(path);
    }

    /**
     * ActiveMQ (camel-activemq)
     * The activemq component allows messages to be sent to (or consumed from)
     * Apache ActiveMQ. This component extends the Camel JMS component.
     *
     * Category: messaging
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-activemq
     *
     * Syntax: <code>activemq:destinationType:destinationName</code>
     *
     * Path parameter: destinationType
     * The kind of destination to use
     * Default value: queue
     * The value can be one of: queue, topic, temp-queue, temp-topic
     *
     * Path parameter: destinationName (required)
     * Name of the queue or topic to use as destination
     */
    static org.apache.camel.builder.endpoint.dsl.ActiveMQEndpointBuilderFactory.ActiveMQEndpointBuilder activemq(String path) {
        return org.apache.camel.builder.endpoint.dsl.ActiveMQEndpointBuilderFactory.activemq(path);
    }

    /**
     * AHC (camel-ahc)
     * To call external HTTP services using Async Http Client.
     *
     * Category: http
     * Since: 2.8
     * Maven coordinates: org.apache.camel:camel-ahc
     *
     * Syntax: <code>ahc:httpUri</code>
     *
     * Path parameter: httpUri (required)
     * The URI to use such as http://hostname:port/path
     */
    static org.apache.camel.builder.endpoint.dsl.AhcEndpointBuilderFactory.AhcEndpointBuilder ahc(String path) {
        return org.apache.camel.builder.endpoint.dsl.AhcEndpointBuilderFactory.ahc(path);
    }

    /**
     * APNS (camel-apns)
     * For sending notifications to Apple iOS devices.
     *
     * Category: eventbus,mobile
     * Since: 2.8
     * Maven coordinates: org.apache.camel:camel-apns
     *
     * Syntax: <code>apns:name</code>
     *
     * Path parameter: name
     * Name of the endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.ApnsEndpointBuilderFactory.ApnsEndpointBuilder apns(String path) {
        return org.apache.camel.builder.endpoint.dsl.ApnsEndpointBuilderFactory.apns(path);
    }

    /**
     * Asterisk (camel-asterisk)
     * The asterisk component is used to interact with Asterisk PBX Server.
     *
     * Category: voip
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-asterisk
     *
     * Syntax: <code>asterisk:name</code>
     *
     * Path parameter: name (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.AsteriskEndpointBuilderFactory.AsteriskEndpointBuilder asterisk(String path) {
        return org.apache.camel.builder.endpoint.dsl.AsteriskEndpointBuilderFactory.asterisk(path);
    }

    /**
     * Atmos (camel-atmos)
     * The atmos component is used for integrating with EMC's Atomos Storage.
     *
     * Category: file,cloud
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-atmos
     *
     * Syntax: <code>atmos:name/operation</code>
     *
     * Path parameter: name
     * Atmos name
     *
     * Path parameter: operation (required)
     * Operation to perform
     * The value can be one of: put, del, search, get, move
     */
    static org.apache.camel.builder.endpoint.dsl.AtmosEndpointBuilderFactory.AtmosEndpointBuilder atmos(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtmosEndpointBuilderFactory.atmos(path);
    }

    /**
     * Atmosphere Websocket (camel-atmosphere-websocket)
     * To exchange data with external Websocket clients using Atmosphere.
     *
     * Category: websocket
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-atmosphere-websocket
     *
     * Syntax: <code>atmosphere-websocket:servicePath</code>
     *
     * Path parameter: servicePath (required)
     * Name of websocket endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.AtmosphereWebsocketEndpointBuilderFactory.AtmosphereWebsocketEndpointBuilder atmosphereWebsocket(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtmosphereWebsocketEndpointBuilderFactory.atmosphereWebsocket(path);
    }

    /**
     * Atom (camel-atom)
     * The atom component is used for consuming Atom RSS feeds.
     *
     * Category: rss
     * Since: 1.2
     * Maven coordinates: org.apache.camel:camel-atom
     *
     * Syntax: <code>atom:feedUri</code>
     *
     * Path parameter: feedUri (required)
     * The URI to the feed to poll.
     */
    static org.apache.camel.builder.endpoint.dsl.AtomEndpointBuilderFactory.AtomEndpointBuilder atom(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtomEndpointBuilderFactory.atom(path);
    }

    /**
     * Atomix Map (camel-atomix)
     * The atomix-map component is used to access Atomix's distributed map.
     *
     * Category: clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-atomix
     *
     * Syntax: <code>atomix-map:resourceName</code>
     *
     * Path parameter: resourceName (required)
     * The distributed resource name
     */
    static org.apache.camel.builder.endpoint.dsl.AtomixMapEndpointBuilderFactory.AtomixMapEndpointBuilder atomixMap(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtomixMapEndpointBuilderFactory.atomixMap(path);
    }

    /**
     * Atomix Messaging (camel-atomix)
     * The atomix-messaging component is used to access Atomix's group
     * messaging.
     *
     * Category: clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-atomix
     *
     * Syntax: <code>atomix-messaging:resourceName</code>
     *
     * Path parameter: resourceName (required)
     * The distributed resource name
     */
    static org.apache.camel.builder.endpoint.dsl.AtomixMessagingEndpointBuilderFactory.AtomixMessagingEndpointBuilder atomixMessaging(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtomixMessagingEndpointBuilderFactory.atomixMessaging(path);
    }

    /**
     * Atomix MultiMap (camel-atomix)
     * The atomix-multimap component is used to access Atomix's distributed
     * multi map.
     *
     * Category: clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-atomix
     *
     * Syntax: <code>atomix-multimap:resourceName</code>
     *
     * Path parameter: resourceName (required)
     * The distributed resource name
     */
    static org.apache.camel.builder.endpoint.dsl.AtomixMultiMapEndpointBuilderFactory.AtomixMultiMapEndpointBuilder atomixMultimap(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtomixMultiMapEndpointBuilderFactory.atomixMultimap(path);
    }

    /**
     * Atomix Queue (camel-atomix)
     * The atomix-queue component is used to access Atomix's distributed queue.
     *
     * Category: clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-atomix
     *
     * Syntax: <code>atomix-queue:resourceName</code>
     *
     * Path parameter: resourceName (required)
     * The distributed resource name
     */
    static org.apache.camel.builder.endpoint.dsl.AtomixQueueEndpointBuilderFactory.AtomixQueueEndpointBuilder atomixQueue(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtomixQueueEndpointBuilderFactory.atomixQueue(path);
    }

    /**
     * Atomix Set (camel-atomix)
     * The atomix-set component is used to access Atomix's distributed set.
     *
     * Category: clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-atomix
     *
     * Syntax: <code>atomix-set:resourceName</code>
     *
     * Path parameter: resourceName (required)
     * The distributed resource name
     */
    static org.apache.camel.builder.endpoint.dsl.AtomixSetEndpointBuilderFactory.AtomixSetEndpointBuilder atomixSet(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtomixSetEndpointBuilderFactory.atomixSet(path);
    }

    /**
     * Atomix Value (camel-atomix)
     * The atomix-value component is used to access Atomix's distributed value.
     *
     * Category: clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-atomix
     *
     * Syntax: <code>atomix-value:resourceName</code>
     *
     * Path parameter: resourceName (required)
     * The distributed resource name
     */
    static org.apache.camel.builder.endpoint.dsl.AtomixValueEndpointBuilderFactory.AtomixValueEndpointBuilder atomixValue(String path) {
        return org.apache.camel.builder.endpoint.dsl.AtomixValueEndpointBuilderFactory.atomixValue(path);
    }

    /**
     * Avro (camel-avro)
     * Working with Apache Avro for data serialization.
     *
     * Category: messaging,transformation
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-avro
     *
     * Syntax: <code>avro:transport:host:port/messageName</code>
     *
     * Path parameter: transport (required)
     * Transport to use, can be either http or netty
     * The value can be one of: http, netty
     *
     * Path parameter: port (required)
     * Port number to use
     *
     * Path parameter: host (required)
     * Hostname to use
     *
     * Path parameter: messageName
     * The name of the message to send.
     */
    static org.apache.camel.builder.endpoint.dsl.AvroEndpointBuilderFactory.AvroEndpointBuilder avro(String path) {
        return org.apache.camel.builder.endpoint.dsl.AvroEndpointBuilderFactory.avro(path);
    }

    /**
     * Bean (camel-bean)
     * The bean component is for invoking Java beans from Camel.
     *
     * Category: core,java
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-bean
     *
     * Syntax: <code>bean:beanName</code>
     *
     * Path parameter: beanName (required)
     * Sets the name of the bean to invoke
     */
    static org.apache.camel.builder.endpoint.dsl.BeanEndpointBuilderFactory.BeanEndpointBuilder bean(String path) {
        return org.apache.camel.builder.endpoint.dsl.BeanEndpointBuilderFactory.bean(path);
    }

    /**
     * Bean Validator (camel-bean-validator)
     * The Validator component performs bean validation of the message body
     * using the Java Bean Validation API.
     *
     * Category: validation
     * Since: 2.3
     * Maven coordinates: org.apache.camel:camel-bean-validator
     *
     * Syntax: <code>bean-validator:label</code>
     *
     * Path parameter: label (required)
     * Where label is an arbitrary text value describing the endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.BeanValidatorEndpointBuilderFactory.BeanValidatorEndpointBuilder beanValidator(String path) {
        return org.apache.camel.builder.endpoint.dsl.BeanValidatorEndpointBuilderFactory.beanValidator(path);
    }

    /**
     * Beanstalk (camel-beanstalk)
     * The beanstalk component is used for job retrieval and post-processing of
     * Beanstalk jobs.
     *
     * Category: messaging
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-beanstalk
     *
     * Syntax: <code>beanstalk:connectionSettings</code>
     *
     * Path parameter: connectionSettings
     * Connection settings host:port/tube
     */
    static org.apache.camel.builder.endpoint.dsl.BeanstalkEndpointBuilderFactory.BeanstalkEndpointBuilder beanstalk(String path) {
        return org.apache.camel.builder.endpoint.dsl.BeanstalkEndpointBuilderFactory.beanstalk(path);
    }

    /**
     * Azure Storage Blob Service (camel-azure)
     * The azure-blob component is used for storing and retrieving blobs from
     * Azure Storage Blob Service.
     *
     * Category: cloud,database,nosql
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-azure
     *
     * Syntax: <code>azure-blob:containerOrBlobUri</code>
     *
     * Path parameter: containerOrBlobUri (required)
     * Container or Blob compact Uri
     */
    static org.apache.camel.builder.endpoint.dsl.BlobServiceEndpointBuilderFactory.BlobServiceEndpointBuilder azureBlob(String path) {
        return org.apache.camel.builder.endpoint.dsl.BlobServiceEndpointBuilderFactory.azureBlob(path);
    }

    /**
     * Bonita (camel-bonita)
     * Used for communicating with a remote Bonita BPM process engine.
     *
     * Category: process
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-bonita
     *
     * Syntax: <code>bonita:operation</code>
     *
     * Path parameter: operation (required)
     * Operation to use
     * The value can be one of: startCase
     */
    static org.apache.camel.builder.endpoint.dsl.BonitaEndpointBuilderFactory.BonitaEndpointBuilder bonita(String path) {
        return org.apache.camel.builder.endpoint.dsl.BonitaEndpointBuilderFactory.bonita(path);
    }

    /**
     * Box (camel-box)
     * For uploading downloading and managing files folders groups
     * collaborations etc on box DOT com.
     *
     * Category: api,file,cloud
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-box
     *
     * Syntax: <code>box:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: COLLABORATIONS, COMMENTS, EVENT_LOGS, FILES,
     * FOLDERS, GROUPS, EVENTS, SEARCH, TASKS, USERS
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     */
    static org.apache.camel.builder.endpoint.dsl.BoxEndpointBuilderFactory.BoxEndpointBuilder box(String path) {
        return org.apache.camel.builder.endpoint.dsl.BoxEndpointBuilderFactory.box(path);
    }

    /**
     * Braintree (camel-braintree)
     * The braintree component is used for integrating with the Braintree
     * Payment System.
     *
     * Category: api,cloud,payment
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-braintree
     *
     * Syntax: <code>braintree:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: ADDON, ADDRESS, CLIENTTOKEN,
     * CREDITCARDVERIFICATION, CUSTOMER, DISCOUNT, DISPUTE, DOCUMENTUPLOAD,
     * MERCHANTACCOUNT, PAYMENTMETHOD, PAYMENTMETHODNONCE, PLAN, REPORT,
     * SETTLEMENTBATCHSUMMARY, SUBSCRIPTION, TRANSACTION, WEBHOOKNOTIFICATION
     *
     * Path parameter: methodName
     * What sub operation to use for the selected operation
     */
    static org.apache.camel.builder.endpoint.dsl.BraintreeEndpointBuilderFactory.BraintreeEndpointBuilder braintree(String path) {
        return org.apache.camel.builder.endpoint.dsl.BraintreeEndpointBuilderFactory.braintree(path);
    }

    /**
     * Browse (camel-browse)
     * The browse component is used for viewing the messages received on
     * endpoints that supports BrowsableEndpoint.
     *
     * Category: core,monitoring
     * Since: 1.3
     * Maven coordinates: org.apache.camel:camel-browse
     *
     * Syntax: <code>browse:name</code>
     *
     * Path parameter: name (required)
     * A name which can be any string to uniquely identify the endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.BrowseEndpointBuilderFactory.BrowseEndpointBuilder browse(String path) {
        return org.apache.camel.builder.endpoint.dsl.BrowseEndpointBuilderFactory.browse(path);
    }

    /**
     * CM SMS Gateway (camel-cm-sms)
     * The cm-sms component allows to integrate with CM SMS Gateway.
     *
     * Category: mobile
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-cm-sms
     *
     * Syntax: <code>cm-sms:host</code>
     *
     * Path parameter: host (required)
     * SMS Provider HOST with scheme
     */
    static org.apache.camel.builder.endpoint.dsl.CMEndpointBuilderFactory.CMEndpointBuilder cmSms(String path) {
        return org.apache.camel.builder.endpoint.dsl.CMEndpointBuilderFactory.cmSms(path);
    }

    /**
     * CMIS (camel-cmis)
     * The cmis component uses the Apache Chemistry client API and allows you to
     * add/read nodes to/from a CMIS compliant content repositories.
     *
     * Category: cms,database
     * Since: 2.11
     * Maven coordinates: org.apache.camel:camel-cmis
     *
     * Syntax: <code>cmis:cmsUrl</code>
     *
     * Path parameter: cmsUrl (required)
     * URL to the cmis repository
     */
    static org.apache.camel.builder.endpoint.dsl.CMISEndpointBuilderFactory.CMISEndpointBuilder cmis(String path) {
        return org.apache.camel.builder.endpoint.dsl.CMISEndpointBuilderFactory.cmis(path);
    }

    /**
     * Caffeine Cache (camel-caffeine)
     * The caffeine-cache component is used for integration with Caffeine Cache.
     *
     * Category: cache,datagrid,clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-caffeine
     *
     * Syntax: <code>caffeine-cache:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * the cache name
     */
    static org.apache.camel.builder.endpoint.dsl.CaffeineCacheEndpointBuilderFactory.CaffeineCacheEndpointBuilder caffeineCache(String path) {
        return org.apache.camel.builder.endpoint.dsl.CaffeineCacheEndpointBuilderFactory.caffeineCache(path);
    }

    /**
     * Caffeine LoadCache (camel-caffeine)
     * The caffeine-loadcache component is used for integration with Caffeine
     * Load Cache.
     *
     * Category: cache,datagrid,clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-caffeine
     *
     * Syntax: <code>caffeine-loadcache:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * the cache name
     */
    static org.apache.camel.builder.endpoint.dsl.CaffeineLoadCacheEndpointBuilderFactory.CaffeineLoadCacheEndpointBuilder caffeineLoadcache(String path) {
        return org.apache.camel.builder.endpoint.dsl.CaffeineLoadCacheEndpointBuilderFactory.caffeineLoadcache(path);
    }

    /**
     * Cassandra CQL (camel-cassandraql)
     * The cql component aims at integrating Cassandra 2.0 using the CQL3 API
     * (not the Thrift API). It's based on Cassandra Java Driver provided by
     * DataStax.
     *
     * Category: database,nosql
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-cassandraql
     *
     * Syntax: <code>cql:beanRef:hosts:port/keyspace</code>
     *
     * Path parameter: beanRef
     * beanRef is defined using bean:id
     *
     * Path parameter: hosts
     * Hostname(s) cassansdra server(s). Multiple hosts can be separated by
     * comma.
     *
     * Path parameter: port
     * Port number of cassansdra server(s)
     *
     * Path parameter: keyspace
     * Keyspace to use
     */
    static org.apache.camel.builder.endpoint.dsl.CassandraEndpointBuilderFactory.CassandraEndpointBuilder cql(String path) {
        return org.apache.camel.builder.endpoint.dsl.CassandraEndpointBuilderFactory.cql(path);
    }

    /**
     * ChatScript (camel-chatscript)
     * Represents a ChatScript endpoint.
     *
     * Category: ai,chatscript
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-chatscript
     *
     * Syntax: <code>chatscript:host:port/botName</code>
     *
     * Path parameter: host (required)
     * Hostname or IP of the server on which CS server is running
     *
     * Path parameter: port
     * Port on which ChatScript is listening to
     * Default value: 1024
     *
     * Path parameter: botName (required)
     * Name of the Bot in CS to converse with
     */
    static org.apache.camel.builder.endpoint.dsl.ChatScriptEndpointBuilderFactory.ChatScriptEndpointBuilder chatscript(String path) {
        return org.apache.camel.builder.endpoint.dsl.ChatScriptEndpointBuilderFactory.chatscript(path);
    }

    /**
     * Chunk (camel-chunk)
     * Transforms the message using a Chunk template.
     *
     * Category: transformation
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-chunk
     *
     * Syntax: <code>chunk:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.ChunkEndpointBuilderFactory.ChunkEndpointBuilder chunk(String path) {
        return org.apache.camel.builder.endpoint.dsl.ChunkEndpointBuilderFactory.chunk(path);
    }

    /**
     * OpenStack Cinder (camel-openstack)
     * The openstack-cinder component allows messages to be sent to an OpenStack
     * block storage services.
     *
     * Category: cloud,paas
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-openstack
     *
     * Syntax: <code>openstack-cinder:host</code>
     *
     * Path parameter: host (required)
     * OpenStack host url
     */
    static org.apache.camel.builder.endpoint.dsl.CinderEndpointBuilderFactory.CinderEndpointBuilder openstackCinder(String path) {
        return org.apache.camel.builder.endpoint.dsl.CinderEndpointBuilderFactory.openstackCinder(path);
    }

    /**
     * Class (camel-bean)
     * The Class component is for invoking Java classes (Java beans) from Camel.
     *
     * Category: core,java
     * Since: 2.4
     * Maven coordinates: org.apache.camel:camel-bean
     *
     * Syntax: <code>class:beanName</code>
     *
     * Path parameter: beanName (required)
     * Sets the name of the bean to invoke
     */
    static org.apache.camel.builder.endpoint.dsl.ClassEndpointBuilderFactory.ClassEndpointBuilder clas(String path) {
        return org.apache.camel.builder.endpoint.dsl.ClassEndpointBuilderFactory.clas(path);
    }

    /**
     * IEC 60870 Client (camel-iec60870)
     * IEC 60870 component used for telecontrol (supervisory control and data
     * acquisition) such as controlling electric power transmission grids and
     * other geographically widespread control systems.
     *
     * Category: iot
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-iec60870
     *
     * Syntax: <code>iec60870-client:uriPath</code>
     *
     * Path parameter: uriPath (required)
     * The object information address
     */
    static org.apache.camel.builder.endpoint.dsl.ClientEndpointBuilderFactory.ClientEndpointBuilder iec60870Client(String path) {
        return org.apache.camel.builder.endpoint.dsl.ClientEndpointBuilderFactory.iec60870Client(path);
    }

    /**
     * CoAP (camel-coap)
     * The coap component is used for sending and receiving messages from COAP
     * capable devices.
     *
     * Category: iot
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-coap
     *
     * Syntax: <code>coap:uri</code>
     *
     * Path parameter: uri
     * The URI for the CoAP endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.CoAPEndpointBuilder coap(String path) {
        return org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.coap(path);
    }

    /**
     * CoAP (camel-coap)
     * The coap component is used for sending and receiving messages from COAP
     * capable devices.
     *
     * Category: iot
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-coap
     *
     * Syntax: <code>coap+tcp:uri</code>
     *
     * Path parameter: uri
     * The URI for the CoAP endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.CoAPEndpointBuilder coapTcp(String path) {
        return org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.coapTcp(path);
    }

    /**
     * CoAP (Secure) (camel-coap)
     * The coap component is used for sending and receiving messages from COAP
     * capable devices.
     *
     * Category: iot
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-coap
     *
     * Syntax: <code>coaps:uri</code>
     *
     * Path parameter: uri
     * The URI for the CoAP endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.CoAPEndpointBuilder coaps(String path) {
        return org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.coaps(path);
    }

    /**
     * CoAP (camel-coap)
     * The coap component is used for sending and receiving messages from COAP
     * capable devices.
     *
     * Category: iot
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-coap
     *
     * Syntax: <code>coaps+tcp:uri</code>
     *
     * Path parameter: uri
     * The URI for the CoAP endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.CoAPEndpointBuilder coapsTcp(String path) {
        return org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.coapsTcp(path);
    }

    /**
     * CoAP (camel-coap)
     * The coap component is used for sending and receiving messages from COAP
     * capable devices.
     *
     * Category: iot
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-coap
     */
    static org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.CoAPEndpointBuilder coap(String scheme, String path) {
        return org.apache.camel.builder.endpoint.dsl.CoAPEndpointBuilderFactory.coap(scheme, path);
    }

    /**
     * CometD (camel-cometd)
     * The cometd component is a transport for working with the Jetty
     * implementation of the cometd/bayeux protocol.
     *
     * Category: websocket
     * Since: 2.0
     * Maven coordinates: org.apache.camel:camel-cometd
     *
     * Syntax: <code>cometd:host:port/channelName</code>
     *
     * Path parameter: host (required)
     * Hostname
     *
     * Path parameter: port (required)
     * Host port number
     *
     * Path parameter: channelName (required)
     * The channelName represents a topic that can be subscribed to by the Camel
     * endpoints.
     */
    static org.apache.camel.builder.endpoint.dsl.CometdEndpointBuilderFactory.CometdEndpointBuilder cometd(String path) {
        return org.apache.camel.builder.endpoint.dsl.CometdEndpointBuilderFactory.cometd(path);
    }

    /**
     * CometD (Secure) (camel-cometd)
     * The cometd component is a transport for working with the Jetty
     * implementation of the cometd/bayeux protocol.
     *
     * Category: websocket
     * Since: 2.0
     * Maven coordinates: org.apache.camel:camel-cometd
     *
     * Syntax: <code>cometds:host:port/channelName</code>
     *
     * Path parameter: host (required)
     * Hostname
     *
     * Path parameter: port (required)
     * Host port number
     *
     * Path parameter: channelName (required)
     * The channelName represents a topic that can be subscribed to by the Camel
     * endpoints.
     */
    static org.apache.camel.builder.endpoint.dsl.CometdEndpointBuilderFactory.CometdEndpointBuilder cometds(String path) {
        return org.apache.camel.builder.endpoint.dsl.CometdEndpointBuilderFactory.cometds(path);
    }

    /**
     * CometD (camel-cometd)
     * The cometd component is a transport for working with the Jetty
     * implementation of the cometd/bayeux protocol.
     *
     * Category: websocket
     * Since: 2.0
     * Maven coordinates: org.apache.camel:camel-cometd
     */
    static org.apache.camel.builder.endpoint.dsl.CometdEndpointBuilderFactory.CometdEndpointBuilder cometd(String scheme, String path) {
        return org.apache.camel.builder.endpoint.dsl.CometdEndpointBuilderFactory.cometd(scheme, path);
    }

    /**
     * Consul (camel-consul)
     * The camel consul component allows you to work with Consul, a distributed,
     * highly available, datacenter-aware, service discovery and configuration
     * system.
     *
     * Category: api,cloud
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-consul
     *
     * Syntax: <code>consul:apiEndpoint</code>
     *
     * Path parameter: apiEndpoint (required)
     * The API endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.ConsulEndpointBuilderFactory.ConsulEndpointBuilder consul(String path) {
        return org.apache.camel.builder.endpoint.dsl.ConsulEndpointBuilderFactory.consul(path);
    }

    /**
     * Control Bus (camel-controlbus)
     * The controlbus component provides easy management of Camel applications
     * based on the Control Bus EIP pattern.
     *
     * Category: core,monitoring
     * Since: 2.11
     * Maven coordinates: org.apache.camel:camel-controlbus
     *
     * Syntax: <code>controlbus:command:language</code>
     *
     * Path parameter: command (required)
     * Command can be either route or language
     * The value can be one of: route, language
     *
     * Path parameter: language
     * Allows you to specify the name of a Language to use for evaluating the
     * message body. If there is any result from the evaluation, then the result
     * is put in the message body.
     * The value can be one of: bean, constant, el, exchangeProperty, file,
     * groovy, header, jsonpath, mvel, ognl, ref, simple, spel, sql, terser,
     * tokenize, xpath, xquery, xtokenize
     */
    static org.apache.camel.builder.endpoint.dsl.ControlBusEndpointBuilderFactory.ControlBusEndpointBuilder controlbus(String path) {
        return org.apache.camel.builder.endpoint.dsl.ControlBusEndpointBuilderFactory.controlbus(path);
    }

    /**
     * Corda (camel-corda)
     * The corda component uses corda-rpc to interact with corda nodes.
     *
     * Category: corda,blockchain
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-corda
     *
     * Syntax: <code>corda:node</code>
     *
     * Path parameter: node (required)
     * The url for the corda node
     */
    static org.apache.camel.builder.endpoint.dsl.CordaEndpointBuilderFactory.CordaEndpointBuilder corda(String path) {
        return org.apache.camel.builder.endpoint.dsl.CordaEndpointBuilderFactory.corda(path);
    }

    /**
     * CouchDB (camel-couchdb)
     * The couchdb component is used for integrate with CouchDB databases.
     *
     * Category: database,nosql
     * Since: 2.11
     * Maven coordinates: org.apache.camel:camel-couchdb
     *
     * Syntax: <code>couchdb:protocol:hostname:port/database</code>
     *
     * Path parameter: protocol (required)
     * The protocol to use for communicating with the database.
     * The value can be one of: http, https
     *
     * Path parameter: hostname (required)
     * Hostname of the running couchdb instance
     *
     * Path parameter: port
     * Port number for the running couchdb instance
     * Default value: 5984
     *
     * Path parameter: database (required)
     * Name of the database to use
     */
    static org.apache.camel.builder.endpoint.dsl.CouchDbEndpointBuilderFactory.CouchDbEndpointBuilder couchdb(String path) {
        return org.apache.camel.builder.endpoint.dsl.CouchDbEndpointBuilderFactory.couchdb(path);
    }

    /**
     * Couchbase (camel-couchbase)
     * Represents a Couchbase endpoint that can query Views with a Poll strategy
     * and/or produce various type of operations.
     *
     * Category: database,nosql
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-couchbase
     *
     * Syntax: <code>couchbase:protocol:hostname:port</code>
     *
     * Path parameter: protocol (required)
     * The protocol to use
     *
     * Path parameter: hostname (required)
     * The hostname to use
     *
     * Path parameter: port
     * The port number to use
     * Default value: 8091
     */
    static org.apache.camel.builder.endpoint.dsl.CouchbaseEndpointBuilderFactory.CouchbaseEndpointBuilder couchbase(String path) {
        return org.apache.camel.builder.endpoint.dsl.CouchbaseEndpointBuilderFactory.couchbase(path);
    }

    /**
     * Cron (camel-cron)
     * Camel Cron Component
     *
     * Category: scheduling
     * Since: 3.1
     * Maven coordinates: org.apache.camel:camel-cron
     *
     * Syntax: <code>cron:name</code>
     *
     * Path parameter: name (required)
     * The name of the cron trigger
     */
    static org.apache.camel.builder.endpoint.dsl.CronEndpointBuilderFactory.CronEndpointBuilder cron(String path) {
        return org.apache.camel.builder.endpoint.dsl.CronEndpointBuilderFactory.cron(path);
    }

    /**
     * Crypto CMS (camel-crypto-cms)
     * The crypto cms component is used for encrypting data in CMS Enveloped
     * Data format, decrypting CMS Enveloped Data, signing data in CMS Signed
     * Data format, and verifying CMS Signed Data.
     *
     * Category: security,transformation
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-crypto-cms
     *
     * Syntax: <code>crypto-cms:cryptoOperation:name</code>
     *
     * Path parameter: cryptoOperation (required)
     * Set the Crypto operation from that supplied after the crypto scheme in
     * the endpoint uri e.g. crypto-cms:sign sets sign as the operation.
     * Possible values: sign, verify, encrypt, or decrypt.
     * The value can be one of: sign, verify, encrypt, decrypt
     *
     * Path parameter: name (required)
     * The name part in the URI can be chosen by the user to distinguish between
     * different signer/verifier/encryptor/decryptor endpoints within the camel
     * context.
     */
    @Deprecated
    static org.apache.camel.builder.endpoint.dsl.CryptoCmsEndpointBuilderFactory.CryptoCmsEndpointBuilder cryptoCms(String path) {
        return org.apache.camel.builder.endpoint.dsl.CryptoCmsEndpointBuilderFactory.cryptoCms(path);
    }

    /**
     * AWS CloudWatch (camel-aws-cw)
     * The aws-cw component is used for sending metrics to an Amazon CloudWatch.
     *
     * Category: cloud,monitoring
     * Since: 2.11
     * Maven coordinates: org.apache.camel:camel-aws-cw
     *
     * Syntax: <code>aws-cw:namespace</code>
     *
     * Path parameter: namespace (required)
     * The metric namespace
     */
    static org.apache.camel.builder.endpoint.dsl.CwEndpointBuilderFactory.CwEndpointBuilder awsCw(String path) {
        return org.apache.camel.builder.endpoint.dsl.CwEndpointBuilderFactory.awsCw(path);
    }

    /**
     * CXF (camel-cxf)
     * The cxf component is used for SOAP WebServices using Apache CXF.
     *
     * Category: soap,webservice
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-cxf
     *
     * Syntax: <code>cxf:beanId:address</code>
     *
     * Path parameter: beanId
     * To lookup an existing configured CxfEndpoint. Must used bean: as prefix.
     *
     * Path parameter: address
     * The service publish address.
     */
    static org.apache.camel.builder.endpoint.dsl.CxfEndpointBuilderFactory.CxfEndpointBuilder cxf(String path) {
        return org.apache.camel.builder.endpoint.dsl.CxfEndpointBuilderFactory.cxf(path);
    }

    /**
     * CXF-RS (camel-cxf)
     * The cxfrs component is used for JAX-RS REST services using Apache CXF.
     *
     * Category: rest
     * Since: 2.0
     * Maven coordinates: org.apache.camel:camel-cxf
     *
     * Syntax: <code>cxfrs:beanId:address</code>
     *
     * Path parameter: beanId
     * To lookup an existing configured CxfRsEndpoint. Must used bean: as
     * prefix.
     *
     * Path parameter: address
     * The service publish address.
     */
    static org.apache.camel.builder.endpoint.dsl.CxfRsEndpointBuilderFactory.CxfRsEndpointBuilder cxfrs(String path) {
        return org.apache.camel.builder.endpoint.dsl.CxfRsEndpointBuilderFactory.cxfrs(path);
    }

    /**
     * Data Format (camel-dataformat)
     * The dataformat component is used for working with Data Formats as if it
     * was a regular Component supporting Endpoints and URIs.
     *
     * Category: core,transformation
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-dataformat
     *
     * Syntax: <code>dataformat:name:operation</code>
     *
     * Path parameter: name (required)
     * Name of data format
     *
     * Path parameter: operation (required)
     * Operation to use either marshal or unmarshal
     * The value can be one of: marshal, unmarshal
     */
    static org.apache.camel.builder.endpoint.dsl.DataFormatEndpointBuilderFactory.DataFormatEndpointBuilder dataformat(String path) {
        return org.apache.camel.builder.endpoint.dsl.DataFormatEndpointBuilderFactory.dataformat(path);
    }

    /**
     * Dataset (camel-dataset)
     * The dataset component provides a mechanism to easily perform load & soak
     * testing of your system.
     *
     * Category: core,testing
     * Since: 1.3
     * Maven coordinates: org.apache.camel:camel-dataset
     *
     * Syntax: <code>dataset:name</code>
     *
     * Path parameter: name (required)
     * Name of DataSet to lookup in the registry
     */
    static org.apache.camel.builder.endpoint.dsl.DataSetEndpointBuilderFactory.DataSetEndpointBuilder dataset(String path) {
        return org.apache.camel.builder.endpoint.dsl.DataSetEndpointBuilderFactory.dataset(path);
    }

    /**
     * DataSet Test (camel-dataset)
     * The dataset-test component extends the mock component by on startup to
     * pull messages from another endpoint to set the expected message bodies.
     *
     * Category: core,testing
     * Since: 1.3
     * Maven coordinates: org.apache.camel:camel-dataset
     *
     * Syntax: <code>dataset-test:name</code>
     *
     * Path parameter: name (required)
     * Name of endpoint to lookup in the registry to use for polling messages
     * used for testing
     */
    static org.apache.camel.builder.endpoint.dsl.DataSetTestEndpointBuilderFactory.DataSetTestEndpointBuilder datasetTest(String path) {
        return org.apache.camel.builder.endpoint.dsl.DataSetTestEndpointBuilderFactory.datasetTest(path);
    }

    /**
     * AWS DynamoDB (camel-aws-ddb)
     * The aws-ddb component is used for storing and retrieving data from
     * Amazon's DynamoDB service.
     *
     * Category: cloud,database,nosql
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-aws-ddb
     *
     * Syntax: <code>aws-ddb:tableName</code>
     *
     * Path parameter: tableName (required)
     * The name of the table currently worked with.
     */
    static org.apache.camel.builder.endpoint.dsl.DdbEndpointBuilderFactory.DdbEndpointBuilder awsDdb(String path) {
        return org.apache.camel.builder.endpoint.dsl.DdbEndpointBuilderFactory.awsDdb(path);
    }

    /**
     * AWS DynamoDB Streams (camel-aws-ddb)
     * The aws-ddbstream component is used for working with Amazon DynamoDB
     * Streams.
     *
     * Category: cloud,messaging,streams
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-aws-ddb
     *
     * Syntax: <code>aws-ddbstream:tableName</code>
     *
     * Path parameter: tableName (required)
     * Name of the dynamodb table
     */
    static org.apache.camel.builder.endpoint.dsl.DdbStreamEndpointBuilderFactory.DdbStreamEndpointBuilder awsDdbstream(String path) {
        return org.apache.camel.builder.endpoint.dsl.DdbStreamEndpointBuilderFactory.awsDdbstream(path);
    }

    /**
     * Debezium MongoDB Connector (camel-debezium-mongodb)
     * Represents a Debezium MongoDB endpoint which is used to capture changes
     * in MongoDB database so that that applications can see those changes and
     * respond to them.
     *
     * Category: database,nosql,mongodb
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-debezium-mongodb
     *
     * Syntax: <code>debezium-mongodb:name</code>
     *
     * Path parameter: name (required)
     * Unique name for the connector. Attempting to register again with the same
     * name will fail.
     */
    static org.apache.camel.builder.endpoint.dsl.DebeziumMongodbEndpointBuilderFactory.DebeziumMongodbEndpointBuilder debeziumMongodb(String path) {
        return org.apache.camel.builder.endpoint.dsl.DebeziumMongodbEndpointBuilderFactory.debeziumMongodb(path);
    }

    /**
     * Debezium MySQL Connector (camel-debezium-mysql)
     * Represents a Debezium MySQL endpoint which is used to capture changes in
     * MySQL database so that that applications can see those changes and
     * respond to them.
     *
     * Category: database,sql,mysql
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-debezium-mysql
     *
     * Syntax: <code>debezium-mysql:name</code>
     *
     * Path parameter: name (required)
     * Unique name for the connector. Attempting to register again with the same
     * name will fail.
     */
    static org.apache.camel.builder.endpoint.dsl.DebeziumMySqlEndpointBuilderFactory.DebeziumMySqlEndpointBuilder debeziumMysql(String path) {
        return org.apache.camel.builder.endpoint.dsl.DebeziumMySqlEndpointBuilderFactory.debeziumMysql(path);
    }

    /**
     * Debezium PostgresSQL Connector (camel-debezium-postgres)
     * Represents a Debezium PostgresSQL endpoint which is used to capture
     * changes in PostgresSQL database so that that applications can see those
     * changes and respond to them.
     *
     * Category: database,sql,postgres
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-debezium-postgres
     *
     * Syntax: <code>debezium-postgres:name</code>
     *
     * Path parameter: name (required)
     * Unique name for the connector. Attempting to register again with the same
     * name will fail.
     */
    static org.apache.camel.builder.endpoint.dsl.DebeziumPostgresEndpointBuilderFactory.DebeziumPostgresEndpointBuilder debeziumPostgres(String path) {
        return org.apache.camel.builder.endpoint.dsl.DebeziumPostgresEndpointBuilderFactory.debeziumPostgres(path);
    }

    /**
     * Debezium SQL Server Connector (camel-debezium-sqlserver)
     * Represents a Debezium SQL Server endpoint which is used to capture
     * changes in SQL Server database so that that applications can see those
     * changes and respond to them.
     *
     * Category: database,sql,sqlserver
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-debezium-sqlserver
     *
     * Syntax: <code>debezium-sqlserver:name</code>
     *
     * Path parameter: name (required)
     * Unique name for the connector. Attempting to register again with the same
     * name will fail.
     */
    static org.apache.camel.builder.endpoint.dsl.DebeziumSqlserverEndpointBuilderFactory.DebeziumSqlserverEndpointBuilder debeziumSqlserver(String path) {
        return org.apache.camel.builder.endpoint.dsl.DebeziumSqlserverEndpointBuilderFactory.debeziumSqlserver(path);
    }

    /**
     * DigitalOcean (camel-digitalocean)
     * The DigitalOcean component allows you to manage Droplets and resources
     * within the DigitalOcean cloud.
     *
     * Category: cloud,management
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-digitalocean
     *
     * Syntax: <code>digitalocean:operation</code>
     *
     * Path parameter: operation
     * The operation to perform to the given resource.
     * The value can be one of: create, update, delete, list, ownList, get,
     * listBackups, listActions, listNeighbors, listSnapshots, listKernels,
     * listAllNeighbors, enableBackups, disableBackups, reboot, powerCycle,
     * shutdown, powerOn, powerOff, restore, resetPassword, resize, rebuild,
     * rename, changeKernel, enableIpv6, enablePrivateNetworking, takeSnapshot,
     * transfer, convert, attach, detach, assign, unassign, tag, untag
     */
    static org.apache.camel.builder.endpoint.dsl.DigitalOceanEndpointBuilderFactory.DigitalOceanEndpointBuilder digitalocean(String path) {
        return org.apache.camel.builder.endpoint.dsl.DigitalOceanEndpointBuilderFactory.digitalocean(path);
    }

    /**
     * Crypto (JCE) (camel-crypto)
     * The crypto component is used for signing and verifying exchanges using
     * the Signature Service of the Java Cryptographic Extension (JCE).
     *
     * Category: security,transformation
     * Since: 2.3
     * Maven coordinates: org.apache.camel:camel-crypto
     *
     * Syntax: <code>crypto:cryptoOperation:name</code>
     *
     * Path parameter: cryptoOperation (required)
     * Set the Crypto operation from that supplied after the crypto scheme in
     * the endpoint uri e.g. crypto:sign sets sign as the operation.
     * The value can be one of: sign, verify
     *
     * Path parameter: name (required)
     * The logical name of this operation.
     */
    static org.apache.camel.builder.endpoint.dsl.DigitalSignatureEndpointBuilderFactory.DigitalSignatureEndpointBuilder crypto(String path) {
        return org.apache.camel.builder.endpoint.dsl.DigitalSignatureEndpointBuilderFactory.crypto(path);
    }

    /**
     * Direct (camel-direct)
     * The direct component provides direct, synchronous call to another
     * endpoint from the same CamelContext.
     *
     * Category: core,endpoint
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-direct
     *
     * Syntax: <code>direct:name</code>
     *
     * Path parameter: name (required)
     * Name of direct endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.DirectEndpointBuilderFactory.DirectEndpointBuilder direct(String path) {
        return org.apache.camel.builder.endpoint.dsl.DirectEndpointBuilderFactory.direct(path);
    }

    /**
     * Direct VM (camel-directvm)
     * The direct-vm component provides direct, synchronous call to another
     * endpoint from any CamelContext in the same JVM.
     *
     * Category: core,endpoint
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-directvm
     *
     * Syntax: <code>direct-vm:name</code>
     *
     * Path parameter: name (required)
     * Name of direct-vm endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.DirectVmEndpointBuilderFactory.DirectVmEndpointBuilder directVm(String path) {
        return org.apache.camel.builder.endpoint.dsl.DirectVmEndpointBuilderFactory.directVm(path);
    }

    /**
     * Disruptor (camel-disruptor)
     * The disruptor component provides asynchronous SEDA behavior using LMAX
     * Disruptor.
     *
     * Category: endpoint
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-disruptor
     *
     * Syntax: <code>disruptor:name</code>
     *
     * Path parameter: name (required)
     * Name of queue
     */
    static org.apache.camel.builder.endpoint.dsl.DisruptorEndpointBuilderFactory.DisruptorEndpointBuilder disruptor(String path) {
        return org.apache.camel.builder.endpoint.dsl.DisruptorEndpointBuilderFactory.disruptor(path);
    }

    /**
     * Disruptor VM (camel-disruptor)
     * The disruptor component provides asynchronous SEDA behavior using LMAX
     * Disruptor.
     *
     * Category: endpoint
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-disruptor
     *
     * Syntax: <code>disruptor-vm:name</code>
     *
     * Path parameter: name (required)
     * Name of queue
     */
    static org.apache.camel.builder.endpoint.dsl.DisruptorVmEndpointBuilderFactory.DisruptorVmEndpointBuilder disruptorVm(String path) {
        return org.apache.camel.builder.endpoint.dsl.DisruptorVmEndpointBuilderFactory.disruptorVm(path);
    }

    /**
     * DNS (camel-dns)
     * To lookup domain information and run DNS queries using DNSJava.
     *
     * Category: networking
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-dns
     *
     * Syntax: <code>dns:dnsType</code>
     *
     * Path parameter: dnsType (required)
     * The type of the lookup.
     * The value can be one of: dig, ip, lookup, wikipedia
     */
    static org.apache.camel.builder.endpoint.dsl.DnsEndpointBuilderFactory.DnsEndpointBuilder dns(String path) {
        return org.apache.camel.builder.endpoint.dsl.DnsEndpointBuilderFactory.dns(path);
    }

    /**
     * Docker (camel-docker)
     * The docker component is used for managing Docker containers.
     *
     * Category: container,cloud,paas
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-docker
     *
     * Syntax: <code>docker:operation</code>
     *
     * Path parameter: operation (required)
     * Which operation to use
     * The value can be one of: events, stats, auth, info, ping, version,
     * imagebuild, imagecreate, imageinspect, imagelist, imagepull,
     * imagepushimageremove, imagesearch, imagetag, containerattach,
     * containercommit, containercopyfile, containercreate,
     * containerdiffinspectcontainer, containerkill, containerlist,
     * containerlog, containerpause, containerrestart, containerremove,
     * containerstartcontainerstop, containertop, containerunpause,
     * containerwait, execcreate, execstart
     */
    static org.apache.camel.builder.endpoint.dsl.DockerEndpointBuilderFactory.DockerEndpointBuilder docker(String path) {
        return org.apache.camel.builder.endpoint.dsl.DockerEndpointBuilderFactory.docker(path);
    }

    /**
     * Dozer (camel-dozer)
     * The dozer component provides the ability to map between Java beans using
     * the Dozer mapping library.
     *
     * Category: transformation
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-dozer
     *
     * Syntax: <code>dozer:name</code>
     *
     * Path parameter: name (required)
     * A human readable name of the mapping.
     */
    static org.apache.camel.builder.endpoint.dsl.DozerEndpointBuilderFactory.DozerEndpointBuilder dozer(String path) {
        return org.apache.camel.builder.endpoint.dsl.DozerEndpointBuilderFactory.dozer(path);
    }

    /**
     * Drill (camel-drill)
     * The drill component gives you the ability to quering into apache drill
     * cluster.
     *
     * Category: database,sql
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-drill
     *
     * Syntax: <code>drill:host</code>
     *
     * Path parameter: host (required)
     * ZooKeeper host name or IP address. Use local instead of a host name or IP
     * address to connect to the local Drillbit
     */
    static org.apache.camel.builder.endpoint.dsl.DrillEndpointBuilderFactory.DrillEndpointBuilder drill(String path) {
        return org.apache.camel.builder.endpoint.dsl.DrillEndpointBuilderFactory.drill(path);
    }

    /**
     * Dropbox (camel-dropbox)
     * For uploading, downloading and managing files, folders, groups,
     * collaborations, etc on dropbox DOT com.
     *
     * Category: api,file
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-dropbox
     *
     * Syntax: <code>dropbox:operation</code>
     *
     * Path parameter: operation (required)
     * The specific action (typically is a CRUD action) to perform on Dropbox
     * remote folder.
     * The value can be one of: put, del, search, get, move
     */
    static org.apache.camel.builder.endpoint.dsl.DropboxEndpointBuilderFactory.DropboxEndpointBuilder dropbox(String path) {
        return org.apache.camel.builder.endpoint.dsl.DropboxEndpointBuilderFactory.dropbox(path);
    }

    /**
     * AWS EC2 (camel-aws-ec2)
     * The aws-ec2 is used for managing Amazon EC2 instances.
     *
     * Category: cloud,management
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-aws-ec2
     *
     * Syntax: <code>aws-ec2:label</code>
     *
     * Path parameter: label (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.EC2EndpointBuilderFactory.EC2EndpointBuilder awsEc2(String path) {
        return org.apache.camel.builder.endpoint.dsl.EC2EndpointBuilderFactory.awsEc2(path);
    }

    /**
     * AWS ECS (camel-aws-ecs)
     * The aws-ecs is used for managing Amazon ECS
     *
     * Category: cloud,management
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-aws-ecs
     *
     * Syntax: <code>aws-ecs:label</code>
     *
     * Path parameter: label (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.ECSEndpointBuilderFactory.ECSEndpointBuilder awsEcs(String path) {
        return org.apache.camel.builder.endpoint.dsl.ECSEndpointBuilderFactory.awsEcs(path);
    }

    /**
     * AWS EKS (camel-aws-eks)
     * The aws-eks is used for managing Amazon EKS
     *
     * Category: cloud,management
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-aws-eks
     *
     * Syntax: <code>aws-eks:label</code>
     *
     * Path parameter: label (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.EKSEndpointBuilderFactory.EKSEndpointBuilder awsEks(String path) {
        return org.apache.camel.builder.endpoint.dsl.EKSEndpointBuilderFactory.awsEks(path);
    }

    /**
     * Ehcache (camel-ehcache)
     * The ehcache component enables you to perform caching operations using
     * Ehcache as cache implementation.
     *
     * Category: cache,datagrid,clustering
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-ehcache
     *
     * Syntax: <code>ehcache:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * the cache name
     */
    static org.apache.camel.builder.endpoint.dsl.EhcacheEndpointBuilderFactory.EhcacheEndpointBuilder ehcache(String path) {
        return org.apache.camel.builder.endpoint.dsl.EhcacheEndpointBuilderFactory.ehcache(path);
    }

    /**
     * Elastichsearch Rest (camel-elasticsearch-rest)
     * The elasticsearch component is used for interfacing with ElasticSearch
     * server using REST API.
     *
     * Category: monitoring,search
     * Since: 2.21
     * Maven coordinates: org.apache.camel:camel-elasticsearch-rest
     *
     * Syntax: <code>elasticsearch-rest:clusterName</code>
     *
     * Path parameter: clusterName (required)
     * Name of the cluster
     */
    static org.apache.camel.builder.endpoint.dsl.ElasticsearchEndpointBuilderFactory.ElasticsearchEndpointBuilder elasticsearchRest(String path) {
        return org.apache.camel.builder.endpoint.dsl.ElasticsearchEndpointBuilderFactory.elasticsearchRest(path);
    }

    /**
     * ElSQL (camel-elsql)
     * The elsql component is an extension to the existing SQL Component that
     * uses ElSql to define the SQL queries.
     *
     * Category: database,sql
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-elsql
     *
     * Syntax: <code>elsql:elsqlName:resourceUri</code>
     *
     * Path parameter: elsqlName (required)
     * The name of the elsql to use (is NAMED in the elsql file)
     *
     * Path parameter: resourceUri
     * The resource file which contains the elsql SQL statements to use. You can
     * specify multiple resources separated by comma. The resources are loaded
     * on the classpath by default, you can prefix with file: to load from file
     * system. Notice you can set this option on the component and then you do
     * not have to configure this on the endpoint.
     */
    static org.apache.camel.builder.endpoint.dsl.ElsqlEndpointBuilderFactory.ElsqlEndpointBuilder elsql(String path) {
        return org.apache.camel.builder.endpoint.dsl.ElsqlEndpointBuilderFactory.elsql(path);
    }

    /**
     * Elytron (camel-elytron)
     * Endpoint
     *
     * Category: http
     * Since: 3.1
     * Maven coordinates: org.apache.camel:camel-elytron
     *
     * Syntax: <code>elytron:httpURI</code>
     *
     * Path parameter: httpURI (required)
     * The url of the HTTP endpoint to use.
     */
    static org.apache.camel.builder.endpoint.dsl.ElytronEndpointBuilderFactory.ElytronEndpointBuilder elytron(String path) {
        return org.apache.camel.builder.endpoint.dsl.ElytronEndpointBuilderFactory.elytron(path);
    }

    /**
     * Etcd (camel-etcd)
     * The camel etcd component allows you to work with Etcd, a distributed
     * reliable key-value store.
     *
     * Category: clustering,database
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-etcd
     *
     * Syntax: <code>etcd:namespace/path</code>
     *
     * Path parameter: namespace (required)
     * The API namespace to use
     * The value can be one of: keys, stats, watch
     *
     * Path parameter: path
     * The path the endpoint refers to
     */
    static org.apache.camel.builder.endpoint.dsl.EtcdEndpointBuilderFactory.EtcdEndpointBuilder etcd(String path) {
        return org.apache.camel.builder.endpoint.dsl.EtcdEndpointBuilderFactory.etcd(path);
    }

    /**
     * OSGi EventAdmin (camel-eventadmin)
     * The eventadmin component can be used in an OSGi environment to receive
     * OSGi EventAdmin events and process them.
     *
     * Category: eventbus
     * Since: 2.6
     * Maven coordinates: org.apache.camel:camel-eventadmin
     *
     * Syntax: <code>eventadmin:topic</code>
     *
     * Path parameter: topic
     * Name of topic to listen or send to
     */
    static org.apache.camel.builder.endpoint.dsl.EventAdminEndpointBuilderFactory.EventAdminEndpointBuilder eventadmin(String path) {
        return org.apache.camel.builder.endpoint.dsl.EventAdminEndpointBuilderFactory.eventadmin(path);
    }

    /**
     * Spring Event (camel-spring)
     * The spring-event component allows to listen for Spring Application
     * Events.
     *
     * Category: spring,eventbus
     * Since: 1.4
     * Maven coordinates: org.apache.camel:camel-spring
     *
     * Syntax: <code>spring-event:name</code>
     *
     * Path parameter: name
     * Name of endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.EventEndpointBuilderFactory.EventEndpointBuilder springEvent(String path) {
        return org.apache.camel.builder.endpoint.dsl.EventEndpointBuilderFactory.springEvent(path);
    }

    /**
     * Exec (camel-exec)
     * The exec component can be used to execute OS system commands.
     *
     * Category: system
     * Since: 2.3
     * Maven coordinates: org.apache.camel:camel-exec
     *
     * Syntax: <code>exec:executable</code>
     *
     * Path parameter: executable (required)
     * Sets the executable to be executed. The executable must not be empty or
     * null.
     */
    static org.apache.camel.builder.endpoint.dsl.ExecEndpointBuilderFactory.ExecEndpointBuilder exec(String path) {
        return org.apache.camel.builder.endpoint.dsl.ExecEndpointBuilderFactory.exec(path);
    }

    /**
     * Facebook (camel-facebook)
     * The Facebook component provides access to all of the Facebook APIs
     * accessible using Facebook4J.
     *
     * Category: social
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-facebook
     *
     * Syntax: <code>facebook:methodName</code>
     *
     * Path parameter: methodName (required)
     * What operation to perform
     */
    static org.apache.camel.builder.endpoint.dsl.FacebookEndpointBuilderFactory.FacebookEndpointBuilder facebook(String path) {
        return org.apache.camel.builder.endpoint.dsl.FacebookEndpointBuilderFactory.facebook(path);
    }

    /**
     * FHIR (camel-fhir)
     * The fhir component is used for working with the FHIR protocol (health
     * care).
     *
     * Category: hl7,api
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-fhir
     *
     * Syntax: <code>fhir:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: capabilities, create, delete, history,
     * load-page, meta, patch, read, search, transaction, update, validate
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     */
    static org.apache.camel.builder.endpoint.dsl.FhirEndpointBuilderFactory.FhirEndpointBuilder fhir(String path) {
        return org.apache.camel.builder.endpoint.dsl.FhirEndpointBuilderFactory.fhir(path);
    }

    /**
     * File (camel-file)
     * The file component is used for reading or writing files.
     *
     * Category: core,file
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-file
     *
     * Syntax: <code>file:directoryName</code>
     *
     * Path parameter: directoryName (required)
     * The starting directory
     */
    static org.apache.camel.builder.endpoint.dsl.FileEndpointBuilderFactory.FileEndpointBuilder file(String path) {
        return org.apache.camel.builder.endpoint.dsl.FileEndpointBuilderFactory.file(path);
    }

    /**
     * file-watch (camel-file-watch)
     * The file-watch is used to monitor file events in directory using
     * java.nio.file.WatchService
     *
     * Category: file
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-file-watch
     *
     * Syntax: <code>file-watch:path</code>
     *
     * Path parameter: path (required)
     * Path of directory to consume events from.
     */
    static org.apache.camel.builder.endpoint.dsl.FileWatchEndpointBuilderFactory.FileWatchEndpointBuilder fileWatch(String path) {
        return org.apache.camel.builder.endpoint.dsl.FileWatchEndpointBuilderFactory.fileWatch(path);
    }

    /**
     * Flatpack (camel-flatpack)
     * The flatpack component supports fixed width and delimited file parsing
     * via the FlatPack library.
     *
     * Category: transformation
     * Since: 1.4
     * Maven coordinates: org.apache.camel:camel-flatpack
     *
     * Syntax: <code>flatpack:type:resourceUri</code>
     *
     * Path parameter: type
     * Whether to use fixed or delimiter
     * Default value: delim
     * The value can be one of: fixed, delim
     *
     * Path parameter: resourceUri (required)
     * URL for loading the flatpack mapping file from classpath or file system
     */
    static org.apache.camel.builder.endpoint.dsl.FlatpackEndpointBuilderFactory.FlatpackEndpointBuilder flatpack(String path) {
        return org.apache.camel.builder.endpoint.dsl.FlatpackEndpointBuilderFactory.flatpack(path);
    }

    /**
     * Flink (camel-flink)
     * The flink component can be used to send DataSet jobs to Apache Flink
     * cluster.
     *
     * Category: hadoop
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-flink
     *
     * Syntax: <code>flink:endpointType</code>
     *
     * Path parameter: endpointType (required)
     * Type of the endpoint (dataset, datastream).
     * The value can be one of: dataset, datastream
     */
    static org.apache.camel.builder.endpoint.dsl.FlinkEndpointBuilderFactory.FlinkEndpointBuilder flink(String path) {
        return org.apache.camel.builder.endpoint.dsl.FlinkEndpointBuilderFactory.flink(path);
    }

    /**
     * FOP (camel-fop)
     * The fop component allows you to render a message into different output
     * formats using Apache FOP.
     *
     * Category: transformation
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-fop
     *
     * Syntax: <code>fop:outputType</code>
     *
     * Path parameter: outputType (required)
     * The primary output format is PDF but other output formats are also
     * supported.
     * The value can be one of: pdf, ps, pcl, png, jpeg, svg, xml, mif, rtf, txt
     */
    static org.apache.camel.builder.endpoint.dsl.FopEndpointBuilderFactory.FopEndpointBuilder fop(String path) {
        return org.apache.camel.builder.endpoint.dsl.FopEndpointBuilderFactory.fop(path);
    }

    /**
     * Freemarker (camel-freemarker)
     * Transforms the message using a FreeMarker template.
     *
     * Category: transformation
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-freemarker
     *
     * Syntax: <code>freemarker:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.FreemarkerEndpointBuilderFactory.FreemarkerEndpointBuilder freemarker(String path) {
        return org.apache.camel.builder.endpoint.dsl.FreemarkerEndpointBuilderFactory.freemarker(path);
    }

    /**
     * FTP (camel-ftp)
     * The ftp component is used for uploading or downloading files from FTP
     * servers.
     *
     * Category: file
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-ftp
     *
     * Syntax: <code>ftp:host:port/directoryName</code>
     *
     * Path parameter: host (required)
     * Hostname of the FTP server
     *
     * Path parameter: port
     * Port of the FTP server
     *
     * Path parameter: directoryName
     * The starting directory
     */
    static org.apache.camel.builder.endpoint.dsl.FtpEndpointBuilderFactory.FtpEndpointBuilder ftp(String path) {
        return org.apache.camel.builder.endpoint.dsl.FtpEndpointBuilderFactory.ftp(path);
    }

    /**
     * FTPS (camel-ftp)
     * The ftps (FTP secure SSL/TLS) component is used for uploading or
     * downloading files from FTP servers.
     *
     * Category: file
     * Since: 2.2
     * Maven coordinates: org.apache.camel:camel-ftp
     *
     * Syntax: <code>ftps:host:port/directoryName</code>
     *
     * Path parameter: host (required)
     * Hostname of the FTP server
     *
     * Path parameter: port
     * Port of the FTP server
     *
     * Path parameter: directoryName
     * The starting directory
     */
    static org.apache.camel.builder.endpoint.dsl.FtpsEndpointBuilderFactory.FtpsEndpointBuilder ftps(String path) {
        return org.apache.camel.builder.endpoint.dsl.FtpsEndpointBuilderFactory.ftps(path);
    }

    /**
     * Ganglia (camel-ganglia)
     * The ganglia component is used for sending metrics to the Ganglia
     * monitoring system.
     *
     * Category: monitoring
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-ganglia
     *
     * Syntax: <code>ganglia:host:port</code>
     *
     * Path parameter: host
     * Host name for Ganglia server
     * Default value: 239.2.11.71
     *
     * Path parameter: port
     * Port for Ganglia server
     * Default value: 8649
     */
    static org.apache.camel.builder.endpoint.dsl.GangliaEndpointBuilderFactory.GangliaEndpointBuilder ganglia(String path) {
        return org.apache.camel.builder.endpoint.dsl.GangliaEndpointBuilderFactory.ganglia(path);
    }

    /**
     * Geocoder (camel-geocoder)
     * The geocoder component is used for looking up geocodes (latitude and
     * longitude) for a given address, or reverse lookup.
     *
     * Category: api,location
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-geocoder
     *
     * Syntax: <code>geocoder:address:latlng</code>
     *
     * Path parameter: address
     * The geo address which should be prefixed with address:
     *
     * Path parameter: latlng
     * The geo latitude and longitude which should be prefixed with latlng:
     */
    static org.apache.camel.builder.endpoint.dsl.GeoCoderEndpointBuilderFactory.GeoCoderEndpointBuilder geocoder(String path) {
        return org.apache.camel.builder.endpoint.dsl.GeoCoderEndpointBuilderFactory.geocoder(path);
    }

    /**
     * Git (camel-git)
     * The git component is used for working with git repositories.
     *
     * Category: file
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-git
     *
     * Syntax: <code>git:localPath</code>
     *
     * Path parameter: localPath (required)
     * Local repository path
     */
    static org.apache.camel.builder.endpoint.dsl.GitEndpointBuilderFactory.GitEndpointBuilder git(String path) {
        return org.apache.camel.builder.endpoint.dsl.GitEndpointBuilderFactory.git(path);
    }

    /**
     * GitHub (camel-github)
     * The github component is used for integrating Camel with github.
     *
     * Category: api,file
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-github
     *
     * Syntax: <code>github:type/branchName</code>
     *
     * Path parameter: type (required)
     * What git operation to execute
     * The value can be one of: CLOSEPULLREQUEST, PULLREQUESTCOMMENT, COMMIT,
     * PULLREQUEST, TAG, PULLREQUESTSTATE, PULLREQUESTFILES, GETCOMMITFILE,
     * CREATEISSUE
     *
     * Path parameter: branchName
     * Name of branch
     */
    static org.apache.camel.builder.endpoint.dsl.GitHubEndpointBuilderFactory.GitHubEndpointBuilder github(String path) {
        return org.apache.camel.builder.endpoint.dsl.GitHubEndpointBuilderFactory.github(path);
    }

    /**
     * OpenStack Glance (camel-openstack)
     * The openstack-glance component allows messages to be sent to an OpenStack
     * image services.
     *
     * Category: cloud,paas
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-openstack
     *
     * Syntax: <code>openstack-glance:host</code>
     *
     * Path parameter: host (required)
     * OpenStack host url
     */
    static org.apache.camel.builder.endpoint.dsl.GlanceEndpointBuilderFactory.GlanceEndpointBuilder openstackGlance(String path) {
        return org.apache.camel.builder.endpoint.dsl.GlanceEndpointBuilderFactory.openstackGlance(path);
    }

    /**
     * Google BigQuery (camel-google-bigquery)
     * Google BigQuery data warehouse for analytics.
     *
     * Category: cloud,messaging
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-google-bigquery
     *
     * Syntax: <code>google-bigquery:projectId:datasetId:tableId</code>
     *
     * Path parameter: projectId (required)
     * Google Cloud Project Id
     *
     * Path parameter: datasetId (required)
     * BigQuery Dataset Id
     *
     * Path parameter: tableId
     * BigQuery table id
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleBigQueryEndpointBuilderFactory.GoogleBigQueryEndpointBuilder googleBigquery(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleBigQueryEndpointBuilderFactory.googleBigquery(path);
    }

    /**
     * Google BigQuery Standard SQL (camel-google-bigquery)
     * Google BigQuery data warehouse for analytics (using SQL queries).
     *
     * Category: cloud,messaging
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-google-bigquery
     *
     * Syntax: <code>google-bigquery-sql:projectId:query</code>
     *
     * Path parameter: query (required)
     * BigQuery standard SQL query
     *
     * Path parameter: projectId (required)
     * Google Cloud Project Id
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleBigQuerySQLEndpointBuilderFactory.GoogleBigQuerySQLEndpointBuilder googleBigquerySql(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleBigQuerySQLEndpointBuilderFactory.googleBigquerySql(path);
    }

    /**
     * Google Calendar (camel-google-calendar)
     * The google-calendar component provides access to Google Calendar.
     *
     * Category: api,cloud
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-google-calendar
     *
     * Syntax: <code>google-calendar:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: ACL, LIST, CALENDARS, CHANNELS, COLORS,
     * FREEBUSY, EVENTS, SETTINGS
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     * The value can be one of: calendarImport, clear, delete, get, insert,
     * instances, list, move, patch, query, quickAdd, stop, update, watch
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleCalendarEndpointBuilderFactory.GoogleCalendarEndpointBuilder googleCalendar(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleCalendarEndpointBuilderFactory.googleCalendar(path);
    }

    /**
     * Google Calendar Stream (camel-google-calendar)
     * The google-calendar component provides access to Google Calendar in a
     * streaming mode.
     *
     * Category: api,cloud
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-google-calendar
     *
     * Syntax: <code>google-calendar-stream:index</code>
     *
     * Path parameter: index
     * Specifies an index for the endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleCalendarStreamEndpointBuilderFactory.GoogleCalendarStreamEndpointBuilder googleCalendarStream(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleCalendarStreamEndpointBuilderFactory.googleCalendarStream(path);
    }

    /**
     * Google Drive (camel-google-drive)
     * The google-drive component provides access to Google Drive file storage
     * service.
     *
     * Category: api,cloud,file
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-google-drive
     *
     * Syntax: <code>google-drive:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: drive-about, drive-apps, drive-changes,
     * drive-channels, drive-children, drive-comments, drive-files,
     * drive-parents, drive-permissions, drive-properties, drive-realtime,
     * drive-replies, drive-revisions
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     * The value can be one of: copy, delete, get, getIdForEmail, insert, list,
     * patch, stop, touch, trash, untrash, update, watch
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleDriveEndpointBuilderFactory.GoogleDriveEndpointBuilder googleDrive(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleDriveEndpointBuilderFactory.googleDrive(path);
    }

    /**
     * Google Mail (camel-google-mail)
     * The google-mail component provides access to Google Mail.
     *
     * Category: api,cloud,mail
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-google-mail
     *
     * Syntax: <code>google-mail:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: THREADS, MESSAGES, ATTACHMENTS, LABELS, HISTORY,
     * DRAFTS, USERS
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     * The value can be one of: attachments, create, delete, get, getProfile,
     * gmailImport, insert, list, modify, patch, send, trash, untrash, update
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleMailEndpointBuilderFactory.GoogleMailEndpointBuilder googleMail(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleMailEndpointBuilderFactory.googleMail(path);
    }

    /**
     * Google Mail Stream (camel-google-mail)
     * The google-mail component provides access to Google Mail.
     *
     * Category: api,cloud,mail
     * Since: 2.22
     * Maven coordinates: org.apache.camel:camel-google-mail
     *
     * Syntax: <code>google-mail-stream:index</code>
     *
     * Path parameter: index
     * Specifies an index for the endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleMailStreamEndpointBuilderFactory.GoogleMailStreamEndpointBuilder googleMailStream(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleMailStreamEndpointBuilderFactory.googleMailStream(path);
    }

    /**
     * Google Pubsub (camel-google-pubsub)
     * Messaging client for Google Cloud Platform PubSub Service
     *
     * Category: messaging
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-google-pubsub
     *
     * Syntax: <code>google-pubsub:projectId:destinationName</code>
     *
     * Path parameter: projectId (required)
     * Project Id
     *
     * Path parameter: destinationName (required)
     * Destination Name
     */
    static org.apache.camel.builder.endpoint.dsl.GooglePubsubEndpointBuilderFactory.GooglePubsubEndpointBuilder googlePubsub(String path) {
        return org.apache.camel.builder.endpoint.dsl.GooglePubsubEndpointBuilderFactory.googlePubsub(path);
    }

    /**
     * Google Sheets (camel-google-sheets)
     * The google-sheets component provides access to Google Sheets.
     *
     * Category: api,cloud,sheets
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-google-sheets
     *
     * Syntax: <code>google-sheets:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: SPREADSHEETS, DATA
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     * The value can be one of: create, get, update, append, batchUpdate, clear
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleSheetsEndpointBuilderFactory.GoogleSheetsEndpointBuilder googleSheets(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleSheetsEndpointBuilderFactory.googleSheets(path);
    }

    /**
     * Google Sheets Stream (camel-google-sheets)
     * The google-sheets component provides access to Google Sheets.
     *
     * Category: api,cloud,sheets
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-google-sheets
     *
     * Syntax: <code>google-sheets-stream:apiName</code>
     *
     * Path parameter: apiName
     * Sets the apiName.
     */
    static org.apache.camel.builder.endpoint.dsl.GoogleSheetsStreamEndpointBuilderFactory.GoogleSheetsStreamEndpointBuilder googleSheetsStream(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoogleSheetsStreamEndpointBuilderFactory.googleSheetsStream(path);
    }

    /**
     * Gora (camel-gora)
     * The gora component allows you to work with NoSQL databases using the
     * Apache Gora framework.
     *
     * Category: database,hadoop,nosql
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-gora
     *
     * Syntax: <code>gora:name</code>
     *
     * Path parameter: name (required)
     * Instance name
     */
    static org.apache.camel.builder.endpoint.dsl.GoraEndpointBuilderFactory.GoraEndpointBuilder gora(String path) {
        return org.apache.camel.builder.endpoint.dsl.GoraEndpointBuilderFactory.gora(path);
    }

    /**
     * Grape (camel-grape)
     * The grape component allows you to fetch, load and manage additional jars
     * when CamelContext is running.
     *
     * Category: management,deployment
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-grape
     *
     * Syntax: <code>grape:defaultCoordinates</code>
     *
     * Path parameter: defaultCoordinates (required)
     * Maven coordinates to use as default to grab if the message body is empty.
     */
    static org.apache.camel.builder.endpoint.dsl.GrapeEndpointBuilderFactory.GrapeEndpointBuilder grape(String path) {
        return org.apache.camel.builder.endpoint.dsl.GrapeEndpointBuilderFactory.grape(path);
    }

    /**
     * GraphQL (camel-graphql)
     * A Camel GraphQL Component
     *
     * Category: api
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-graphql
     *
     * Syntax: <code>graphql:httpUri</code>
     *
     * Path parameter: httpUri (required)
     * The GraphQL server URI.
     */
    static org.apache.camel.builder.endpoint.dsl.GraphqlEndpointBuilderFactory.GraphqlEndpointBuilder graphql(String path) {
        return org.apache.camel.builder.endpoint.dsl.GraphqlEndpointBuilderFactory.graphql(path);
    }

    /**
     * MongoDB GridFS (camel-mongodb-gridfs)
     * Component for working with MongoDB GridFS.
     *
     * Category: database,nosql
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-mongodb-gridfs
     *
     * Syntax: <code>mongodb-gridfs:connectionBean</code>
     *
     * Path parameter: connectionBean (required)
     * Name of com.mongodb.MongoClient to use.
     */
    static org.apache.camel.builder.endpoint.dsl.GridFsEndpointBuilderFactory.GridFsEndpointBuilder mongodbGridfs(String path) {
        return org.apache.camel.builder.endpoint.dsl.GridFsEndpointBuilderFactory.mongodbGridfs(path);
    }

    /**
     * gRPC (camel-grpc)
     * The gRPC component allows to call and expose remote procedures via HTTP/2
     * with protobuf dataformat
     *
     * Category: rpc
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-grpc
     *
     * Syntax: <code>grpc:host:port/service</code>
     *
     * Path parameter: host (required)
     * The gRPC server host name. This is localhost or 0.0.0.0 when being a
     * consumer or remote server host name when using producer.
     *
     * Path parameter: port (required)
     * The gRPC local or remote server port
     *
     * Path parameter: service (required)
     * Fully qualified service name from the protocol buffer descriptor file
     * (package dot service definition name)
     */
    static org.apache.camel.builder.endpoint.dsl.GrpcEndpointBuilderFactory.GrpcEndpointBuilder grpc(String path) {
        return org.apache.camel.builder.endpoint.dsl.GrpcEndpointBuilderFactory.grpc(path);
    }

    /**
     * Guava EventBus (camel-guava-eventbus)
     * The guava-eventbus component provides integration bridge between Camel
     * and Google Guava EventBus.
     *
     * Category: eventbus
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-guava-eventbus
     *
     * Syntax: <code>guava-eventbus:eventBusRef</code>
     *
     * Path parameter: eventBusRef
     * To lookup the Guava EventBus from the registry with the given name
     */
    static org.apache.camel.builder.endpoint.dsl.GuavaEventBusEndpointBuilderFactory.GuavaEventBusEndpointBuilder guavaEventbus(String path) {
        return org.apache.camel.builder.endpoint.dsl.GuavaEventBusEndpointBuilderFactory.guavaEventbus(path);
    }

    /**
     * HBase (camel-hbase)
     * For reading/writing from/to an HBase store (Hadoop database).
     *
     * Category: hadoop
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-hbase
     *
     * Syntax: <code>hbase:tableName</code>
     *
     * Path parameter: tableName (required)
     * The name of the table
     */
    static org.apache.camel.builder.endpoint.dsl.HBaseEndpointBuilderFactory.HBaseEndpointBuilder hbase(String path) {
        return org.apache.camel.builder.endpoint.dsl.HBaseEndpointBuilderFactory.hbase(path);
    }

    /**
     * Hazelcast Atomic Number (camel-hazelcast)
     * The hazelcast-atomicvalue component is used to access Hazelcast atomic
     * number, which is an object that simply provides a grid wide number
     * (long).
     *
     * Category: cache,datagrid
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-atomicvalue:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastAtomicnumberEndpointBuilderFactory.HazelcastAtomicnumberEndpointBuilder hazelcastAtomicvalue(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastAtomicnumberEndpointBuilderFactory.hazelcastAtomicvalue(path);
    }

    /**
     * Hazelcast Instance (camel-hazelcast)
     * The hazelcast-instance component is used to consume join/leave events of
     * the cache instance in the cluster.
     *
     * Category: cache,datagrid
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-instance:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastInstanceEndpointBuilderFactory.HazelcastInstanceEndpointBuilder hazelcastInstance(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastInstanceEndpointBuilderFactory.hazelcastInstance(path);
    }

    /**
     * Hazelcast List (camel-hazelcast)
     * The hazelcast-list component is used to access Hazelcast distributed
     * list.
     *
     * Category: cache,datagrid
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-list:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastListEndpointBuilderFactory.HazelcastListEndpointBuilder hazelcastList(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastListEndpointBuilderFactory.hazelcastList(path);
    }

    /**
     * Hazelcast Map (camel-hazelcast)
     * The hazelcast-map component is used to access Hazelcast distributed map.
     *
     * Category: cache,datagrid
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-map:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastMapEndpointBuilderFactory.HazelcastMapEndpointBuilder hazelcastMap(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastMapEndpointBuilderFactory.hazelcastMap(path);
    }

    /**
     * Hazelcast Multimap (camel-hazelcast)
     * The hazelcast-multimap component is used to to access Hazelcast
     * distributed multimap.
     *
     * Category: cache,datagrid
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-multimap:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastMultimapEndpointBuilderFactory.HazelcastMultimapEndpointBuilder hazelcastMultimap(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastMultimapEndpointBuilderFactory.hazelcastMultimap(path);
    }

    /**
     * Hazelcast Queue (camel-hazelcast)
     * The hazelcast-queue component is used to access Hazelcast distributed
     * queue.
     *
     * Category: cache,datagrid
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-queue:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastQueueEndpointBuilderFactory.HazelcastQueueEndpointBuilder hazelcastQueue(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastQueueEndpointBuilderFactory.hazelcastQueue(path);
    }

    /**
     * Hazelcast Ringbuffer (camel-hazelcast)
     * The hazelcast-ringbuffer component is used to access Hazelcast
     * distributed ringbuffer.
     *
     * Category: cache,datagrid
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-ringbuffer:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastRingbufferEndpointBuilderFactory.HazelcastRingbufferEndpointBuilder hazelcastRingbuffer(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastRingbufferEndpointBuilderFactory.hazelcastRingbuffer(path);
    }

    /**
     * Hazelcast SEDA (camel-hazelcast)
     * The hazelcast-seda component is used to access Hazelcast BlockingQueue.
     *
     * Category: cache,datagrid
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-seda:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastSedaEndpointBuilderFactory.HazelcastSedaEndpointBuilder hazelcastSeda(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastSedaEndpointBuilderFactory.hazelcastSeda(path);
    }

    /**
     * Hazelcast Set (camel-hazelcast)
     * The hazelcast-set component is used to access Hazelcast distributed set.
     *
     * Category: cache,datagrid
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-set:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastSetEndpointBuilderFactory.HazelcastSetEndpointBuilder hazelcastSet(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastSetEndpointBuilderFactory.hazelcastSet(path);
    }

    /**
     * Hazelcast Topic (camel-hazelcast)
     * The hazelcast-topic component is used to access Hazelcast distributed
     * topic.
     *
     * Category: cache,datagrid
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-hazelcast
     *
     * Syntax: <code>hazelcast-topic:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.HazelcastTopicEndpointBuilderFactory.HazelcastTopicEndpointBuilder hazelcastTopic(String path) {
        return org.apache.camel.builder.endpoint.dsl.HazelcastTopicEndpointBuilderFactory.hazelcastTopic(path);
    }

    /**
     * HDFS (camel-hdfs)
     * For reading/writing from/to an HDFS filesystem using Hadoop 2.x.
     *
     * Category: hadoop,file
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-hdfs
     *
     * Syntax: <code>hdfs:hostName:port/path</code>
     *
     * Path parameter: hostName (required)
     * HDFS host to use
     *
     * Path parameter: port
     * HDFS port to use
     * Default value: 8020
     *
     * Path parameter: path (required)
     * The directory path to use
     */
    static org.apache.camel.builder.endpoint.dsl.HdfsEndpointBuilderFactory.HdfsEndpointBuilder hdfs(String path) {
        return org.apache.camel.builder.endpoint.dsl.HdfsEndpointBuilderFactory.hdfs(path);
    }

    /**
     * Hipchat (camel-hipchat)
     * The hipchat component supports producing and consuming messages from/to
     * Hipchat service.
     *
     * Category: api,cloud
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-hipchat
     *
     * Syntax: <code>hipchat:protocol:host:port</code>
     *
     * Path parameter: protocol (required)
     * The protocol for the hipchat server, such as http.
     *
     * Path parameter: host (required)
     * The host for the hipchat server, such as api.hipchat.com
     *
     * Path parameter: port
     * The port for the hipchat server. Is by default 80.
     * Default value: 80
     */
    static org.apache.camel.builder.endpoint.dsl.HipchatEndpointBuilderFactory.HipchatEndpointBuilder hipchat(String path) {
        return org.apache.camel.builder.endpoint.dsl.HipchatEndpointBuilderFactory.hipchat(path);
    }

    /**
     * HTTP (camel-http)
     * For calling out to external HTTP servers using Apache HTTP Client 4.x.
     *
     * Category: http
     * Since: 2.3
     * Maven coordinates: org.apache.camel:camel-http
     *
     * Syntax: <code>http:httpUri</code>
     *
     * Path parameter: httpUri (required)
     * The url of the HTTP endpoint to call.
     */
    static org.apache.camel.builder.endpoint.dsl.HttpEndpointBuilderFactory.HttpEndpointBuilder http(String path) {
        return org.apache.camel.builder.endpoint.dsl.HttpEndpointBuilderFactory.http(path);
    }

    /**
     * HTTPS (Secure) (camel-http)
     * For calling out to external HTTP servers using Apache HTTP Client 4.x.
     *
     * Category: http
     * Since: 2.3
     * Maven coordinates: org.apache.camel:camel-http
     *
     * Syntax: <code>https:httpUri</code>
     *
     * Path parameter: httpUri (required)
     * The url of the HTTP endpoint to call.
     */
    static org.apache.camel.builder.endpoint.dsl.HttpEndpointBuilderFactory.HttpEndpointBuilder https(String path) {
        return org.apache.camel.builder.endpoint.dsl.HttpEndpointBuilderFactory.https(path);
    }

    /**
     * HTTP (camel-http)
     * For calling out to external HTTP servers using Apache HTTP Client 4.x.
     *
     * Category: http
     * Since: 2.3
     * Maven coordinates: org.apache.camel:camel-http
     */
    static org.apache.camel.builder.endpoint.dsl.HttpEndpointBuilderFactory.HttpEndpointBuilder http(String scheme, String path) {
        return org.apache.camel.builder.endpoint.dsl.HttpEndpointBuilderFactory.http(scheme, path);
    }

    /**
     * AWS IAM (camel-aws-iam)
     * The aws-iam is used for managing Amazon IAM
     *
     * Category: cloud,management
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-aws-iam
     *
     * Syntax: <code>aws-iam:label</code>
     *
     * Path parameter: label (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.IAMEndpointBuilderFactory.IAMEndpointBuilder awsIam(String path) {
        return org.apache.camel.builder.endpoint.dsl.IAMEndpointBuilderFactory.awsIam(path);
    }

    /**
     * IOTA (camel-iota)
     * Component for integrate IOTA DLT
     *
     * Category: ledger
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-iota
     *
     * Syntax: <code>iota:name</code>
     *
     * Path parameter: name (required)
     * Component name
     */
    static org.apache.camel.builder.endpoint.dsl.IOTAEndpointBuilderFactory.IOTAEndpointBuilder iota(String path) {
        return org.apache.camel.builder.endpoint.dsl.IOTAEndpointBuilderFactory.iota(path);
    }

    /**
     * IPFS (camel-ipfs)
     * The camel-ipfs component provides access to the Interplanetary File
     * System (IPFS).
     *
     * Category: file,ipfs
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-ipfs
     *
     * Syntax: <code>ipfs:ipfsCmd</code>
     *
     * Path parameter: ipfsCmd (required)
     * The ipfs command
     * The value can be one of: add, cat, get, version
     */
    static org.apache.camel.builder.endpoint.dsl.IPFSEndpointBuilderFactory.IPFSEndpointBuilder ipfs(String path) {
        return org.apache.camel.builder.endpoint.dsl.IPFSEndpointBuilderFactory.ipfs(path);
    }

    /**
     * Ignite Cache (camel-ignite)
     * The Ignite Cache endpoint is one of camel-ignite endpoints which allows
     * you to interact with an Ignite Cache.
     *
     * Category: nosql,cache,compute
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-ignite
     *
     * Syntax: <code>ignite-cache:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The cache name.
     */
    static org.apache.camel.builder.endpoint.dsl.IgniteCacheEndpointBuilderFactory.IgniteCacheEndpointBuilder igniteCache(String path) {
        return org.apache.camel.builder.endpoint.dsl.IgniteCacheEndpointBuilderFactory.igniteCache(path);
    }

    /**
     * Ignite Compute (camel-ignite)
     * The Ignite Compute endpoint is one of camel-ignite endpoints which allows
     * you to run compute operations on the cluster by passing in an
     * IgniteCallable, an IgniteRunnable, an IgniteClosure, or collections of
     * them, along with their parameters if necessary.
     *
     * Category: nosql,cache,compute
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-ignite
     *
     * Syntax: <code>ignite-compute:endpointId</code>
     *
     * Path parameter: endpointId (required)
     * The endpoint ID (not used).
     */
    static org.apache.camel.builder.endpoint.dsl.IgniteComputeEndpointBuilderFactory.IgniteComputeEndpointBuilder igniteCompute(String path) {
        return org.apache.camel.builder.endpoint.dsl.IgniteComputeEndpointBuilderFactory.igniteCompute(path);
    }

    /**
     * Ignite Events (camel-ignite)
     * The Ignite Events endpoint is one of camel-ignite endpoints which allows
     * you to receive events from the Ignite cluster by creating a local event
     * listener.
     *
     * Category: nosql,cache,compute,messaging,data
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-ignite
     *
     * Syntax: <code>ignite-events:endpointId</code>
     *
     * Path parameter: endpointId
     * The endpoint ID (not used).
     */
    static org.apache.camel.builder.endpoint.dsl.IgniteEventsEndpointBuilderFactory.IgniteEventsEndpointBuilder igniteEvents(String path) {
        return org.apache.camel.builder.endpoint.dsl.IgniteEventsEndpointBuilderFactory.igniteEvents(path);
    }

    /**
     * Ignite ID Generator (camel-ignite)
     * The Ignite ID Generator endpoint is one of camel-ignite endpoints which
     * allows you to interact with Ignite Atomic Sequences and ID Generators.
     *
     * Category: nosql,cache,compute
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-ignite
     *
     * Syntax: <code>ignite-idgen:name</code>
     *
     * Path parameter: name (required)
     * The sequence name.
     */
    static org.apache.camel.builder.endpoint.dsl.IgniteIdGenEndpointBuilderFactory.IgniteIdGenEndpointBuilder igniteIdgen(String path) {
        return org.apache.camel.builder.endpoint.dsl.IgniteIdGenEndpointBuilderFactory.igniteIdgen(path);
    }

    /**
     * Ignite Messaging (camel-ignite)
     * The Ignite Messaging endpoint is one of camel-ignite endpoints which
     * allows you to send and consume messages from an Ignite topic.
     *
     * Category: nosql,cache,messaging
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-ignite
     *
     * Syntax: <code>ignite-messaging:topic</code>
     *
     * Path parameter: topic (required)
     * The topic name.
     */
    static org.apache.camel.builder.endpoint.dsl.IgniteMessagingEndpointBuilderFactory.IgniteMessagingEndpointBuilder igniteMessaging(String path) {
        return org.apache.camel.builder.endpoint.dsl.IgniteMessagingEndpointBuilderFactory.igniteMessaging(path);
    }

    /**
     * Ignite Queues (camel-ignite)
     * The Ignite Queue endpoint is one of camel-ignite endpoints which allows
     * you to interact with Ignite Queue data structures.
     *
     * Category: nosql,cache
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-ignite
     *
     * Syntax: <code>ignite-queue:name</code>
     *
     * Path parameter: name (required)
     * The queue name.
     */
    static org.apache.camel.builder.endpoint.dsl.IgniteQueueEndpointBuilderFactory.IgniteQueueEndpointBuilder igniteQueue(String path) {
        return org.apache.camel.builder.endpoint.dsl.IgniteQueueEndpointBuilderFactory.igniteQueue(path);
    }

    /**
     * Ignite Sets (camel-ignite)
     * The Ignite Sets endpoint is one of camel-ignite endpoints which allows
     * you to interact with Ignite Set data structures.
     *
     * Category: nosql,cache
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-ignite
     *
     * Syntax: <code>ignite-set:name</code>
     *
     * Path parameter: name (required)
     * The set name.
     */
    static org.apache.camel.builder.endpoint.dsl.IgniteSetEndpointBuilderFactory.IgniteSetEndpointBuilder igniteSet(String path) {
        return org.apache.camel.builder.endpoint.dsl.IgniteSetEndpointBuilderFactory.igniteSet(path);
    }

    /**
     * Infinispan (camel-infinispan)
     * For reading/writing from/to Infinispan distributed key/value store and
     * data grid.
     *
     * Category: cache,datagrid,clustering
     * Since: 2.13
     * Maven coordinates: org.apache.camel:camel-infinispan
     *
     * Syntax: <code>infinispan:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The cache to use
     */
    static org.apache.camel.builder.endpoint.dsl.InfinispanEndpointBuilderFactory.InfinispanEndpointBuilder infinispan(String path) {
        return org.apache.camel.builder.endpoint.dsl.InfinispanEndpointBuilderFactory.infinispan(path);
    }

    /**
     * InfluxDB (camel-influxdb)
     * The influxdb component allows you to interact with InfluxDB, a time
     * series database.
     *
     * Category: database
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-influxdb
     *
     * Syntax: <code>influxdb:connectionBean</code>
     *
     * Path parameter: connectionBean (required)
     * Connection to the influx database, of class InfluxDB.class
     */
    static org.apache.camel.builder.endpoint.dsl.InfluxDbEndpointBuilderFactory.InfluxDbEndpointBuilder influxdb(String path) {
        return org.apache.camel.builder.endpoint.dsl.InfluxDbEndpointBuilderFactory.influxdb(path);
    }

    /**
     * IRC (camel-irc)
     * The irc component implements an IRC (Internet Relay Chat) transport.
     *
     * Category: chat
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-irc
     *
     * Syntax: <code>irc:hostname:port</code>
     *
     * Path parameter: hostname (required)
     * Hostname for the IRC chat server
     *
     * Path parameter: port
     * Port number for the IRC chat server. If no port is configured then a
     * default port of either 6667, 6668 or 6669 is used.
     */
    static org.apache.camel.builder.endpoint.dsl.IrcEndpointBuilderFactory.IrcEndpointBuilder irc(String path) {
        return org.apache.camel.builder.endpoint.dsl.IrcEndpointBuilderFactory.irc(path);
    }

    /**
     * IronMQ (camel-ironmq)
     * The ironmq provides integration with IronMQ an elastic and durable hosted
     * message queue as a service.
     *
     * Category: cloud,messaging
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-ironmq
     *
     * Syntax: <code>ironmq:queueName</code>
     *
     * Path parameter: queueName (required)
     * The name of the IronMQ queue
     */
    static org.apache.camel.builder.endpoint.dsl.IronMQEndpointBuilderFactory.IronMQEndpointBuilder ironmq(String path) {
        return org.apache.camel.builder.endpoint.dsl.IronMQEndpointBuilderFactory.ironmq(path);
    }

    /**
     * JBPM (camel-jbpm)
     * The jbpm component provides integration with jBPM (Business Process
     * Management).
     *
     * Category: process
     * Since: 2.6
     * Maven coordinates: org.apache.camel:camel-jbpm
     *
     * Syntax: <code>jbpm:connectionURL</code>
     *
     * Path parameter: connectionURL (required)
     * The URL to the jBPM server.
     *
     * Path parameter: eventListenerType
     * Sets the event listener type to attach to
     */
    static org.apache.camel.builder.endpoint.dsl.JBPMEndpointBuilderFactory.JBPMEndpointBuilder jbpm(String path) {
        return org.apache.camel.builder.endpoint.dsl.JBPMEndpointBuilderFactory.jbpm(path);
    }

    /**
     * JCache (camel-jcache)
     * The jcache component enables you to perform caching operations using
     * JSR107/JCache as cache implementation.
     *
     * Category: cache,datagrid,clustering
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-jcache
     *
     * Syntax: <code>jcache:cacheName</code>
     *
     * Path parameter: cacheName (required)
     * The name of the cache
     */
    static org.apache.camel.builder.endpoint.dsl.JCacheEndpointBuilderFactory.JCacheEndpointBuilder jcache(String path) {
        return org.apache.camel.builder.endpoint.dsl.JCacheEndpointBuilderFactory.jcache(path);
    }

    /**
     * JGroups (camel-jgroups)
     * The jgroups component provides exchange of messages between Camel and
     * JGroups clusters.
     *
     * Category: clustering,messaging
     * Since: 2.13
     * Maven coordinates: org.apache.camel:camel-jgroups
     *
     * Syntax: <code>jgroups:clusterName</code>
     *
     * Path parameter: clusterName (required)
     * The name of the JGroups cluster the component should connect to.
     */
    static org.apache.camel.builder.endpoint.dsl.JGroupsEndpointBuilderFactory.JGroupsEndpointBuilder jgroups(String path) {
        return org.apache.camel.builder.endpoint.dsl.JGroupsEndpointBuilderFactory.jgroups(path);
    }

    /**
     * JGroups raft (camel-jgroups-raft)
     * The jgroups component provides exchange of messages between Camel and
     * JGroups clusters.
     *
     * Category: clustering,messaging
     * Since: 2.24
     * Maven coordinates: org.apache.camel:camel-jgroups-raft
     *
     * Syntax: <code>jgroups-raft:clusterName</code>
     *
     * Path parameter: clusterName (required)
     * The name of the JGroupsraft cluster the component should connect to.
     */
    static org.apache.camel.builder.endpoint.dsl.JGroupsRaftEndpointBuilderFactory.JGroupsRaftEndpointBuilder jgroupsRaft(String path) {
        return org.apache.camel.builder.endpoint.dsl.JGroupsRaftEndpointBuilderFactory.jgroupsRaft(path);
    }

    /**
     * JMX (camel-jmx)
     * The jmx component allows to receive JMX notifications.
     *
     * Category: monitoring
     * Since: 2.6
     * Maven coordinates: org.apache.camel:camel-jmx
     *
     * Syntax: <code>jmx:serverURL</code>
     *
     * Path parameter: serverURL
     * Server url comes from the remaining endpoint. Use platform to connect to
     * local JVM.
     */
    static org.apache.camel.builder.endpoint.dsl.JMXEndpointBuilderFactory.JMXEndpointBuilder jmx(String path) {
        return org.apache.camel.builder.endpoint.dsl.JMXEndpointBuilderFactory.jmx(path);
    }

    /**
     * Javax Websocket (camel-websocket-jsr356)
     * Camel WebSocket using JSR356 (javax)
     *
     * Category: jsr356
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-websocket-jsr356
     *
     * Syntax: <code>websocket-jsr356:websocketPathOrUri</code>
     *
     * Path parameter: uri
     * If a schemeless URI path is provided, a ServerEndpoint is deployed under
     * that path. Else if the URI is prefixed with the 'ws://' scheme, then a
     * connection is established to the corresponding server
     */
    static org.apache.camel.builder.endpoint.dsl.JSR356WebSocketEndpointBuilderFactory.JSR356WebSocketEndpointBuilder websocketJsr356(String path) {
        return org.apache.camel.builder.endpoint.dsl.JSR356WebSocketEndpointBuilderFactory.websocketJsr356(path);
    }

    /**
     * JClouds (camel-jclouds)
     * For interacting with cloud compute & blobstore service via jclouds.
     *
     * Category: api,cloud
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-jclouds
     *
     * Syntax: <code>jclouds:command:providerId</code>
     *
     * Path parameter: command (required)
     * What command to execute such as blobstore or compute.
     * The value can be one of: blobstore, compute
     *
     * Path parameter: providerId (required)
     * The name of the cloud provider that provides the target service (e.g.
     * aws-s3 or aws_ec2).
     */
    static org.apache.camel.builder.endpoint.dsl.JcloudsEndpointBuilderFactory.JcloudsEndpointBuilder jclouds(String path) {
        return org.apache.camel.builder.endpoint.dsl.JcloudsEndpointBuilderFactory.jclouds(path);
    }

    /**
     * JCR (camel-jcr)
     * The jcr component allows you to add/read nodes to/from a JCR compliant
     * content repository.
     *
     * Category: cms,database
     * Since: 1.3
     * Maven coordinates: org.apache.camel:camel-jcr
     *
     * Syntax: <code>jcr:host/base</code>
     *
     * Path parameter: host (required)
     * Name of the javax.jcr.Repository to lookup from the Camel registry to be
     * used.
     *
     * Path parameter: base
     * Get the base node when accessing the repository
     */
    static org.apache.camel.builder.endpoint.dsl.JcrEndpointBuilderFactory.JcrEndpointBuilder jcr(String path) {
        return org.apache.camel.builder.endpoint.dsl.JcrEndpointBuilderFactory.jcr(path);
    }

    /**
     * JDBC (camel-jdbc)
     * The jdbc component enables you to access databases through JDBC, where
     * SQL queries are sent in the message body.
     *
     * Category: database,sql
     * Since: 1.2
     * Maven coordinates: org.apache.camel:camel-jdbc
     *
     * Syntax: <code>jdbc:dataSourceName</code>
     *
     * Path parameter: dataSourceName (required)
     * Name of DataSource to lookup in the Registry. If the name is dataSource
     * or default, then Camel will attempt to lookup a default DataSource from
     * the registry, meaning if there is a only one instance of DataSource
     * found, then this DataSource will be used.
     */
    static org.apache.camel.builder.endpoint.dsl.JdbcEndpointBuilderFactory.JdbcEndpointBuilder jdbc(String path) {
        return org.apache.camel.builder.endpoint.dsl.JdbcEndpointBuilderFactory.jdbc(path);
    }

    /**
     * Jetty (camel-jetty)
     * To use Jetty as a HTTP server as consumer for Camel routes.
     *
     * Category: http
     * Since: 1.2
     * Maven coordinates: org.apache.camel:camel-jetty
     *
     * Syntax: <code>jetty:httpUri</code>
     *
     * Path parameter: httpUri (required)
     * The url of the HTTP endpoint to call.
     */
    static org.apache.camel.builder.endpoint.dsl.JettyHttpEndpointBuilder9Factory.JettyHttpEndpointBuilder9 jetty(String path) {
        return org.apache.camel.builder.endpoint.dsl.JettyHttpEndpointBuilder9Factory.jetty(path);
    }

    /**
     * Jing (camel-jing)
     * Validates the payload of a message using RelaxNG Syntax using Jing
     * library.
     *
     * Category: validation
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-jing
     *
     * Syntax: <code>jing:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * URL to a local resource on the classpath or a full URL to a remote
     * resource or resource on the file system which contains the schema to
     * validate against.
     */
    static org.apache.camel.builder.endpoint.dsl.JingEndpointBuilderFactory.JingEndpointBuilder jing(String path) {
        return org.apache.camel.builder.endpoint.dsl.JingEndpointBuilderFactory.jing(path);
    }

    /**
     * Jira (camel-jira)
     * The jira component interacts with the JIRA issue tracker.
     *
     * Category: api,reporting
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-jira
     *
     * Syntax: <code>jira:type</code>
     *
     * Path parameter: type (required)
     * Operation to perform. Consumers: NewIssues, NewComments. Producers:
     * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,
     * Watchers. See this class javadoc description for more information.
     * The value can be one of: ADDCOMMENT, ADDISSUE, ATTACH, DELETEISSUE,
     * NEWISSUES, NEWCOMMENTS, UPDATEISSUE, TRANSITIONISSUE, WATCHERS
     */
    static org.apache.camel.builder.endpoint.dsl.JiraEndpointBuilderFactory.JiraEndpointBuilder jira(String path) {
        return org.apache.camel.builder.endpoint.dsl.JiraEndpointBuilderFactory.jira(path);
    }

    /**
     * JMS (camel-jms)
     * The jms component allows messages to be sent to (or consumed from) a JMS
     * Queue or Topic.
     *
     * Category: messaging
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-jms
     *
     * Syntax: <code>jms:destinationType:destinationName</code>
     *
     * Path parameter: destinationType
     * The kind of destination to use
     * Default value: queue
     * The value can be one of: queue, topic, temp-queue, temp-topic
     *
     * Path parameter: destinationName (required)
     * Name of the queue or topic to use as destination
     */
    static org.apache.camel.builder.endpoint.dsl.JmsEndpointBuilderFactory.JmsEndpointBuilder jms(String path) {
        return org.apache.camel.builder.endpoint.dsl.JmsEndpointBuilderFactory.jms(path);
    }

    /**
     * JOLT (camel-jolt)
     * The jolt component allows you to process a JSON messages using an JOLT
     * specification (such as JSON-JSON transformation).
     *
     * Category: transformation
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-jolt
     *
     * Syntax: <code>jolt:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.JoltEndpointBuilderFactory.JoltEndpointBuilder jolt(String path) {
        return org.apache.camel.builder.endpoint.dsl.JoltEndpointBuilderFactory.jolt(path);
    }

    /**
     * JOOQ (camel-jooq)
     * The jooq component enables you to store and retrieve entities from
     * databases using JOOQ
     *
     * Category: database
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-jooq
     *
     * Syntax: <code>jooq:entityType</code>
     *
     * Path parameter: entityType
     * JOOQ entity class
     */
    static org.apache.camel.builder.endpoint.dsl.JooqEndpointBuilderFactory.JooqEndpointBuilder jooq(String path) {
        return org.apache.camel.builder.endpoint.dsl.JooqEndpointBuilderFactory.jooq(path);
    }

    /**
     * JPA (camel-jpa)
     * The jpa component enables you to store and retrieve Java objects from
     * databases using JPA.
     *
     * Category: database,sql
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-jpa
     *
     * Syntax: <code>jpa:entityType</code>
     *
     * Path parameter: entityType (required)
     * The JPA annotated class to use as entity.
     */
    static org.apache.camel.builder.endpoint.dsl.JpaEndpointBuilderFactory.JpaEndpointBuilder jpa(String path) {
        return org.apache.camel.builder.endpoint.dsl.JpaEndpointBuilderFactory.jpa(path);
    }

    /**
     * JSON Schema Validator (camel-json-validator)
     * Validates the payload of a message using NetworkNT JSON Schema library.
     *
     * Category: validation
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-json-validator
     *
     * Syntax: <code>json-validator:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.JsonValidatorEndpointBuilderFactory.JsonValidatorEndpointBuilder jsonValidator(String path) {
        return org.apache.camel.builder.endpoint.dsl.JsonValidatorEndpointBuilderFactory.jsonValidator(path);
    }

    /**
     * JT400 (camel-jt400)
     * The jt400 component allows you to exchanges messages with an AS/400
     * system using data queues or program call.
     *
     * Category: messaging
     * Since: 1.5
     * Maven coordinates: org.apache.camel:camel-jt400
     *
     * Syntax: <code>jt400:userID:password/systemName/objectPath.type</code>
     *
     * Path parameter: userID (required)
     * Returns the ID of the AS/400 user.
     *
     * Path parameter: password (required)
     * Returns the password of the AS/400 user.
     *
     * Path parameter: systemName (required)
     * Returns the name of the AS/400 system.
     *
     * Path parameter: objectPath (required)
     * Returns the fully qualified integrated file system path name of the
     * target object of this endpoint.
     *
     * Path parameter: type (required)
     * Whether to work with data queues or remote program call
     * The value can be one of: DTAQ, PGM, SRVPGM
     */
    static org.apache.camel.builder.endpoint.dsl.Jt400EndpointBuilderFactory.Jt400EndpointBuilder jt400(String path) {
        return org.apache.camel.builder.endpoint.dsl.Jt400EndpointBuilderFactory.jt400(path);
    }

    /**
     * AWS KMS (camel-aws-kms)
     * The aws-kms is used for managing Amazon KMS
     *
     * Category: cloud,management
     * Since: 2.21
     * Maven coordinates: org.apache.camel:camel-aws-kms
     *
     * Syntax: <code>aws-kms:label</code>
     *
     * Path parameter: label (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.KMSEndpointBuilderFactory.KMSEndpointBuilder awsKms(String path) {
        return org.apache.camel.builder.endpoint.dsl.KMSEndpointBuilderFactory.awsKms(path);
    }

    /**
     * Kafka (camel-kafka)
     * The kafka component allows messages to be sent to (or consumed from)
     * Apache Kafka brokers.
     *
     * Category: messaging
     * Since: 2.13
     * Maven coordinates: org.apache.camel:camel-kafka
     *
     * Syntax: <code>kafka:topic</code>
     *
     * Path parameter: topic (required)
     * Name of the topic to use. On the consumer you can use comma to separate
     * multiple topics. A producer can only send a message to a single topic.
     */
    static org.apache.camel.builder.endpoint.dsl.KafkaEndpointBuilderFactory.KafkaEndpointBuilder kafka(String path) {
        return org.apache.camel.builder.endpoint.dsl.KafkaEndpointBuilderFactory.kafka(path);
    }

    /**
     * OpenStack Keystone (camel-openstack)
     * The openstack-keystone component allows messages to be sent to an
     * OpenStack identity services.
     *
     * Category: cloud,paas
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-openstack
     *
     * Syntax: <code>openstack-keystone:host</code>
     *
     * Path parameter: host (required)
     * OpenStack host url
     */
    static org.apache.camel.builder.endpoint.dsl.KeystoneEndpointBuilderFactory.KeystoneEndpointBuilder openstackKeystone(String path) {
        return org.apache.camel.builder.endpoint.dsl.KeystoneEndpointBuilderFactory.openstackKeystone(path);
    }

    /**
     * AWS Kinesis (camel-aws-kinesis)
     * The aws-kinesis component is for consuming and producing records from
     * Amazon Kinesis Streams.
     *
     * Category: cloud,messaging
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-aws-kinesis
     *
     * Syntax: <code>aws-kinesis:streamName</code>
     *
     * Path parameter: streamName (required)
     * Name of the stream
     */
    static org.apache.camel.builder.endpoint.dsl.KinesisEndpointBuilderFactory.KinesisEndpointBuilder awsKinesis(String path) {
        return org.apache.camel.builder.endpoint.dsl.KinesisEndpointBuilderFactory.awsKinesis(path);
    }

    /**
     * AWS Kinesis Firehose (camel-aws-kinesis)
     * The aws-kinesis-firehose component is used for producing Amazon's Kinesis
     * Firehose streams.
     *
     * Category: cloud,messaging
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-aws-kinesis
     *
     * Syntax: <code>aws-kinesis-firehose:streamName</code>
     *
     * Path parameter: streamName (required)
     * Name of the stream
     */
    static org.apache.camel.builder.endpoint.dsl.KinesisFirehoseEndpointBuilderFactory.KinesisFirehoseEndpointBuilder awsKinesisFirehose(String path) {
        return org.apache.camel.builder.endpoint.dsl.KinesisFirehoseEndpointBuilderFactory.awsKinesisFirehose(path);
    }

    /**
     * Kubernetes ConfigMap (camel-kubernetes)
     * The Kubernetes Configmaps component provides a producer to execute
     * kubernetes configmap operations.
     *
     * Category: container,cloud,paas
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>kubernetes-config-maps:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.KubernetesConfigMapsEndpointBuilderFactory.KubernetesConfigMapsEndpointBuilder kubernetesConfigMaps(String path) {
        return org.apache.camel.builder.endpoint.dsl.KubernetesConfigMapsEndpointBuilderFactory.kubernetesConfigMaps(path);
    }

    /**
     * Kubernetes HPA (camel-kubernetes)
     * The Kubernetes HPA component provides a producer to execute kubernetes
     * hpa operations and a consumer to consume HPA events.
     *
     * Category: container,cloud,paas
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>kubernetes-hpa:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.KubernetesHPAEndpointBuilderFactory.KubernetesHPAEndpointBuilder kubernetesHpa(String path) {
        return org.apache.camel.builder.endpoint.dsl.KubernetesHPAEndpointBuilderFactory.kubernetesHpa(path);
    }

    /**
     * Kubernetes Job (camel-kubernetes)
     * The Kubernetes Jobs component provides a producer to execute kubernetes
     * job operations
     *
     * Category: container,cloud,paas
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>kubernetes-job:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.KubernetesJobEndpointBuilderFactory.KubernetesJobEndpointBuilder kubernetesJob(String path) {
        return org.apache.camel.builder.endpoint.dsl.KubernetesJobEndpointBuilderFactory.kubernetesJob(path);
    }

    /**
     * Kubernetes Namespaces (camel-kubernetes)
     * The Kubernetes Namespaces component provides a producer to execute
     * kubernetes namespace operations and a consumer to consume namespace
     * events.
     *
     * Category: container,cloud,paas
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>kubernetes-namespaces:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.KubernetesNamespacesEndpointBuilderFactory.KubernetesNamespacesEndpointBuilder kubernetesNamespaces(String path) {
        return org.apache.camel.builder.endpoint.dsl.KubernetesNamespacesEndpointBuilderFactory.kubernetesNamespaces(path);
    }

    /**
     * Kubernetes Nodes (camel-kubernetes)
     * The Kubernetes Nodes component provides a producer to execute kubernetes
     * node operations and a consumer to consume node events.
     *
     * Category: container,cloud,paas
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>kubernetes-nodes:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.KubernetesNodesEndpointBuilderFactory.KubernetesNodesEndpointBuilder kubernetesNodes(String path) {
        return org.apache.camel.builder.endpoint.dsl.KubernetesNodesEndpointBuilderFactory.kubernetesNodes(path);
    }

    /**
     * Kubernetes Pods (camel-kubernetes)
     * The Kubernetes Pods component provides a producer to execute kubernetes
     * pod operations and a consumer to consume pod events.
     *
     * Category: container,cloud,paas
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>kubernetes-pods:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.KubernetesPodsEndpointBuilderFactory.KubernetesPodsEndpointBuilder kubernetesPods(String path) {
        return org.apache.camel.builder.endpoint.dsl.KubernetesPodsEndpointBuilderFactory.kubernetesPods(path);
    }

    /**
     * Kubernetes Secrets (camel-kubernetes)
     * The Kubernetes Secrets component provides a producer to execute
     * kubernetes secret operations.
     *
     * Category: container,cloud,paas
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>kubernetes-secrets:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.KubernetesSecretsEndpointBuilderFactory.KubernetesSecretsEndpointBuilder kubernetesSecrets(String path) {
        return org.apache.camel.builder.endpoint.dsl.KubernetesSecretsEndpointBuilderFactory.kubernetesSecrets(path);
    }

    /**
     * Kubernetes Services (camel-kubernetes)
     * The Kubernetes Services component provides a producer to execute service
     * operations and a consumer to consume service events.
     *
     * Category: container,cloud,paas
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>kubernetes-services:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.KubernetesServicesEndpointBuilderFactory.KubernetesServicesEndpointBuilder kubernetesServices(String path) {
        return org.apache.camel.builder.endpoint.dsl.KubernetesServicesEndpointBuilderFactory.kubernetesServices(path);
    }

    /**
     * Kudu (camel-kudu)
     * Represents a Kudu endpoint. A kudu endpoint allows you to interact with
     * Apache Kudu, a free and open source column-oriented data store of the
     * Apache Hadoop ecosystem.
     *
     * Category: cloud,database,iot
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-kudu
     *
     * Syntax: <code>kudu:host:port/tableName</code>
     *
     * Path parameter: host
     * Kudu master to connect to
     *
     * Path parameter: port
     * Port where kudu service is listening
     *
     * Path parameter: tableName
     * The name of the table where the rows are stored
     */
    static org.apache.camel.builder.endpoint.dsl.KuduEndpointBuilderFactory.KuduEndpointBuilder kudu(String path) {
        return org.apache.camel.builder.endpoint.dsl.KuduEndpointBuilderFactory.kudu(path);
    }

    /**
     * AWS Lambda (camel-aws-lambda)
     * The aws-lambda is used for managing and invoking functions from Amazon
     * Lambda.
     *
     * Category: cloud,computing,serverless
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-aws-lambda
     *
     * Syntax: <code>aws-lambda:function</code>
     *
     * Path parameter: function (required)
     * Name of the Lambda function.
     */
    static org.apache.camel.builder.endpoint.dsl.LambdaEndpointBuilderFactory.LambdaEndpointBuilder awsLambda(String path) {
        return org.apache.camel.builder.endpoint.dsl.LambdaEndpointBuilderFactory.awsLambda(path);
    }

    /**
     * Language (camel-language)
     * The language component allows you to send a message to an endpoint which
     * executes a script by any of the supported Languages in Camel.
     *
     * Category: core,script
     * Since: 2.5
     * Maven coordinates: org.apache.camel:camel-language
     *
     * Syntax: <code>language:languageName:resourceUri</code>
     *
     * Path parameter: languageName (required)
     * Sets the name of the language to use
     * The value can be one of: bean, constant, exchangeProperty, file, groovy,
     * header, javascript, jsonpath, mvel, ognl, , ref, simple, spel, sql,
     * terser, tokenize, xpath, xquery, xtokenize
     *
     * Path parameter: resourceUri
     * Path to the resource, or a reference to lookup a bean in the Registry to
     * use as the resource
     */
    static org.apache.camel.builder.endpoint.dsl.LanguageEndpointBuilderFactory.LanguageEndpointBuilder language(String path) {
        return org.apache.camel.builder.endpoint.dsl.LanguageEndpointBuilderFactory.language(path);
    }

    /**
     * LDAP (camel-ldap)
     * The ldap component allows you to perform searches in LDAP servers using
     * filters as the message payload.
     *
     * Category: ldap
     * Since: 1.5
     * Maven coordinates: org.apache.camel:camel-ldap
     *
     * Syntax: <code>ldap:dirContextName</code>
     *
     * Path parameter: dirContextName (required)
     * Name of either a javax.naming.directory.DirContext, or
     * java.util.Hashtable, or Map bean to lookup in the registry. If the bean
     * is either a Hashtable or Map then a new javax.naming.directory.DirContext
     * instance is created for each use. If the bean is a
     * javax.naming.directory.DirContext then the bean is used as given. The
     * latter may not be possible in all situations where the
     * javax.naming.directory.DirContext must not be shared, and in those
     * situations it can be better to use java.util.Hashtable or Map instead.
     */
    static org.apache.camel.builder.endpoint.dsl.LdapEndpointBuilderFactory.LdapEndpointBuilder ldap(String path) {
        return org.apache.camel.builder.endpoint.dsl.LdapEndpointBuilderFactory.ldap(path);
    }

    /**
     * LDIF (camel-ldif)
     * The ldif component allows you to do updates on an LDAP server from a LDIF
     * body content.
     *
     * Category: ldap
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-ldif
     *
     * Syntax: <code>ldif:ldapConnectionName</code>
     *
     * Path parameter: ldapConnectionName (required)
     * The name of the LdapConnection bean to pull from the registry. Note that
     * this must be of scope prototype to avoid it being shared among threads or
     * using a connection that has timed out.
     */
    static org.apache.camel.builder.endpoint.dsl.LdifEndpointBuilderFactory.LdifEndpointBuilder ldif(String path) {
        return org.apache.camel.builder.endpoint.dsl.LdifEndpointBuilderFactory.ldif(path);
    }

    /**
     * Log (camel-log)
     * The log component logs message exchanges to the underlying logging
     * mechanism.
     *
     * Category: core,monitoring
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-log
     *
     * Syntax: <code>log:loggerName</code>
     *
     * Path parameter: loggerName (required)
     * The logger name to use
     */
    static org.apache.camel.builder.endpoint.dsl.LogEndpointBuilderFactory.LogEndpointBuilder log(String path) {
        return org.apache.camel.builder.endpoint.dsl.LogEndpointBuilderFactory.log(path);
    }

    /**
     * Lucene (camel-lucene)
     * To insert or query from Apache Lucene databases.
     *
     * Category: database,search
     * Since: 2.2
     * Maven coordinates: org.apache.camel:camel-lucene
     *
     * Syntax: <code>lucene:host:operation</code>
     *
     * Path parameter: host (required)
     * The URL to the lucene server
     *
     * Path parameter: operation (required)
     * Operation to do such as insert or query.
     * The value can be one of: insert, query
     */
    static org.apache.camel.builder.endpoint.dsl.LuceneEndpointBuilderFactory.LuceneEndpointBuilder lucene(String path) {
        return org.apache.camel.builder.endpoint.dsl.LuceneEndpointBuilderFactory.lucene(path);
    }

    /**
     * Lumberjack (camel-lumberjack)
     * The lumberjack retrieves logs sent over the network using the Lumberjack
     * protocol.
     *
     * Category: log
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-lumberjack
     *
     * Syntax: <code>lumberjack:host:port</code>
     *
     * Path parameter: host (required)
     * Network interface on which to listen for Lumberjack
     *
     * Path parameter: port
     * Network port on which to listen for Lumberjack
     * Default value: 5044
     */
    static org.apache.camel.builder.endpoint.dsl.LumberjackEndpointBuilderFactory.LumberjackEndpointBuilder lumberjack(String path) {
        return org.apache.camel.builder.endpoint.dsl.LumberjackEndpointBuilderFactory.lumberjack(path);
    }

    /**
     * AWS MQ (camel-aws-mq)
     * The aws-mq is used for managing Amazon MQ instances.
     *
     * Category: cloud,management
     * Since: 2.21
     * Maven coordinates: org.apache.camel:camel-aws-mq
     *
     * Syntax: <code>aws-mq:label</code>
     *
     * Path parameter: label (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.MQEndpointBuilderFactory.MQEndpointBuilder awsMq(String path) {
        return org.apache.camel.builder.endpoint.dsl.MQEndpointBuilderFactory.awsMq(path);
    }

    /**
     * AWS MSK (camel-aws-msk)
     * The aws-msk is used for managing Amazon MSK
     *
     * Category: cloud,management
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-aws-msk
     *
     * Syntax: <code>aws-msk:label</code>
     *
     * Path parameter: label (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.MSKEndpointBuilderFactory.MSKEndpointBuilder awsMsk(String path) {
        return org.apache.camel.builder.endpoint.dsl.MSKEndpointBuilderFactory.awsMsk(path);
    }

    /**
     * IMAP (camel-mail)
     * To send or receive emails using imap/pop3 or smtp protocols.
     *
     * Category: mail
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-mail
     *
     * Syntax: <code>imap:host:port</code>
     *
     * Path parameter: host (required)
     * The mail server host name
     *
     * Path parameter: port
     * The port number of the mail server
     */
    static org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.MailEndpointBuilder imap(String path) {
        return org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.imap(path);
    }

    /**
     * IMAPS (Secure) (camel-mail)
     * To send or receive emails using imap/pop3 or smtp protocols.
     *
     * Category: mail
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-mail
     *
     * Syntax: <code>imaps:host:port</code>
     *
     * Path parameter: host (required)
     * The mail server host name
     *
     * Path parameter: port
     * The port number of the mail server
     */
    static org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.MailEndpointBuilder imaps(String path) {
        return org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.imaps(path);
    }

    /**
     * POP3 (camel-mail)
     * To send or receive emails using imap/pop3 or smtp protocols.
     *
     * Category: mail
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-mail
     *
     * Syntax: <code>pop3:host:port</code>
     *
     * Path parameter: host (required)
     * The mail server host name
     *
     * Path parameter: port
     * The port number of the mail server
     */
    static org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.MailEndpointBuilder pop3(String path) {
        return org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.pop3(path);
    }

    /**
     * POP3S (camel-mail)
     * To send or receive emails using imap/pop3 or smtp protocols.
     *
     * Category: mail
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-mail
     *
     * Syntax: <code>pop3s:host:port</code>
     *
     * Path parameter: host (required)
     * The mail server host name
     *
     * Path parameter: port
     * The port number of the mail server
     */
    static org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.MailEndpointBuilder pop3s(String path) {
        return org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.pop3s(path);
    }

    /**
     * SMTP (camel-mail)
     * To send or receive emails using imap/pop3 or smtp protocols.
     *
     * Category: mail
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-mail
     *
     * Syntax: <code>smtp:host:port</code>
     *
     * Path parameter: host (required)
     * The mail server host name
     *
     * Path parameter: port
     * The port number of the mail server
     */
    static org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.MailEndpointBuilder smtp(String path) {
        return org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.smtp(path);
    }

    /**
     * SMTPS (camel-mail)
     * To send or receive emails using imap/pop3 or smtp protocols.
     *
     * Category: mail
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-mail
     *
     * Syntax: <code>smtps:host:port</code>
     *
     * Path parameter: host (required)
     * The mail server host name
     *
     * Path parameter: port
     * The port number of the mail server
     */
    static org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.MailEndpointBuilder smtps(String path) {
        return org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.smtps(path);
    }

    /**
     * IMAP (camel-mail)
     * To send or receive emails using imap/pop3 or smtp protocols.
     *
     * Category: mail
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-mail
     */
    static org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.MailEndpointBuilder imap(String scheme, String path) {
        return org.apache.camel.builder.endpoint.dsl.MailEndpointBuilderFactory.imap(scheme, path);
    }

    /**
     * Master (camel-master)
     * Represents an endpoint which only becomes active when the
     * CamelClusterView has the leadership.
     *
     * Category: clustering
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-master
     *
     * Syntax: <code>master:namespace:delegateUri</code>
     *
     * Path parameter: namespace (required)
     * The name of the cluster namespace to use
     *
     * Path parameter: delegateUri (required)
     * The endpoint uri to use in master/slave mode
     */
    static org.apache.camel.builder.endpoint.dsl.MasterEndpointBuilderFactory.MasterEndpointBuilder master(String path) {
        return org.apache.camel.builder.endpoint.dsl.MasterEndpointBuilderFactory.master(path);
    }

    /**
     * Metrics (camel-metrics)
     * To collect various metrics directly from Camel routes using the
     * DropWizard metrics library.
     *
     * Category: monitoring
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-metrics
     *
     * Syntax: <code>metrics:metricsType:metricsName</code>
     *
     * Path parameter: metricsType (required)
     * Type of metrics
     * The value can be one of: GAUGE, COUNTER, HISTOGRAM, METER, TIMER
     *
     * Path parameter: metricsName (required)
     * Name of metrics
     */
    static org.apache.camel.builder.endpoint.dsl.MetricsEndpointBuilderFactory.MetricsEndpointBuilder metrics(String path) {
        return org.apache.camel.builder.endpoint.dsl.MetricsEndpointBuilderFactory.metrics(path);
    }

    /**
     * MicroProfile Metrics (camel-microprofile-metrics)
     * Camel metrics exposed with Eclipse MicroProfile Metrics
     *
     * Category: monitoring
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-microprofile-metrics
     *
     * Syntax: <code>microprofile-metrics:metricType:metricName</code>
     *
     * Path parameter: metricType (required)
     * Metric type
     * The value can be one of: CONCURRENT_GAUGE, COUNTER, GAUGE, METERED,
     * HISTOGRAM, TIMER, INVALID
     *
     * Path parameter: metricName (required)
     * Metric name
     */
    static org.apache.camel.builder.endpoint.dsl.MicroProfileMetricsEndpointBuilderFactory.MicroProfileMetricsEndpointBuilder microprofileMetrics(String path) {
        return org.apache.camel.builder.endpoint.dsl.MicroProfileMetricsEndpointBuilderFactory.microprofileMetrics(path);
    }

    /**
     * Micrometer (camel-micrometer)
     * To collect various metrics directly from Camel routes using the
     * Micrometer library.
     *
     * Category: monitoring
     * Since: 2.22
     * Maven coordinates: org.apache.camel:camel-micrometer
     *
     * Syntax: <code>micrometer:metricsType:metricsName</code>
     *
     * Path parameter: metricsType (required)
     * Type of metrics
     *
     * Path parameter: metricsName (required)
     * Name of metrics
     *
     * Path parameter: tags
     * Tags of metrics
     */
    static org.apache.camel.builder.endpoint.dsl.MicrometerEndpointBuilderFactory.MicrometerEndpointBuilder micrometer(String path) {
        return org.apache.camel.builder.endpoint.dsl.MicrometerEndpointBuilderFactory.micrometer(path);
    }

    /**
     * OPC UA Client (camel-milo)
     * Connect to OPC UA servers using the binary protocol for acquiring
     * telemetry data
     *
     * Category: iot
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-milo
     *
     * Syntax: <code>milo-client:endpointUri</code>
     *
     * Path parameter: endpointUri (required)
     * The OPC UA server endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.MiloClientEndpointBuilderFactory.MiloClientEndpointBuilder miloClient(String path) {
        return org.apache.camel.builder.endpoint.dsl.MiloClientEndpointBuilderFactory.miloClient(path);
    }

    /**
     * OPC UA Server (camel-milo)
     * Make telemetry data available as an OPC UA server
     *
     * Category: iot
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-milo
     *
     * Syntax: <code>milo-server:itemId</code>
     *
     * Path parameter: itemId (required)
     * ID of the item
     */
    static org.apache.camel.builder.endpoint.dsl.MiloServerEndpointBuilderFactory.MiloServerEndpointBuilder miloServer(String path) {
        return org.apache.camel.builder.endpoint.dsl.MiloServerEndpointBuilderFactory.miloServer(path);
    }

    /**
     * Mina (camel-mina)
     * Socket level networking using TCP or UDP with the Apache Mina 2.x
     * library.
     *
     * Category: networking,tcp,udp
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-mina
     *
     * Syntax: <code>mina:protocol:host:port</code>
     *
     * Path parameter: protocol (required)
     * Protocol to use
     *
     * Path parameter: host (required)
     * Hostname to use. Use localhost or 0.0.0.0 for local server as consumer.
     * For producer use the hostname or ip address of the remote server.
     *
     * Path parameter: port (required)
     * Port number
     */
    static org.apache.camel.builder.endpoint.dsl.MinaEndpointBuilderFactory.MinaEndpointBuilder mina(String path) {
        return org.apache.camel.builder.endpoint.dsl.MinaEndpointBuilderFactory.mina(path);
    }

    /**
     * MLLP (camel-mllp)
     * Provides functionality required by Healthcare providers to communicate
     * with other systems using the MLLP protocol.
     *
     * Category: mllp
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-mllp
     *
     * Syntax: <code>mllp:hostname:port</code>
     *
     * Path parameter: hostname (required)
     * Hostname or IP for connection for the TCP connection. The default value
     * is null, which means any local IP address
     *
     * Path parameter: port (required)
     * Port number for the TCP connection
     */
    static org.apache.camel.builder.endpoint.dsl.MllpEndpointBuilderFactory.MllpEndpointBuilder mllp(String path) {
        return org.apache.camel.builder.endpoint.dsl.MllpEndpointBuilderFactory.mllp(path);
    }

    /**
     * Mock (camel-mock)
     * The mock component is used for testing routes and mediation rules using
     * mocks.
     *
     * Category: core,testing
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-mock
     *
     * Syntax: <code>mock:name</code>
     *
     * Path parameter: name (required)
     * Name of mock endpoint
     */
    static org.apache.camel.builder.endpoint.dsl.MockEndpointBuilderFactory.MockEndpointBuilder mock(String path) {
        return org.apache.camel.builder.endpoint.dsl.MockEndpointBuilderFactory.mock(path);
    }

    /**
     * MongoDB (camel-mongodb)
     * Component for working with documents stored in MongoDB database.
     *
     * Category: database,nosql
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-mongodb
     *
     * Syntax: <code>mongodb:connectionBean</code>
     *
     * Path parameter: connectionBean (required)
     * Name of com.mongodb.Mongo to use.
     */
    static org.apache.camel.builder.endpoint.dsl.MongoDbEndpointBuilderFactory.MongoDbEndpointBuilder mongodb(String path) {
        return org.apache.camel.builder.endpoint.dsl.MongoDbEndpointBuilderFactory.mongodb(path);
    }

    /**
     * MSV (camel-msv)
     * Validates the payload of a message using the MSV Library.
     *
     * Category: validation
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-msv
     *
     * Syntax: <code>msv:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * URL to a local resource on the classpath,or a reference to lookup a bean
     * in the Registry, or a full URL to a remote resource or resource on the
     * file system which contains the XSD to validate against.
     */
    static org.apache.camel.builder.endpoint.dsl.MsvEndpointBuilderFactory.MsvEndpointBuilder msv(String path) {
        return org.apache.camel.builder.endpoint.dsl.MsvEndpointBuilderFactory.msv(path);
    }

    /**
     * Mustache (camel-mustache)
     * Transforms the message using a Mustache template.
     *
     * Category: transformation
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-mustache
     *
     * Syntax: <code>mustache:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.MustacheEndpointBuilderFactory.MustacheEndpointBuilder mustache(String path) {
        return org.apache.camel.builder.endpoint.dsl.MustacheEndpointBuilderFactory.mustache(path);
    }

    /**
     * MVEL (camel-mvel)
     * Transforms the message using a MVEL template.
     *
     * Category: transformation,script
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-mvel
     *
     * Syntax: <code>mvel:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.MvelEndpointBuilderFactory.MvelEndpointBuilder mvel(String path) {
        return org.apache.camel.builder.endpoint.dsl.MvelEndpointBuilderFactory.mvel(path);
    }

    /**
     * MyBatis Bean (camel-mybatis)
     * Performs a query, insert, update or delete in a relational database using
     * MyBatis.
     *
     * Category: database,sql
     * Since: 2.22
     * Maven coordinates: org.apache.camel:camel-mybatis
     *
     * Syntax: <code>mybatis-bean:beanName:methodName</code>
     *
     * Path parameter: beanName (required)
     * Name of the bean with the MyBatis annotations. This can either by a type
     * alias or a FQN class name.
     *
     * Path parameter: methodName (required)
     * Name of the method on the bean that has the SQL query to be executed.
     */
    static org.apache.camel.builder.endpoint.dsl.MyBatisBeanEndpointBuilderFactory.MyBatisBeanEndpointBuilder mybatisBean(String path) {
        return org.apache.camel.builder.endpoint.dsl.MyBatisBeanEndpointBuilderFactory.mybatisBean(path);
    }

    /**
     * MyBatis (camel-mybatis)
     * Performs a query, poll, insert, update or delete in a relational database
     * using MyBatis.
     *
     * Category: database,sql
     * Since: 2.7
     * Maven coordinates: org.apache.camel:camel-mybatis
     *
     * Syntax: <code>mybatis:statement</code>
     *
     * Path parameter: statement (required)
     * The statement name in the MyBatis XML mapping file which maps to the
     * query, insert, update or delete operation you wish to evaluate.
     */
    static org.apache.camel.builder.endpoint.dsl.MyBatisEndpointBuilderFactory.MyBatisEndpointBuilder mybatis(String path) {
        return org.apache.camel.builder.endpoint.dsl.MyBatisEndpointBuilderFactory.mybatis(path);
    }

    /**
     * Nagios (camel-nagios)
     * To send passive checks to Nagios using JSendNSCA.
     *
     * Category: monitoring
     * Since: 2.3
     * Maven coordinates: org.apache.camel:camel-nagios
     *
     * Syntax: <code>nagios:host:port</code>
     *
     * Path parameter: host (required)
     * This is the address of the Nagios host where checks should be send.
     *
     * Path parameter: port (required)
     * The port number of the host.
     */
    static org.apache.camel.builder.endpoint.dsl.NagiosEndpointBuilderFactory.NagiosEndpointBuilder nagios(String path) {
        return org.apache.camel.builder.endpoint.dsl.NagiosEndpointBuilderFactory.nagios(path);
    }

    /**
     * Nats (camel-nats)
     * The nats component allows you produce and consume messages from NATS.
     *
     * Category: messaging
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-nats
     *
     * Syntax: <code>nats:topic</code>
     *
     * Path parameter: topic (required)
     * The name of topic we want to use
     */
    static org.apache.camel.builder.endpoint.dsl.NatsEndpointBuilderFactory.NatsEndpointBuilder nats(String path) {
        return org.apache.camel.builder.endpoint.dsl.NatsEndpointBuilderFactory.nats(path);
    }

    /**
     * SAP NetWeaver (camel-sap-netweaver)
     * The sap-netweaver component integrates with the SAP NetWeaver Gateway
     * using HTTP transports.
     *
     * Category: sap
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-sap-netweaver
     *
     * Syntax: <code>sap-netweaver:url</code>
     *
     * Path parameter: url (required)
     * Url to the SAP net-weaver gateway server.
     */
    static org.apache.camel.builder.endpoint.dsl.NetWeaverEndpointBuilderFactory.NetWeaverEndpointBuilder sapNetweaver(String path) {
        return org.apache.camel.builder.endpoint.dsl.NetWeaverEndpointBuilderFactory.sapNetweaver(path);
    }

    /**
     * Netty (camel-netty)
     * Socket level networking using TCP or UDP with the Netty 4.x library.
     *
     * Category: networking,tcp,udp
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-netty
     *
     * Syntax: <code>netty:protocol:host:port</code>
     *
     * Path parameter: protocol (required)
     * The protocol to use which can be tcp or udp.
     * The value can be one of: tcp, udp
     *
     * Path parameter: host (required)
     * The hostname. For the consumer the hostname is localhost or 0.0.0.0. For
     * the producer the hostname is the remote host to connect to
     *
     * Path parameter: port (required)
     * The host port number
     */
    static org.apache.camel.builder.endpoint.dsl.NettyEndpointBuilderFactory.NettyEndpointBuilder netty(String path) {
        return org.apache.camel.builder.endpoint.dsl.NettyEndpointBuilderFactory.netty(path);
    }

    /**
     * Netty HTTP (camel-netty-http)
     * Netty HTTP server and client using the Netty 4.x library.
     *
     * Category: http
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-netty-http
     *
     * Syntax: <code>netty-http:protocol:host:port/path</code>
     *
     * Path parameter: protocol (required)
     * The protocol to use which is either http, https or proxy - a consumer
     * only option.
     * The value can be one of: http, https
     *
     * Path parameter: host (required)
     * The local hostname such as localhost, or 0.0.0.0 when being a consumer.
     * The remote HTTP server hostname when using producer.
     *
     * Path parameter: port
     * The host port number
     *
     * Path parameter: path
     * Resource path
     */
    static org.apache.camel.builder.endpoint.dsl.NettyHttpEndpointBuilderFactory.NettyHttpEndpointBuilder nettyHttp(String path) {
        return org.apache.camel.builder.endpoint.dsl.NettyHttpEndpointBuilderFactory.nettyHttp(path);
    }

    /**
     * OpenStack Neutron (camel-openstack)
     * The openstack-neutron component allows messages to be sent to an
     * OpenStack network services.
     *
     * Category: cloud,paas
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-openstack
     *
     * Syntax: <code>openstack-neutron:host</code>
     *
     * Path parameter: host (required)
     * OpenStack host url
     */
    static org.apache.camel.builder.endpoint.dsl.NeutronEndpointBuilderFactory.NeutronEndpointBuilder openstackNeutron(String path) {
        return org.apache.camel.builder.endpoint.dsl.NeutronEndpointBuilderFactory.openstackNeutron(path);
    }

    /**
     * Nitrite (camel-nitrite)
     * Used for integrating Camel with Nitrite databases.
     *
     * Category: database,nosql
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-nitrite
     *
     * Syntax: <code>nitrite:database</code>
     *
     * Path parameter: database (required)
     * Path to database file. Will be created if not exists.
     */
    static org.apache.camel.builder.endpoint.dsl.NitriteEndpointBuilderFactory.NitriteEndpointBuilder nitrite(String path) {
        return org.apache.camel.builder.endpoint.dsl.NitriteEndpointBuilderFactory.nitrite(path);
    }

    /**
     * OpenStack Nova (camel-openstack)
     * The openstack-nova component allows messages to be sent to an OpenStack
     * compute services.
     *
     * Category: cloud,paas
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-openstack
     *
     * Syntax: <code>openstack-nova:host</code>
     *
     * Path parameter: host (required)
     * OpenStack host url
     */
    static org.apache.camel.builder.endpoint.dsl.NovaEndpointBuilderFactory.NovaEndpointBuilder openstackNova(String path) {
        return org.apache.camel.builder.endpoint.dsl.NovaEndpointBuilderFactory.openstackNova(path);
    }

    /**
     * NSQ (camel-nsq)
     * Represents a nsq endpoint.
     *
     * Category: messaging
     * Since: 2.23
     * Maven coordinates: org.apache.camel:camel-nsq
     *
     * Syntax: <code>nsq:topic</code>
     *
     * Path parameter: topic (required)
     * The name of topic we want to use
     */
    static org.apache.camel.builder.endpoint.dsl.NsqEndpointBuilderFactory.NsqEndpointBuilder nsq(String path) {
        return org.apache.camel.builder.endpoint.dsl.NsqEndpointBuilderFactory.nsq(path);
    }

    /**
     * Olingo2 (camel-olingo2)
     * Communicates with OData 2.0 services using Apache Olingo.
     *
     * Category: cloud
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-olingo2
     *
     * Syntax: <code>olingo2:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: DEFAULT
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     */
    static org.apache.camel.builder.endpoint.dsl.Olingo2EndpointBuilderFactory.Olingo2EndpointBuilder olingo2(String path) {
        return org.apache.camel.builder.endpoint.dsl.Olingo2EndpointBuilderFactory.olingo2(path);
    }

    /**
     * Olingo4 (camel-olingo4)
     * Communicates with OData 4.0 services using Apache Olingo OData API.
     *
     * Category: cloud
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-olingo4
     *
     * Syntax: <code>olingo4:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: DEFAULT
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     */
    static org.apache.camel.builder.endpoint.dsl.Olingo4EndpointBuilderFactory.Olingo4EndpointBuilder olingo4(String path) {
        return org.apache.camel.builder.endpoint.dsl.Olingo4EndpointBuilderFactory.olingo4(path);
    }

    /**
     * Openshift Builds (camel-kubernetes)
     * The Openshift Builds component provides a producer to execute openshift
     * build operations.
     *
     * Category: container,cloud,paas
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-kubernetes
     *
     * Syntax: <code>openshift-builds:masterUrl</code>
     *
     * Path parameter: masterUrl (required)
     * Kubernetes Master url
     */
    static org.apache.camel.builder.endpoint.dsl.OpenshiftBuildsEndpointBuilderFactory.OpenshiftBuildsEndpointBuilder openshiftBuilds(String path) {
        return org.apache.camel.builder.endpoint.dsl.OpenshiftBuildsEndpointBuilderFactory.openshiftBuilds(path);
    }

    /**
     * OptaPlanner (camel-optaplanner)
     * Solves the planning problem contained in a message with OptaPlanner.
     *
     * Category: engine,planning
     * Since: 2.13
     * Maven coordinates: org.apache.camel:camel-optaplanner
     *
     * Syntax: <code>optaplanner:configFile</code>
     *
     * Path parameter: configFile (required)
     * Specifies the location to the solver file
     */
    static org.apache.camel.builder.endpoint.dsl.OptaPlannerEndpointBuilderFactory.OptaPlannerEndpointBuilder optaplanner(String path) {
        return org.apache.camel.builder.endpoint.dsl.OptaPlannerEndpointBuilderFactory.optaplanner(path);
    }

    /**
     * Paho (camel-paho)
     * Component for communicating with MQTT message brokers using Eclipse Paho
     * MQTT Client.
     *
     * Category: messaging,iot
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-paho
     *
     * Syntax: <code>paho:topic</code>
     *
     * Path parameter: topic (required)
     * Name of the topic
     */
    static org.apache.camel.builder.endpoint.dsl.PahoEndpointBuilderFactory.PahoEndpointBuilder paho(String path) {
        return org.apache.camel.builder.endpoint.dsl.PahoEndpointBuilderFactory.paho(path);
    }

    /**
     * OSGi PAX Logging (camel-paxlogging)
     * The paxlogging component can be used in an OSGi environment to receive
     * PaxLogging events and process them.
     *
     * Category: monitoring
     * Since: 2.6
     * Maven coordinates: org.apache.camel:camel-paxlogging
     *
     * Syntax: <code>paxlogging:appender</code>
     *
     * Path parameter: appender (required)
     * Appender is the name of the pax appender that need to be configured in
     * the PaxLogging service configuration.
     */
    static org.apache.camel.builder.endpoint.dsl.PaxLoggingEndpointBuilderFactory.PaxLoggingEndpointBuilder paxlogging(String path) {
        return org.apache.camel.builder.endpoint.dsl.PaxLoggingEndpointBuilderFactory.paxlogging(path);
    }

    /**
     * PDF (camel-pdf)
     * The pdf components provides the ability to create, modify or extract
     * content from PDF documents.
     *
     * Category: document,transformation,printing
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-pdf
     *
     * Syntax: <code>pdf:operation</code>
     *
     * Path parameter: operation (required)
     * Operation type
     * The value can be one of: create, append, extractText
     */
    static org.apache.camel.builder.endpoint.dsl.PdfEndpointBuilderFactory.PdfEndpointBuilder pdf(String path) {
        return org.apache.camel.builder.endpoint.dsl.PdfEndpointBuilderFactory.pdf(path);
    }

    /**
     * PostgresSQL Event (camel-pgevent)
     * The pgevent component allows for producing/consuming PostgreSQL events
     * related to the listen/notify commands.
     *
     * Category: database,sql
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-pgevent
     *
     * Syntax: <code>pgevent:host:port/database/channel</code>
     *
     * Path parameter: host
     * To connect using hostname and port to the database.
     * Default value: localhost
     *
     * Path parameter: port
     * To connect using hostname and port to the database.
     * Default value: 5432
     *
     * Path parameter: database (required)
     * The database name
     *
     * Path parameter: channel (required)
     * The channel name
     */
    static org.apache.camel.builder.endpoint.dsl.PgEventEndpointBuilderFactory.PgEventEndpointBuilder pgevent(String path) {
        return org.apache.camel.builder.endpoint.dsl.PgEventEndpointBuilderFactory.pgevent(path);
    }

    /**
     * PostgresSQL Replication Slot (camel-pg-replication-slot)
     * Consumer endpoint to receive from PostgreSQL Replication Slot.
     *
     * Category: database,sql
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-pg-replication-slot
     *
     * Syntax:
     * <code>pg-replication-slot:host:port/database/slot:outputPlugin</code>
     *
     * Path parameter: slot (required)
     * Replication slot name.
     *
     * Path parameter: host
     * PostgreSQL server host
     * Default value: localhost
     *
     * Path parameter: port
     * PostgreSQL server port
     * Default value: 5432
     *
     * Path parameter: database (required)
     * PostgreSQL database name
     *
     * Path parameter: outputPlugin (required)
     * Output plugin name (e.g. test_decoding, wal2json)
     */
    static org.apache.camel.builder.endpoint.dsl.PgReplicationSlotEndpointBuilderFactory.PgReplicationSlotEndpointBuilder pgReplicationSlot(String path) {
        return org.apache.camel.builder.endpoint.dsl.PgReplicationSlotEndpointBuilderFactory.pgReplicationSlot(path);
    }

    /**
     * Platform HTTP (camel-platform-http)
     * HTTP service leveraging existing runtime platform HTTP server
     *
     * Category: http
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-platform-http
     *
     * Syntax: <code>platform-http:path</code>
     *
     * Path parameter: path (required)
     * The path under which this endpoint serves the HTTP requests
     */
    static org.apache.camel.builder.endpoint.dsl.PlatformHttpEndpointBuilderFactory.PlatformHttpEndpointBuilder platformHttp(String path) {
        return org.apache.camel.builder.endpoint.dsl.PlatformHttpEndpointBuilderFactory.platformHttp(path);
    }

    /**
     * Printer (camel-printer)
     * The printer component is used for sending messages to printers as print
     * jobs.
     *
     * Category: printing
     * Since: 2.1
     * Maven coordinates: org.apache.camel:camel-printer
     *
     * Syntax: <code>lpr:hostname:port/printername</code>
     *
     * Path parameter: hostname (required)
     * Hostname of the printer
     *
     * Path parameter: port
     * Port number of the printer
     *
     * Path parameter: printername
     * Name of the printer
     */
    static org.apache.camel.builder.endpoint.dsl.PrinterEndpointBuilderFactory.PrinterEndpointBuilder lpr(String path) {
        return org.apache.camel.builder.endpoint.dsl.PrinterEndpointBuilderFactory.lpr(path);
    }

    /**
     * PubNub (camel-pubnub)
     * To send and receive messages to PubNub data stream network for connected
     * devices.
     *
     * Category: cloud,iot,messaging
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-pubnub
     *
     * Syntax: <code>pubnub:channel</code>
     *
     * Path parameter: channel (required)
     * The channel used for subscribing/publishing events
     */
    static org.apache.camel.builder.endpoint.dsl.PubNubEndpointBuilderFactory.PubNubEndpointBuilder pubnub(String path) {
        return org.apache.camel.builder.endpoint.dsl.PubNubEndpointBuilderFactory.pubnub(path);
    }

    /**
     * Pulsar (camel-pulsar)
     * Camel Apache Pulsar Component
     *
     * Category: messaging
     * Since: 2.24
     * Maven coordinates: org.apache.camel:camel-pulsar
     *
     * Syntax: <code>pulsar:persistence://tenant/namespace/topic</code>
     *
     * Path parameter: persistence (required)
     * Whether the topic is persistent or non-persistent
     * The value can be one of: persistent, non-persistent
     *
     * Path parameter: tenant (required)
     * The tenant
     *
     * Path parameter: namespace (required)
     * The namespace
     *
     * Path parameter: topic (required)
     * The topic
     */
    static org.apache.camel.builder.endpoint.dsl.PulsarEndpointBuilderFactory.PulsarEndpointBuilder pulsar(String path) {
        return org.apache.camel.builder.endpoint.dsl.PulsarEndpointBuilderFactory.pulsar(path);
    }

    /**
     * Quartz (camel-quartz)
     * Provides a scheduled delivery of messages using the Quartz 2.x scheduler.
     *
     * Category: scheduling
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-quartz
     *
     * Syntax: <code>quartz:groupName/triggerName</code>
     *
     * Path parameter: groupName
     * The quartz group name to use. The combination of group name and timer
     * name should be unique.
     * Default value: Camel
     *
     * Path parameter: triggerName (required)
     * The quartz timer name to use. The combination of group name and timer
     * name should be unique.
     */
    static org.apache.camel.builder.endpoint.dsl.QuartzEndpointBuilderFactory.QuartzEndpointBuilder quartz(String path) {
        return org.apache.camel.builder.endpoint.dsl.QuartzEndpointBuilderFactory.quartz(path);
    }

    /**
     * Azure Storage Queue Service (camel-azure)
     * The azure-queue component is used for storing and retrieving messages
     * from Azure Storage Queue Service.
     *
     * Category: cloud,queue,azure
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-azure
     *
     * Syntax: <code>azure-queue:containerAndQueueUri</code>
     *
     * Path parameter: containerAndQueueUri (required)
     * Container Queue compact Uri
     */
    static org.apache.camel.builder.endpoint.dsl.QueueServiceEndpointBuilderFactory.QueueServiceEndpointBuilder azureQueue(String path) {
        return org.apache.camel.builder.endpoint.dsl.QueueServiceEndpointBuilderFactory.azureQueue(path);
    }

    /**
     * QuickFix (camel-quickfix)
     * The quickfix component allows to send Financial Interchange (FIX)
     * messages to the QuickFix engine.
     *
     * Category: messaging
     * Since: 2.1
     * Maven coordinates: org.apache.camel:camel-quickfix
     *
     * Syntax: <code>quickfix:configurationName</code>
     *
     * Path parameter: configurationName (required)
     * The configFile is the name of the QuickFIX/J configuration to use for the
     * FIX engine (located as a resource found in your classpath).
     */
    static org.apache.camel.builder.endpoint.dsl.QuickfixjEndpointBuilderFactory.QuickfixjEndpointBuilder quickfix(String path) {
        return org.apache.camel.builder.endpoint.dsl.QuickfixjEndpointBuilderFactory.quickfix(path);
    }

    /**
     * RabbitMQ (camel-rabbitmq)
     * The rabbitmq component allows you produce and consume messages from
     * RabbitMQ instances.
     *
     * Category: messaging
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-rabbitmq
     *
     * Syntax: <code>rabbitmq:exchangeName</code>
     *
     * Path parameter: exchangeName (required)
     * The exchange name determines which exchange produced messages will sent
     * to. In the case of consumers, the exchange name determines which exchange
     * the queue will bind to.
     */
    static org.apache.camel.builder.endpoint.dsl.RabbitMQEndpointBuilderFactory.RabbitMQEndpointBuilder rabbitmq(String path) {
        return org.apache.camel.builder.endpoint.dsl.RabbitMQEndpointBuilderFactory.rabbitmq(path);
    }

    /**
     * Reactive Streams (camel-reactive-streams)
     * Reactive Camel using reactive streams
     *
     * Category: reactive,streams
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-reactive-streams
     *
     * Syntax: <code>reactive-streams:stream</code>
     *
     * Path parameter: stream
     * Name of the stream channel used by the endpoint to exchange messages.
     */
    static org.apache.camel.builder.endpoint.dsl.ReactiveStreamsEndpointBuilderFactory.ReactiveStreamsEndpointBuilder reactiveStreams(String path) {
        return org.apache.camel.builder.endpoint.dsl.ReactiveStreamsEndpointBuilderFactory.reactiveStreams(path);
    }

    /**
     * Spring Redis (camel-spring-redis)
     * The spring-redis component allows sending and receiving messages from
     * Redis.
     *
     * Category: spring,nosql
     * Since: 2.11
     * Maven coordinates: org.apache.camel:camel-spring-redis
     *
     * Syntax: <code>spring-redis:host:port</code>
     *
     * Path parameter: host (required)
     * The host where Redis server is running.
     *
     * Path parameter: port (required)
     * Redis server port number
     */
    static org.apache.camel.builder.endpoint.dsl.RedisEndpointBuilderFactory.RedisEndpointBuilder springRedis(String path) {
        return org.apache.camel.builder.endpoint.dsl.RedisEndpointBuilderFactory.springRedis(path);
    }

    /**
     * Ref (camel-ref)
     * The ref component is used for lookup of existing endpoints bound in the
     * Registry.
     *
     * Category: core,endpoint
     * Since: 1.2
     * Maven coordinates: org.apache.camel:camel-ref
     *
     * Syntax: <code>ref:name</code>
     *
     * Path parameter: name (required)
     * Name of endpoint to lookup in the registry.
     */
    static org.apache.camel.builder.endpoint.dsl.RefEndpointBuilderFactory.RefEndpointBuilder ref(String path) {
        return org.apache.camel.builder.endpoint.dsl.RefEndpointBuilderFactory.ref(path);
    }

    /**
     * REST API (camel-rest)
     * The rest-api component is used for providing Swagger API of the REST
     * services which has been defined using the rest-dsl in Camel.
     *
     * Category: core,rest
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-rest
     *
     * Syntax: <code>rest-api:path/contextIdPattern</code>
     *
     * Path parameter: path (required)
     * The base path
     *
     * Path parameter: contextIdPattern
     * Optional CamelContext id pattern to only allow Rest APIs from rest
     * services within CamelContext's which name matches the pattern.
     */
    static org.apache.camel.builder.endpoint.dsl.RestApiEndpointBuilderFactory.RestApiEndpointBuilder restApi(String path) {
        return org.apache.camel.builder.endpoint.dsl.RestApiEndpointBuilderFactory.restApi(path);
    }

    /**
     * REST (camel-rest)
     * The rest component is used for either hosting REST services (consumer) or
     * calling external REST services (producer).
     *
     * Category: core,rest
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-rest
     *
     * Syntax: <code>rest:method:path:uriTemplate</code>
     *
     * Path parameter: method (required)
     * HTTP method to use.
     * The value can be one of: get, post, put, delete, patch, head, trace,
     * connect, options
     *
     * Path parameter: path (required)
     * The base path
     *
     * Path parameter: uriTemplate
     * The uri template
     */
    static org.apache.camel.builder.endpoint.dsl.RestEndpointBuilderFactory.RestEndpointBuilder restEndpoint(String path) {
        return org.apache.camel.builder.endpoint.dsl.RestEndpointBuilderFactory.restEndpoint(path);
    }

    /**
     * REST OpenApi (camel-rest-openapi)
     * An awesome REST endpoint backed by OpenApi specifications.
     *
     * Category: rest,openapi,http
     * Since: 3.1
     * Maven coordinates: org.apache.camel:camel-rest-openapi
     *
     * Syntax: <code>rest-openapi:specificationUri#operationId</code>
     *
     * Path parameter: specificationUri
     * Path to the OpenApi specification file. The scheme, host base path are
     * taken from this specification, but these can be overridden with
     * properties on the component or endpoint level. If not given the component
     * tries to load openapi.json resource from the classpath. Note that the
     * host defined on the component and endpoint of this Component should
     * contain the scheme, hostname and optionally the port in the URI syntax
     * (i.e. http://api.example.com:8080). Overrides component configuration.
     * The OpenApi specification can be loaded from different sources by
     * prefixing with file: classpath: http: https:. Support for https is
     * limited to using the JDK installed UrlHandler, and as such it can be
     * cumbersome to setup TLS/SSL certificates for https (such as setting a
     * number of javax.net.ssl JVM system properties). How to do that consult
     * the JDK documentation for UrlHandler.
     * Default value: openapi.json
     *
     * Path parameter: operationId (required)
     * ID of the operation from the OpenApi specification.
     */
    static org.apache.camel.builder.endpoint.dsl.RestOpenApiEndpointBuilderFactory.RestOpenApiEndpointBuilder restOpenapi(String path) {
        return org.apache.camel.builder.endpoint.dsl.RestOpenApiEndpointBuilderFactory.restOpenapi(path);
    }

    /**
     * REST Swagger (camel-rest-swagger)
     * An awesome REST endpoint backed by Swagger specifications.
     *
     * Category: rest,swagger,http
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-rest-swagger
     *
     * Syntax: <code>rest-swagger:specificationUri#operationId</code>
     *
     * Path parameter: specificationUri
     * Path to the Swagger specification file. The scheme, host base path are
     * taken from this specification, but these can be overridden with
     * properties on the component or endpoint level. If not given the component
     * tries to load swagger.json resource from the classpath. Note that the
     * host defined on the component and endpoint of this Component should
     * contain the scheme, hostname and optionally the port in the URI syntax
     * (i.e. http://api.example.com:8080). Overrides component configuration.
     * The Swagger specification can be loaded from different sources by
     * prefixing with file: classpath: http: https:. Support for https is
     * limited to using the JDK installed UrlHandler, and as such it can be
     * cumbersome to setup TLS/SSL certificates for https (such as setting a
     * number of javax.net.ssl JVM system properties). How to do that consult
     * the JDK documentation for UrlHandler.
     * Default value: swagger.json
     *
     * Path parameter: operationId (required)
     * ID of the operation from the Swagger specification.
     */
    static org.apache.camel.builder.endpoint.dsl.RestSwaggerEndpointBuilderFactory.RestSwaggerEndpointBuilder restSwagger(String path) {
        return org.apache.camel.builder.endpoint.dsl.RestSwaggerEndpointBuilderFactory.restSwagger(path);
    }

    /**
     * Robot Framework (camel-robotframework)
     * Represents a RobotFramework endpoint.
     *
     * Category: testing
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-robotframework
     *
     * Syntax: <code>robotframework:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.RobotFrameworkEndpointBuilderFactory.RobotFrameworkEndpointBuilder robotframework(String path) {
        return org.apache.camel.builder.endpoint.dsl.RobotFrameworkEndpointBuilderFactory.robotframework(path);
    }

    /**
     * RSS (camel-rss)
     * The rss component is used for consuming RSS feeds.
     *
     * Category: rss
     * Since: 2.0
     * Maven coordinates: org.apache.camel:camel-rss
     *
     * Syntax: <code>rss:feedUri</code>
     *
     * Path parameter: feedUri (required)
     * The URI to the feed to poll.
     */
    static org.apache.camel.builder.endpoint.dsl.RssEndpointBuilderFactory.RssEndpointBuilder rss(String path) {
        return org.apache.camel.builder.endpoint.dsl.RssEndpointBuilderFactory.rss(path);
    }

    /**
     * AWS S3 Storage Service (camel-aws-s3)
     * The aws-s3 component is used for storing and retrieving object from
     * Amazon S3 Storage Service.
     *
     * Category: cloud,file
     * Since: 2.8
     * Maven coordinates: org.apache.camel:camel-aws-s3
     *
     * Syntax: <code>aws-s3://bucketNameOrArn</code>
     *
     * Path parameter: bucketNameOrArn (required)
     * Bucket name or ARN
     */
    static org.apache.camel.builder.endpoint.dsl.S3EndpointBuilderFactory.S3EndpointBuilder awsS3(String path) {
        return org.apache.camel.builder.endpoint.dsl.S3EndpointBuilderFactory.awsS3(path);
    }

    /**
     * AWS Simple Workflow (camel-aws-swf)
     * The aws-swf component is used for managing workflows from Amazon Simple
     * Workflow.
     *
     * Category: cloud,workflow
     * Since: 2.13
     * Maven coordinates: org.apache.camel:camel-aws-swf
     *
     * Syntax: <code>aws-swf:type</code>
     *
     * Path parameter: type (required)
     * Activity or workflow
     * The value can be one of: activity, workflow
     */
    static org.apache.camel.builder.endpoint.dsl.SWFEndpointBuilderFactory.SWFEndpointBuilder awsSwf(String path) {
        return org.apache.camel.builder.endpoint.dsl.SWFEndpointBuilderFactory.awsSwf(path);
    }

    /**
     * Saga (camel-saga)
     * The saga component provides access to advanced options for managing the
     * flow in the Saga EIP.
     *
     * Category: core,endpoint
     * Since: 2.21
     * Maven coordinates: org.apache.camel:camel-saga
     *
     * Syntax: <code>saga:action</code>
     *
     * Path parameter: action (required)
     * Action to execute (complete or compensate)
     */
    static org.apache.camel.builder.endpoint.dsl.SagaEndpointBuilderFactory.SagaEndpointBuilder saga(String path) {
        return org.apache.camel.builder.endpoint.dsl.SagaEndpointBuilderFactory.saga(path);
    }

    /**
     * Salesforce (camel-salesforce)
     * The salesforce component is used for integrating Camel with the massive
     * Salesforce API.
     *
     * Category: api,cloud,crm
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-salesforce
     *
     * Syntax: <code>salesforce:operationName:topicName</code>
     *
     * Path parameter: operationName
     * The operation to use
     * The value can be one of: getVersions, getResources, getGlobalObjects,
     * getBasicInfo, getDescription, getSObject, createSObject, updateSObject,
     * deleteSObject, getSObjectWithId, upsertSObject, deleteSObjectWithId,
     * getBlobField, query, queryMore, queryAll, search, apexCall, recent,
     * createJob, getJob, closeJob, abortJob, createBatch, getBatch,
     * getAllBatches, getRequest, getResults, createBatchQuery,
     * getQueryResultIds, getQueryResult, getRecentReports,
     * getReportDescription, executeSyncReport, executeAsyncReport,
     * getReportInstances, getReportResults, limits, approval, approvals,
     * composite-tree, composite-batch, composite
     *
     * Path parameter: topicName
     * The name of the topic/channel to use
     */
    static org.apache.camel.builder.endpoint.dsl.SalesforceEndpointBuilderFactory.SalesforceEndpointBuilder salesforce(String path) {
        return org.apache.camel.builder.endpoint.dsl.SalesforceEndpointBuilderFactory.salesforce(path);
    }

    /**
     * Scheduler (camel-scheduler)
     * The scheduler component is used for generating message exchanges when a
     * scheduler fires.
     *
     * Category: core,scheduling
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-scheduler
     *
     * Syntax: <code>scheduler:name</code>
     *
     * Path parameter: name (required)
     * The name of the scheduler
     */
    static org.apache.camel.builder.endpoint.dsl.SchedulerEndpointBuilderFactory.SchedulerEndpointBuilder scheduler(String path) {
        return org.apache.camel.builder.endpoint.dsl.SchedulerEndpointBuilderFactory.scheduler(path);
    }

    /**
     * Schematron (camel-schematron)
     * Validates the payload of a message using the Schematron Library.
     *
     * Category: validation
     * Since: 2.15
     * Maven coordinates: org.apache.camel:camel-schematron
     *
     * Syntax: <code>schematron:path</code>
     *
     * Path parameter: path (required)
     * The path to the schematron rules file. Can either be in class path or
     * location in the file system.
     */
    static org.apache.camel.builder.endpoint.dsl.SchematronEndpointBuilderFactory.SchematronEndpointBuilder schematron(String path) {
        return org.apache.camel.builder.endpoint.dsl.SchematronEndpointBuilderFactory.schematron(path);
    }

    /**
     * SCP (camel-jsch)
     * To copy files using the secure copy protocol (SCP).
     *
     * Category: file
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-jsch
     *
     * Syntax: <code>scp:host:port/directoryName</code>
     *
     * Path parameter: host (required)
     * Hostname of the FTP server
     *
     * Path parameter: port
     * Port of the FTP server
     *
     * Path parameter: directoryName
     * The starting directory
     */
    static org.apache.camel.builder.endpoint.dsl.ScpEndpointBuilderFactory.ScpEndpointBuilder scp(String path) {
        return org.apache.camel.builder.endpoint.dsl.ScpEndpointBuilderFactory.scp(path);
    }

    /**
     * AWS SimpleDB (camel-aws-sdb)
     * The aws-sdb component is for storing and retrieving data from/to Amazon's
     * SDB service.
     *
     * Category: cloud,database,nosql
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-aws-sdb
     *
     * Syntax: <code>aws-sdb:domainName</code>
     *
     * Path parameter: domainName (required)
     * The name of the domain currently worked with.
     */
    static org.apache.camel.builder.endpoint.dsl.SdbEndpointBuilderFactory.SdbEndpointBuilder awsSdb(String path) {
        return org.apache.camel.builder.endpoint.dsl.SdbEndpointBuilderFactory.awsSdb(path);
    }

    /**
     * SEDA (camel-seda)
     * The seda component provides asynchronous call to another endpoint from
     * any CamelContext in the same JVM.
     *
     * Category: core,endpoint
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-seda
     *
     * Syntax: <code>seda:name</code>
     *
     * Path parameter: name (required)
     * Name of queue
     */
    static org.apache.camel.builder.endpoint.dsl.SedaEndpointBuilderFactory.SedaEndpointBuilder seda(String path) {
        return org.apache.camel.builder.endpoint.dsl.SedaEndpointBuilderFactory.seda(path);
    }

    /**
     * IEC 60870 Server (camel-iec60870)
     * IEC 60870 component used for telecontrol (supervisory control and data
     * acquisition) such as controlling electric power transmission grids and
     * other geographically widespread control systems.
     *
     * Category: iot
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-iec60870
     *
     * Syntax: <code>iec60870-server:uriPath</code>
     *
     * Path parameter: uriPath (required)
     * The object information address
     */
    static org.apache.camel.builder.endpoint.dsl.ServerEndpointBuilderFactory.ServerEndpointBuilder iec60870Server(String path) {
        return org.apache.camel.builder.endpoint.dsl.ServerEndpointBuilderFactory.iec60870Server(path);
    }

    /**
     * Service (camel-service)
     * Represents an endpoint which is registered to a Service Registry such as
     * Consul, Etcd.
     *
     * Category: cloud
     * Since: 2.22
     * Maven coordinates: org.apache.camel:camel-service
     *
     * Syntax: <code>service:delegateUri</code>
     *
     * Path parameter: delegateUri (required)
     * The endpoint uri to expose as service
     */
    static org.apache.camel.builder.endpoint.dsl.ServiceEndpointBuilderFactory.ServiceEndpointBuilder service(String path) {
        return org.apache.camel.builder.endpoint.dsl.ServiceEndpointBuilderFactory.service(path);
    }

    /**
     * ServiceNow (camel-servicenow)
     * The servicenow component is used to integrate Camel with ServiceNow cloud
     * services.
     *
     * Category: api,cloud,management
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-servicenow
     *
     * Syntax: <code>servicenow:instanceName</code>
     *
     * Path parameter: instanceName (required)
     * The ServiceNow instance name
     */
    static org.apache.camel.builder.endpoint.dsl.ServiceNowEndpointBuilderFactory.ServiceNowEndpointBuilder servicenow(String path) {
        return org.apache.camel.builder.endpoint.dsl.ServiceNowEndpointBuilderFactory.servicenow(path);
    }

    /**
     * Servlet (camel-servlet)
     * To use a HTTP Servlet as entry for Camel routes when running in a servlet
     * container.
     *
     * Category: http
     * Since: 2.0
     * Maven coordinates: org.apache.camel:camel-servlet
     *
     * Syntax: <code>servlet:contextPath</code>
     *
     * Path parameter: contextPath (required)
     * The context-path to use
     */
    static org.apache.camel.builder.endpoint.dsl.ServletEndpointBuilderFactory.ServletEndpointBuilder servlet(String path) {
        return org.apache.camel.builder.endpoint.dsl.ServletEndpointBuilderFactory.servlet(path);
    }

    /**
     * AWS Simple Email Service (camel-aws-ses)
     * The aws-ses component is used for sending emails with Amazon's SES
     * service.
     *
     * Category: cloud,mail
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-aws-ses
     *
     * Syntax: <code>aws-ses:from</code>
     *
     * Path parameter: from (required)
     * The sender's email address.
     */
    static org.apache.camel.builder.endpoint.dsl.SesEndpointBuilderFactory.SesEndpointBuilder awsSes(String path) {
        return org.apache.camel.builder.endpoint.dsl.SesEndpointBuilderFactory.awsSes(path);
    }

    /**
     * SFTP (camel-ftp)
     * The sftp (FTP over SSH) component is used for uploading or downloading
     * files from SFTP servers.
     *
     * Category: file
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-ftp
     *
     * Syntax: <code>sftp:host:port/directoryName</code>
     *
     * Path parameter: host (required)
     * Hostname of the FTP server
     *
     * Path parameter: port
     * Port of the FTP server
     *
     * Path parameter: directoryName
     * The starting directory
     */
    static org.apache.camel.builder.endpoint.dsl.SftpEndpointBuilderFactory.SftpEndpointBuilder sftp(String path) {
        return org.apache.camel.builder.endpoint.dsl.SftpEndpointBuilderFactory.sftp(path);
    }

    /**
     * SIP (camel-sip)
     * To send and receive messages using the SIP protocol (used in telco and
     * mobile).
     *
     * Category: mobile
     * Since: 2.5
     * Maven coordinates: org.apache.camel:camel-sip
     *
     * Syntax: <code>sip:uri</code>
     *
     * Path parameter: uri (required)
     * URI of the SIP server to connect to (the username and password can be
     * included such as: john:secretmyserver:9999)
     */
    static org.apache.camel.builder.endpoint.dsl.SipEndpointBuilderFactory.SipEndpointBuilder sip(String path) {
        return org.apache.camel.builder.endpoint.dsl.SipEndpointBuilderFactory.sip(path);
    }

    /**
     * SIP (Secure) (camel-sip)
     * To send and receive messages using the SIP protocol (used in telco and
     * mobile).
     *
     * Category: mobile
     * Since: 2.5
     * Maven coordinates: org.apache.camel:camel-sip
     *
     * Syntax: <code>sips:uri</code>
     *
     * Path parameter: uri (required)
     * URI of the SIP server to connect to (the username and password can be
     * included such as: john:secretmyserver:9999)
     */
    static org.apache.camel.builder.endpoint.dsl.SipEndpointBuilderFactory.SipEndpointBuilder sips(String path) {
        return org.apache.camel.builder.endpoint.dsl.SipEndpointBuilderFactory.sips(path);
    }

    /**
     * SIP (camel-sip)
     * To send and receive messages using the SIP protocol (used in telco and
     * mobile).
     *
     * Category: mobile
     * Since: 2.5
     * Maven coordinates: org.apache.camel:camel-sip
     */
    static org.apache.camel.builder.endpoint.dsl.SipEndpointBuilderFactory.SipEndpointBuilder sip(String scheme, String path) {
        return org.apache.camel.builder.endpoint.dsl.SipEndpointBuilderFactory.sip(scheme, path);
    }

    /**
     * Simple JMS2 (camel-sjms2)
     * The sjms2 component (simple jms) allows messages to be sent to (or
     * consumed from) a JMS Queue or Topic (uses JMS 2.x API).
     *
     * Category: messaging
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-sjms2
     *
     * Syntax: <code>sjms2:destinationType:destinationName</code>
     *
     * Path parameter: destinationType
     * The kind of destination to use
     * Default value: queue
     * The value can be one of: queue, topic
     *
     * Path parameter: destinationName (required)
     * DestinationName is a JMS queue or topic name. By default, the
     * destinationName is interpreted as a queue name.
     */
    static org.apache.camel.builder.endpoint.dsl.Sjms2EndpointBuilderFactory.Sjms2EndpointBuilder sjms2(String path) {
        return org.apache.camel.builder.endpoint.dsl.Sjms2EndpointBuilderFactory.sjms2(path);
    }

    /**
     * Simple JMS Batch (camel-sjms)
     * The sjms-batch component is a specialized for highly performant,
     * transactional batch consumption from a JMS queue.
     *
     * Category: messaging
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-sjms
     *
     * Syntax: <code>sjms-batch:destinationName</code>
     *
     * Path parameter: destinationName (required)
     * The destination name. Only queues are supported, names may be prefixed by
     * 'queue:'.
     */
    static org.apache.camel.builder.endpoint.dsl.SjmsBatchEndpointBuilderFactory.SjmsBatchEndpointBuilder sjmsBatch(String path) {
        return org.apache.camel.builder.endpoint.dsl.SjmsBatchEndpointBuilderFactory.sjmsBatch(path);
    }

    /**
     * Simple JMS (camel-sjms)
     * The sjms component (simple jms) allows messages to be sent to (or
     * consumed from) a JMS Queue or Topic (uses JMS 1.x API).
     *
     * Category: messaging
     * Since: 2.11
     * Maven coordinates: org.apache.camel:camel-sjms
     *
     * Syntax: <code>sjms:destinationType:destinationName</code>
     *
     * Path parameter: destinationType
     * The kind of destination to use
     * Default value: queue
     * The value can be one of: queue, topic
     *
     * Path parameter: destinationName (required)
     * DestinationName is a JMS queue or topic name. By default, the
     * destinationName is interpreted as a queue name.
     */
    static org.apache.camel.builder.endpoint.dsl.SjmsEndpointBuilderFactory.SjmsEndpointBuilder sjms(String path) {
        return org.apache.camel.builder.endpoint.dsl.SjmsEndpointBuilderFactory.sjms(path);
    }

    /**
     * Slack (camel-slack)
     * The slack component allows you to send messages to Slack.
     *
     * Category: social
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-slack
     *
     * Syntax: <code>slack:channel</code>
     *
     * Path parameter: channel (required)
     * The channel name (syntax #name) or slackuser (syntax userName) to send a
     * message directly to an user.
     */
    static org.apache.camel.builder.endpoint.dsl.SlackEndpointBuilderFactory.SlackEndpointBuilder slack(String path) {
        return org.apache.camel.builder.endpoint.dsl.SlackEndpointBuilderFactory.slack(path);
    }

    /**
     * SMPP (camel-smpp)
     * To send and receive SMS using a SMSC (Short Message Service Center).
     *
     * Category: mobile
     * Since: 2.2
     * Maven coordinates: org.apache.camel:camel-smpp
     *
     * Syntax: <code>smpp:host:port</code>
     *
     * Path parameter: host
     * Hostname for the SMSC server to use.
     * Default value: localhost
     *
     * Path parameter: port
     * Port number for the SMSC server to use.
     * Default value: 2775
     */
    static org.apache.camel.builder.endpoint.dsl.SmppEndpointBuilderFactory.SmppEndpointBuilder smpp(String path) {
        return org.apache.camel.builder.endpoint.dsl.SmppEndpointBuilderFactory.smpp(path);
    }

    /**
     * SMPP (Secure) (camel-smpp)
     * To send and receive SMS using a SMSC (Short Message Service Center).
     *
     * Category: mobile
     * Since: 2.2
     * Maven coordinates: org.apache.camel:camel-smpp
     *
     * Syntax: <code>smpps:host:port</code>
     *
     * Path parameter: host
     * Hostname for the SMSC server to use.
     * Default value: localhost
     *
     * Path parameter: port
     * Port number for the SMSC server to use.
     * Default value: 2775
     */
    static org.apache.camel.builder.endpoint.dsl.SmppEndpointBuilderFactory.SmppEndpointBuilder smpps(String path) {
        return org.apache.camel.builder.endpoint.dsl.SmppEndpointBuilderFactory.smpps(path);
    }

    /**
     * SMPP (camel-smpp)
     * To send and receive SMS using a SMSC (Short Message Service Center).
     *
     * Category: mobile
     * Since: 2.2
     * Maven coordinates: org.apache.camel:camel-smpp
     */
    static org.apache.camel.builder.endpoint.dsl.SmppEndpointBuilderFactory.SmppEndpointBuilder smpp(String scheme, String path) {
        return org.apache.camel.builder.endpoint.dsl.SmppEndpointBuilderFactory.smpp(scheme, path);
    }

    /**
     * SNMP (camel-snmp)
     * The snmp component gives you the ability to poll SNMP capable devices or
     * receiving traps.
     *
     * Category: monitoring
     * Since: 2.1
     * Maven coordinates: org.apache.camel:camel-snmp
     *
     * Syntax: <code>snmp:host:port</code>
     *
     * Path parameter: host (required)
     * Hostname of the SNMP enabled device
     *
     * Path parameter: port (required)
     * Port number of the SNMP enabled device
     */
    static org.apache.camel.builder.endpoint.dsl.SnmpEndpointBuilderFactory.SnmpEndpointBuilder snmp(String path) {
        return org.apache.camel.builder.endpoint.dsl.SnmpEndpointBuilderFactory.snmp(path);
    }

    /**
     * AWS Simple Notification System (camel-aws-sns)
     * The aws-sns component is used for sending messages to an Amazon Simple
     * Notification Topic.
     *
     * Category: cloud,mobile,messaging
     * Since: 2.8
     * Maven coordinates: org.apache.camel:camel-aws-sns
     *
     * Syntax: <code>aws-sns:topicNameOrArn</code>
     *
     * Path parameter: topicNameOrArn (required)
     * Topic name or ARN
     */
    static org.apache.camel.builder.endpoint.dsl.SnsEndpointBuilderFactory.SnsEndpointBuilder awsSns(String path) {
        return org.apache.camel.builder.endpoint.dsl.SnsEndpointBuilderFactory.awsSns(path);
    }

    /**
     * Solr (camel-solr)
     * The solr component allows you to interface with an Apache Lucene Solr
     * server.
     *
     * Category: monitoring,search
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-solr
     *
     * Syntax: <code>solr:url</code>
     *
     * Path parameter: url (required)
     * Hostname and port for the solr server
     */
    static org.apache.camel.builder.endpoint.dsl.SolrEndpointBuilderFactory.SolrEndpointBuilder solr(String path) {
        return org.apache.camel.builder.endpoint.dsl.SolrEndpointBuilderFactory.solr(path);
    }

    /**
     * Solr (camel-solr)
     * The solr component allows you to interface with an Apache Lucene Solr
     * server.
     *
     * Category: monitoring,search
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-solr
     *
     * Syntax: <code>solrCloud:url</code>
     *
     * Path parameter: url (required)
     * Hostname and port for the solr server
     */
    static org.apache.camel.builder.endpoint.dsl.SolrEndpointBuilderFactory.SolrEndpointBuilder solrCloud(String path) {
        return org.apache.camel.builder.endpoint.dsl.SolrEndpointBuilderFactory.solrCloud(path);
    }

    /**
     * Solr (Secure) (camel-solr)
     * The solr component allows you to interface with an Apache Lucene Solr
     * server.
     *
     * Category: monitoring,search
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-solr
     *
     * Syntax: <code>solrs:url</code>
     *
     * Path parameter: url (required)
     * Hostname and port for the solr server
     */
    static org.apache.camel.builder.endpoint.dsl.SolrEndpointBuilderFactory.SolrEndpointBuilder solrs(String path) {
        return org.apache.camel.builder.endpoint.dsl.SolrEndpointBuilderFactory.solrs(path);
    }

    /**
     * Solr (camel-solr)
     * The solr component allows you to interface with an Apache Lucene Solr
     * server.
     *
     * Category: monitoring,search
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-solr
     */
    static org.apache.camel.builder.endpoint.dsl.SolrEndpointBuilderFactory.SolrEndpointBuilder solr(String scheme, String path) {
        return org.apache.camel.builder.endpoint.dsl.SolrEndpointBuilderFactory.solr(scheme, path);
    }

    /**
     * Soroush (camel-soroush)
     * To integrate with the Soroush chat bot.
     *
     * Category: chat
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-soroush
     *
     * Syntax: <code>soroush:action</code>
     *
     * Path parameter: action (required)
     * The action to do.
     * The value can be one of: sendMessage, getMessage, uploadFile,
     * downloadFile
     */
    static org.apache.camel.builder.endpoint.dsl.SoroushBotEndpointBuilderFactory.SoroushBotEndpointBuilder soroush(String path) {
        return org.apache.camel.builder.endpoint.dsl.SoroushBotEndpointBuilderFactory.soroush(path);
    }

    /**
     * Spark (camel-spark)
     * The spark component can be used to send RDD or DataFrame jobs to Apache
     * Spark cluster.
     *
     * Category: bigdata,iot
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-spark
     *
     * Syntax: <code>spark:endpointType</code>
     *
     * Path parameter: endpointType (required)
     * Type of the endpoint (rdd, dataframe, hive).
     * The value can be one of: rdd, dataframe, hive
     */
    static org.apache.camel.builder.endpoint.dsl.SparkEndpointBuilderFactory.SparkEndpointBuilder spark(String path) {
        return org.apache.camel.builder.endpoint.dsl.SparkEndpointBuilderFactory.spark(path);
    }

    /**
     * Splunk (camel-splunk)
     * The splunk component allows to publish or search for events in Splunk.
     *
     * Category: log,monitoring
     * Since: 2.13
     * Maven coordinates: org.apache.camel:camel-splunk
     *
     * Syntax: <code>splunk:name</code>
     *
     * Path parameter: name (required)
     * Name has no purpose
     */
    static org.apache.camel.builder.endpoint.dsl.SplunkEndpointBuilderFactory.SplunkEndpointBuilder splunk(String path) {
        return org.apache.camel.builder.endpoint.dsl.SplunkEndpointBuilderFactory.splunk(path);
    }

    /**
     * Spring Batch (camel-spring-batch)
     * The spring-batch component allows to send messages to Spring Batch for
     * further processing.
     *
     * Category: spring,batch,scheduling
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-spring-batch
     *
     * Syntax: <code>spring-batch:jobName</code>
     *
     * Path parameter: jobName (required)
     * The name of the Spring Batch job located in the registry.
     */
    static org.apache.camel.builder.endpoint.dsl.SpringBatchEndpointBuilderFactory.SpringBatchEndpointBuilder springBatch(String path) {
        return org.apache.camel.builder.endpoint.dsl.SpringBatchEndpointBuilderFactory.springBatch(path);
    }

    /**
     * Spring Integration (camel-spring-integration)
     * Bridges Camel with Spring Integration.
     *
     * Category: spring,eventbus
     * Since: 1.4
     * Maven coordinates: org.apache.camel:camel-spring-integration
     *
     * Syntax: <code>spring-integration:defaultChannel</code>
     *
     * Path parameter: defaultChannel (required)
     * The default channel name which is used by the Spring Integration Spring
     * context. It will equal to the inputChannel name for the Spring
     * Integration consumer and the outputChannel name for the Spring
     * Integration provider.
     */
    static org.apache.camel.builder.endpoint.dsl.SpringIntegrationEndpointBuilderFactory.SpringIntegrationEndpointBuilder springIntegration(String path) {
        return org.apache.camel.builder.endpoint.dsl.SpringIntegrationEndpointBuilderFactory.springIntegration(path);
    }

    /**
     * Spring LDAP (camel-spring-ldap)
     * The spring-ldap component allows you to perform searches in LDAP servers
     * using filters as the message payload.
     *
     * Category: spring,ldap
     * Since: 2.11
     * Maven coordinates: org.apache.camel:camel-spring-ldap
     *
     * Syntax: <code>spring-ldap:templateName</code>
     *
     * Path parameter: templateName (required)
     * Name of the Spring LDAP Template bean
     */
    static org.apache.camel.builder.endpoint.dsl.SpringLdapEndpointBuilderFactory.SpringLdapEndpointBuilder springLdap(String path) {
        return org.apache.camel.builder.endpoint.dsl.SpringLdapEndpointBuilderFactory.springLdap(path);
    }

    /**
     * Spring WebService (camel-spring-ws)
     * The spring-ws component is used for SOAP WebServices using Spring
     * WebServices.
     *
     * Category: spring,soap,webservice
     * Since: 2.6
     * Maven coordinates: org.apache.camel:camel-spring-ws
     *
     * Syntax: <code>spring-ws:type:lookupKey:webServiceEndpointUri</code>
     *
     * Path parameter: type
     * Endpoint mapping type if endpoint mapping is used. rootqname - Offers the
     * option to map web service requests based on the qualified name of the
     * root element contained in the message. soapaction - Used to map web
     * service requests based on the SOAP action specified in the header of the
     * message. uri - In order to map web service requests that target a
     * specific URI. xpathresult - Used to map web service requests based on the
     * evaluation of an XPath expression against the incoming message. The
     * result of the evaluation should match the XPath result specified in the
     * endpoint URI. beanname - Allows you to reference an
     * org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher object
     * in order to integrate with existing (legacy) endpoint mappings like
     * PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc
     * The value can be one of: ROOT_QNAME, ACTION, TO, SOAP_ACTION,
     * XPATHRESULT, URI, URI_PATH, BEANNAME
     *
     * Path parameter: lookupKey
     * Endpoint mapping key if endpoint mapping is used
     *
     * Path parameter: webServiceEndpointUri
     * The default Web Service endpoint uri to use for the producer.
     *
     * Path parameter: expression
     * The XPath expression to use when option type=xpathresult. Then this
     * option is required to be configured.
     */
    static org.apache.camel.builder.endpoint.dsl.SpringWebserviceEndpointBuilderFactory.SpringWebserviceEndpointBuilder springWs(String path) {
        return org.apache.camel.builder.endpoint.dsl.SpringWebserviceEndpointBuilderFactory.springWs(path);
    }

    /**
     * SQL (camel-sql)
     * The sql component allows you to work with databases using JDBC SQL
     * queries.
     *
     * Category: database,sql
     * Since: 1.4
     * Maven coordinates: org.apache.camel:camel-sql
     *
     * Syntax: <code>sql:query</code>
     *
     * Path parameter: query (required)
     * Sets the SQL query to perform. You can externalize the query by using
     * file: or classpath: as prefix and specify the location of the file.
     */
    static org.apache.camel.builder.endpoint.dsl.SqlEndpointBuilderFactory.SqlEndpointBuilder sql(String path) {
        return org.apache.camel.builder.endpoint.dsl.SqlEndpointBuilderFactory.sql(path);
    }

    /**
     * SQL Stored Procedure (camel-sql)
     * The sql component allows you to work with databases using JDBC Stored
     * Procedure queries.
     *
     * Category: database,sql
     * Since: 2.17
     * Maven coordinates: org.apache.camel:camel-sql
     *
     * Syntax: <code>sql-stored:template</code>
     *
     * Path parameter: template (required)
     * Sets the StoredProcedure template to perform
     */
    static org.apache.camel.builder.endpoint.dsl.SqlStoredEndpointBuilderFactory.SqlStoredEndpointBuilder sqlStored(String path) {
        return org.apache.camel.builder.endpoint.dsl.SqlStoredEndpointBuilderFactory.sqlStored(path);
    }

    /**
     * AWS Simple Queue Service (camel-aws-sqs)
     * The aws-sqs component is used for sending and receiving messages to
     * Amazon's SQS service.
     *
     * Category: cloud,messaging
     * Since: 2.6
     * Maven coordinates: org.apache.camel:camel-aws-sqs
     *
     * Syntax: <code>aws-sqs:queueNameOrArn</code>
     *
     * Path parameter: queueNameOrArn (required)
     * Queue name or ARN
     */
    static org.apache.camel.builder.endpoint.dsl.SqsEndpointBuilderFactory.SqsEndpointBuilder awsSqs(String path) {
        return org.apache.camel.builder.endpoint.dsl.SqsEndpointBuilderFactory.awsSqs(path);
    }

    /**
     * SSH (camel-ssh)
     * The ssh component enables access to SSH servers such that you can send an
     * SSH command, and process the response.
     *
     * Category: file
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-ssh
     *
     * Syntax: <code>ssh:host:port</code>
     *
     * Path parameter: host (required)
     * Sets the hostname of the remote SSH server.
     *
     * Path parameter: port
     * Sets the port number for the remote SSH server.
     * Default value: 22
     */
    static org.apache.camel.builder.endpoint.dsl.SshEndpointBuilderFactory.SshEndpointBuilder ssh(String path) {
        return org.apache.camel.builder.endpoint.dsl.SshEndpointBuilderFactory.ssh(path);
    }

    /**
     * StAX (camel-stax)
     * The stax component allows messages to be process through a SAX
     * ContentHandler.
     *
     * Category: transformation
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-stax
     *
     * Syntax: <code>stax:contentHandlerClass</code>
     *
     * Path parameter: contentHandlerClass (required)
     * The FQN class name for the ContentHandler implementation to use.
     */
    static org.apache.camel.builder.endpoint.dsl.StAXEndpointBuilderFactory.StAXEndpointBuilder stax(String path) {
        return org.apache.camel.builder.endpoint.dsl.StAXEndpointBuilderFactory.stax(path);
    }

    /**
     * Stomp (camel-stomp)
     * The stomp component is used for communicating with Stomp compliant
     * message brokers.
     *
     * Category: messaging
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-stomp
     *
     * Syntax: <code>stomp:destination</code>
     *
     * Path parameter: destination (required)
     * Name of the queue
     */
    static org.apache.camel.builder.endpoint.dsl.StompEndpointBuilderFactory.StompEndpointBuilder stomp(String path) {
        return org.apache.camel.builder.endpoint.dsl.StompEndpointBuilderFactory.stomp(path);
    }

    /**
     * Stream (camel-stream)
     * The stream: component provides access to the system-in, system-out and
     * system-err streams as well as allowing streaming of file.
     *
     * Category: file,system
     * Since: 1.3
     * Maven coordinates: org.apache.camel:camel-stream
     *
     * Syntax: <code>stream:kind</code>
     *
     * Path parameter: kind (required)
     * Kind of stream to use such as System.in or System.out.
     * The value can be one of: in, out, err, header, file
     */
    static org.apache.camel.builder.endpoint.dsl.StreamEndpointBuilderFactory.StreamEndpointBuilder stream(String path) {
        return org.apache.camel.builder.endpoint.dsl.StreamEndpointBuilderFactory.stream(path);
    }

    /**
     * String Template (camel-stringtemplate)
     * Transforms the message using a String template.
     *
     * Category: transformation
     * Since: 1.2
     * Maven coordinates: org.apache.camel:camel-stringtemplate
     *
     * Syntax: <code>string-template:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.StringTemplateEndpointBuilderFactory.StringTemplateEndpointBuilder stringTemplate(String path) {
        return org.apache.camel.builder.endpoint.dsl.StringTemplateEndpointBuilderFactory.stringTemplate(path);
    }

    /**
     * Stub (camel-stub)
     * The stub component provides a simple way to stub out any physical
     * endpoints while in development or testing.
     *
     * Category: core,testing
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-stub
     *
     * Syntax: <code>stub:name</code>
     *
     * Path parameter: name (required)
     * Name of queue
     */
    static org.apache.camel.builder.endpoint.dsl.StubEndpointBuilderFactory.StubEndpointBuilder stub(String path) {
        return org.apache.camel.builder.endpoint.dsl.StubEndpointBuilderFactory.stub(path);
    }

    /**
     * OpenStack Swift (camel-openstack)
     * The openstack-swift component allows messages to be sent to an OpenStack
     * object storage services.
     *
     * Category: cloud,paas
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-openstack
     *
     * Syntax: <code>openstack-swift:host</code>
     *
     * Path parameter: host (required)
     * OpenStack host url
     */
    static org.apache.camel.builder.endpoint.dsl.SwiftEndpointBuilderFactory.SwiftEndpointBuilder openstackSwift(String path) {
        return org.apache.camel.builder.endpoint.dsl.SwiftEndpointBuilderFactory.openstackSwift(path);
    }

    /**
     * Telegram (camel-telegram)
     * The telegram component provides access to the Telegram Bot API.
     *
     * Category: chat
     * Since: 2.18
     * Maven coordinates: org.apache.camel:camel-telegram
     *
     * Syntax: <code>telegram:type</code>
     *
     * Path parameter: type (required)
     * The endpoint type. Currently, only the 'bots' type is supported.
     * The value can be one of: bots
     */
    static org.apache.camel.builder.endpoint.dsl.TelegramEndpointBuilderFactory.TelegramEndpointBuilder telegram(String path) {
        return org.apache.camel.builder.endpoint.dsl.TelegramEndpointBuilderFactory.telegram(path);
    }

    /**
     * Thrift (camel-thrift)
     * The Thrift component allows to call and expose remote procedures (RPC)
     * with Apache Thrift data format and serialization mechanism
     *
     * Category: rpc
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-thrift
     *
     * Syntax: <code>thrift:host:port/service</code>
     *
     * Path parameter: host
     * The Thrift server host name. This is localhost or 0.0.0.0 (if not
     * defined) when being a consumer or remote server host name when using
     * producer.
     *
     * Path parameter: port (required)
     * The Thrift server port
     *
     * Path parameter: service (required)
     * Fully qualified service name from the thrift descriptor file (package dot
     * service definition name)
     */
    static org.apache.camel.builder.endpoint.dsl.ThriftEndpointBuilderFactory.ThriftEndpointBuilder thrift(String path) {
        return org.apache.camel.builder.endpoint.dsl.ThriftEndpointBuilderFactory.thrift(path);
    }

    /**
     * Tika (camel-tika)
     * This component integrates with Apache Tika to extract content and
     * metadata from thousands of file types.
     *
     * Category: document,transformation
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-tika
     *
     * Syntax: <code>tika:operation</code>
     *
     * Path parameter: operation (required)
     * Tika Operation - parse or detect
     * The value can be one of: parse, detect
     */
    static org.apache.camel.builder.endpoint.dsl.TikaEndpointBuilderFactory.TikaEndpointBuilder tika(String path) {
        return org.apache.camel.builder.endpoint.dsl.TikaEndpointBuilderFactory.tika(path);
    }

    /**
     * Timer (camel-timer)
     * The timer component is used for generating message exchanges when a timer
     * fires.
     *
     * Category: core,scheduling
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-timer
     *
     * Syntax: <code>timer:timerName</code>
     *
     * Path parameter: timerName (required)
     * The name of the timer
     */
    static org.apache.camel.builder.endpoint.dsl.TimerEndpointBuilderFactory.TimerEndpointBuilder timer(String path) {
        return org.apache.camel.builder.endpoint.dsl.TimerEndpointBuilderFactory.timer(path);
    }

    /**
     * AWS Translate (camel-aws-translate)
     * The aws-translate component is used for managing Amazon Translate
     *
     * Category: cloud,management
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-aws-translate
     *
     * Syntax: <code>aws-translate:label</code>
     *
     * Path parameter: label (required)
     * Logical name
     */
    static org.apache.camel.builder.endpoint.dsl.TranslateEndpointBuilderFactory.TranslateEndpointBuilder awsTranslate(String path) {
        return org.apache.camel.builder.endpoint.dsl.TranslateEndpointBuilderFactory.awsTranslate(path);
    }

    /**
     * Twilio (camel-twilio)
     * The Twilio component allows you to interact with the Twilio REST APIs
     * using Twilio Java SDK.
     *
     * Category: api,messaging,cloud
     * Since: 2.20
     * Maven coordinates: org.apache.camel:camel-twilio
     *
     * Syntax: <code>twilio:apiName/methodName</code>
     *
     * Path parameter: apiName (required)
     * What kind of operation to perform
     * The value can be one of: ACCOUNT, ADDRESS, APPLICATION,
     * AVAILABLE_PHONE_NUMBER_COUNTRY, CALL, CONFERENCE, CONNECT_APP,
     * INCOMING_PHONE_NUMBER, KEY, MESSAGE, NEW_KEY, NEW_SIGNING_KEY,
     * NOTIFICATION, OUTGOING_CALLER_ID, QUEUE, RECORDING, SHORT_CODE,
     * SIGNING_KEY, TOKEN, TRANSCRIPTION, VALIDATION_REQUEST,
     * ADDRESS_DEPENDENT_PHONE_NUMBER, AVAILABLE_PHONE_NUMBER_COUNTRY_LOCAL,
     * AVAILABLE_PHONE_NUMBER_COUNTRY_MOBILE,
     * AVAILABLE_PHONE_NUMBER_COUNTRY_TOLL_FREE, CALL_FEEDBACK,
     * CALL_FEEDBACK_SUMMARY, CALL_NOTIFICATION, CALL_RECORDING,
     * CONFERENCE_PARTICIPANT, INCOMING_PHONE_NUMBER_LOCAL,
     * INCOMING_PHONE_NUMBER_MOBILE, INCOMING_PHONE_NUMBER_TOLL_FREE,
     * MESSAGE_FEEDBACK, MESSAGE_MEDIA, QUEUE_MEMBER, RECORDING_ADD_ON_RESULT,
     * RECORDING_TRANSCRIPTION, RECORDING_ADD_ON_RESULT_PAYLOAD,
     * SIP_CREDENTIAL_LIST, SIP_DOMAIN, SIP_IP_ACCESS_CONTROL_LIST,
     * SIP_CREDENTIAL_LIST_CREDENTIAL, SIP_DOMAIN_CREDENTIAL_LIST_MAPPING,
     * SIP_DOMAIN_IP_ACCESS_CONTROL_LIST_MAPPING,
     * SIP_IP_ACCESS_CONTROL_LIST_IP_ADDRESS, USAGE_RECORD, USAGE_TRIGGER,
     * USAGE_RECORD_ALL_TIME, USAGE_RECORD_DAILY, USAGE_RECORD_LAST_MONTH,
     * USAGE_RECORD_MONTHLY, USAGE_RECORD_THIS_MONTH, USAGE_RECORD_TODAY,
     * USAGE_RECORD_YEARLY, USAGE_RECORD_YESTERDAY
     *
     * Path parameter: methodName (required)
     * What sub operation to use for the selected operation
     * The value can be one of: create, delete, fetch, read, update
     */
    static org.apache.camel.builder.endpoint.dsl.TwilioEndpointBuilderFactory.TwilioEndpointBuilder twilio(String path) {
        return org.apache.camel.builder.endpoint.dsl.TwilioEndpointBuilderFactory.twilio(path);
    }

    /**
     * Twitter Direct Message (camel-twitter)
     * The Twitter Direct Message Component consumes/produces user's direct
     * messages.
     *
     * Category: api,social
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-twitter
     *
     * Syntax: <code>twitter-directmessage:user</code>
     *
     * Path parameter: user (required)
     * The user name to send a direct message. This will be ignored for
     * consumer.
     */
    static org.apache.camel.builder.endpoint.dsl.TwitterDirectMessageEndpointBuilderFactory.TwitterDirectMessageEndpointBuilder twitterDirectmessage(String path) {
        return org.apache.camel.builder.endpoint.dsl.TwitterDirectMessageEndpointBuilderFactory.twitterDirectmessage(path);
    }

    /**
     * Twitter Search (camel-twitter)
     * The Twitter Search component consumes search results.
     *
     * Category: api,social
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-twitter
     *
     * Syntax: <code>twitter-search:keywords</code>
     *
     * Path parameter: keywords (required)
     * The search query, use the keywords AND, OR, - and () to narrow the search
     * results.
     */
    static org.apache.camel.builder.endpoint.dsl.TwitterSearchEndpointBuilderFactory.TwitterSearchEndpointBuilder twitterSearch(String path) {
        return org.apache.camel.builder.endpoint.dsl.TwitterSearchEndpointBuilderFactory.twitterSearch(path);
    }

    /**
     * Twitter Timeline (camel-twitter)
     * The Twitter Timeline component consumes twitter timeline or update the
     * status of specific user.
     *
     * Category: api,social
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-twitter
     *
     * Syntax: <code>twitter-timeline:timelineType</code>
     *
     * Path parameter: timelineType (required)
     * The timeline type to produce/consume.
     * The value can be one of: PUBLIC, HOME, USER, MENTIONS, RETWEETSOFME,
     * UNKNOWN
     */
    static org.apache.camel.builder.endpoint.dsl.TwitterTimelineEndpointBuilderFactory.TwitterTimelineEndpointBuilder twitterTimeline(String path) {
        return org.apache.camel.builder.endpoint.dsl.TwitterTimelineEndpointBuilderFactory.twitterTimeline(path);
    }

    /**
     * Undertow (camel-undertow)
     * The undertow component provides HTTP and WebSocket based endpoints for
     * consuming and producing HTTP/WebSocket requests.
     *
     * Category: http,websocket
     * Since: 2.16
     * Maven coordinates: org.apache.camel:camel-undertow
     *
     * Syntax: <code>undertow:httpURI</code>
     *
     * Path parameter: httpURI (required)
     * The url of the HTTP endpoint to use.
     */
    static org.apache.camel.builder.endpoint.dsl.UndertowEndpointBuilderFactory.UndertowEndpointBuilder undertow(String path) {
        return org.apache.camel.builder.endpoint.dsl.UndertowEndpointBuilderFactory.undertow(path);
    }

    /**
     * Validator (camel-validator)
     * Validates the payload of a message using XML Schema and JAXP Validation.
     *
     * Category: core,validation
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-validator
     *
     * Syntax: <code>validator:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * URL to a local resource on the classpath,or a reference to lookup a bean
     * in the Registry, or a full URL to a remote resource or resource on the
     * file system which contains the XSD to validate against.
     */
    static org.apache.camel.builder.endpoint.dsl.ValidatorEndpointBuilderFactory.ValidatorEndpointBuilder validator(String path) {
        return org.apache.camel.builder.endpoint.dsl.ValidatorEndpointBuilderFactory.validator(path);
    }

    /**
     * Velocity (camel-velocity)
     * Transforms the message using a Velocity template.
     *
     * Category: transformation
     * Since: 1.2
     * Maven coordinates: org.apache.camel:camel-velocity
     *
     * Syntax: <code>velocity:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the resource. You can prefix with: classpath, file, http, ref, or
     * bean. classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod.
     */
    static org.apache.camel.builder.endpoint.dsl.VelocityEndpointBuilderFactory.VelocityEndpointBuilder velocity(String path) {
        return org.apache.camel.builder.endpoint.dsl.VelocityEndpointBuilderFactory.velocity(path);
    }

    /**
     * Vert.x (camel-vertx)
     * The vertx component is used for sending and receive messages from a vertx
     * event bus.
     *
     * Category: eventbus,reactive
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-vertx
     *
     * Syntax: <code>vertx:address</code>
     *
     * Path parameter: address (required)
     * Sets the event bus address used to communicate
     */
    static org.apache.camel.builder.endpoint.dsl.VertxEndpointBuilderFactory.VertxEndpointBuilder vertx(String path) {
        return org.apache.camel.builder.endpoint.dsl.VertxEndpointBuilderFactory.vertx(path);
    }

    /**
     * VM (camel-vm)
     * The vm component provides asynchronous call to another endpoint from the
     * same CamelContext.
     *
     * Category: core,endpoint
     * Since: 1.1
     * Maven coordinates: org.apache.camel:camel-vm
     *
     * Syntax: <code>vm:name</code>
     *
     * Path parameter: name (required)
     * Name of queue
     */
    static org.apache.camel.builder.endpoint.dsl.VmEndpointBuilderFactory.VmEndpointBuilder vm(String path) {
        return org.apache.camel.builder.endpoint.dsl.VmEndpointBuilderFactory.vm(path);
    }

    /**
     * Weather (camel-weather)
     * Polls the weather information from Open Weather Map.
     *
     * Category: api
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-weather
     *
     * Syntax: <code>weather:name</code>
     *
     * Path parameter: name (required)
     * The name value is not used.
     */
    static org.apache.camel.builder.endpoint.dsl.WeatherEndpointBuilderFactory.WeatherEndpointBuilder weather(String path) {
        return org.apache.camel.builder.endpoint.dsl.WeatherEndpointBuilderFactory.weather(path);
    }

    /**
     * Web3j Ethereum Blockchain (camel-web3j)
     * The web3j component uses the Web3j client API and allows you to add/read
     * nodes to/from a web3j compliant content repositories.
     *
     * Category: bitcoin,blockchain
     * Since: 2.22
     * Maven coordinates: org.apache.camel:camel-web3j
     *
     * Syntax: <code>web3j:nodeAddress</code>
     *
     * Path parameter: nodeAddress (required)
     * Sets the node address used to communicate
     */
    static org.apache.camel.builder.endpoint.dsl.Web3jEndpointBuilderFactory.Web3jEndpointBuilder web3j(String path) {
        return org.apache.camel.builder.endpoint.dsl.Web3jEndpointBuilderFactory.web3j(path);
    }

    /**
     * Webhook (camel-webhook)
     * The webhook component allows other Camel components that can receive push
     * notifications to expose webhook endpoints and automatically register them
     * with their own webhook provider.
     *
     * Category: cloud
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-webhook
     *
     * Syntax: <code>webhook:endpointUri</code>
     *
     * Path parameter: endpointUri
     * The delegate uri. Must belong to a component that supports webhooks.
     */
    static org.apache.camel.builder.endpoint.dsl.WebhookEndpointBuilderFactory.WebhookEndpointBuilder webhook(String path) {
        return org.apache.camel.builder.endpoint.dsl.WebhookEndpointBuilderFactory.webhook(path);
    }

    /**
     * Jetty Websocket (camel-websocket)
     * The websocket component provides websocket endpoints with Jetty for
     * communicating with clients using websocket.
     *
     * Category: websocket
     * Since: 2.10
     * Maven coordinates: org.apache.camel:camel-websocket
     *
     * Syntax: <code>websocket:host:port/resourceUri</code>
     *
     * Path parameter: host
     * The hostname. The default value is 0.0.0.0. Setting this option on the
     * component will use the component configured value as default.
     * Default value: 0.0.0.0
     *
     * Path parameter: port
     * The port number. The default value is 9292. Setting this option on the
     * component will use the component configured value as default.
     * Default value: 9292
     *
     * Path parameter: resourceUri (required)
     * Name of the websocket channel to use
     */
    static org.apache.camel.builder.endpoint.dsl.WebsocketEndpointBuilderFactory.WebsocketEndpointBuilder websocket(String path) {
        return org.apache.camel.builder.endpoint.dsl.WebsocketEndpointBuilderFactory.websocket(path);
    }

    /**
     * Wordpress (camel-wordpress)
     * Integrates Camel with Wordpress.
     *
     * Category: cms
     * Since: 2.21
     * Maven coordinates: org.apache.camel:camel-wordpress
     *
     * Syntax: <code>wordpress:operation</code>
     *
     * Path parameter: operation (required)
     * The endpoint operation.
     * The value can be one of: post, user
     *
     * Path parameter: operationDetail
     * The second part of an endpoint operation. Needed only when endpoint
     * semantic is not enough, like wordpress:post:delete
     * The value can be one of: delete
     */
    static org.apache.camel.builder.endpoint.dsl.WordpressEndpointBuilderFactory.WordpressEndpointBuilder wordpress(String path) {
        return org.apache.camel.builder.endpoint.dsl.WordpressEndpointBuilderFactory.wordpress(path);
    }

    /**
     * AHC Websocket (camel-ahc-ws)
     * To exchange data with external Websocket servers using Async Http Client.
     *
     * Category: websocket
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-ahc-ws
     *
     * Syntax: <code>ahc-ws:httpUri</code>
     *
     * Path parameter: httpUri (required)
     * The URI to use such as http://hostname:port/path
     */
    static org.apache.camel.builder.endpoint.dsl.WsEndpointBuilderFactory.WsEndpointBuilder ahcWs(String path) {
        return org.apache.camel.builder.endpoint.dsl.WsEndpointBuilderFactory.ahcWs(path);
    }

    /**
     * AHC Secure Websocket (Secure) (camel-ahc-ws)
     * To exchange data with external Websocket servers using Async Http Client.
     *
     * Category: websocket
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-ahc-ws
     *
     * Syntax: <code>ahc-wss:httpUri</code>
     *
     * Path parameter: httpUri (required)
     * The URI to use such as http://hostname:port/path
     */
    static org.apache.camel.builder.endpoint.dsl.WsEndpointBuilderFactory.WsEndpointBuilder ahcWss(String path) {
        return org.apache.camel.builder.endpoint.dsl.WsEndpointBuilderFactory.ahcWss(path);
    }

    /**
     * AHC Websocket (camel-ahc-ws)
     * To exchange data with external Websocket servers using Async Http Client.
     *
     * Category: websocket
     * Since: 2.14
     * Maven coordinates: org.apache.camel:camel-ahc-ws
     */
    static org.apache.camel.builder.endpoint.dsl.WsEndpointBuilderFactory.WsEndpointBuilder ahcWs(String scheme, String path) {
        return org.apache.camel.builder.endpoint.dsl.WsEndpointBuilderFactory.ahcWs(scheme, path);
    }

    /**
     * XChange (camel-xchange)
     * The camel-xchange component provide access to many bitcoin and altcoin
     * exchanges for trading and accessing market data.
     *
     * Category: bitcoin,blockchain
     * Since: 2.21
     * Maven coordinates: org.apache.camel:camel-xchange
     *
     * Syntax: <code>xchange:name</code>
     *
     * Path parameter: name (required)
     * The exchange to connect to
     */
    static org.apache.camel.builder.endpoint.dsl.XChangeEndpointBuilderFactory.XChangeEndpointBuilder xchange(String path) {
        return org.apache.camel.builder.endpoint.dsl.XChangeEndpointBuilderFactory.xchange(path);
    }

    /**
     * XJ (camel-xj)
     * Transforms json/xml message back and forth using a XSLT.
     *
     * Category: transformation
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-xj
     *
     * Syntax: <code>xj:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the template. The following is supported by the default
     * URIResolver. You can prefix with: classpath, file, http, ref, or bean.
     * classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod
     */
    static org.apache.camel.builder.endpoint.dsl.XJEndpointBuilderFactory.XJEndpointBuilder xj(String path) {
        return org.apache.camel.builder.endpoint.dsl.XJEndpointBuilderFactory.xj(path);
    }

    /**
     * XQuery (camel-saxon)
     * Transforms the message using a XQuery template using Saxon.
     *
     * Category: transformation
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-saxon
     *
     * Syntax: <code>xquery:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * The name of the template to load from classpath or file system
     */
    static org.apache.camel.builder.endpoint.dsl.XQueryEndpointBuilderFactory.XQueryEndpointBuilder xquery(String path) {
        return org.apache.camel.builder.endpoint.dsl.XQueryEndpointBuilderFactory.xquery(path);
    }

    /**
     * XML Security (camel-xmlsecurity)
     * Used to sign and verify exchanges using the XML signature specification.
     *
     * Category: security,transformation
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-xmlsecurity
     *
     * Syntax: <code>xmlsecurity:command:name</code>
     *
     * Path parameter: command (required)
     * Whether to sign or verify.
     * The value can be one of: sign, verify
     *
     * Path parameter: name (required)
     * The name part in the URI can be chosen by the user to distinguish between
     * different signer/verifier endpoints within the camel context.
     */
    static org.apache.camel.builder.endpoint.dsl.XmlSignatureEndpointBuilderFactory.XmlSignatureEndpointBuilder xmlsecurity(String path) {
        return org.apache.camel.builder.endpoint.dsl.XmlSignatureEndpointBuilderFactory.xmlsecurity(path);
    }

    /**
     * XMPP (camel-xmpp)
     * To send and receive messages from a XMPP (chat) server.
     *
     * Category: chat,messaging
     * Since: 1.0
     * Maven coordinates: org.apache.camel:camel-xmpp
     *
     * Syntax: <code>xmpp:host:port/participant</code>
     *
     * Path parameter: host (required)
     * Hostname for the chat server
     *
     * Path parameter: port (required)
     * Port number for the chat server
     *
     * Path parameter: participant
     * JID (Jabber ID) of person to receive messages. room parameter has
     * precedence over participant.
     */
    static org.apache.camel.builder.endpoint.dsl.XmppEndpointBuilderFactory.XmppEndpointBuilder xmpp(String path) {
        return org.apache.camel.builder.endpoint.dsl.XmppEndpointBuilderFactory.xmpp(path);
    }

    /**
     * XSLT (camel-xslt)
     * Transforms the message using a XSLT template.
     *
     * Category: core,transformation
     * Since: 1.3
     * Maven coordinates: org.apache.camel:camel-xslt
     *
     * Syntax: <code>xslt:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the template. The following is supported by the default
     * URIResolver. You can prefix with: classpath, file, http, ref, or bean.
     * classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod
     */
    static org.apache.camel.builder.endpoint.dsl.XsltEndpointBuilderFactory.XsltEndpointBuilder xslt(String path) {
        return org.apache.camel.builder.endpoint.dsl.XsltEndpointBuilderFactory.xslt(path);
    }

    /**
     * XSLT Saxon (camel-xslt-saxon)
     * Transforms the message using a XSLT template using Saxon.
     *
     * Category: core,transformation
     * Since: 3.0
     * Maven coordinates: org.apache.camel:camel-xslt-saxon
     *
     * Syntax: <code>xslt-saxon:resourceUri</code>
     *
     * Path parameter: resourceUri (required)
     * Path to the template. The following is supported by the default
     * URIResolver. You can prefix with: classpath, file, http, ref, or bean.
     * classpath, file and http loads the resource using these protocols
     * (classpath is default). ref will lookup the resource in the registry.
     * bean will call a method on a bean to be used as the resource. For bean
     * you can specify the method name after dot, eg bean:myBean.myMethod
     */
    static org.apache.camel.builder.endpoint.dsl.XsltSaxonEndpointBuilderFactory.XsltSaxonEndpointBuilder xsltSaxon(String path) {
        return org.apache.camel.builder.endpoint.dsl.XsltSaxonEndpointBuilderFactory.xsltSaxon(path);
    }

    /**
     * Yammer (camel-yammer)
     * The yammer component allows you to interact with the Yammer enterprise
     * social network.
     *
     * Category: social
     * Since: 2.12
     * Maven coordinates: org.apache.camel:camel-yammer
     *
     * Syntax: <code>yammer:function</code>
     *
     * Path parameter: function (required)
     * The function to use
     * The value can be one of: MESSAGES, MY_FEED, ALGO, FOLLOWING, SENT,
     * PRIVATE, RECEIVED, USERS, CURRENT
     */
    static org.apache.camel.builder.endpoint.dsl.YammerEndpointBuilderFactory.YammerEndpointBuilder yammer(String path) {
        return org.apache.camel.builder.endpoint.dsl.YammerEndpointBuilderFactory.yammer(path);
    }

    /**
     * Zendesk (camel-zendesk)
     * Allows producing messages to manage Zendesk ticket, user, organization,
     * etc.
     *
     * Category: api,support,cloud
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-zendesk
     *
     * Syntax: <code>zendesk:methodName</code>
     *
     * Path parameter: methodName (required)
     * What operation to use
     */
    static org.apache.camel.builder.endpoint.dsl.ZendeskEndpointBuilderFactory.ZendeskEndpointBuilder zendesk(String path) {
        return org.apache.camel.builder.endpoint.dsl.ZendeskEndpointBuilderFactory.zendesk(path);
    }

    /**
     * ZooKeeper (camel-zookeeper)
     * The zookeeper component allows interaction with a ZooKeeper cluster.
     *
     * Category: clustering
     * Since: 2.9
     * Maven coordinates: org.apache.camel:camel-zookeeper
     *
     * Syntax: <code>zookeeper:serverUrls/path</code>
     *
     * Path parameter: serverUrls (required)
     * The zookeeper server hosts (multiple servers can be separated by comma)
     *
     * Path parameter: path (required)
     * The node in the ZooKeeper server (aka znode)
     */
    static org.apache.camel.builder.endpoint.dsl.ZooKeeperEndpointBuilderFactory.ZooKeeperEndpointBuilder zookeeper(String path) {
        return org.apache.camel.builder.endpoint.dsl.ZooKeeperEndpointBuilderFactory.zookeeper(path);
    }

    /**
     * ZooKeeper Master (camel-zookeeper-master)
     * Represents an endpoint which only becomes active when it obtains the
     * master lock
     *
     * Category: clustering
     * Since: 2.19
     * Maven coordinates: org.apache.camel:camel-zookeeper-master
     *
     * Syntax: <code>zookeeper-master:groupName:consumerEndpointUri</code>
     *
     * Path parameter: groupName (required)
     * The name of the cluster group to use
     *
     * Path parameter: consumerEndpointUri (required)
     * The consumer endpoint to use in master/slave mode
     */
    static org.apache.camel.builder.endpoint.dsl.ZooKeeperMasterEndpointBuilderFactory.ZooKeeperMasterEndpointBuilder zookeeperMaster(String path) {
        return org.apache.camel.builder.endpoint.dsl.ZooKeeperMasterEndpointBuilderFactory.zookeeperMaster(path);
    }
}
// CHECKSTYLE:ON
