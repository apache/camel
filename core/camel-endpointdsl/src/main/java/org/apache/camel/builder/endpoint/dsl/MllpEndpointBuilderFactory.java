/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Provides functionality required by Healthcare providers to communicate with
 * other systems using the MLLP protocol.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface MllpEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the MLLP component.
     */
    public interface MllpEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedMllpEndpointConsumerBuilder advanced() {
            return (AdvancedMllpEndpointConsumerBuilder) this;
        }
        /**
         * Hostname or IP for connection for the TCP connection. The default
         * value is null, which means any local IP address.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder hostname(String hostname) {
            setProperty("hostname", hostname);
            return this;
        }
        /**
         * Port number for the TCP connection.
         * The option is a <code>int</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder port(int port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Port number for the TCP connection.
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of a MLLP Acknowledgement
         * MLLP Consumers only.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder autoAck(boolean autoAck) {
            setProperty("autoAck", autoAck);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of a MLLP Acknowledgement
         * MLLP Consumers only.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder autoAck(String autoAck) {
            setProperty("autoAck", autoAck);
            return this;
        }
        /**
         * Enable/Disable the buffering of HL7 payloads before writing to the
         * socket.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        @Deprecated
        default MllpEndpointConsumerBuilder bufferWrites(boolean bufferWrites) {
            setProperty("bufferWrites", bufferWrites);
            return this;
        }
        /**
         * Enable/Disable the buffering of HL7 payloads before writing to the
         * socket.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        @Deprecated
        default MllpEndpointConsumerBuilder bufferWrites(String bufferWrites) {
            setProperty("bufferWrites", bufferWrites);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of message headers from the
         * HL7 Message MLLP Consumers only.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder hl7Headers(boolean hl7Headers) {
            setProperty("hl7Headers", hl7Headers);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of message headers from the
         * HL7 Message MLLP Consumers only.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder hl7Headers(String hl7Headers) {
            setProperty("hl7Headers", hl7Headers);
            return this;
        }
        /**
         * Enable/Disable strict compliance to the MLLP standard. The MLLP
         * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,
         * however, some systems do not send the final END_OF_DATA byte. This
         * setting controls whether or not the final END_OF_DATA byte is
         * required or optional.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder requireEndOfData(
                boolean requireEndOfData) {
            setProperty("requireEndOfData", requireEndOfData);
            return this;
        }
        /**
         * Enable/Disable strict compliance to the MLLP standard. The MLLP
         * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,
         * however, some systems do not send the final END_OF_DATA byte. This
         * setting controls whether or not the final END_OF_DATA byte is
         * required or optional.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder requireEndOfData(
                String requireEndOfData) {
            setProperty("requireEndOfData", requireEndOfData);
            return this;
        }
        /**
         * Enable/Disable converting the payload to a String. If enabled, HL7
         * Payloads received from external systems will be validated converted
         * to a String. If the charsetName property is set, that character set
         * will be used for the conversion. If the charsetName property is not
         * set, the value of MSH-18 will be used to determine th appropriate
         * character set. If MSH-18 is not set, then the default ISO-8859-1
         * character set will be use.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder stringPayload(boolean stringPayload) {
            setProperty("stringPayload", stringPayload);
            return this;
        }
        /**
         * Enable/Disable converting the payload to a String. If enabled, HL7
         * Payloads received from external systems will be validated converted
         * to a String. If the charsetName property is set, that character set
         * will be used for the conversion. If the charsetName property is not
         * set, the value of MSH-18 will be used to determine th appropriate
         * character set. If MSH-18 is not set, then the default ISO-8859-1
         * character set will be use.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder stringPayload(String stringPayload) {
            setProperty("stringPayload", stringPayload);
            return this;
        }
        /**
         * Enable/Disable the validation of HL7 Payloads If enabled, HL7
         * Payloads received from external systems will be validated (see
         * Hl7Util.generateInvalidPayloadExceptionMessage for details on the
         * validation). If and invalid payload is detected, a
         * MllpInvalidMessageException (for consumers) or a
         * MllpInvalidAcknowledgementException will be thrown.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder validatePayload(
                boolean validatePayload) {
            setProperty("validatePayload", validatePayload);
            return this;
        }
        /**
         * Enable/Disable the validation of HL7 Payloads If enabled, HL7
         * Payloads received from external systems will be validated (see
         * Hl7Util.generateInvalidPayloadExceptionMessage for details on the
         * validation). If and invalid payload is detected, a
         * MllpInvalidMessageException (for consumers) or a
         * MllpInvalidAcknowledgementException will be thrown.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointConsumerBuilder validatePayload(
                String validatePayload) {
            setProperty("validatePayload", validatePayload);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * receive incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. If disabled, the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions by logging them at WARN or ERROR level and ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default MllpEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * receive incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. If disabled, the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions by logging them at WARN or ERROR level and ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default MllpEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Set the CamelCharsetName property on the exchange.
         * The option is a <code>java.lang.String</code> type.
         * @group codec
         */
        default MllpEndpointConsumerBuilder charsetName(String charsetName) {
            setProperty("charsetName", charsetName);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the MLLP component.
     */
    public interface AdvancedMllpEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default MllpEndpointConsumerBuilder basic() {
            return (MllpEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        default AdvancedMllpEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        default AdvancedMllpEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedMllpEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedMllpEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used (this
         * component only supports synchronous operations).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used (this
         * component only supports synchronous operations).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * The maximum queue length for incoming connection indications (a
         * request to connect) is set to the backlog parameter. If a connection
         * indication arrives when the queue is full, the connection is refused.
         * The option is a <code>java.lang.Integer</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder backlog(Integer backlog) {
            setProperty("backlog", backlog);
            return this;
        }
        /**
         * The maximum queue length for incoming connection indications (a
         * request to connect) is set to the backlog parameter. If a connection
         * indication arrives when the queue is full, the connection is refused.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder backlog(String backlog) {
            setProperty("backlog", backlog);
            return this;
        }
        /**
         * TCP Server Only - Allow the endpoint to start before the TCP
         * ServerSocket is bound. In some environments, it may be desirable to
         * allow the endpoint to start before the TCP ServerSocket is bound.
         * The option is a <code>boolean</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder lenientBind(
                boolean lenientBind) {
            setProperty("lenientBind", lenientBind);
            return this;
        }
        /**
         * TCP Server Only - Allow the endpoint to start before the TCP
         * ServerSocket is bound. In some environments, it may be desirable to
         * allow the endpoint to start before the TCP ServerSocket is bound.
         * The option will be converted to a <code>boolean</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder lenientBind(
                String lenientBind) {
            setProperty("lenientBind", lenientBind);
            return this;
        }
        /**
         * The maximum number of concurrent MLLP Consumer connections that will
         * be allowed. If a new connection is received and the maximum is number
         * are already established, the new connection will be reset
         * immediately.
         * The option is a <code>int</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder maxConcurrentConsumers(
                int maxConcurrentConsumers) {
            setProperty("maxConcurrentConsumers", maxConcurrentConsumers);
            return this;
        }
        /**
         * The maximum number of concurrent MLLP Consumer connections that will
         * be allowed. If a new connection is received and the maximum is number
         * are already established, the new connection will be reset
         * immediately.
         * The option will be converted to a <code>int</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder maxConcurrentConsumers(
                String maxConcurrentConsumers) {
            setProperty("maxConcurrentConsumers", maxConcurrentConsumers);
            return this;
        }
        /**
         * Enable/disable the SO_REUSEADDR socket option.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder reuseAddress(
                Boolean reuseAddress) {
            setProperty("reuseAddress", reuseAddress);
            return this;
        }
        /**
         * Enable/disable the SO_REUSEADDR socket option.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder reuseAddress(
                String reuseAddress) {
            setProperty("reuseAddress", reuseAddress);
            return this;
        }
        /**
         * Timeout (in milliseconds) while waiting for a TCP connection TCP
         * Server Only.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder acceptTimeout(
                int acceptTimeout) {
            setProperty("acceptTimeout", acceptTimeout);
            return this;
        }
        /**
         * Timeout (in milliseconds) while waiting for a TCP connection TCP
         * Server Only.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder acceptTimeout(
                String acceptTimeout) {
            setProperty("acceptTimeout", acceptTimeout);
            return this;
        }
        /**
         * TCP Server Only - The number of milliseconds to wait between bind
         * attempts.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder bindRetryInterval(
                int bindRetryInterval) {
            setProperty("bindRetryInterval", bindRetryInterval);
            return this;
        }
        /**
         * TCP Server Only - The number of milliseconds to wait between bind
         * attempts.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder bindRetryInterval(
                String bindRetryInterval) {
            setProperty("bindRetryInterval", bindRetryInterval);
            return this;
        }
        /**
         * TCP Server Only - The number of milliseconds to retry binding to a
         * server port.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder bindTimeout(int bindTimeout) {
            setProperty("bindTimeout", bindTimeout);
            return this;
        }
        /**
         * TCP Server Only - The number of milliseconds to retry binding to a
         * server port.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder bindTimeout(
                String bindTimeout) {
            setProperty("bindTimeout", bindTimeout);
            return this;
        }
        /**
         * The approximate idle time allowed before the Client TCP Connection
         * will be reset. A null value or a value less than or equal to zero
         * will disable the idle timeout.
         * The option is a <code>java.lang.Integer</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder idleTimeout(
                Integer idleTimeout) {
            setProperty("idleTimeout", idleTimeout);
            return this;
        }
        /**
         * The approximate idle time allowed before the Client TCP Connection
         * will be reset. A null value or a value less than or equal to zero
         * will disable the idle timeout.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder idleTimeout(
                String idleTimeout) {
            setProperty("idleTimeout", idleTimeout);
            return this;
        }
        /**
         * The maximum number of timeouts (specified by receiveTimeout) allowed
         * before the TCP Connection will be reset.
         * The option is a <code>java.lang.Integer</code> type.
         * @group timeout
         */
        @Deprecated
        default AdvancedMllpEndpointConsumerBuilder maxReceiveTimeouts(
                Integer maxReceiveTimeouts) {
            setProperty("maxReceiveTimeouts", maxReceiveTimeouts);
            return this;
        }
        /**
         * The maximum number of timeouts (specified by receiveTimeout) allowed
         * before the TCP Connection will be reset.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group timeout
         */
        @Deprecated
        default AdvancedMllpEndpointConsumerBuilder maxReceiveTimeouts(
                String maxReceiveTimeouts) {
            setProperty("maxReceiveTimeouts", maxReceiveTimeouts);
            return this;
        }
        /**
         * Sets the SO_RCVBUF option to the specified value (in bytes).
         * The option is a <code>java.lang.Integer</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder receiveBufferSize(
                Integer receiveBufferSize) {
            setProperty("receiveBufferSize", receiveBufferSize);
            return this;
        }
        /**
         * Sets the SO_RCVBUF option to the specified value (in bytes).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder receiveBufferSize(
                String receiveBufferSize) {
            setProperty("receiveBufferSize", receiveBufferSize);
            return this;
        }
        /**
         * Sets the SO_SNDBUF option to the specified value (in bytes).
         * The option is a <code>java.lang.Integer</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder sendBufferSize(
                Integer sendBufferSize) {
            setProperty("sendBufferSize", sendBufferSize);
            return this;
        }
        /**
         * Sets the SO_SNDBUF option to the specified value (in bytes).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointConsumerBuilder sendBufferSize(
                String sendBufferSize) {
            setProperty("sendBufferSize", sendBufferSize);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used after the start of an
         * MLLP frame has been received.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder readTimeout(int readTimeout) {
            setProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used after the start of an
         * MLLP frame has been received.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder readTimeout(
                String readTimeout) {
            setProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used when waiting for the
         * start of an MLLP frame.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder receiveTimeout(
                int receiveTimeout) {
            setProperty("receiveTimeout", receiveTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used when waiting for the
         * start of an MLLP frame.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointConsumerBuilder receiveTimeout(
                String receiveTimeout) {
            setProperty("receiveTimeout", receiveTimeout);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the MLLP component.
     */
    public interface MllpEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedMllpEndpointProducerBuilder advanced() {
            return (AdvancedMllpEndpointProducerBuilder) this;
        }
        /**
         * Hostname or IP for connection for the TCP connection. The default
         * value is null, which means any local IP address.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder hostname(String hostname) {
            setProperty("hostname", hostname);
            return this;
        }
        /**
         * Port number for the TCP connection.
         * The option is a <code>int</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder port(int port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Port number for the TCP connection.
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of a MLLP Acknowledgement
         * MLLP Consumers only.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder autoAck(boolean autoAck) {
            setProperty("autoAck", autoAck);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of a MLLP Acknowledgement
         * MLLP Consumers only.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder autoAck(String autoAck) {
            setProperty("autoAck", autoAck);
            return this;
        }
        /**
         * Enable/Disable the buffering of HL7 payloads before writing to the
         * socket.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        @Deprecated
        default MllpEndpointProducerBuilder bufferWrites(boolean bufferWrites) {
            setProperty("bufferWrites", bufferWrites);
            return this;
        }
        /**
         * Enable/Disable the buffering of HL7 payloads before writing to the
         * socket.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        @Deprecated
        default MllpEndpointProducerBuilder bufferWrites(String bufferWrites) {
            setProperty("bufferWrites", bufferWrites);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of message headers from the
         * HL7 Message MLLP Consumers only.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder hl7Headers(boolean hl7Headers) {
            setProperty("hl7Headers", hl7Headers);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of message headers from the
         * HL7 Message MLLP Consumers only.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder hl7Headers(String hl7Headers) {
            setProperty("hl7Headers", hl7Headers);
            return this;
        }
        /**
         * Enable/Disable strict compliance to the MLLP standard. The MLLP
         * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,
         * however, some systems do not send the final END_OF_DATA byte. This
         * setting controls whether or not the final END_OF_DATA byte is
         * required or optional.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder requireEndOfData(
                boolean requireEndOfData) {
            setProperty("requireEndOfData", requireEndOfData);
            return this;
        }
        /**
         * Enable/Disable strict compliance to the MLLP standard. The MLLP
         * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,
         * however, some systems do not send the final END_OF_DATA byte. This
         * setting controls whether or not the final END_OF_DATA byte is
         * required or optional.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder requireEndOfData(
                String requireEndOfData) {
            setProperty("requireEndOfData", requireEndOfData);
            return this;
        }
        /**
         * Enable/Disable converting the payload to a String. If enabled, HL7
         * Payloads received from external systems will be validated converted
         * to a String. If the charsetName property is set, that character set
         * will be used for the conversion. If the charsetName property is not
         * set, the value of MSH-18 will be used to determine th appropriate
         * character set. If MSH-18 is not set, then the default ISO-8859-1
         * character set will be use.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder stringPayload(boolean stringPayload) {
            setProperty("stringPayload", stringPayload);
            return this;
        }
        /**
         * Enable/Disable converting the payload to a String. If enabled, HL7
         * Payloads received from external systems will be validated converted
         * to a String. If the charsetName property is set, that character set
         * will be used for the conversion. If the charsetName property is not
         * set, the value of MSH-18 will be used to determine th appropriate
         * character set. If MSH-18 is not set, then the default ISO-8859-1
         * character set will be use.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder stringPayload(String stringPayload) {
            setProperty("stringPayload", stringPayload);
            return this;
        }
        /**
         * Enable/Disable the validation of HL7 Payloads If enabled, HL7
         * Payloads received from external systems will be validated (see
         * Hl7Util.generateInvalidPayloadExceptionMessage for details on the
         * validation). If and invalid payload is detected, a
         * MllpInvalidMessageException (for consumers) or a
         * MllpInvalidAcknowledgementException will be thrown.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder validatePayload(
                boolean validatePayload) {
            setProperty("validatePayload", validatePayload);
            return this;
        }
        /**
         * Enable/Disable the validation of HL7 Payloads If enabled, HL7
         * Payloads received from external systems will be validated (see
         * Hl7Util.generateInvalidPayloadExceptionMessage for details on the
         * validation). If and invalid payload is detected, a
         * MllpInvalidMessageException (for consumers) or a
         * MllpInvalidAcknowledgementException will be thrown.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointProducerBuilder validatePayload(
                String validatePayload) {
            setProperty("validatePayload", validatePayload);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default MllpEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default MllpEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Set the CamelCharsetName property on the exchange.
         * The option is a <code>java.lang.String</code> type.
         * @group codec
         */
        default MllpEndpointProducerBuilder charsetName(String charsetName) {
            setProperty("charsetName", charsetName);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the MLLP component.
     */
    public interface AdvancedMllpEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default MllpEndpointProducerBuilder basic() {
            return (MllpEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used (this
         * component only supports synchronous operations).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used (this
         * component only supports synchronous operations).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Timeout (in milliseconds) for establishing for a TCP connection TCP
         * Client only.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointProducerBuilder connectTimeout(
                int connectTimeout) {
            setProperty("connectTimeout", connectTimeout);
            return this;
        }
        /**
         * Timeout (in milliseconds) for establishing for a TCP connection TCP
         * Client only.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointProducerBuilder connectTimeout(
                String connectTimeout) {
            setProperty("connectTimeout", connectTimeout);
            return this;
        }
        /**
         * The approximate idle time allowed before the Client TCP Connection
         * will be reset. A null value or a value less than or equal to zero
         * will disable the idle timeout.
         * The option is a <code>java.lang.Integer</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointProducerBuilder idleTimeout(
                Integer idleTimeout) {
            setProperty("idleTimeout", idleTimeout);
            return this;
        }
        /**
         * The approximate idle time allowed before the Client TCP Connection
         * will be reset. A null value or a value less than or equal to zero
         * will disable the idle timeout.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group timeout
         */
        default AdvancedMllpEndpointProducerBuilder idleTimeout(
                String idleTimeout) {
            setProperty("idleTimeout", idleTimeout);
            return this;
        }
        /**
         * Enable/disable the SO_KEEPALIVE socket option.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointProducerBuilder keepAlive(Boolean keepAlive) {
            setProperty("keepAlive", keepAlive);
            return this;
        }
        /**
         * Enable/disable the SO_KEEPALIVE socket option.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointProducerBuilder keepAlive(String keepAlive) {
            setProperty("keepAlive", keepAlive);
            return this;
        }
        /**
         * Sets the SO_RCVBUF option to the specified value (in bytes).
         * The option is a <code>java.lang.Integer</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointProducerBuilder receiveBufferSize(
                Integer receiveBufferSize) {
            setProperty("receiveBufferSize", receiveBufferSize);
            return this;
        }
        /**
         * Sets the SO_RCVBUF option to the specified value (in bytes).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointProducerBuilder receiveBufferSize(
                String receiveBufferSize) {
            setProperty("receiveBufferSize", receiveBufferSize);
            return this;
        }
        /**
         * Sets the SO_SNDBUF option to the specified value (in bytes).
         * The option is a <code>java.lang.Integer</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointProducerBuilder sendBufferSize(
                Integer sendBufferSize) {
            setProperty("sendBufferSize", sendBufferSize);
            return this;
        }
        /**
         * Sets the SO_SNDBUF option to the specified value (in bytes).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointProducerBuilder sendBufferSize(
                String sendBufferSize) {
            setProperty("sendBufferSize", sendBufferSize);
            return this;
        }
        /**
         * Enable/disable the TCP_NODELAY socket option.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointProducerBuilder tcpNoDelay(
                Boolean tcpNoDelay) {
            setProperty("tcpNoDelay", tcpNoDelay);
            return this;
        }
        /**
         * Enable/disable the TCP_NODELAY socket option.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointProducerBuilder tcpNoDelay(String tcpNoDelay) {
            setProperty("tcpNoDelay", tcpNoDelay);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used after the start of an
         * MLLP frame has been received.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointProducerBuilder readTimeout(int readTimeout) {
            setProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used after the start of an
         * MLLP frame has been received.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointProducerBuilder readTimeout(
                String readTimeout) {
            setProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used when waiting for the
         * start of an MLLP frame.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointProducerBuilder receiveTimeout(
                int receiveTimeout) {
            setProperty("receiveTimeout", receiveTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used when waiting for the
         * start of an MLLP frame.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointProducerBuilder receiveTimeout(
                String receiveTimeout) {
            setProperty("receiveTimeout", receiveTimeout);
            return this;
        }
    }

    /**
     * Builder for endpoint for the MLLP component.
     */
    public interface MllpEndpointBuilder
            extends
                MllpEndpointConsumerBuilder, MllpEndpointProducerBuilder {
        default AdvancedMllpEndpointBuilder advanced() {
            return (AdvancedMllpEndpointBuilder) this;
        }
        /**
         * Hostname or IP for connection for the TCP connection. The default
         * value is null, which means any local IP address.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default MllpEndpointBuilder hostname(String hostname) {
            setProperty("hostname", hostname);
            return this;
        }
        /**
         * Port number for the TCP connection.
         * The option is a <code>int</code> type.
         * @group common
         */
        default MllpEndpointBuilder port(int port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Port number for the TCP connection.
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        default MllpEndpointBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of a MLLP Acknowledgement
         * MLLP Consumers only.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder autoAck(boolean autoAck) {
            setProperty("autoAck", autoAck);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of a MLLP Acknowledgement
         * MLLP Consumers only.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder autoAck(String autoAck) {
            setProperty("autoAck", autoAck);
            return this;
        }
        /**
         * Enable/Disable the buffering of HL7 payloads before writing to the
         * socket.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        @Deprecated
        default MllpEndpointBuilder bufferWrites(boolean bufferWrites) {
            setProperty("bufferWrites", bufferWrites);
            return this;
        }
        /**
         * Enable/Disable the buffering of HL7 payloads before writing to the
         * socket.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        @Deprecated
        default MllpEndpointBuilder bufferWrites(String bufferWrites) {
            setProperty("bufferWrites", bufferWrites);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of message headers from the
         * HL7 Message MLLP Consumers only.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder hl7Headers(boolean hl7Headers) {
            setProperty("hl7Headers", hl7Headers);
            return this;
        }
        /**
         * Enable/Disable the automatic generation of message headers from the
         * HL7 Message MLLP Consumers only.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder hl7Headers(String hl7Headers) {
            setProperty("hl7Headers", hl7Headers);
            return this;
        }
        /**
         * Enable/Disable strict compliance to the MLLP standard. The MLLP
         * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,
         * however, some systems do not send the final END_OF_DATA byte. This
         * setting controls whether or not the final END_OF_DATA byte is
         * required or optional.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder requireEndOfData(boolean requireEndOfData) {
            setProperty("requireEndOfData", requireEndOfData);
            return this;
        }
        /**
         * Enable/Disable strict compliance to the MLLP standard. The MLLP
         * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,
         * however, some systems do not send the final END_OF_DATA byte. This
         * setting controls whether or not the final END_OF_DATA byte is
         * required or optional.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder requireEndOfData(String requireEndOfData) {
            setProperty("requireEndOfData", requireEndOfData);
            return this;
        }
        /**
         * Enable/Disable converting the payload to a String. If enabled, HL7
         * Payloads received from external systems will be validated converted
         * to a String. If the charsetName property is set, that character set
         * will be used for the conversion. If the charsetName property is not
         * set, the value of MSH-18 will be used to determine th appropriate
         * character set. If MSH-18 is not set, then the default ISO-8859-1
         * character set will be use.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder stringPayload(boolean stringPayload) {
            setProperty("stringPayload", stringPayload);
            return this;
        }
        /**
         * Enable/Disable converting the payload to a String. If enabled, HL7
         * Payloads received from external systems will be validated converted
         * to a String. If the charsetName property is set, that character set
         * will be used for the conversion. If the charsetName property is not
         * set, the value of MSH-18 will be used to determine th appropriate
         * character set. If MSH-18 is not set, then the default ISO-8859-1
         * character set will be use.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder stringPayload(String stringPayload) {
            setProperty("stringPayload", stringPayload);
            return this;
        }
        /**
         * Enable/Disable the validation of HL7 Payloads If enabled, HL7
         * Payloads received from external systems will be validated (see
         * Hl7Util.generateInvalidPayloadExceptionMessage for details on the
         * validation). If and invalid payload is detected, a
         * MllpInvalidMessageException (for consumers) or a
         * MllpInvalidAcknowledgementException will be thrown.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder validatePayload(boolean validatePayload) {
            setProperty("validatePayload", validatePayload);
            return this;
        }
        /**
         * Enable/Disable the validation of HL7 Payloads If enabled, HL7
         * Payloads received from external systems will be validated (see
         * Hl7Util.generateInvalidPayloadExceptionMessage for details on the
         * validation). If and invalid payload is detected, a
         * MllpInvalidMessageException (for consumers) or a
         * MllpInvalidAcknowledgementException will be thrown.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        default MllpEndpointBuilder validatePayload(String validatePayload) {
            setProperty("validatePayload", validatePayload);
            return this;
        }
        /**
         * Set the CamelCharsetName property on the exchange.
         * The option is a <code>java.lang.String</code> type.
         * @group codec
         */
        default MllpEndpointBuilder charsetName(String charsetName) {
            setProperty("charsetName", charsetName);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the MLLP component.
     */
    public interface AdvancedMllpEndpointBuilder
            extends
                AdvancedMllpEndpointConsumerBuilder, AdvancedMllpEndpointProducerBuilder {
        default MllpEndpointBuilder basic() {
            return (MllpEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used (this
         * component only supports synchronous operations).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointBuilder synchronous(boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used (this
         * component only supports synchronous operations).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedMllpEndpointBuilder synchronous(String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * The approximate idle time allowed before the Client TCP Connection
         * will be reset. A null value or a value less than or equal to zero
         * will disable the idle timeout.
         * The option is a <code>java.lang.Integer</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointBuilder idleTimeout(Integer idleTimeout) {
            setProperty("idleTimeout", idleTimeout);
            return this;
        }
        /**
         * The approximate idle time allowed before the Client TCP Connection
         * will be reset. A null value or a value less than or equal to zero
         * will disable the idle timeout.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group timeout
         */
        default AdvancedMllpEndpointBuilder idleTimeout(String idleTimeout) {
            setProperty("idleTimeout", idleTimeout);
            return this;
        }
        /**
         * Sets the SO_RCVBUF option to the specified value (in bytes).
         * The option is a <code>java.lang.Integer</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointBuilder receiveBufferSize(
                Integer receiveBufferSize) {
            setProperty("receiveBufferSize", receiveBufferSize);
            return this;
        }
        /**
         * Sets the SO_RCVBUF option to the specified value (in bytes).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointBuilder receiveBufferSize(
                String receiveBufferSize) {
            setProperty("receiveBufferSize", receiveBufferSize);
            return this;
        }
        /**
         * Sets the SO_SNDBUF option to the specified value (in bytes).
         * The option is a <code>java.lang.Integer</code> type.
         * @group tcp
         */
        default AdvancedMllpEndpointBuilder sendBufferSize(
                Integer sendBufferSize) {
            setProperty("sendBufferSize", sendBufferSize);
            return this;
        }
        /**
         * Sets the SO_SNDBUF option to the specified value (in bytes).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group tcp
         */
        default AdvancedMllpEndpointBuilder sendBufferSize(String sendBufferSize) {
            setProperty("sendBufferSize", sendBufferSize);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used after the start of an
         * MLLP frame has been received.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointBuilder readTimeout(int readTimeout) {
            setProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used after the start of an
         * MLLP frame has been received.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointBuilder readTimeout(String readTimeout) {
            setProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used when waiting for the
         * start of an MLLP frame.
         * The option is a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointBuilder receiveTimeout(int receiveTimeout) {
            setProperty("receiveTimeout", receiveTimeout);
            return this;
        }
        /**
         * The SO_TIMEOUT value (in milliseconds) used when waiting for the
         * start of an MLLP frame.
         * The option will be converted to a <code>int</code> type.
         * @group timeout
         */
        default AdvancedMllpEndpointBuilder receiveTimeout(String receiveTimeout) {
            setProperty("receiveTimeout", receiveTimeout);
            return this;
        }
    }
    /**
     * Provides functionality required by Healthcare providers to communicate
     * with other systems using the MLLP protocol.
     * Maven coordinates: org.apache.camel:camel-mllp
     */
    default MllpEndpointBuilder mllp(String path) {
        class MllpEndpointBuilderImpl extends AbstractEndpointBuilder implements MllpEndpointBuilder, AdvancedMllpEndpointBuilder {
            public MllpEndpointBuilderImpl(String path) {
                super("mllp", path);
            }
        }
        return new MllpEndpointBuilderImpl(path);
    }
}