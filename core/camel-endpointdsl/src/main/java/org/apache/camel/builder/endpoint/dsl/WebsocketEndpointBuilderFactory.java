/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The websocket component provides websocket endpoints with Jetty for
 * communicating with clients using websocket.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface WebsocketEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Jetty Websocket component.
     */
    public interface WebsocketEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedWebsocketEndpointConsumerBuilder advanced() {
            return (AdvancedWebsocketEndpointConsumerBuilder) this;
        }
        /**
         * The hostname. The default value is 0.0.0.0. Setting this option on
         * the component will use the component configured value as default.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default WebsocketEndpointConsumerBuilder host(String host) {
            setProperty("host", host);
            return this;
        }
        /**
         * The port number. The default value is 9292. Setting this option on
         * the component will use the component configured value as default.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default WebsocketEndpointConsumerBuilder port(Integer port) {
            setProperty("port", port);
            return this;
        }
        /**
         * The port number. The default value is 9292. Setting this option on
         * the component will use the component configured value as default.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default WebsocketEndpointConsumerBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Name of the websocket channel to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default WebsocketEndpointConsumerBuilder resourceUri(String resourceUri) {
            setProperty("resourceUri", resourceUri);
            return this;
        }
        /**
         * Can be used to set the size in bytes that the websocket created by
         * the websocketServlet may be accept before closing. (Default is -1 -
         * or unlimited).
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default WebsocketEndpointConsumerBuilder maxBinaryMessageSize(
                Integer maxBinaryMessageSize) {
            setProperty("maxBinaryMessageSize", maxBinaryMessageSize);
            return this;
        }
        /**
         * Can be used to set the size in bytes that the websocket created by
         * the websocketServlet may be accept before closing. (Default is -1 -
         * or unlimited).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default WebsocketEndpointConsumerBuilder maxBinaryMessageSize(
                String maxBinaryMessageSize) {
            setProperty("maxBinaryMessageSize", maxBinaryMessageSize);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default WebsocketEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default WebsocketEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Whether to enable session support which enables HttpSession for each
         * http request.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default WebsocketEndpointConsumerBuilder sessionSupport(
                boolean sessionSupport) {
            setProperty("sessionSupport", sessionSupport);
            return this;
        }
        /**
         * Whether to enable session support which enables HttpSession for each
         * http request.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default WebsocketEndpointConsumerBuilder sessionSupport(
                String sessionSupport) {
            setProperty("sessionSupport", sessionSupport);
            return this;
        }
        /**
         * Set a resource path for static resources (such as .html files etc).
         * The resources can be loaded from classpath, if you prefix with
         * classpath:, otherwise the resources is loaded from file system or
         * from JAR files. For example to load from root classpath use
         * classpath:., or classpath:WEB-INF/static If not configured (eg null)
         * then no static resource is in use.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default WebsocketEndpointConsumerBuilder staticResources(
                String staticResources) {
            setProperty("staticResources", staticResources);
            return this;
        }
        /**
         * The CORS allowed origins. Use to allow all.
         * The option is a <code>java.lang.String</code> type.
         * @group cors
         */
        default WebsocketEndpointConsumerBuilder allowedOrigins(
                String allowedOrigins) {
            setProperty("allowedOrigins", allowedOrigins);
            return this;
        }
        /**
         * Whether to enable CORS.
         * The option is a <code>boolean</code> type.
         * @group cors
         */
        default WebsocketEndpointConsumerBuilder crossOriginFilterOn(
                boolean crossOriginFilterOn) {
            setProperty("crossOriginFilterOn", crossOriginFilterOn);
            return this;
        }
        /**
         * Whether to enable CORS.
         * The option will be converted to a <code>boolean</code> type.
         * @group cors
         */
        default WebsocketEndpointConsumerBuilder crossOriginFilterOn(
                String crossOriginFilterOn) {
            setProperty("crossOriginFilterOn", crossOriginFilterOn);
            return this;
        }
        /**
         * Context path for filtering CORS.
         * The option is a <code>java.lang.String</code> type.
         * @group cors
         */
        default WebsocketEndpointConsumerBuilder filterPath(String filterPath) {
            setProperty("filterPath", filterPath);
            return this;
        }
        /**
         * If this option is true, Jetty JMX support will be enabled for this
         * endpoint. See Jetty JMX support for more details.
         * The option is a <code>boolean</code> type.
         * @group monitoring
         */
        default WebsocketEndpointConsumerBuilder enableJmx(boolean enableJmx) {
            setProperty("enableJmx", enableJmx);
            return this;
        }
        /**
         * If this option is true, Jetty JMX support will be enabled for this
         * endpoint. See Jetty JMX support for more details.
         * The option will be converted to a <code>boolean</code> type.
         * @group monitoring
         */
        default WebsocketEndpointConsumerBuilder enableJmx(String enableJmx) {
            setProperty("enableJmx", enableJmx);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default WebsocketEndpointConsumerBuilder sslContextParameters(
                Object sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default WebsocketEndpointConsumerBuilder sslContextParameters(
                String sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Jetty Websocket
     * component.
     */
    public interface AdvancedWebsocketEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default WebsocketEndpointConsumerBuilder basic() {
            return (WebsocketEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        default AdvancedWebsocketEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        default AdvancedWebsocketEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedWebsocketEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedWebsocketEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Set the buffer size of the websocketServlet, which is also the max
         * frame byte size (default 8192).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder bufferSize(
                Integer bufferSize) {
            setProperty("bufferSize", bufferSize);
            return this;
        }
        /**
         * Set the buffer size of the websocketServlet, which is also the max
         * frame byte size (default 8192).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder bufferSize(
                String bufferSize) {
            setProperty("bufferSize", bufferSize);
            return this;
        }
        /**
         * Set the time in ms that the websocket created by the websocketServlet
         * may be idle before closing. (default is 300000).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder maxIdleTime(
                Integer maxIdleTime) {
            setProperty("maxIdleTime", maxIdleTime);
            return this;
        }
        /**
         * Set the time in ms that the websocket created by the websocketServlet
         * may be idle before closing. (default is 300000).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder maxIdleTime(
                String maxIdleTime) {
            setProperty("maxIdleTime", maxIdleTime);
            return this;
        }
        /**
         * Can be used to set the size in characters that the websocket created
         * by the websocketServlet may be accept before closing.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder maxTextMessageSize(
                Integer maxTextMessageSize) {
            setProperty("maxTextMessageSize", maxTextMessageSize);
            return this;
        }
        /**
         * Can be used to set the size in characters that the websocket created
         * by the websocketServlet may be accept before closing.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder maxTextMessageSize(
                String maxTextMessageSize) {
            setProperty("maxTextMessageSize", maxTextMessageSize);
            return this;
        }
        /**
         * Can be used to set the minimum protocol version accepted for the
         * websocketServlet. (Default 13 - the RFC6455 version).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder minVersion(
                Integer minVersion) {
            setProperty("minVersion", minVersion);
            return this;
        }
        /**
         * Can be used to set the minimum protocol version accepted for the
         * websocketServlet. (Default 13 - the RFC6455 version).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder minVersion(
                String minVersion) {
            setProperty("minVersion", minVersion);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Jetty Websocket component.
     */
    public interface WebsocketEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedWebsocketEndpointProducerBuilder advanced() {
            return (AdvancedWebsocketEndpointProducerBuilder) this;
        }
        /**
         * The hostname. The default value is 0.0.0.0. Setting this option on
         * the component will use the component configured value as default.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default WebsocketEndpointProducerBuilder host(String host) {
            setProperty("host", host);
            return this;
        }
        /**
         * The port number. The default value is 9292. Setting this option on
         * the component will use the component configured value as default.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default WebsocketEndpointProducerBuilder port(Integer port) {
            setProperty("port", port);
            return this;
        }
        /**
         * The port number. The default value is 9292. Setting this option on
         * the component will use the component configured value as default.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default WebsocketEndpointProducerBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Name of the websocket channel to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default WebsocketEndpointProducerBuilder resourceUri(String resourceUri) {
            setProperty("resourceUri", resourceUri);
            return this;
        }
        /**
         * Can be used to set the size in bytes that the websocket created by
         * the websocketServlet may be accept before closing. (Default is -1 -
         * or unlimited).
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default WebsocketEndpointProducerBuilder maxBinaryMessageSize(
                Integer maxBinaryMessageSize) {
            setProperty("maxBinaryMessageSize", maxBinaryMessageSize);
            return this;
        }
        /**
         * Can be used to set the size in bytes that the websocket created by
         * the websocketServlet may be accept before closing. (Default is -1 -
         * or unlimited).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default WebsocketEndpointProducerBuilder maxBinaryMessageSize(
                String maxBinaryMessageSize) {
            setProperty("maxBinaryMessageSize", maxBinaryMessageSize);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default WebsocketEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default WebsocketEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Timeout in millis when sending to a websocket channel. The default
         * timeout is 30000 (30 seconds).
         * The option is a <code>java.lang.Integer</code> type.
         * @group producer
         */
        default WebsocketEndpointProducerBuilder sendTimeout(Integer sendTimeout) {
            setProperty("sendTimeout", sendTimeout);
            return this;
        }
        /**
         * Timeout in millis when sending to a websocket channel. The default
         * timeout is 30000 (30 seconds).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group producer
         */
        default WebsocketEndpointProducerBuilder sendTimeout(String sendTimeout) {
            setProperty("sendTimeout", sendTimeout);
            return this;
        }
        /**
         * To send to all websocket subscribers. Can be used to configure on
         * endpoint level, instead of having to use the
         * WebsocketConstants.SEND_TO_ALL header on the message.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group producer
         */
        default WebsocketEndpointProducerBuilder sendToAll(Boolean sendToAll) {
            setProperty("sendToAll", sendToAll);
            return this;
        }
        /**
         * To send to all websocket subscribers. Can be used to configure on
         * endpoint level, instead of having to use the
         * WebsocketConstants.SEND_TO_ALL header on the message.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group producer
         */
        default WebsocketEndpointProducerBuilder sendToAll(String sendToAll) {
            setProperty("sendToAll", sendToAll);
            return this;
        }
        /**
         * The CORS allowed origins. Use to allow all.
         * The option is a <code>java.lang.String</code> type.
         * @group cors
         */
        default WebsocketEndpointProducerBuilder allowedOrigins(
                String allowedOrigins) {
            setProperty("allowedOrigins", allowedOrigins);
            return this;
        }
        /**
         * Whether to enable CORS.
         * The option is a <code>boolean</code> type.
         * @group cors
         */
        default WebsocketEndpointProducerBuilder crossOriginFilterOn(
                boolean crossOriginFilterOn) {
            setProperty("crossOriginFilterOn", crossOriginFilterOn);
            return this;
        }
        /**
         * Whether to enable CORS.
         * The option will be converted to a <code>boolean</code> type.
         * @group cors
         */
        default WebsocketEndpointProducerBuilder crossOriginFilterOn(
                String crossOriginFilterOn) {
            setProperty("crossOriginFilterOn", crossOriginFilterOn);
            return this;
        }
        /**
         * Context path for filtering CORS.
         * The option is a <code>java.lang.String</code> type.
         * @group cors
         */
        default WebsocketEndpointProducerBuilder filterPath(String filterPath) {
            setProperty("filterPath", filterPath);
            return this;
        }
        /**
         * If this option is true, Jetty JMX support will be enabled for this
         * endpoint. See Jetty JMX support for more details.
         * The option is a <code>boolean</code> type.
         * @group monitoring
         */
        default WebsocketEndpointProducerBuilder enableJmx(boolean enableJmx) {
            setProperty("enableJmx", enableJmx);
            return this;
        }
        /**
         * If this option is true, Jetty JMX support will be enabled for this
         * endpoint. See Jetty JMX support for more details.
         * The option will be converted to a <code>boolean</code> type.
         * @group monitoring
         */
        default WebsocketEndpointProducerBuilder enableJmx(String enableJmx) {
            setProperty("enableJmx", enableJmx);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default WebsocketEndpointProducerBuilder sslContextParameters(
                Object sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default WebsocketEndpointProducerBuilder sslContextParameters(
                String sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Jetty Websocket
     * component.
     */
    public interface AdvancedWebsocketEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default WebsocketEndpointProducerBuilder basic() {
            return (WebsocketEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Set the buffer size of the websocketServlet, which is also the max
         * frame byte size (default 8192).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder bufferSize(
                Integer bufferSize) {
            setProperty("bufferSize", bufferSize);
            return this;
        }
        /**
         * Set the buffer size of the websocketServlet, which is also the max
         * frame byte size (default 8192).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder bufferSize(
                String bufferSize) {
            setProperty("bufferSize", bufferSize);
            return this;
        }
        /**
         * Set the time in ms that the websocket created by the websocketServlet
         * may be idle before closing. (default is 300000).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder maxIdleTime(
                Integer maxIdleTime) {
            setProperty("maxIdleTime", maxIdleTime);
            return this;
        }
        /**
         * Set the time in ms that the websocket created by the websocketServlet
         * may be idle before closing. (default is 300000).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder maxIdleTime(
                String maxIdleTime) {
            setProperty("maxIdleTime", maxIdleTime);
            return this;
        }
        /**
         * Can be used to set the size in characters that the websocket created
         * by the websocketServlet may be accept before closing.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder maxTextMessageSize(
                Integer maxTextMessageSize) {
            setProperty("maxTextMessageSize", maxTextMessageSize);
            return this;
        }
        /**
         * Can be used to set the size in characters that the websocket created
         * by the websocketServlet may be accept before closing.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder maxTextMessageSize(
                String maxTextMessageSize) {
            setProperty("maxTextMessageSize", maxTextMessageSize);
            return this;
        }
        /**
         * Can be used to set the minimum protocol version accepted for the
         * websocketServlet. (Default 13 - the RFC6455 version).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder minVersion(
                Integer minVersion) {
            setProperty("minVersion", minVersion);
            return this;
        }
        /**
         * Can be used to set the minimum protocol version accepted for the
         * websocketServlet. (Default 13 - the RFC6455 version).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder minVersion(
                String minVersion) {
            setProperty("minVersion", minVersion);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Jetty Websocket component.
     */
    public interface WebsocketEndpointBuilder
            extends
                WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {
        default AdvancedWebsocketEndpointBuilder advanced() {
            return (AdvancedWebsocketEndpointBuilder) this;
        }
        /**
         * The hostname. The default value is 0.0.0.0. Setting this option on
         * the component will use the component configured value as default.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default WebsocketEndpointBuilder host(String host) {
            setProperty("host", host);
            return this;
        }
        /**
         * The port number. The default value is 9292. Setting this option on
         * the component will use the component configured value as default.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default WebsocketEndpointBuilder port(Integer port) {
            setProperty("port", port);
            return this;
        }
        /**
         * The port number. The default value is 9292. Setting this option on
         * the component will use the component configured value as default.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default WebsocketEndpointBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Name of the websocket channel to use.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default WebsocketEndpointBuilder resourceUri(String resourceUri) {
            setProperty("resourceUri", resourceUri);
            return this;
        }
        /**
         * Can be used to set the size in bytes that the websocket created by
         * the websocketServlet may be accept before closing. (Default is -1 -
         * or unlimited).
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default WebsocketEndpointBuilder maxBinaryMessageSize(
                Integer maxBinaryMessageSize) {
            setProperty("maxBinaryMessageSize", maxBinaryMessageSize);
            return this;
        }
        /**
         * Can be used to set the size in bytes that the websocket created by
         * the websocketServlet may be accept before closing. (Default is -1 -
         * or unlimited).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default WebsocketEndpointBuilder maxBinaryMessageSize(
                String maxBinaryMessageSize) {
            setProperty("maxBinaryMessageSize", maxBinaryMessageSize);
            return this;
        }
        /**
         * The CORS allowed origins. Use to allow all.
         * The option is a <code>java.lang.String</code> type.
         * @group cors
         */
        default WebsocketEndpointBuilder allowedOrigins(String allowedOrigins) {
            setProperty("allowedOrigins", allowedOrigins);
            return this;
        }
        /**
         * Whether to enable CORS.
         * The option is a <code>boolean</code> type.
         * @group cors
         */
        default WebsocketEndpointBuilder crossOriginFilterOn(
                boolean crossOriginFilterOn) {
            setProperty("crossOriginFilterOn", crossOriginFilterOn);
            return this;
        }
        /**
         * Whether to enable CORS.
         * The option will be converted to a <code>boolean</code> type.
         * @group cors
         */
        default WebsocketEndpointBuilder crossOriginFilterOn(
                String crossOriginFilterOn) {
            setProperty("crossOriginFilterOn", crossOriginFilterOn);
            return this;
        }
        /**
         * Context path for filtering CORS.
         * The option is a <code>java.lang.String</code> type.
         * @group cors
         */
        default WebsocketEndpointBuilder filterPath(String filterPath) {
            setProperty("filterPath", filterPath);
            return this;
        }
        /**
         * If this option is true, Jetty JMX support will be enabled for this
         * endpoint. See Jetty JMX support for more details.
         * The option is a <code>boolean</code> type.
         * @group monitoring
         */
        default WebsocketEndpointBuilder enableJmx(boolean enableJmx) {
            setProperty("enableJmx", enableJmx);
            return this;
        }
        /**
         * If this option is true, Jetty JMX support will be enabled for this
         * endpoint. See Jetty JMX support for more details.
         * The option will be converted to a <code>boolean</code> type.
         * @group monitoring
         */
        default WebsocketEndpointBuilder enableJmx(String enableJmx) {
            setProperty("enableJmx", enableJmx);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default WebsocketEndpointBuilder sslContextParameters(
                Object sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default WebsocketEndpointBuilder sslContextParameters(
                String sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Jetty Websocket component.
     */
    public interface AdvancedWebsocketEndpointBuilder
            extends
                AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {
        default WebsocketEndpointBuilder basic() {
            return (WebsocketEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Set the buffer size of the websocketServlet, which is also the max
         * frame byte size (default 8192).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder bufferSize(Integer bufferSize) {
            setProperty("bufferSize", bufferSize);
            return this;
        }
        /**
         * Set the buffer size of the websocketServlet, which is also the max
         * frame byte size (default 8192).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder bufferSize(String bufferSize) {
            setProperty("bufferSize", bufferSize);
            return this;
        }
        /**
         * Set the time in ms that the websocket created by the websocketServlet
         * may be idle before closing. (default is 300000).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder maxIdleTime(Integer maxIdleTime) {
            setProperty("maxIdleTime", maxIdleTime);
            return this;
        }
        /**
         * Set the time in ms that the websocket created by the websocketServlet
         * may be idle before closing. (default is 300000).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder maxIdleTime(String maxIdleTime) {
            setProperty("maxIdleTime", maxIdleTime);
            return this;
        }
        /**
         * Can be used to set the size in characters that the websocket created
         * by the websocketServlet may be accept before closing.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder maxTextMessageSize(
                Integer maxTextMessageSize) {
            setProperty("maxTextMessageSize", maxTextMessageSize);
            return this;
        }
        /**
         * Can be used to set the size in characters that the websocket created
         * by the websocketServlet may be accept before closing.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder maxTextMessageSize(
                String maxTextMessageSize) {
            setProperty("maxTextMessageSize", maxTextMessageSize);
            return this;
        }
        /**
         * Can be used to set the minimum protocol version accepted for the
         * websocketServlet. (Default 13 - the RFC6455 version).
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder minVersion(Integer minVersion) {
            setProperty("minVersion", minVersion);
            return this;
        }
        /**
         * Can be used to set the minimum protocol version accepted for the
         * websocketServlet. (Default 13 - the RFC6455 version).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder minVersion(String minVersion) {
            setProperty("minVersion", minVersion);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder synchronous(boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedWebsocketEndpointBuilder synchronous(String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }
    /**
     * The websocket component provides websocket endpoints with Jetty for
     * communicating with clients using websocket.
     * Maven coordinates: org.apache.camel:camel-websocket
     */
    default WebsocketEndpointBuilder websocket(String path) {
        class WebsocketEndpointBuilderImpl extends AbstractEndpointBuilder implements WebsocketEndpointBuilder, AdvancedWebsocketEndpointBuilder {
            public WebsocketEndpointBuilderImpl(String path) {
                super("websocket", path);
            }
        }
        return new WebsocketEndpointBuilderImpl(path);
    }
}