/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.net.URI;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * The undertow component provides HTTP and WebSocket based endpoints for
 * consuming and producing HTTP/WebSocket requests.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface UndertowEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Undertow component.
     */
    public interface UndertowEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedUndertowEndpointConsumerBuilder advanced() {
            return (AdvancedUndertowEndpointConsumerBuilder) this;
        }
        /**
         * The url of the HTTP endpoint to use.
         * The option is a <code>java.net.URI</code> type.
         * @group common
         */
        default UndertowEndpointConsumerBuilder httpURI(URI httpURI) {
            setProperty("httpURI", httpURI);
            return this;
        }
        /**
         * The url of the HTTP endpoint to use.
         * The option will be converted to a <code>java.net.URI</code> type.
         * @group common
         */
        default UndertowEndpointConsumerBuilder httpURI(String httpURI) {
            setProperty("httpURI", httpURI);
            return this;
        }
        /**
         * Whether or not the consumer should write access log.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder accessLog(Boolean accessLog) {
            setProperty("accessLog", accessLog);
            return this;
        }
        /**
         * Whether or not the consumer should write access log.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder accessLog(String accessLog) {
            setProperty("accessLog", accessLog);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Used to only allow consuming if the HttpMethod matches, such as
         * GET/POST/PUT etc. Multiple methods can be specified separated by
         * comma.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder httpMethodRestrict(
                String httpMethodRestrict) {
            setProperty("httpMethodRestrict", httpMethodRestrict);
            return this;
        }
        /**
         * Whether or not the consumer should try to find a target consumer by
         * matching the URI prefix if no exact match is found.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder matchOnUriPrefix(
                Boolean matchOnUriPrefix) {
            setProperty("matchOnUriPrefix", matchOnUriPrefix);
            return this;
        }
        /**
         * Whether or not the consumer should try to find a target consumer by
         * matching the URI prefix if no exact match is found.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder matchOnUriPrefix(
                String matchOnUriPrefix) {
            setProperty("matchOnUriPrefix", matchOnUriPrefix);
            return this;
        }
        /**
         * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.
         * By default OPTIONS is turned off.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder optionsEnabled(
                boolean optionsEnabled) {
            setProperty("optionsEnabled", optionsEnabled);
            return this;
        }
        /**
         * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.
         * By default OPTIONS is turned off.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default UndertowEndpointConsumerBuilder optionsEnabled(
                String optionsEnabled) {
            setProperty("optionsEnabled", optionsEnabled);
            return this;
        }
        /**
         * if true, the consumer will post notifications to the route when a new
         * WebSocket peer connects, disconnects, etc. See
         * UndertowConstants.EVENT_TYPE and EventType.
         * The option is a <code>boolean</code> type.
         * @group websocket
         */
        default UndertowEndpointConsumerBuilder fireWebSocketChannelEvents(
                boolean fireWebSocketChannelEvents) {
            setProperty("fireWebSocketChannelEvents", fireWebSocketChannelEvents);
            return this;
        }
        /**
         * if true, the consumer will post notifications to the route when a new
         * WebSocket peer connects, disconnects, etc. See
         * UndertowConstants.EVENT_TYPE and EventType.
         * The option will be converted to a <code>boolean</code> type.
         * @group websocket
         */
        default UndertowEndpointConsumerBuilder fireWebSocketChannelEvents(
                String fireWebSocketChannelEvents) {
            setProperty("fireWebSocketChannelEvents", fireWebSocketChannelEvents);
            return this;
        }
        /**
         * if true, text and binary messages coming through a WebSocket will be
         * wrapped as java.io.Reader and java.io.InputStream respectively before
         * they are passed to an Exchange; otherwise they will be passed as
         * String and byte respectively.
         * The option is a <code>boolean</code> type.
         * @group websocket
         */
        default UndertowEndpointConsumerBuilder useStreaming(
                boolean useStreaming) {
            setProperty("useStreaming", useStreaming);
            return this;
        }
        /**
         * if true, text and binary messages coming through a WebSocket will be
         * wrapped as java.io.Reader and java.io.InputStream respectively before
         * they are passed to an Exchange; otherwise they will be passed as
         * String and byte respectively.
         * The option will be converted to a <code>boolean</code> type.
         * @group websocket
         */
        default UndertowEndpointConsumerBuilder useStreaming(String useStreaming) {
            setProperty("useStreaming", useStreaming);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default UndertowEndpointConsumerBuilder sslContextParameters(
                Object sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default UndertowEndpointConsumerBuilder sslContextParameters(
                String sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Undertow component.
     */
    public interface AdvancedUndertowEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default UndertowEndpointConsumerBuilder basic() {
            return (UndertowEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        default AdvancedUndertowEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        default AdvancedUndertowEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedUndertowEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedUndertowEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Which Undertow AccessLogReciever should be used Will use
         * JBossLoggingAccessLogReceiver if not specifid.
         * The option is a
         * <code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder accessLogReceiver(
                Object accessLogReceiver) {
            setProperty("accessLogReceiver", accessLogReceiver);
            return this;
        }
        /**
         * Which Undertow AccessLogReciever should be used Will use
         * JBossLoggingAccessLogReceiver if not specifid.
         * The option will be converted to a
         * <code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder accessLogReceiver(
                String accessLogReceiver) {
            setProperty("accessLogReceiver", accessLogReceiver);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message.
         * The option is a
         * <code>org.apache.camel.spi.HeaderFilterStrategy</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder headerFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            setProperty("headerFilterStrategy", headerFilterStrategy);
            return this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message.
         * The option will be converted to a
         * <code>org.apache.camel.spi.HeaderFilterStrategy</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder headerFilterStrategy(
                String headerFilterStrategy) {
            setProperty("headerFilterStrategy", headerFilterStrategy);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * To use a custom UndertowHttpBinding to control the mapping between
         * Camel message and undertow.
         * The option is a
         * <code>org.apache.camel.component.undertow.UndertowHttpBinding</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder undertowHttpBinding(
                Object undertowHttpBinding) {
            setProperty("undertowHttpBinding", undertowHttpBinding);
            return this;
        }
        /**
         * To use a custom UndertowHttpBinding to control the mapping between
         * Camel message and undertow.
         * The option will be converted to a
         * <code>org.apache.camel.component.undertow.UndertowHttpBinding</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointConsumerBuilder undertowHttpBinding(
                String undertowHttpBinding) {
            setProperty("undertowHttpBinding", undertowHttpBinding);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Undertow component.
     */
    public interface UndertowEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedUndertowEndpointProducerBuilder advanced() {
            return (AdvancedUndertowEndpointProducerBuilder) this;
        }
        /**
         * The url of the HTTP endpoint to use.
         * The option is a <code>java.net.URI</code> type.
         * @group common
         */
        default UndertowEndpointProducerBuilder httpURI(URI httpURI) {
            setProperty("httpURI", httpURI);
            return this;
        }
        /**
         * The url of the HTTP endpoint to use.
         * The option will be converted to a <code>java.net.URI</code> type.
         * @group common
         */
        default UndertowEndpointProducerBuilder httpURI(String httpURI) {
            setProperty("httpURI", httpURI);
            return this;
        }
        /**
         * Configure a cookie handler to maintain a HTTP session.
         * The option is a
         * <code>org.apache.camel.http.common.cookie.CookieHandler</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder cookieHandler(
                Object cookieHandler) {
            setProperty("cookieHandler", cookieHandler);
            return this;
        }
        /**
         * Configure a cookie handler to maintain a HTTP session.
         * The option will be converted to a
         * <code>org.apache.camel.http.common.cookie.CookieHandler</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder cookieHandler(
                String cookieHandler) {
            setProperty("cookieHandler", cookieHandler);
            return this;
        }
        /**
         * Setting to ensure socket is not closed due to inactivity.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder keepAlive(Boolean keepAlive) {
            setProperty("keepAlive", keepAlive);
            return this;
        }
        /**
         * Setting to ensure socket is not closed due to inactivity.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder keepAlive(String keepAlive) {
            setProperty("keepAlive", keepAlive);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Sets additional channel options. The options that can be used are
         * defined in org.xnio.Options. To configure from endpoint uri, then
         * prefix each option with option., such as
         * option.close-abort=true&option.send-buffer=8192.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder options(
                Map<String, Object> options) {
            setProperty("options", options);
            return this;
        }
        /**
         * Sets additional channel options. The options that can be used are
         * defined in org.xnio.Options. To configure from endpoint uri, then
         * prefix each option with option., such as
         * option.close-abort=true&option.send-buffer=8192.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder options(String options) {
            setProperty("options", options);
            return this;
        }
        /**
         * Setting to facilitate socket multiplexing.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder reuseAddresses(
                Boolean reuseAddresses) {
            setProperty("reuseAddresses", reuseAddresses);
            return this;
        }
        /**
         * Setting to facilitate socket multiplexing.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder reuseAddresses(
                String reuseAddresses) {
            setProperty("reuseAddresses", reuseAddresses);
            return this;
        }
        /**
         * Setting to improve TCP protocol performance.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder tcpNoDelay(Boolean tcpNoDelay) {
            setProperty("tcpNoDelay", tcpNoDelay);
            return this;
        }
        /**
         * Setting to improve TCP protocol performance.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder tcpNoDelay(String tcpNoDelay) {
            setProperty("tcpNoDelay", tcpNoDelay);
            return this;
        }
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder throwExceptionOnFailure(
                Boolean throwExceptionOnFailure) {
            setProperty("throwExceptionOnFailure", throwExceptionOnFailure);
            return this;
        }
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder throwExceptionOnFailure(
                String throwExceptionOnFailure) {
            setProperty("throwExceptionOnFailure", throwExceptionOnFailure);
            return this;
        }
        /**
         * If enabled and an Exchange failed processing on the consumer side and
         * if the caused Exception was send back serialized in the response as a
         * application/x-java-serialized-object content type. On the producer
         * side the exception will be deserialized and thrown as is instead of
         * the HttpOperationFailedException. The caused exception is required to
         * be serialized. This is by default turned off. If you enable this then
         * be aware that Java will deserialize the incoming data from the
         * request to Java and that can be a potential security risk.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder transferException(
                Boolean transferException) {
            setProperty("transferException", transferException);
            return this;
        }
        /**
         * If enabled and an Exchange failed processing on the consumer side and
         * if the caused Exception was send back serialized in the response as a
         * application/x-java-serialized-object content type. On the producer
         * side the exception will be deserialized and thrown as is instead of
         * the HttpOperationFailedException. The caused exception is required to
         * be serialized. This is by default turned off. If you enable this then
         * be aware that Java will deserialize the incoming data from the
         * request to Java and that can be a potential security risk.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group producer
         */
        default UndertowEndpointProducerBuilder transferException(
                String transferException) {
            setProperty("transferException", transferException);
            return this;
        }
        /**
         * Timeout in milliseconds when sending to a websocket channel. The
         * default timeout is 30000 (30 seconds).
         * The option is a <code>java.lang.Integer</code> type.
         * @group websocket
         */
        default UndertowEndpointProducerBuilder sendTimeout(Integer sendTimeout) {
            setProperty("sendTimeout", sendTimeout);
            return this;
        }
        /**
         * Timeout in milliseconds when sending to a websocket channel. The
         * default timeout is 30000 (30 seconds).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group websocket
         */
        default UndertowEndpointProducerBuilder sendTimeout(String sendTimeout) {
            setProperty("sendTimeout", sendTimeout);
            return this;
        }
        /**
         * To send to all websocket subscribers. Can be used to configure on
         * endpoint level, instead of having to use the
         * UndertowConstants.SEND_TO_ALL header on the message.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group websocket
         */
        default UndertowEndpointProducerBuilder sendToAll(Boolean sendToAll) {
            setProperty("sendToAll", sendToAll);
            return this;
        }
        /**
         * To send to all websocket subscribers. Can be used to configure on
         * endpoint level, instead of having to use the
         * UndertowConstants.SEND_TO_ALL header on the message.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group websocket
         */
        default UndertowEndpointProducerBuilder sendToAll(String sendToAll) {
            setProperty("sendToAll", sendToAll);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default UndertowEndpointProducerBuilder sslContextParameters(
                Object sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default UndertowEndpointProducerBuilder sslContextParameters(
                String sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Undertow component.
     */
    public interface AdvancedUndertowEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default UndertowEndpointProducerBuilder basic() {
            return (UndertowEndpointProducerBuilder) this;
        }
        /**
         * Which Undertow AccessLogReciever should be used Will use
         * JBossLoggingAccessLogReceiver if not specifid.
         * The option is a
         * <code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder accessLogReceiver(
                Object accessLogReceiver) {
            setProperty("accessLogReceiver", accessLogReceiver);
            return this;
        }
        /**
         * Which Undertow AccessLogReciever should be used Will use
         * JBossLoggingAccessLogReceiver if not specifid.
         * The option will be converted to a
         * <code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder accessLogReceiver(
                String accessLogReceiver) {
            setProperty("accessLogReceiver", accessLogReceiver);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message.
         * The option is a
         * <code>org.apache.camel.spi.HeaderFilterStrategy</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder headerFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            setProperty("headerFilterStrategy", headerFilterStrategy);
            return this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message.
         * The option will be converted to a
         * <code>org.apache.camel.spi.HeaderFilterStrategy</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder headerFilterStrategy(
                String headerFilterStrategy) {
            setProperty("headerFilterStrategy", headerFilterStrategy);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * To use a custom UndertowHttpBinding to control the mapping between
         * Camel message and undertow.
         * The option is a
         * <code>org.apache.camel.component.undertow.UndertowHttpBinding</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder undertowHttpBinding(
                Object undertowHttpBinding) {
            setProperty("undertowHttpBinding", undertowHttpBinding);
            return this;
        }
        /**
         * To use a custom UndertowHttpBinding to control the mapping between
         * Camel message and undertow.
         * The option will be converted to a
         * <code>org.apache.camel.component.undertow.UndertowHttpBinding</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointProducerBuilder undertowHttpBinding(
                String undertowHttpBinding) {
            setProperty("undertowHttpBinding", undertowHttpBinding);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Undertow component.
     */
    public interface UndertowEndpointBuilder
            extends
                UndertowEndpointConsumerBuilder, UndertowEndpointProducerBuilder {
        default AdvancedUndertowEndpointBuilder advanced() {
            return (AdvancedUndertowEndpointBuilder) this;
        }
        /**
         * The url of the HTTP endpoint to use.
         * The option is a <code>java.net.URI</code> type.
         * @group common
         */
        default UndertowEndpointBuilder httpURI(URI httpURI) {
            setProperty("httpURI", httpURI);
            return this;
        }
        /**
         * The url of the HTTP endpoint to use.
         * The option will be converted to a <code>java.net.URI</code> type.
         * @group common
         */
        default UndertowEndpointBuilder httpURI(String httpURI) {
            setProperty("httpURI", httpURI);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default UndertowEndpointBuilder sslContextParameters(
                Object sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * To configure security using SSLContextParameters.
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        default UndertowEndpointBuilder sslContextParameters(
                String sslContextParameters) {
            setProperty("sslContextParameters", sslContextParameters);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Undertow component.
     */
    public interface AdvancedUndertowEndpointBuilder
            extends
                AdvancedUndertowEndpointConsumerBuilder, AdvancedUndertowEndpointProducerBuilder {
        default UndertowEndpointBuilder basic() {
            return (UndertowEndpointBuilder) this;
        }
        /**
         * Which Undertow AccessLogReciever should be used Will use
         * JBossLoggingAccessLogReceiver if not specifid.
         * The option is a
         * <code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder accessLogReceiver(
                Object accessLogReceiver) {
            setProperty("accessLogReceiver", accessLogReceiver);
            return this;
        }
        /**
         * Which Undertow AccessLogReciever should be used Will use
         * JBossLoggingAccessLogReceiver if not specifid.
         * The option will be converted to a
         * <code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder accessLogReceiver(
                String accessLogReceiver) {
            setProperty("accessLogReceiver", accessLogReceiver);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message.
         * The option is a
         * <code>org.apache.camel.spi.HeaderFilterStrategy</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder headerFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            setProperty("headerFilterStrategy", headerFilterStrategy);
            return this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message.
         * The option will be converted to a
         * <code>org.apache.camel.spi.HeaderFilterStrategy</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder headerFilterStrategy(
                String headerFilterStrategy) {
            setProperty("headerFilterStrategy", headerFilterStrategy);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder synchronous(boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder synchronous(String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * To use a custom UndertowHttpBinding to control the mapping between
         * Camel message and undertow.
         * The option is a
         * <code>org.apache.camel.component.undertow.UndertowHttpBinding</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder undertowHttpBinding(
                Object undertowHttpBinding) {
            setProperty("undertowHttpBinding", undertowHttpBinding);
            return this;
        }
        /**
         * To use a custom UndertowHttpBinding to control the mapping between
         * Camel message and undertow.
         * The option will be converted to a
         * <code>org.apache.camel.component.undertow.UndertowHttpBinding</code>
         * type.
         * @group advanced
         */
        default AdvancedUndertowEndpointBuilder undertowHttpBinding(
                String undertowHttpBinding) {
            setProperty("undertowHttpBinding", undertowHttpBinding);
            return this;
        }
    }
    /**
     * The undertow component provides HTTP and WebSocket based endpoints for
     * consuming and producing HTTP/WebSocket requests.
     * Maven coordinates: org.apache.camel:camel-undertow
     */
    default UndertowEndpointBuilder undertow(String path) {
        class UndertowEndpointBuilderImpl extends AbstractEndpointBuilder implements UndertowEndpointBuilder, AdvancedUndertowEndpointBuilder {
            public UndertowEndpointBuilderImpl(String path) {
                super("undertow", path);
            }
        }
        return new UndertowEndpointBuilderImpl(path);
    }
}