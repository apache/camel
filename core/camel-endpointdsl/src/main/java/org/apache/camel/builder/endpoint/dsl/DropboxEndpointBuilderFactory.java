/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * For uploading, downloading and managing files, folders, groups,
 * collaborations, etc on dropbox DOT com.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface DropboxEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Dropbox component.
     */
    public interface DropboxEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        public default AdvancedDropboxEndpointConsumerBuilder advanced() {
            return (AdvancedDropboxEndpointConsumerBuilder) this;
        }
        /**
         * The specific action (typically is a CRUD action) to perform on
         * Dropbox remote folder.
         * The option is a
         * <code>org.apache.camel.component.dropbox.util.DropboxOperation</code>
         * type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder operation(
                DropboxOperation operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * The specific action (typically is a CRUD action) to perform on
         * Dropbox remote folder.
         * The option will be converted to a
         * <code>org.apache.camel.component.dropbox.util.DropboxOperation</code>
         * type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder operation(String operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * The access token to make API requests for a specific Dropbox user.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder accessToken(
                String accessToken) {
            setProperty("accessToken", accessToken);
            return this;
        }
        /**
         * To use an existing DbxClient instance as DropBox client.
         * The option is a <code>com.dropbox.core.v2.DbxClientV2</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder client(Object client) {
            setProperty("client", client);
            return this;
        }
        /**
         * To use an existing DbxClient instance as DropBox client.
         * The option will be converted to a
         * <code>com.dropbox.core.v2.DbxClientV2</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder client(String client) {
            setProperty("client", client);
            return this;
        }
        /**
         * Name of the app registered to make API requests.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder clientIdentifier(
                String clientIdentifier) {
            setProperty("clientIdentifier", clientIdentifier);
            return this;
        }
        /**
         * Optional folder or file to upload on Dropbox from the local
         * filesystem. If this option has not been configured then the message
         * body is used as the content to upload.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder localPath(String localPath) {
            setProperty("localPath", localPath);
            return this;
        }
        /**
         * Destination file or folder.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder newRemotePath(
                String newRemotePath) {
            setProperty("newRemotePath", newRemotePath);
            return this;
        }
        /**
         * A space-separated list of sub-strings to search for. A file matches
         * only if it contains all the sub-strings. If this option is not set,
         * all files will be matched.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder query(String query) {
            setProperty("query", query);
            return this;
        }
        /**
         * Original file or folder to move.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder remotePath(
                String remotePath) {
            setProperty("remotePath", remotePath);
            return this;
        }
        /**
         * Which mode to upload. in case of add the new file will be renamed if
         * a file with the same name already exists on dropbox. in case of force
         * if a file with the same name already exists on dropbox, this will be
         * overwritten.
         * The option is a
         * <code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder uploadMode(
                DropboxUploadMode uploadMode) {
            setProperty("uploadMode", uploadMode);
            return this;
        }
        /**
         * Which mode to upload. in case of add the new file will be renamed if
         * a file with the same name already exists on dropbox. in case of force
         * if a file with the same name already exists on dropbox, this will be
         * overwritten.
         * The option will be converted to a
         * <code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.
         * @group common
         */
        public default DropboxEndpointConsumerBuilder uploadMode(
                String uploadMode) {
            setProperty("uploadMode", uploadMode);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public default DropboxEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public default DropboxEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Dropbox component.
     */
    public interface AdvancedDropboxEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        public default DropboxEndpointConsumerBuilder basic() {
            return (DropboxEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        public default AdvancedDropboxEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        public default AdvancedDropboxEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public default AdvancedDropboxEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public default AdvancedDropboxEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Dropbox component.
     */
    public static interface DropboxEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        public default AdvancedDropboxEndpointProducerBuilder advanced() {
            return (AdvancedDropboxEndpointProducerBuilder) this;
        }
        /**
         * The specific action (typically is a CRUD action) to perform on
         * Dropbox remote folder.
         * The option is a
         * <code>org.apache.camel.component.dropbox.util.DropboxOperation</code>
         * type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder operation(
                DropboxOperation operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * The specific action (typically is a CRUD action) to perform on
         * Dropbox remote folder.
         * The option will be converted to a
         * <code>org.apache.camel.component.dropbox.util.DropboxOperation</code>
         * type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder operation(String operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * The access token to make API requests for a specific Dropbox user.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder accessToken(
                String accessToken) {
            setProperty("accessToken", accessToken);
            return this;
        }
        /**
         * To use an existing DbxClient instance as DropBox client.
         * The option is a <code>com.dropbox.core.v2.DbxClientV2</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder client(Object client) {
            setProperty("client", client);
            return this;
        }
        /**
         * To use an existing DbxClient instance as DropBox client.
         * The option will be converted to a
         * <code>com.dropbox.core.v2.DbxClientV2</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder client(String client) {
            setProperty("client", client);
            return this;
        }
        /**
         * Name of the app registered to make API requests.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder clientIdentifier(
                String clientIdentifier) {
            setProperty("clientIdentifier", clientIdentifier);
            return this;
        }
        /**
         * Optional folder or file to upload on Dropbox from the local
         * filesystem. If this option has not been configured then the message
         * body is used as the content to upload.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder localPath(String localPath) {
            setProperty("localPath", localPath);
            return this;
        }
        /**
         * Destination file or folder.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder newRemotePath(
                String newRemotePath) {
            setProperty("newRemotePath", newRemotePath);
            return this;
        }
        /**
         * A space-separated list of sub-strings to search for. A file matches
         * only if it contains all the sub-strings. If this option is not set,
         * all files will be matched.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder query(String query) {
            setProperty("query", query);
            return this;
        }
        /**
         * Original file or folder to move.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder remotePath(
                String remotePath) {
            setProperty("remotePath", remotePath);
            return this;
        }
        /**
         * Which mode to upload. in case of add the new file will be renamed if
         * a file with the same name already exists on dropbox. in case of force
         * if a file with the same name already exists on dropbox, this will be
         * overwritten.
         * The option is a
         * <code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder uploadMode(
                DropboxUploadMode uploadMode) {
            setProperty("uploadMode", uploadMode);
            return this;
        }
        /**
         * Which mode to upload. in case of add the new file will be renamed if
         * a file with the same name already exists on dropbox. in case of force
         * if a file with the same name already exists on dropbox, this will be
         * overwritten.
         * The option will be converted to a
         * <code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.
         * @group common
         */
        public default DropboxEndpointProducerBuilder uploadMode(
                String uploadMode) {
            setProperty("uploadMode", uploadMode);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public default DropboxEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public default DropboxEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Dropbox component.
     */
    public interface AdvancedDropboxEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        public default DropboxEndpointProducerBuilder basic() {
            return (DropboxEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Dropbox component.
     */
    public static interface DropboxEndpointBuilder
            extends
                DropboxEndpointConsumerBuilder, DropboxEndpointProducerBuilder {
        public default AdvancedDropboxEndpointBuilder advanced() {
            return (AdvancedDropboxEndpointBuilder) this;
        }
        /**
         * The specific action (typically is a CRUD action) to perform on
         * Dropbox remote folder.
         * The option is a
         * <code>org.apache.camel.component.dropbox.util.DropboxOperation</code>
         * type.
         * @group common
         */
        public default DropboxEndpointBuilder operation(
                DropboxOperation operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * The specific action (typically is a CRUD action) to perform on
         * Dropbox remote folder.
         * The option will be converted to a
         * <code>org.apache.camel.component.dropbox.util.DropboxOperation</code>
         * type.
         * @group common
         */
        public default DropboxEndpointBuilder operation(String operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * The access token to make API requests for a specific Dropbox user.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder accessToken(String accessToken) {
            setProperty("accessToken", accessToken);
            return this;
        }
        /**
         * To use an existing DbxClient instance as DropBox client.
         * The option is a <code>com.dropbox.core.v2.DbxClientV2</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder client(Object client) {
            setProperty("client", client);
            return this;
        }
        /**
         * To use an existing DbxClient instance as DropBox client.
         * The option will be converted to a
         * <code>com.dropbox.core.v2.DbxClientV2</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder client(String client) {
            setProperty("client", client);
            return this;
        }
        /**
         * Name of the app registered to make API requests.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder clientIdentifier(
                String clientIdentifier) {
            setProperty("clientIdentifier", clientIdentifier);
            return this;
        }
        /**
         * Optional folder or file to upload on Dropbox from the local
         * filesystem. If this option has not been configured then the message
         * body is used as the content to upload.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder localPath(String localPath) {
            setProperty("localPath", localPath);
            return this;
        }
        /**
         * Destination file or folder.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder newRemotePath(String newRemotePath) {
            setProperty("newRemotePath", newRemotePath);
            return this;
        }
        /**
         * A space-separated list of sub-strings to search for. A file matches
         * only if it contains all the sub-strings. If this option is not set,
         * all files will be matched.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder query(String query) {
            setProperty("query", query);
            return this;
        }
        /**
         * Original file or folder to move.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder remotePath(String remotePath) {
            setProperty("remotePath", remotePath);
            return this;
        }
        /**
         * Which mode to upload. in case of add the new file will be renamed if
         * a file with the same name already exists on dropbox. in case of force
         * if a file with the same name already exists on dropbox, this will be
         * overwritten.
         * The option is a
         * <code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder uploadMode(
                DropboxUploadMode uploadMode) {
            setProperty("uploadMode", uploadMode);
            return this;
        }
        /**
         * Which mode to upload. in case of add the new file will be renamed if
         * a file with the same name already exists on dropbox. in case of force
         * if a file with the same name already exists on dropbox, this will be
         * overwritten.
         * The option will be converted to a
         * <code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.
         * @group common
         */
        public default DropboxEndpointBuilder uploadMode(String uploadMode) {
            setProperty("uploadMode", uploadMode);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Dropbox component.
     */
    public static interface AdvancedDropboxEndpointBuilder
            extends
                AdvancedDropboxEndpointConsumerBuilder, AdvancedDropboxEndpointProducerBuilder {
        public default DropboxEndpointBuilder basic() {
            return (DropboxEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public default AdvancedDropboxEndpointBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.dropbox.util.DropboxOperation</code>
     * enum.
     */
    public static enum DropboxOperation {
        put, del, search, get, move;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code>
     * enum.
     */
    public static enum DropboxUploadMode {
        add, force;
    }
    /**
     * For uploading, downloading and managing files, folders, groups,
     * collaborations, etc on dropbox DOT com. Creates a builder to build
     * endpoints for the Dropbox component.
     */
    public default DropboxEndpointBuilder dropbox(String path) {
        class DropboxEndpointBuilderImpl extends AbstractEndpointBuilder implements DropboxEndpointBuilder, AdvancedDropboxEndpointBuilder {
            public DropboxEndpointBuilderImpl(String path) {
                super("dropbox", path);
            }
        }
        return new DropboxEndpointBuilderImpl(path);
    }
}