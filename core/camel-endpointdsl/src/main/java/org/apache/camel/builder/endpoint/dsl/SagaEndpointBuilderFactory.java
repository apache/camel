/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import javax.annotation.Generated;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;

/**
 * The saga component provides access to advanced options for managing the flow
 * in the Saga EIP.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SagaEndpointBuilderFactory {


    /**
     * Builder for endpoint for the Saga component.
     */
    public interface SagaEndpointBuilder extends EndpointProducerBuilder {
        default AdvancedSagaEndpointBuilder advanced() {
            return (AdvancedSagaEndpointBuilder) this;
        }
        /**
         * Action to execute (complete or compensate).
         * The option is a
         * <code>org.apache.camel.component.saga.SagaEndpoint$SagaEndpointAction</code> type.
         * @group producer
         */
        default SagaEndpointBuilder action(SagaEndpointAction action) {
            setProperty("action", action);
            return this;
        }
        /**
         * Action to execute (complete or compensate).
         * The option will be converted to a
         * <code>org.apache.camel.component.saga.SagaEndpoint$SagaEndpointAction</code> type.
         * @group producer
         */
        default SagaEndpointBuilder action(String action) {
            setProperty("action", action);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Saga component.
     */
    public interface AdvancedSagaEndpointBuilder
            extends
                EndpointProducerBuilder {
        default SagaEndpointBuilder basic() {
            return (SagaEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSagaEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSagaEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSagaEndpointBuilder synchronous(boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedSagaEndpointBuilder synchronous(String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.saga.SagaEndpoint$SagaEndpointAction</code> enum.
     */
    enum SagaEndpointAction {
        COMPLETE,
        COMPENSATE;
    }
    /**
     * The saga component provides access to advanced options for managing the
     * flow in the Saga EIP.
     * Maven coordinates: org.apache.camel:camel-saga
     */
    default SagaEndpointBuilder saga(String path) {
        class SagaEndpointBuilderImpl extends AbstractEndpointBuilder implements SagaEndpointBuilder, AdvancedSagaEndpointBuilder {
            public SagaEndpointBuilderImpl(String path) {
                super("saga", path);
            }
        }
        return new SagaEndpointBuilderImpl(path);
    }
}