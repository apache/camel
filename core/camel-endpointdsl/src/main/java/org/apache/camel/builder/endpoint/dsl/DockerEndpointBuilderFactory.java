/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The docker component is used for managing Docker containers.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface DockerEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Docker component.
     */
    public interface DockerEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedDockerEndpointConsumerBuilder advanced() {
            return (AdvancedDockerEndpointConsumerBuilder) this;
        }
        /**
         * Which operation to use.
         * The option is a
         * <code>org.apache.camel.component.docker.DockerOperation</code> type.
         * @group common
         */
        default DockerEndpointConsumerBuilder operation(
                DockerOperation operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * Which operation to use.
         * The option will be converted to a
         * <code>org.apache.camel.component.docker.DockerOperation</code> type.
         * @group common
         */
        default DockerEndpointConsumerBuilder operation(String operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * Email address associated with the user.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default DockerEndpointConsumerBuilder email(String email) {
            setProperty("email", email);
            return this;
        }
        /**
         * Docker host.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default DockerEndpointConsumerBuilder host(String host) {
            setProperty("host", host);
            return this;
        }
        /**
         * Docker port.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default DockerEndpointConsumerBuilder port(Integer port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Docker port.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default DockerEndpointConsumerBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Request timeout for response (in seconds).
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default DockerEndpointConsumerBuilder requestTimeout(
                Integer requestTimeout) {
            setProperty("requestTimeout", requestTimeout);
            return this;
        }
        /**
         * Request timeout for response (in seconds).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default DockerEndpointConsumerBuilder requestTimeout(
                String requestTimeout) {
            setProperty("requestTimeout", requestTimeout);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default DockerEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default DockerEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Location containing the SSL certificate chain.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointConsumerBuilder certPath(String certPath) {
            setProperty("certPath", certPath);
            return this;
        }
        /**
         * Password to authenticate with.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointConsumerBuilder password(String password) {
            setProperty("password", password);
            return this;
        }
        /**
         * Use HTTPS communication.
         * The option is a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointConsumerBuilder secure(boolean secure) {
            setProperty("secure", secure);
            return this;
        }
        /**
         * Use HTTPS communication.
         * The option will be converted to a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointConsumerBuilder secure(String secure) {
            setProperty("secure", secure);
            return this;
        }
        /**
         * Check TLS.
         * The option is a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointConsumerBuilder tlsVerify(boolean tlsVerify) {
            setProperty("tlsVerify", tlsVerify);
            return this;
        }
        /**
         * Check TLS.
         * The option will be converted to a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointConsumerBuilder tlsVerify(String tlsVerify) {
            setProperty("tlsVerify", tlsVerify);
            return this;
        }
        /**
         * User name to authenticate with.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointConsumerBuilder username(String username) {
            setProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Docker component.
     */
    public interface AdvancedDockerEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default DockerEndpointConsumerBuilder basic() {
            return (DockerEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        default AdvancedDockerEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        default AdvancedDockerEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedDockerEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedDockerEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * The fully qualified class name of the DockerCmdExecFactory
         * implementation to use.
         * The option is a <code>java.lang.String</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder cmdExecFactory(
                String cmdExecFactory) {
            setProperty("cmdExecFactory", cmdExecFactory);
            return this;
        }
        /**
         * Whether to follow redirect filter.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder followRedirectFilter(
                boolean followRedirectFilter) {
            setProperty("followRedirectFilter", followRedirectFilter);
            return this;
        }
        /**
         * Whether to follow redirect filter.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder followRedirectFilter(
                String followRedirectFilter) {
            setProperty("followRedirectFilter", followRedirectFilter);
            return this;
        }
        /**
         * Whether to use logging filter.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder loggingFilter(
                boolean loggingFilter) {
            setProperty("loggingFilter", loggingFilter);
            return this;
        }
        /**
         * Whether to use logging filter.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder loggingFilter(
                String loggingFilter) {
            setProperty("loggingFilter", loggingFilter);
            return this;
        }
        /**
         * Maximum route connections.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder maxPerRouteConnections(
                Integer maxPerRouteConnections) {
            setProperty("maxPerRouteConnections", maxPerRouteConnections);
            return this;
        }
        /**
         * Maximum route connections.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder maxPerRouteConnections(
                String maxPerRouteConnections) {
            setProperty("maxPerRouteConnections", maxPerRouteConnections);
            return this;
        }
        /**
         * Maximum total connections.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder maxTotalConnections(
                Integer maxTotalConnections) {
            setProperty("maxTotalConnections", maxTotalConnections);
            return this;
        }
        /**
         * Maximum total connections.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder maxTotalConnections(
                String maxTotalConnections) {
            setProperty("maxTotalConnections", maxTotalConnections);
            return this;
        }
        /**
         * Server address for docker registry.
         * The option is a <code>java.lang.String</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder serverAddress(
                String serverAddress) {
            setProperty("serverAddress", serverAddress);
            return this;
        }
        /**
         * Socket connection mode.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder socket(boolean socket) {
            setProperty("socket", socket);
            return this;
        }
        /**
         * Socket connection mode.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder socket(String socket) {
            setProperty("socket", socket);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Docker component.
     */
    public interface DockerEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedDockerEndpointProducerBuilder advanced() {
            return (AdvancedDockerEndpointProducerBuilder) this;
        }
        /**
         * Which operation to use.
         * The option is a
         * <code>org.apache.camel.component.docker.DockerOperation</code> type.
         * @group common
         */
        default DockerEndpointProducerBuilder operation(
                DockerOperation operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * Which operation to use.
         * The option will be converted to a
         * <code>org.apache.camel.component.docker.DockerOperation</code> type.
         * @group common
         */
        default DockerEndpointProducerBuilder operation(String operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * Email address associated with the user.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default DockerEndpointProducerBuilder email(String email) {
            setProperty("email", email);
            return this;
        }
        /**
         * Docker host.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default DockerEndpointProducerBuilder host(String host) {
            setProperty("host", host);
            return this;
        }
        /**
         * Docker port.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default DockerEndpointProducerBuilder port(Integer port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Docker port.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default DockerEndpointProducerBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Request timeout for response (in seconds).
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default DockerEndpointProducerBuilder requestTimeout(
                Integer requestTimeout) {
            setProperty("requestTimeout", requestTimeout);
            return this;
        }
        /**
         * Request timeout for response (in seconds).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default DockerEndpointProducerBuilder requestTimeout(
                String requestTimeout) {
            setProperty("requestTimeout", requestTimeout);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default DockerEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default DockerEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Location containing the SSL certificate chain.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointProducerBuilder certPath(String certPath) {
            setProperty("certPath", certPath);
            return this;
        }
        /**
         * Password to authenticate with.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointProducerBuilder password(String password) {
            setProperty("password", password);
            return this;
        }
        /**
         * Use HTTPS communication.
         * The option is a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointProducerBuilder secure(boolean secure) {
            setProperty("secure", secure);
            return this;
        }
        /**
         * Use HTTPS communication.
         * The option will be converted to a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointProducerBuilder secure(String secure) {
            setProperty("secure", secure);
            return this;
        }
        /**
         * Check TLS.
         * The option is a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointProducerBuilder tlsVerify(boolean tlsVerify) {
            setProperty("tlsVerify", tlsVerify);
            return this;
        }
        /**
         * Check TLS.
         * The option will be converted to a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointProducerBuilder tlsVerify(String tlsVerify) {
            setProperty("tlsVerify", tlsVerify);
            return this;
        }
        /**
         * User name to authenticate with.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointProducerBuilder username(String username) {
            setProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Docker component.
     */
    public interface AdvancedDockerEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default DockerEndpointProducerBuilder basic() {
            return (DockerEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * The fully qualified class name of the DockerCmdExecFactory
         * implementation to use.
         * The option is a <code>java.lang.String</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder cmdExecFactory(
                String cmdExecFactory) {
            setProperty("cmdExecFactory", cmdExecFactory);
            return this;
        }
        /**
         * Whether to follow redirect filter.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder followRedirectFilter(
                boolean followRedirectFilter) {
            setProperty("followRedirectFilter", followRedirectFilter);
            return this;
        }
        /**
         * Whether to follow redirect filter.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder followRedirectFilter(
                String followRedirectFilter) {
            setProperty("followRedirectFilter", followRedirectFilter);
            return this;
        }
        /**
         * Whether to use logging filter.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder loggingFilter(
                boolean loggingFilter) {
            setProperty("loggingFilter", loggingFilter);
            return this;
        }
        /**
         * Whether to use logging filter.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder loggingFilter(
                String loggingFilter) {
            setProperty("loggingFilter", loggingFilter);
            return this;
        }
        /**
         * Maximum route connections.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder maxPerRouteConnections(
                Integer maxPerRouteConnections) {
            setProperty("maxPerRouteConnections", maxPerRouteConnections);
            return this;
        }
        /**
         * Maximum route connections.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder maxPerRouteConnections(
                String maxPerRouteConnections) {
            setProperty("maxPerRouteConnections", maxPerRouteConnections);
            return this;
        }
        /**
         * Maximum total connections.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder maxTotalConnections(
                Integer maxTotalConnections) {
            setProperty("maxTotalConnections", maxTotalConnections);
            return this;
        }
        /**
         * Maximum total connections.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder maxTotalConnections(
                String maxTotalConnections) {
            setProperty("maxTotalConnections", maxTotalConnections);
            return this;
        }
        /**
         * Server address for docker registry.
         * The option is a <code>java.lang.String</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder serverAddress(
                String serverAddress) {
            setProperty("serverAddress", serverAddress);
            return this;
        }
        /**
         * Socket connection mode.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder socket(boolean socket) {
            setProperty("socket", socket);
            return this;
        }
        /**
         * Socket connection mode.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder socket(String socket) {
            setProperty("socket", socket);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Docker component.
     */
    public interface DockerEndpointBuilder
            extends
                DockerEndpointConsumerBuilder, DockerEndpointProducerBuilder {
        default AdvancedDockerEndpointBuilder advanced() {
            return (AdvancedDockerEndpointBuilder) this;
        }
        /**
         * Which operation to use.
         * The option is a
         * <code>org.apache.camel.component.docker.DockerOperation</code> type.
         * @group common
         */
        default DockerEndpointBuilder operation(DockerOperation operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * Which operation to use.
         * The option will be converted to a
         * <code>org.apache.camel.component.docker.DockerOperation</code> type.
         * @group common
         */
        default DockerEndpointBuilder operation(String operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * Email address associated with the user.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default DockerEndpointBuilder email(String email) {
            setProperty("email", email);
            return this;
        }
        /**
         * Docker host.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default DockerEndpointBuilder host(String host) {
            setProperty("host", host);
            return this;
        }
        /**
         * Docker port.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default DockerEndpointBuilder port(Integer port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Docker port.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default DockerEndpointBuilder port(String port) {
            setProperty("port", port);
            return this;
        }
        /**
         * Request timeout for response (in seconds).
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default DockerEndpointBuilder requestTimeout(Integer requestTimeout) {
            setProperty("requestTimeout", requestTimeout);
            return this;
        }
        /**
         * Request timeout for response (in seconds).
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default DockerEndpointBuilder requestTimeout(String requestTimeout) {
            setProperty("requestTimeout", requestTimeout);
            return this;
        }
        /**
         * Location containing the SSL certificate chain.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointBuilder certPath(String certPath) {
            setProperty("certPath", certPath);
            return this;
        }
        /**
         * Password to authenticate with.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointBuilder password(String password) {
            setProperty("password", password);
            return this;
        }
        /**
         * Use HTTPS communication.
         * The option is a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointBuilder secure(boolean secure) {
            setProperty("secure", secure);
            return this;
        }
        /**
         * Use HTTPS communication.
         * The option will be converted to a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointBuilder secure(String secure) {
            setProperty("secure", secure);
            return this;
        }
        /**
         * Check TLS.
         * The option is a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointBuilder tlsVerify(boolean tlsVerify) {
            setProperty("tlsVerify", tlsVerify);
            return this;
        }
        /**
         * Check TLS.
         * The option will be converted to a <code>boolean</code> type.
         * @group security
         */
        default DockerEndpointBuilder tlsVerify(String tlsVerify) {
            setProperty("tlsVerify", tlsVerify);
            return this;
        }
        /**
         * User name to authenticate with.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default DockerEndpointBuilder username(String username) {
            setProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Docker component.
     */
    public interface AdvancedDockerEndpointBuilder
            extends
                AdvancedDockerEndpointConsumerBuilder, AdvancedDockerEndpointProducerBuilder {
        default DockerEndpointBuilder basic() {
            return (DockerEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * The fully qualified class name of the DockerCmdExecFactory
         * implementation to use.
         * The option is a <code>java.lang.String</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder cmdExecFactory(
                String cmdExecFactory) {
            setProperty("cmdExecFactory", cmdExecFactory);
            return this;
        }
        /**
         * Whether to follow redirect filter.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder followRedirectFilter(
                boolean followRedirectFilter) {
            setProperty("followRedirectFilter", followRedirectFilter);
            return this;
        }
        /**
         * Whether to follow redirect filter.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder followRedirectFilter(
                String followRedirectFilter) {
            setProperty("followRedirectFilter", followRedirectFilter);
            return this;
        }
        /**
         * Whether to use logging filter.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder loggingFilter(
                boolean loggingFilter) {
            setProperty("loggingFilter", loggingFilter);
            return this;
        }
        /**
         * Whether to use logging filter.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder loggingFilter(String loggingFilter) {
            setProperty("loggingFilter", loggingFilter);
            return this;
        }
        /**
         * Maximum route connections.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder maxPerRouteConnections(
                Integer maxPerRouteConnections) {
            setProperty("maxPerRouteConnections", maxPerRouteConnections);
            return this;
        }
        /**
         * Maximum route connections.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder maxPerRouteConnections(
                String maxPerRouteConnections) {
            setProperty("maxPerRouteConnections", maxPerRouteConnections);
            return this;
        }
        /**
         * Maximum total connections.
         * The option is a <code>java.lang.Integer</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder maxTotalConnections(
                Integer maxTotalConnections) {
            setProperty("maxTotalConnections", maxTotalConnections);
            return this;
        }
        /**
         * Maximum total connections.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder maxTotalConnections(
                String maxTotalConnections) {
            setProperty("maxTotalConnections", maxTotalConnections);
            return this;
        }
        /**
         * Server address for docker registry.
         * The option is a <code>java.lang.String</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder serverAddress(String serverAddress) {
            setProperty("serverAddress", serverAddress);
            return this;
        }
        /**
         * Socket connection mode.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder socket(boolean socket) {
            setProperty("socket", socket);
            return this;
        }
        /**
         * Socket connection mode.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder socket(String socket) {
            setProperty("socket", socket);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder synchronous(boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedDockerEndpointBuilder synchronous(String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.docker.DockerOperation</code> enum.
     */
    enum DockerOperation {
        events,
        stats,
        auth,
        info,
        ping,
        version,
        imagebuild,
        imagecreate,
        imageinspect,
        imagelist,
        imagepull,
        imagepush,
        imageremove,
        imagesearch,
        imagetag,
        containerattach,
        containercommit,
        containercopyfile,
        containercreate,
        containerdiff,
        inspectcontainer,
        containerkill,
        containerlist,
        containerlog,
        containerpause,
        containerrestart,
        containerremove,
        containerstart,
        containerstop,
        containertop,
        containerunpause,
        networkcreate,
        networkremove,
        networkconnect,
        containerwait,
        execcreate,
        execstart;
    }
    /**
     * The docker component is used for managing Docker containers.
     * Maven coordinates: org.apache.camel:camel-docker
     */
    default DockerEndpointBuilder docker(String path) {
        class DockerEndpointBuilderImpl extends AbstractEndpointBuilder implements DockerEndpointBuilder, AdvancedDockerEndpointBuilder {
            public DockerEndpointBuilderImpl(String path) {
                super("docker", path);
            }
        }
        return new DockerEndpointBuilderImpl(path);
    }
}