/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.net.URL;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The jbpm component provides integration with jBPM (Business Process
 * Management).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface JBPMEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the JBPM component.
     */
    public interface JBPMEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedJBPMEndpointConsumerBuilder advanced() {
            return (AdvancedJBPMEndpointConsumerBuilder) this;
        }
        /**
         * The URL to the jBPM server.
         * The option is a <code>java.net.URL</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder connectionURL(URL connectionURL) {
            setProperty("connectionURL", connectionURL);
            return this;
        }
        /**
         * The URL to the jBPM server.
         * The option will be converted to a <code>java.net.URL</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder connectionURL(String connectionURL) {
            setProperty("connectionURL", connectionURL);
            return this;
        }
        /**
         * Sets the event listener type to attach to.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder eventListenerType(
                String eventListenerType) {
            setProperty("eventListenerType", eventListenerType);
            return this;
        }
        /**
         * attachId to use when retrieving attachments.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder attachmentId(Long attachmentId) {
            setProperty("attachmentId", attachmentId);
            return this;
        }
        /**
         * attachId to use when retrieving attachments.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder attachmentId(String attachmentId) {
            setProperty("attachmentId", attachmentId);
            return this;
        }
        /**
         * contentId to use when retrieving attachments.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder contentId(Long contentId) {
            setProperty("contentId", contentId);
            return this;
        }
        /**
         * contentId to use when retrieving attachments.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder contentId(String contentId) {
            setProperty("contentId", contentId);
            return this;
        }
        /**
         * The id of the deployment.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder deploymentId(String deploymentId) {
            setProperty("deploymentId", deploymentId);
            return this;
        }
        /**
         * Sets if event produced by emitter should be sent as single items or
         * complete collection.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder emitterSendItems(
                Boolean emitterSendItems) {
            setProperty("emitterSendItems", emitterSendItems);
            return this;
        }
        /**
         * Sets if event produced by emitter should be sent as single items or
         * complete collection.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder emitterSendItems(
                String emitterSendItems) {
            setProperty("emitterSendItems", emitterSendItems);
            return this;
        }
        /**
         * the data associated with this event when signalEvent operation is
         * performed.
         * The option is a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder event(Object event) {
            setProperty("event", event);
            return this;
        }
        /**
         * the data associated with this event when signalEvent operation is
         * performed.
         * The option will be converted to a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder event(String event) {
            setProperty("event", event);
            return this;
        }
        /**
         * the type of event to use when signalEvent operation is performed.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder eventType(String eventType) {
            setProperty("eventType", eventType);
            return this;
        }
        /**
         * identifier the global identifier.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder identifier(String identifier) {
            setProperty("identifier", identifier);
            return this;
        }
        /**
         * the maximum number of rules that should be fired.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder maxNumber(Integer maxNumber) {
            setProperty("maxNumber", maxNumber);
            return this;
        }
        /**
         * the maximum number of rules that should be fired.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder maxNumber(String maxNumber) {
            setProperty("maxNumber", maxNumber);
            return this;
        }
        /**
         * The page to use when retrieving user tasks.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder page(Integer page) {
            setProperty("page", page);
            return this;
        }
        /**
         * The page to use when retrieving user tasks.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder page(String page) {
            setProperty("page", page);
            return this;
        }
        /**
         * The page size to use when retrieving user tasks.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder pageSize(Integer pageSize) {
            setProperty("pageSize", pageSize);
            return this;
        }
        /**
         * The page size to use when retrieving user tasks.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder pageSize(String pageSize) {
            setProperty("pageSize", pageSize);
            return this;
        }
        /**
         * the id of the process that should be acted upon.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder processId(String processId) {
            setProperty("processId", processId);
            return this;
        }
        /**
         * the id of the process instance.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder processInstanceId(
                Long processInstanceId) {
            setProperty("processInstanceId", processInstanceId);
            return this;
        }
        /**
         * the id of the process instance.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder processInstanceId(
                String processInstanceId) {
            setProperty("processInstanceId", processInstanceId);
            return this;
        }
        /**
         * The targetUserId used when delegating a task.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder targetUserId(String targetUserId) {
            setProperty("targetUserId", targetUserId);
            return this;
        }
        /**
         * The task instance to use with task operations.
         * The option is a <code>org.kie.api.task.model.Task</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder task(Object task) {
            setProperty("task", task);
            return this;
        }
        /**
         * The task instance to use with task operations.
         * The option will be converted to a
         * <code>org.kie.api.task.model.Task</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder task(String task) {
            setProperty("task", task);
            return this;
        }
        /**
         * the id of the task.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder taskId(Long taskId) {
            setProperty("taskId", taskId);
            return this;
        }
        /**
         * the id of the task.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder taskId(String taskId) {
            setProperty("taskId", taskId);
            return this;
        }
        /**
         * A timeout value.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder timeout(Integer timeout) {
            setProperty("timeout", timeout);
            return this;
        }
        /**
         * A timeout value.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder timeout(String timeout) {
            setProperty("timeout", timeout);
            return this;
        }
        /**
         * userId to use with task operations.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder userId(String userId) {
            setProperty("userId", userId);
            return this;
        }
        /**
         * the value to assign to the global identifier.
         * The option is a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder value(Object value) {
            setProperty("value", value);
            return this;
        }
        /**
         * the value to assign to the global identifier.
         * The option will be converted to a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder value(String value) {
            setProperty("value", value);
            return this;
        }
        /**
         * the id of the work item.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder workItemId(Long workItemId) {
            setProperty("workItemId", workItemId);
            return this;
        }
        /**
         * the id of the work item.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointConsumerBuilder workItemId(String workItemId) {
            setProperty("workItemId", workItemId);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        default JBPMEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        default JBPMEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            setProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * The list of status to use when filtering tasks.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group filter
         */
        default JBPMEndpointConsumerBuilder statuses(List<String> statuses) {
            setProperty("statuses", statuses);
            return this;
        }
        /**
         * The list of status to use when filtering tasks.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group filter
         */
        default JBPMEndpointConsumerBuilder statuses(String statuses) {
            setProperty("statuses", statuses);
            return this;
        }
        /**
         * Password for authentication.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default JBPMEndpointConsumerBuilder password(String password) {
            setProperty("password", password);
            return this;
        }
        /**
         * Username for authentication.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default JBPMEndpointConsumerBuilder userName(String userName) {
            setProperty("userName", userName);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the JBPM component.
     */
    public interface AdvancedJBPMEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default JBPMEndpointConsumerBuilder basic() {
            return (JBPMEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        default AdvancedJBPMEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        default AdvancedJBPMEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            setProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedJBPMEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        default AdvancedJBPMEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            setProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * The potentialOwners when nominateTask operation is performed.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder entities(
                List<String> entities) {
            setProperty("entities", entities);
            return this;
        }
        /**
         * The potentialOwners when nominateTask operation is performed.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder entities(String entities) {
            setProperty("entities", entities);
            return this;
        }
        /**
         * To load additional classes when working with XML.
         * The option is a <code>java.lang.Class[]</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder extraJaxbClasses(
                Class[] extraJaxbClasses) {
            setProperty("extraJaxbClasses", extraJaxbClasses);
            return this;
        }
        /**
         * To load additional classes when working with XML.
         * The option will be converted to a <code>java.lang.Class[]</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder extraJaxbClasses(
                String extraJaxbClasses) {
            setProperty("extraJaxbClasses", extraJaxbClasses);
            return this;
        }
        /**
         * the variables that should be set for various operations.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder parameters(
                Map<String, Object> parameters) {
            setProperty("parameters", parameters);
            return this;
        }
        /**
         * the variables that should be set for various operations.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder parameters(String parameters) {
            setProperty("parameters", parameters);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointConsumerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the JBPM component.
     */
    public interface JBPMEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedJBPMEndpointProducerBuilder advanced() {
            return (AdvancedJBPMEndpointProducerBuilder) this;
        }
        /**
         * The URL to the jBPM server.
         * The option is a <code>java.net.URL</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder connectionURL(URL connectionURL) {
            setProperty("connectionURL", connectionURL);
            return this;
        }
        /**
         * The URL to the jBPM server.
         * The option will be converted to a <code>java.net.URL</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder connectionURL(String connectionURL) {
            setProperty("connectionURL", connectionURL);
            return this;
        }
        /**
         * Sets the event listener type to attach to.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder eventListenerType(
                String eventListenerType) {
            setProperty("eventListenerType", eventListenerType);
            return this;
        }
        /**
         * attachId to use when retrieving attachments.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder attachmentId(Long attachmentId) {
            setProperty("attachmentId", attachmentId);
            return this;
        }
        /**
         * attachId to use when retrieving attachments.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder attachmentId(String attachmentId) {
            setProperty("attachmentId", attachmentId);
            return this;
        }
        /**
         * contentId to use when retrieving attachments.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder contentId(Long contentId) {
            setProperty("contentId", contentId);
            return this;
        }
        /**
         * contentId to use when retrieving attachments.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder contentId(String contentId) {
            setProperty("contentId", contentId);
            return this;
        }
        /**
         * The id of the deployment.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder deploymentId(String deploymentId) {
            setProperty("deploymentId", deploymentId);
            return this;
        }
        /**
         * Sets if event produced by emitter should be sent as single items or
         * complete collection.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder emitterSendItems(
                Boolean emitterSendItems) {
            setProperty("emitterSendItems", emitterSendItems);
            return this;
        }
        /**
         * Sets if event produced by emitter should be sent as single items or
         * complete collection.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group common
         */
        default JBPMEndpointProducerBuilder emitterSendItems(
                String emitterSendItems) {
            setProperty("emitterSendItems", emitterSendItems);
            return this;
        }
        /**
         * the data associated with this event when signalEvent operation is
         * performed.
         * The option is a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder event(Object event) {
            setProperty("event", event);
            return this;
        }
        /**
         * the data associated with this event when signalEvent operation is
         * performed.
         * The option will be converted to a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder event(String event) {
            setProperty("event", event);
            return this;
        }
        /**
         * the type of event to use when signalEvent operation is performed.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder eventType(String eventType) {
            setProperty("eventType", eventType);
            return this;
        }
        /**
         * identifier the global identifier.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder identifier(String identifier) {
            setProperty("identifier", identifier);
            return this;
        }
        /**
         * the maximum number of rules that should be fired.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder maxNumber(Integer maxNumber) {
            setProperty("maxNumber", maxNumber);
            return this;
        }
        /**
         * the maximum number of rules that should be fired.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointProducerBuilder maxNumber(String maxNumber) {
            setProperty("maxNumber", maxNumber);
            return this;
        }
        /**
         * The page to use when retrieving user tasks.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder page(Integer page) {
            setProperty("page", page);
            return this;
        }
        /**
         * The page to use when retrieving user tasks.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointProducerBuilder page(String page) {
            setProperty("page", page);
            return this;
        }
        /**
         * The page size to use when retrieving user tasks.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder pageSize(Integer pageSize) {
            setProperty("pageSize", pageSize);
            return this;
        }
        /**
         * The page size to use when retrieving user tasks.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointProducerBuilder pageSize(String pageSize) {
            setProperty("pageSize", pageSize);
            return this;
        }
        /**
         * the id of the process that should be acted upon.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder processId(String processId) {
            setProperty("processId", processId);
            return this;
        }
        /**
         * the id of the process instance.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder processInstanceId(
                Long processInstanceId) {
            setProperty("processInstanceId", processInstanceId);
            return this;
        }
        /**
         * the id of the process instance.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder processInstanceId(
                String processInstanceId) {
            setProperty("processInstanceId", processInstanceId);
            return this;
        }
        /**
         * The targetUserId used when delegating a task.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder targetUserId(String targetUserId) {
            setProperty("targetUserId", targetUserId);
            return this;
        }
        /**
         * The task instance to use with task operations.
         * The option is a <code>org.kie.api.task.model.Task</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder task(Object task) {
            setProperty("task", task);
            return this;
        }
        /**
         * The task instance to use with task operations.
         * The option will be converted to a
         * <code>org.kie.api.task.model.Task</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder task(String task) {
            setProperty("task", task);
            return this;
        }
        /**
         * the id of the task.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder taskId(Long taskId) {
            setProperty("taskId", taskId);
            return this;
        }
        /**
         * the id of the task.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder taskId(String taskId) {
            setProperty("taskId", taskId);
            return this;
        }
        /**
         * A timeout value.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder timeout(Integer timeout) {
            setProperty("timeout", timeout);
            return this;
        }
        /**
         * A timeout value.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointProducerBuilder timeout(String timeout) {
            setProperty("timeout", timeout);
            return this;
        }
        /**
         * userId to use with task operations.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder userId(String userId) {
            setProperty("userId", userId);
            return this;
        }
        /**
         * the value to assign to the global identifier.
         * The option is a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder value(Object value) {
            setProperty("value", value);
            return this;
        }
        /**
         * the value to assign to the global identifier.
         * The option will be converted to a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder value(String value) {
            setProperty("value", value);
            return this;
        }
        /**
         * the id of the work item.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder workItemId(Long workItemId) {
            setProperty("workItemId", workItemId);
            return this;
        }
        /**
         * the id of the work item.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointProducerBuilder workItemId(String workItemId) {
            setProperty("workItemId", workItemId);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        default JBPMEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        default JBPMEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            setProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * The operation to perform.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        default JBPMEndpointProducerBuilder operation(String operation) {
            setProperty("operation", operation);
            return this;
        }
        /**
         * The list of status to use when filtering tasks.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group filter
         */
        default JBPMEndpointProducerBuilder statuses(List<String> statuses) {
            setProperty("statuses", statuses);
            return this;
        }
        /**
         * The list of status to use when filtering tasks.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group filter
         */
        default JBPMEndpointProducerBuilder statuses(String statuses) {
            setProperty("statuses", statuses);
            return this;
        }
        /**
         * Password for authentication.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default JBPMEndpointProducerBuilder password(String password) {
            setProperty("password", password);
            return this;
        }
        /**
         * Username for authentication.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default JBPMEndpointProducerBuilder userName(String userName) {
            setProperty("userName", userName);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the JBPM component.
     */
    public interface AdvancedJBPMEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default JBPMEndpointProducerBuilder basic() {
            return (JBPMEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * The potentialOwners when nominateTask operation is performed.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder entities(
                List<String> entities) {
            setProperty("entities", entities);
            return this;
        }
        /**
         * The potentialOwners when nominateTask operation is performed.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder entities(String entities) {
            setProperty("entities", entities);
            return this;
        }
        /**
         * To load additional classes when working with XML.
         * The option is a <code>java.lang.Class[]</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder extraJaxbClasses(
                Class[] extraJaxbClasses) {
            setProperty("extraJaxbClasses", extraJaxbClasses);
            return this;
        }
        /**
         * To load additional classes when working with XML.
         * The option will be converted to a <code>java.lang.Class[]</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder extraJaxbClasses(
                String extraJaxbClasses) {
            setProperty("extraJaxbClasses", extraJaxbClasses);
            return this;
        }
        /**
         * the variables that should be set for various operations.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder parameters(
                Map<String, Object> parameters) {
            setProperty("parameters", parameters);
            return this;
        }
        /**
         * the variables that should be set for various operations.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder parameters(String parameters) {
            setProperty("parameters", parameters);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder synchronous(
                boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointProducerBuilder synchronous(
                String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the JBPM component.
     */
    public interface JBPMEndpointBuilder
            extends
                JBPMEndpointConsumerBuilder, JBPMEndpointProducerBuilder {
        default AdvancedJBPMEndpointBuilder advanced() {
            return (AdvancedJBPMEndpointBuilder) this;
        }
        /**
         * The URL to the jBPM server.
         * The option is a <code>java.net.URL</code> type.
         * @group common
         */
        default JBPMEndpointBuilder connectionURL(URL connectionURL) {
            setProperty("connectionURL", connectionURL);
            return this;
        }
        /**
         * The URL to the jBPM server.
         * The option will be converted to a <code>java.net.URL</code> type.
         * @group common
         */
        default JBPMEndpointBuilder connectionURL(String connectionURL) {
            setProperty("connectionURL", connectionURL);
            return this;
        }
        /**
         * Sets the event listener type to attach to.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointBuilder eventListenerType(String eventListenerType) {
            setProperty("eventListenerType", eventListenerType);
            return this;
        }
        /**
         * attachId to use when retrieving attachments.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder attachmentId(Long attachmentId) {
            setProperty("attachmentId", attachmentId);
            return this;
        }
        /**
         * attachId to use when retrieving attachments.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder attachmentId(String attachmentId) {
            setProperty("attachmentId", attachmentId);
            return this;
        }
        /**
         * contentId to use when retrieving attachments.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder contentId(Long contentId) {
            setProperty("contentId", contentId);
            return this;
        }
        /**
         * contentId to use when retrieving attachments.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder contentId(String contentId) {
            setProperty("contentId", contentId);
            return this;
        }
        /**
         * The id of the deployment.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointBuilder deploymentId(String deploymentId) {
            setProperty("deploymentId", deploymentId);
            return this;
        }
        /**
         * Sets if event produced by emitter should be sent as single items or
         * complete collection.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group common
         */
        default JBPMEndpointBuilder emitterSendItems(Boolean emitterSendItems) {
            setProperty("emitterSendItems", emitterSendItems);
            return this;
        }
        /**
         * Sets if event produced by emitter should be sent as single items or
         * complete collection.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group common
         */
        default JBPMEndpointBuilder emitterSendItems(String emitterSendItems) {
            setProperty("emitterSendItems", emitterSendItems);
            return this;
        }
        /**
         * the data associated with this event when signalEvent operation is
         * performed.
         * The option is a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointBuilder event(Object event) {
            setProperty("event", event);
            return this;
        }
        /**
         * the data associated with this event when signalEvent operation is
         * performed.
         * The option will be converted to a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointBuilder event(String event) {
            setProperty("event", event);
            return this;
        }
        /**
         * the type of event to use when signalEvent operation is performed.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointBuilder eventType(String eventType) {
            setProperty("eventType", eventType);
            return this;
        }
        /**
         * identifier the global identifier.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointBuilder identifier(String identifier) {
            setProperty("identifier", identifier);
            return this;
        }
        /**
         * the maximum number of rules that should be fired.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointBuilder maxNumber(Integer maxNumber) {
            setProperty("maxNumber", maxNumber);
            return this;
        }
        /**
         * the maximum number of rules that should be fired.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointBuilder maxNumber(String maxNumber) {
            setProperty("maxNumber", maxNumber);
            return this;
        }
        /**
         * The page to use when retrieving user tasks.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointBuilder page(Integer page) {
            setProperty("page", page);
            return this;
        }
        /**
         * The page to use when retrieving user tasks.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointBuilder page(String page) {
            setProperty("page", page);
            return this;
        }
        /**
         * The page size to use when retrieving user tasks.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointBuilder pageSize(Integer pageSize) {
            setProperty("pageSize", pageSize);
            return this;
        }
        /**
         * The page size to use when retrieving user tasks.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointBuilder pageSize(String pageSize) {
            setProperty("pageSize", pageSize);
            return this;
        }
        /**
         * the id of the process that should be acted upon.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointBuilder processId(String processId) {
            setProperty("processId", processId);
            return this;
        }
        /**
         * the id of the process instance.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder processInstanceId(Long processInstanceId) {
            setProperty("processInstanceId", processInstanceId);
            return this;
        }
        /**
         * the id of the process instance.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder processInstanceId(String processInstanceId) {
            setProperty("processInstanceId", processInstanceId);
            return this;
        }
        /**
         * The targetUserId used when delegating a task.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointBuilder targetUserId(String targetUserId) {
            setProperty("targetUserId", targetUserId);
            return this;
        }
        /**
         * The task instance to use with task operations.
         * The option is a <code>org.kie.api.task.model.Task</code> type.
         * @group common
         */
        default JBPMEndpointBuilder task(Object task) {
            setProperty("task", task);
            return this;
        }
        /**
         * The task instance to use with task operations.
         * The option will be converted to a
         * <code>org.kie.api.task.model.Task</code> type.
         * @group common
         */
        default JBPMEndpointBuilder task(String task) {
            setProperty("task", task);
            return this;
        }
        /**
         * the id of the task.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder taskId(Long taskId) {
            setProperty("taskId", taskId);
            return this;
        }
        /**
         * the id of the task.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder taskId(String taskId) {
            setProperty("taskId", taskId);
            return this;
        }
        /**
         * A timeout value.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        default JBPMEndpointBuilder timeout(Integer timeout) {
            setProperty("timeout", timeout);
            return this;
        }
        /**
         * A timeout value.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        default JBPMEndpointBuilder timeout(String timeout) {
            setProperty("timeout", timeout);
            return this;
        }
        /**
         * userId to use with task operations.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default JBPMEndpointBuilder userId(String userId) {
            setProperty("userId", userId);
            return this;
        }
        /**
         * the value to assign to the global identifier.
         * The option is a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointBuilder value(Object value) {
            setProperty("value", value);
            return this;
        }
        /**
         * the value to assign to the global identifier.
         * The option will be converted to a <code>java.lang.Object</code> type.
         * @group common
         */
        default JBPMEndpointBuilder value(String value) {
            setProperty("value", value);
            return this;
        }
        /**
         * the id of the work item.
         * The option is a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder workItemId(Long workItemId) {
            setProperty("workItemId", workItemId);
            return this;
        }
        /**
         * the id of the work item.
         * The option will be converted to a <code>java.lang.Long</code> type.
         * @group common
         */
        default JBPMEndpointBuilder workItemId(String workItemId) {
            setProperty("workItemId", workItemId);
            return this;
        }
        /**
         * The list of status to use when filtering tasks.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group filter
         */
        default JBPMEndpointBuilder statuses(List<String> statuses) {
            setProperty("statuses", statuses);
            return this;
        }
        /**
         * The list of status to use when filtering tasks.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group filter
         */
        default JBPMEndpointBuilder statuses(String statuses) {
            setProperty("statuses", statuses);
            return this;
        }
        /**
         * Password for authentication.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default JBPMEndpointBuilder password(String password) {
            setProperty("password", password);
            return this;
        }
        /**
         * Username for authentication.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        default JBPMEndpointBuilder userName(String userName) {
            setProperty("userName", userName);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the JBPM component.
     */
    public interface AdvancedJBPMEndpointBuilder
            extends
                AdvancedJBPMEndpointConsumerBuilder, AdvancedJBPMEndpointProducerBuilder {
        default JBPMEndpointBuilder basic() {
            return (JBPMEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            setProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * The potentialOwners when nominateTask operation is performed.
         * The option is a <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder entities(List<String> entities) {
            setProperty("entities", entities);
            return this;
        }
        /**
         * The potentialOwners when nominateTask operation is performed.
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder entities(String entities) {
            setProperty("entities", entities);
            return this;
        }
        /**
         * To load additional classes when working with XML.
         * The option is a <code>java.lang.Class[]</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder extraJaxbClasses(
                Class[] extraJaxbClasses) {
            setProperty("extraJaxbClasses", extraJaxbClasses);
            return this;
        }
        /**
         * To load additional classes when working with XML.
         * The option will be converted to a <code>java.lang.Class[]</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder extraJaxbClasses(
                String extraJaxbClasses) {
            setProperty("extraJaxbClasses", extraJaxbClasses);
            return this;
        }
        /**
         * the variables that should be set for various operations.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder parameters(
                Map<String, Object> parameters) {
            setProperty("parameters", parameters);
            return this;
        }
        /**
         * the variables that should be set for various operations.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder parameters(String parameters) {
            setProperty("parameters", parameters);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder synchronous(boolean synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        default AdvancedJBPMEndpointBuilder synchronous(String synchronous) {
            setProperty("synchronous", synchronous);
            return this;
        }
    }
    /**
     * The jbpm component provides integration with jBPM (Business Process
     * Management).
     * Maven coordinates: org.apache.camel:camel-jbpm
     */
    default JBPMEndpointBuilder jBPM(String path) {
        class JBPMEndpointBuilderImpl extends AbstractEndpointBuilder implements JBPMEndpointBuilder, AdvancedJBPMEndpointBuilder {
            public JBPMEndpointBuilderImpl(String path) {
                super("jbpm", path);
            }
        }
        return new JBPMEndpointBuilderImpl(path);
    }
}