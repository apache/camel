/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;

/**
 * Parse fixed width and delimited files using the FlatPack library.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface FlatpackEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Flatpack component.
     */
    public interface FlatpackEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedFlatpackEndpointConsumerBuilder advanced() {
            return (AdvancedFlatpackEndpointConsumerBuilder) this;
        }
        /**
         * Allows for lines to be shorter than expected and ignores the extra
         * characters.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param allowShortLines the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder allowShortLines(
                boolean allowShortLines) {
            doSetProperty("allowShortLines", allowShortLines);
            return this;
        }
        /**
         * Allows for lines to be shorter than expected and ignores the extra
         * characters.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param allowShortLines the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder allowShortLines(
                String allowShortLines) {
            doSetProperty("allowShortLines", allowShortLines);
            return this;
        }
        /**
         * The default character delimiter for delimited files.
         * 
         * The option is a: &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Default: ,
         * Group: common
         * 
         * @param delimiter the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder delimiter(char delimiter) {
            doSetProperty("delimiter", delimiter);
            return this;
        }
        /**
         * The default character delimiter for delimited files.
         * 
         * The option will be converted to a &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Default: ,
         * Group: common
         * 
         * @param delimiter the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder delimiter(String delimiter) {
            doSetProperty("delimiter", delimiter);
            return this;
        }
        /**
         * Allows for lines to be longer than expected and ignores the extra
         * characters.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param ignoreExtraColumns the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder ignoreExtraColumns(
                boolean ignoreExtraColumns) {
            doSetProperty("ignoreExtraColumns", ignoreExtraColumns);
            return this;
        }
        /**
         * Allows for lines to be longer than expected and ignores the extra
         * characters.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param ignoreExtraColumns the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder ignoreExtraColumns(
                String ignoreExtraColumns) {
            doSetProperty("ignoreExtraColumns", ignoreExtraColumns);
            return this;
        }
        /**
         * Whether the first line is ignored for delimited files (for the column
         * headers).
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: common
         * 
         * @param ignoreFirstRecord the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder ignoreFirstRecord(
                boolean ignoreFirstRecord) {
            doSetProperty("ignoreFirstRecord", ignoreFirstRecord);
            return this;
        }
        /**
         * Whether the first line is ignored for delimited files (for the column
         * headers).
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: common
         * 
         * @param ignoreFirstRecord the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder ignoreFirstRecord(
                String ignoreFirstRecord) {
            doSetProperty("ignoreFirstRecord", ignoreFirstRecord);
            return this;
        }
        /**
         * Sets the Component to send each row as a separate exchange once
         * parsed.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: common
         * 
         * @param splitRows the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder splitRows(boolean splitRows) {
            doSetProperty("splitRows", splitRows);
            return this;
        }
        /**
         * Sets the Component to send each row as a separate exchange once
         * parsed.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: common
         * 
         * @param splitRows the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder splitRows(String splitRows) {
            doSetProperty("splitRows", splitRows);
            return this;
        }
        /**
         * The text qualifier for delimited files.
         * 
         * The option is a: &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param textQualifier the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder textQualifier(char textQualifier) {
            doSetProperty("textQualifier", textQualifier);
            return this;
        }
        /**
         * The text qualifier for delimited files.
         * 
         * The option will be converted to a &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param textQualifier the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder textQualifier(
                String textQualifier) {
            doSetProperty("textQualifier", textQualifier);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param sendEmptyMessageWhenIdle the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            doSetProperty("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param sendEmptyMessageWhenIdle the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            doSetProperty("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Group: scheduler
         * 
         * @param backoffErrorThreshold the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            doSetProperty("backoffErrorThreshold", backoffErrorThreshold);
            return this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * 
         * The option will be converted to a &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Group: scheduler
         * 
         * @param backoffErrorThreshold the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            doSetProperty("backoffErrorThreshold", backoffErrorThreshold);
            return this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Group: scheduler
         * 
         * @param backoffIdleThreshold the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder backoffIdleThreshold(
                int backoffIdleThreshold) {
            doSetProperty("backoffIdleThreshold", backoffIdleThreshold);
            return this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * 
         * The option will be converted to a &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Group: scheduler
         * 
         * @param backoffIdleThreshold the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            doSetProperty("backoffIdleThreshold", backoffIdleThreshold);
            return this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * 
         * The option is a: &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Group: scheduler
         * 
         * @param backoffMultiplier the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder backoffMultiplier(
                int backoffMultiplier) {
            doSetProperty("backoffMultiplier", backoffMultiplier);
            return this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * 
         * The option will be converted to a &lt;code&gt;int&lt;/code&gt; type.
         * 
         * Group: scheduler
         * 
         * @param backoffMultiplier the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder backoffMultiplier(
                String backoffMultiplier) {
            doSetProperty("backoffMultiplier", backoffMultiplier);
            return this;
        }
        /**
         * Milliseconds before the next poll.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 500
         * Group: scheduler
         * 
         * @param delay the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder delay(long delay) {
            doSetProperty("delay", delay);
            return this;
        }
        /**
         * Milliseconds before the next poll.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 500
         * Group: scheduler
         * 
         * @param delay the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder delay(String delay) {
            doSetProperty("delay", delay);
            return this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: scheduler
         * 
         * @param greedy the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder greedy(boolean greedy) {
            doSetProperty("greedy", greedy);
            return this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: scheduler
         * 
         * @param greedy the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder greedy(String greedy) {
            doSetProperty("greedy", greedy);
            return this;
        }
        /**
         * Milliseconds before the first poll starts.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 1000
         * Group: scheduler
         * 
         * @param initialDelay the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder initialDelay(long initialDelay) {
            doSetProperty("initialDelay", initialDelay);
            return this;
        }
        /**
         * Milliseconds before the first poll starts.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 1000
         * Group: scheduler
         * 
         * @param initialDelay the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder initialDelay(String initialDelay) {
            doSetProperty("initialDelay", initialDelay);
            return this;
        }
        /**
         * Specifies a maximum limit of number of fires. So if you set it to 1,
         * the scheduler will only fire once. If you set it to 5, it will only
         * fire five times. A value of zero or negative means fire forever.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 0
         * Group: scheduler
         * 
         * @param repeatCount the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder repeatCount(long repeatCount) {
            doSetProperty("repeatCount", repeatCount);
            return this;
        }
        /**
         * Specifies a maximum limit of number of fires. So if you set it to 1,
         * the scheduler will only fire once. If you set it to 5, it will only
         * fire five times. A value of zero or negative means fire forever.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 0
         * Group: scheduler
         * 
         * @param repeatCount the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder repeatCount(String repeatCount) {
            doSetProperty("repeatCount", repeatCount);
            return this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.LoggingLevel&lt;/code&gt; type.
         * 
         * Default: TRACE
         * Group: scheduler
         * 
         * @param runLoggingLevel the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder runLoggingLevel(
                LoggingLevel runLoggingLevel) {
            doSetProperty("runLoggingLevel", runLoggingLevel);
            return this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.LoggingLevel&lt;/code&gt; type.
         * 
         * Default: TRACE
         * Group: scheduler
         * 
         * @param runLoggingLevel the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder runLoggingLevel(
                String runLoggingLevel) {
            doSetProperty("runLoggingLevel", runLoggingLevel);
            return this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * 
         * The option is a:
         * &lt;code&gt;java.util.concurrent.ScheduledExecutorService&lt;/code&gt; type.
         * 
         * Group: scheduler
         * 
         * @param scheduledExecutorService the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            doSetProperty("scheduledExecutorService", scheduledExecutorService);
            return this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.util.concurrent.ScheduledExecutorService&lt;/code&gt; type.
         * 
         * Group: scheduler
         * 
         * @param scheduledExecutorService the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            doSetProperty("scheduledExecutorService", scheduledExecutorService);
            return this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz
         * component. Use value spring or quartz for built in scheduler.
         * 
         * The option is a: &lt;code&gt;java.lang.Object&lt;/code&gt; type.
         * 
         * Default: none
         * Group: scheduler
         * 
         * @param scheduler the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder scheduler(Object scheduler) {
            doSetProperty("scheduler", scheduler);
            return this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz
         * component. Use value spring or quartz for built in scheduler.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.lang.Object&lt;/code&gt; type.
         * 
         * Default: none
         * Group: scheduler
         * 
         * @param scheduler the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder scheduler(String scheduler) {
            doSetProperty("scheduler", scheduler);
            return this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz, Spring based scheduler.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.Object&amp;gt;&lt;/code&gt; type.
         * The option is multivalued, and you can use the
         * schedulerProperties(String, Object) method to add a value (call the
         * method multiple times to set more values).
         * 
         * Group: scheduler
         * 
         * @param key the option key
         * @param value the option value
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder schedulerProperties(
                String key,
                Object value) {
            doSetMultiValueProperty("schedulerProperties", "scheduler." + key, value);
            return this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz, Spring based scheduler.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.Object&amp;gt;&lt;/code&gt; type.
         * The option is multivalued, and you can use the
         * schedulerProperties(String, Object) method to add a value (call the
         * method multiple times to set more values).
         * 
         * Group: scheduler
         * 
         * @param values the values
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder schedulerProperties(Map values) {
            doSetMultiValueProperties("schedulerProperties", "scheduler.", values);
            return this;
        }
        /**
         * Whether the scheduler should be auto started.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: scheduler
         * 
         * @param startScheduler the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder startScheduler(
                boolean startScheduler) {
            doSetProperty("startScheduler", startScheduler);
            return this;
        }
        /**
         * Whether the scheduler should be auto started.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: scheduler
         * 
         * @param startScheduler the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder startScheduler(
                String startScheduler) {
            doSetProperty("startScheduler", startScheduler);
            return this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * 
         * The option is a:
         * &lt;code&gt;java.util.concurrent.TimeUnit&lt;/code&gt; type.
         * 
         * Default: MILLISECONDS
         * Group: scheduler
         * 
         * @param timeUnit the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder timeUnit(TimeUnit timeUnit) {
            doSetProperty("timeUnit", timeUnit);
            return this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * 
         * The option will be converted to a
         * &lt;code&gt;java.util.concurrent.TimeUnit&lt;/code&gt; type.
         * 
         * Default: MILLISECONDS
         * Group: scheduler
         * 
         * @param timeUnit the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder timeUnit(String timeUnit) {
            doSetProperty("timeUnit", timeUnit);
            return this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: scheduler
         * 
         * @param useFixedDelay the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder useFixedDelay(
                boolean useFixedDelay) {
            doSetProperty("useFixedDelay", useFixedDelay);
            return this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: scheduler
         * 
         * @param useFixedDelay the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointConsumerBuilder useFixedDelay(
                String useFixedDelay) {
            doSetProperty("useFixedDelay", useFixedDelay);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Flatpack component.
     */
    public interface AdvancedFlatpackEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default FlatpackEndpointConsumerBuilder basic() {
            return (FlatpackEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.spi.ExceptionHandler&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedFlatpackEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.spi.ExceptionHandler&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedFlatpackEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.ExchangePattern&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedFlatpackEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.ExchangePattern&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedFlatpackEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.spi.PollingConsumerPollStrategy&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param pollStrategy the value to set
         * @return the dsl builder
         */
        default AdvancedFlatpackEndpointConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            doSetProperty("pollStrategy", pollStrategy);
            return this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.spi.PollingConsumerPollStrategy&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param pollStrategy the value to set
         * @return the dsl builder
         */
        default AdvancedFlatpackEndpointConsumerBuilder pollStrategy(
                String pollStrategy) {
            doSetProperty("pollStrategy", pollStrategy);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Flatpack component.
     */
    public interface FlatpackEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedFlatpackEndpointProducerBuilder advanced() {
            return (AdvancedFlatpackEndpointProducerBuilder) this;
        }
        /**
         * Allows for lines to be shorter than expected and ignores the extra
         * characters.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param allowShortLines the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder allowShortLines(
                boolean allowShortLines) {
            doSetProperty("allowShortLines", allowShortLines);
            return this;
        }
        /**
         * Allows for lines to be shorter than expected and ignores the extra
         * characters.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param allowShortLines the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder allowShortLines(
                String allowShortLines) {
            doSetProperty("allowShortLines", allowShortLines);
            return this;
        }
        /**
         * The default character delimiter for delimited files.
         * 
         * The option is a: &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Default: ,
         * Group: common
         * 
         * @param delimiter the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder delimiter(char delimiter) {
            doSetProperty("delimiter", delimiter);
            return this;
        }
        /**
         * The default character delimiter for delimited files.
         * 
         * The option will be converted to a &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Default: ,
         * Group: common
         * 
         * @param delimiter the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder delimiter(String delimiter) {
            doSetProperty("delimiter", delimiter);
            return this;
        }
        /**
         * Allows for lines to be longer than expected and ignores the extra
         * characters.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param ignoreExtraColumns the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder ignoreExtraColumns(
                boolean ignoreExtraColumns) {
            doSetProperty("ignoreExtraColumns", ignoreExtraColumns);
            return this;
        }
        /**
         * Allows for lines to be longer than expected and ignores the extra
         * characters.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param ignoreExtraColumns the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder ignoreExtraColumns(
                String ignoreExtraColumns) {
            doSetProperty("ignoreExtraColumns", ignoreExtraColumns);
            return this;
        }
        /**
         * Whether the first line is ignored for delimited files (for the column
         * headers).
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: common
         * 
         * @param ignoreFirstRecord the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder ignoreFirstRecord(
                boolean ignoreFirstRecord) {
            doSetProperty("ignoreFirstRecord", ignoreFirstRecord);
            return this;
        }
        /**
         * Whether the first line is ignored for delimited files (for the column
         * headers).
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: common
         * 
         * @param ignoreFirstRecord the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder ignoreFirstRecord(
                String ignoreFirstRecord) {
            doSetProperty("ignoreFirstRecord", ignoreFirstRecord);
            return this;
        }
        /**
         * Sets the Component to send each row as a separate exchange once
         * parsed.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: common
         * 
         * @param splitRows the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder splitRows(boolean splitRows) {
            doSetProperty("splitRows", splitRows);
            return this;
        }
        /**
         * Sets the Component to send each row as a separate exchange once
         * parsed.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: common
         * 
         * @param splitRows the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder splitRows(String splitRows) {
            doSetProperty("splitRows", splitRows);
            return this;
        }
        /**
         * The text qualifier for delimited files.
         * 
         * The option is a: &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param textQualifier the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder textQualifier(char textQualifier) {
            doSetProperty("textQualifier", textQualifier);
            return this;
        }
        /**
         * The text qualifier for delimited files.
         * 
         * The option will be converted to a &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param textQualifier the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder textQualifier(
                String textQualifier) {
            doSetProperty("textQualifier", textQualifier);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Flatpack component.
     */
    public interface AdvancedFlatpackEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default FlatpackEndpointProducerBuilder basic() {
            return (FlatpackEndpointProducerBuilder) this;
        }
    }

    /**
     * Builder for endpoint for the Flatpack component.
     */
    public interface FlatpackEndpointBuilder
            extends
                FlatpackEndpointConsumerBuilder,
                FlatpackEndpointProducerBuilder {
        default AdvancedFlatpackEndpointBuilder advanced() {
            return (AdvancedFlatpackEndpointBuilder) this;
        }
        /**
         * Allows for lines to be shorter than expected and ignores the extra
         * characters.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param allowShortLines the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder allowShortLines(boolean allowShortLines) {
            doSetProperty("allowShortLines", allowShortLines);
            return this;
        }
        /**
         * Allows for lines to be shorter than expected and ignores the extra
         * characters.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param allowShortLines the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder allowShortLines(String allowShortLines) {
            doSetProperty("allowShortLines", allowShortLines);
            return this;
        }
        /**
         * The default character delimiter for delimited files.
         * 
         * The option is a: &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Default: ,
         * Group: common
         * 
         * @param delimiter the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder delimiter(char delimiter) {
            doSetProperty("delimiter", delimiter);
            return this;
        }
        /**
         * The default character delimiter for delimited files.
         * 
         * The option will be converted to a &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Default: ,
         * Group: common
         * 
         * @param delimiter the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder delimiter(String delimiter) {
            doSetProperty("delimiter", delimiter);
            return this;
        }
        /**
         * Allows for lines to be longer than expected and ignores the extra
         * characters.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param ignoreExtraColumns the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder ignoreExtraColumns(
                boolean ignoreExtraColumns) {
            doSetProperty("ignoreExtraColumns", ignoreExtraColumns);
            return this;
        }
        /**
         * Allows for lines to be longer than expected and ignores the extra
         * characters.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param ignoreExtraColumns the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder ignoreExtraColumns(
                String ignoreExtraColumns) {
            doSetProperty("ignoreExtraColumns", ignoreExtraColumns);
            return this;
        }
        /**
         * Whether the first line is ignored for delimited files (for the column
         * headers).
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: common
         * 
         * @param ignoreFirstRecord the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder ignoreFirstRecord(
                boolean ignoreFirstRecord) {
            doSetProperty("ignoreFirstRecord", ignoreFirstRecord);
            return this;
        }
        /**
         * Whether the first line is ignored for delimited files (for the column
         * headers).
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: common
         * 
         * @param ignoreFirstRecord the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder ignoreFirstRecord(
                String ignoreFirstRecord) {
            doSetProperty("ignoreFirstRecord", ignoreFirstRecord);
            return this;
        }
        /**
         * Sets the Component to send each row as a separate exchange once
         * parsed.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: common
         * 
         * @param splitRows the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder splitRows(boolean splitRows) {
            doSetProperty("splitRows", splitRows);
            return this;
        }
        /**
         * Sets the Component to send each row as a separate exchange once
         * parsed.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: common
         * 
         * @param splitRows the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder splitRows(String splitRows) {
            doSetProperty("splitRows", splitRows);
            return this;
        }
        /**
         * The text qualifier for delimited files.
         * 
         * The option is a: &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param textQualifier the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder textQualifier(char textQualifier) {
            doSetProperty("textQualifier", textQualifier);
            return this;
        }
        /**
         * The text qualifier for delimited files.
         * 
         * The option will be converted to a &lt;code&gt;char&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param textQualifier the value to set
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder textQualifier(String textQualifier) {
            doSetProperty("textQualifier", textQualifier);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Flatpack component.
     */
    public interface AdvancedFlatpackEndpointBuilder
            extends
                AdvancedFlatpackEndpointConsumerBuilder,
                AdvancedFlatpackEndpointProducerBuilder {
        default FlatpackEndpointBuilder basic() {
            return (FlatpackEndpointBuilder) this;
        }
    }

    public interface FlatpackBuilders {
        /**
         * Flatpack (camel-flatpack)
         * Parse fixed width and delimited files using the FlatPack library.
         * 
         * Category: transformation
         * Since: 1.4
         * Maven coordinates: org.apache.camel:camel-flatpack
         * 
         * Syntax: <code>flatpack:type:resourceUri</code>
         * 
         * Path parameter: type
         * Whether to use fixed or delimiter
         * Default value: delim
         * There are 2 enums and the value can be one of: fixed, delim
         * 
         * Path parameter: resourceUri (required)
         * URL for loading the flatpack mapping file from classpath or file
         * system
         * 
         * @param path type:resourceUri
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder flatpack(String path) {
            return FlatpackEndpointBuilderFactory.endpointBuilder("flatpack", path);
        }
        /**
         * Flatpack (camel-flatpack)
         * Parse fixed width and delimited files using the FlatPack library.
         * 
         * Category: transformation
         * Since: 1.4
         * Maven coordinates: org.apache.camel:camel-flatpack
         * 
         * Syntax: <code>flatpack:type:resourceUri</code>
         * 
         * Path parameter: type
         * Whether to use fixed or delimiter
         * Default value: delim
         * There are 2 enums and the value can be one of: fixed, delim
         * 
         * Path parameter: resourceUri (required)
         * URL for loading the flatpack mapping file from classpath or file
         * system
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path type:resourceUri
         * @return the dsl builder
         */
        default FlatpackEndpointBuilder flatpack(
                String componentName,
                String path) {
            return FlatpackEndpointBuilderFactory.endpointBuilder(componentName, path);
        }
    }
    static FlatpackEndpointBuilder endpointBuilder(
            String componentName,
            String path) {
        class FlatpackEndpointBuilderImpl extends AbstractEndpointBuilder implements FlatpackEndpointBuilder, AdvancedFlatpackEndpointBuilder {
            public FlatpackEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new FlatpackEndpointBuilderImpl(path);
    }
}