/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Send and receive messages from RabbitMQ using Spring RabbitMQ client.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface RabbitMQEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Spring RabbitMQ component.
     */
    public interface RabbitMQEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedRabbitMQEndpointConsumerBuilder advanced() {
            return (AdvancedRabbitMQEndpointConsumerBuilder) this;
        }
        /**
         * The connection factory to be use. A connection factory must be
         * configured either on the component or endpoint.
         * 
         * The option is a:
         * &lt;code&gt;org.springframework.amqp.rabbit.connection.ConnectionFactory&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param connectionFactory the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder connectionFactory(
                Object connectionFactory) {
            doSetProperty("connectionFactory", connectionFactory);
            return this;
        }
        /**
         * The connection factory to be use. A connection factory must be
         * configured either on the component or endpoint.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.springframework.amqp.rabbit.connection.ConnectionFactory&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param connectionFactory the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder connectionFactory(
                String connectionFactory) {
            doSetProperty("connectionFactory", connectionFactory);
            return this;
        }
        /**
         * Specifies whether Camel ignores the ReplyTo header in messages. If
         * true, Camel does not send a reply back to the destination specified
         * in the ReplyTo header. You can use this option if you want Camel to
         * consume from a route and you do not want Camel to automatically send
         * back a reply message because another component in your code handles
         * the reply message. You can also use this option if you want to use
         * Camel as a proxy between different message brokers and you want to
         * route message from one system to another.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param disableReplyTo the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder disableReplyTo(
                boolean disableReplyTo) {
            doSetProperty("disableReplyTo", disableReplyTo);
            return this;
        }
        /**
         * Specifies whether Camel ignores the ReplyTo header in messages. If
         * true, Camel does not send a reply back to the destination specified
         * in the ReplyTo header. You can use this option if you want Camel to
         * consume from a route and you do not want Camel to automatically send
         * back a reply message because another component in your code handles
         * the reply message. You can also use this option if you want to use
         * Camel as a proxy between different message brokers and you want to
         * route message from one system to another.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param disableReplyTo the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder disableReplyTo(
                String disableReplyTo) {
            doSetProperty("disableReplyTo", disableReplyTo);
            return this;
        }
        /**
         * The value of a routing key to use. Default is empty which is not
         * helpful when using the default (or any direct) exchange, but fine if
         * the exchange is a headers exchange for instance.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param routingKey the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder routingKey(String routingKey) {
            doSetProperty("routingKey", routingKey);
            return this;
        }
        /**
         * Specifies whether to test the connection on startup. This ensures
         * that when Camel starts that all the JMS consumers have a valid
         * connection to the JMS broker. If a connection cannot be granted then
         * Camel throws an exception on startup. This ensures that Camel is not
         * started with failed connections. The JMS producers is tested as well.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param testConnectionOnStartup the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder testConnectionOnStartup(
                boolean testConnectionOnStartup) {
            doSetProperty("testConnectionOnStartup", testConnectionOnStartup);
            return this;
        }
        /**
         * Specifies whether to test the connection on startup. This ensures
         * that when Camel starts that all the JMS consumers have a valid
         * connection to the JMS broker. If a connection cannot be granted then
         * Camel throws an exception on startup. This ensures that Camel is not
         * started with failed connections. The JMS producers is tested as well.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param testConnectionOnStartup the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder testConnectionOnStartup(
                String testConnectionOnStartup) {
            doSetProperty("testConnectionOnStartup", testConnectionOnStartup);
            return this;
        }
        /**
         * Flag controlling the behaviour of the container with respect to
         * message acknowledgement. The most common usage is to let the
         * container handle the acknowledgements (so the listener doesn't need
         * to know about the channel or the message). Set to
         * AcknowledgeMode.MANUAL if the listener will send the acknowledgements
         * itself using Channel.basicAck(long, boolean). Manual acks are
         * consistent with either a transactional or non-transactional channel,
         * but if you are doing no other work on the channel at the same other
         * than receiving a single message then the transaction is probably
         * unnecessary. Set to AcknowledgeMode.NONE to tell the broker not to
         * expect any acknowledgements, and it will assume all messages are
         * acknowledged as soon as they are sent (this is autoack in native
         * Rabbit broker terms). If AcknowledgeMode.NONE then the channel cannot
         * be transactional (so the container will fail on start up if that flag
         * is accidentally set).
         * 
         * The option is a:
         * &lt;code&gt;org.springframework.amqp.core.AcknowledgeMode&lt;/code&gt; type.
         * 
         * Group: consumer
         * 
         * @param acknowledgeMode the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder acknowledgeMode(
                AcknowledgeMode acknowledgeMode) {
            doSetProperty("acknowledgeMode", acknowledgeMode);
            return this;
        }
        /**
         * Flag controlling the behaviour of the container with respect to
         * message acknowledgement. The most common usage is to let the
         * container handle the acknowledgements (so the listener doesn't need
         * to know about the channel or the message). Set to
         * AcknowledgeMode.MANUAL if the listener will send the acknowledgements
         * itself using Channel.basicAck(long, boolean). Manual acks are
         * consistent with either a transactional or non-transactional channel,
         * but if you are doing no other work on the channel at the same other
         * than receiving a single message then the transaction is probably
         * unnecessary. Set to AcknowledgeMode.NONE to tell the broker not to
         * expect any acknowledgements, and it will assume all messages are
         * acknowledged as soon as they are sent (this is autoack in native
         * Rabbit broker terms). If AcknowledgeMode.NONE then the channel cannot
         * be transactional (so the container will fail on start up if that flag
         * is accidentally set).
         * 
         * The option will be converted to a
         * &lt;code&gt;org.springframework.amqp.core.AcknowledgeMode&lt;/code&gt; type.
         * 
         * Group: consumer
         * 
         * @param acknowledgeMode the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder acknowledgeMode(
                String acknowledgeMode) {
            doSetProperty("acknowledgeMode", acknowledgeMode);
            return this;
        }
        /**
         * Whether the consumer processes the Exchange asynchronously. If
         * enabled then the consumer may pickup the next message from the queue,
         * while the previous message is being processed asynchronously (by the
         * Asynchronous Routing Engine). This means that messages may be
         * processed not 100% strictly in order. If disabled (as default) then
         * the Exchange is fully processed before the consumer will pickup the
         * next message from the queue.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param asyncConsumer the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder asyncConsumer(
                boolean asyncConsumer) {
            doSetProperty("asyncConsumer", asyncConsumer);
            return this;
        }
        /**
         * Whether the consumer processes the Exchange asynchronously. If
         * enabled then the consumer may pickup the next message from the queue,
         * while the previous message is being processed asynchronously (by the
         * Asynchronous Routing Engine). This means that messages may be
         * processed not 100% strictly in order. If disabled (as default) then
         * the Exchange is fully processed before the consumer will pickup the
         * next message from the queue.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param asyncConsumer the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder asyncConsumer(
                String asyncConsumer) {
            doSetProperty("asyncConsumer", asyncConsumer);
            return this;
        }
        /**
         * Specifies whether the consumer should auto declare binding between
         * exchange, queue and routing key when starting.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: consumer
         * 
         * @param autoDeclare the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder autoDeclare(boolean autoDeclare) {
            doSetProperty("autoDeclare", autoDeclare);
            return this;
        }
        /**
         * Specifies whether the consumer should auto declare binding between
         * exchange, queue and routing key when starting.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: consumer
         * 
         * @param autoDeclare the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder autoDeclare(String autoDeclare) {
            doSetProperty("autoDeclare", autoDeclare);
            return this;
        }
        /**
         * Specifies whether the consumer container should auto-startup.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: true
         * Group: consumer
         * 
         * @param autoStartup the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder autoStartup(boolean autoStartup) {
            doSetProperty("autoStartup", autoStartup);
            return this;
        }
        /**
         * Specifies whether the consumer container should auto-startup.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: true
         * Group: consumer
         * 
         * @param autoStartup the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder autoStartup(String autoStartup) {
            doSetProperty("autoStartup", autoStartup);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param bridgeErrorHandler the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * The name of the dead letter exchange.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: consumer
         * 
         * @param deadLetterExchange the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder deadLetterExchange(
                String deadLetterExchange) {
            doSetProperty("deadLetterExchange", deadLetterExchange);
            return this;
        }
        /**
         * The type of the dead letter exchange.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: direct
         * Group: consumer
         * 
         * @param deadLetterExchangeType the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder deadLetterExchangeType(
                String deadLetterExchangeType) {
            doSetProperty("deadLetterExchangeType", deadLetterExchangeType);
            return this;
        }
        /**
         * The name of the dead letter queue.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: consumer
         * 
         * @param deadLetterQueue the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder deadLetterQueue(
                String deadLetterQueue) {
            doSetProperty("deadLetterQueue", deadLetterQueue);
            return this;
        }
        /**
         * The routing key for the dead letter exchange.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: consumer
         * 
         * @param deadLetterRoutingKey the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder deadLetterRoutingKey(
                String deadLetterRoutingKey) {
            doSetProperty("deadLetterRoutingKey", deadLetterRoutingKey);
            return this;
        }
        /**
         * The type of the exchange.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Default: direct
         * Group: consumer
         * 
         * @param exchangeType the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder exchangeType(String exchangeType) {
            doSetProperty("exchangeType", exchangeType);
            return this;
        }
        /**
         * Set to true for an exclusive consumer.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param exclusive the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder exclusive(boolean exclusive) {
            doSetProperty("exclusive", exclusive);
            return this;
        }
        /**
         * Set to true for an exclusive consumer.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param exclusive the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder exclusive(String exclusive) {
            doSetProperty("exclusive", exclusive);
            return this;
        }
        /**
         * Set to true for an no-local consumer.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param noLocal the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder noLocal(boolean noLocal) {
            doSetProperty("noLocal", noLocal);
            return this;
        }
        /**
         * Set to true for an no-local consumer.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: consumer
         * 
         * @param noLocal the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder noLocal(String noLocal) {
            doSetProperty("noLocal", noLocal);
            return this;
        }
        /**
         * The queue(s) to use for consuming messages. Multiple queue names can
         * be separated by comma. If none has been configured then Camel will
         * generate an unique id as the queue name for the consumer.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: consumer
         * 
         * @param queues the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointConsumerBuilder queues(String queues) {
            doSetProperty("queues", queues);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Spring RabbitMQ
     * component.
     */
    public interface AdvancedRabbitMQEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default RabbitMQEndpointConsumerBuilder basic() {
            return (RabbitMQEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.spi.ExceptionHandler&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.spi.ExceptionHandler&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exceptionHandler the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.ExchangePattern&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.ExchangePattern&lt;/code&gt; type.
         * 
         * Group: consumer (advanced)
         * 
         * @param exchangePattern the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Specify arguments for configuring the different RabbitMQ concepts, a
         * different prefix is required for each element: arg.consumer.
         * arg.exchange. arg.queue. arg.binding. arg.dlq.exchange.
         * arg.dlq.queue. arg.dlq.binding. For example to declare a queue with
         * message ttl argument: args=arg.queue.x-message-ttl=60000.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.Object&amp;gt;&lt;/code&gt; type.
         * The option is multivalued, and you can use the args(String, Object)
         * method to add a value (call the method multiple times to set more
         * values).
         * 
         * Group: advanced
         * 
         * @param key the option key
         * @param value the option value
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder args(
                String key,
                Object value) {
            doSetMultiValueProperty("args", "arg." + key, value);
            return this;
        }
        /**
         * Specify arguments for configuring the different RabbitMQ concepts, a
         * different prefix is required for each element: arg.consumer.
         * arg.exchange. arg.queue. arg.binding. arg.dlq.exchange.
         * arg.dlq.queue. arg.dlq.binding. For example to declare a queue with
         * message ttl argument: args=arg.queue.x-message-ttl=60000.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.Object&amp;gt;&lt;/code&gt; type.
         * The option is multivalued, and you can use the args(String, Object)
         * method to add a value (call the method multiple times to set more
         * values).
         * 
         * Group: advanced
         * 
         * @param values the values
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder args(Map values) {
            doSetMultiValueProperties("args", "arg.", values);
            return this;
        }
        /**
         * To use a custom MessageConverter so you can be in control how to map
         * to/from a org.springframework.amqp.core.Message.
         * 
         * The option is a:
         * &lt;code&gt;org.springframework.amqp.support.converter.MessageConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messageConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder messageConverter(
                Object messageConverter) {
            doSetProperty("messageConverter", messageConverter);
            return this;
        }
        /**
         * To use a custom MessageConverter so you can be in control how to map
         * to/from a org.springframework.amqp.core.Message.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.springframework.amqp.support.converter.MessageConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messageConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder messageConverter(
                String messageConverter) {
            doSetProperty("messageConverter", messageConverter);
            return this;
        }
        /**
         * To use a custom MessagePropertiesConverter so you can be in control
         * how to map to/from a org.springframework.amqp.core.MessageProperties.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.springrabbit.MessagePropertiesConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messagePropertiesConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder messagePropertiesConverter(
                Object messagePropertiesConverter) {
            doSetProperty("messagePropertiesConverter", messagePropertiesConverter);
            return this;
        }
        /**
         * To use a custom MessagePropertiesConverter so you can be in control
         * how to map to/from a org.springframework.amqp.core.MessageProperties.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.component.springrabbit.MessagePropertiesConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messagePropertiesConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder messagePropertiesConverter(
                String messagePropertiesConverter) {
            doSetProperty("messagePropertiesConverter", messagePropertiesConverter);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param synchronous the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param synchronous the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointConsumerBuilder synchronous(
                String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Spring RabbitMQ component.
     */
    public interface RabbitMQEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedRabbitMQEndpointProducerBuilder advanced() {
            return (AdvancedRabbitMQEndpointProducerBuilder) this;
        }
        /**
         * The connection factory to be use. A connection factory must be
         * configured either on the component or endpoint.
         * 
         * The option is a:
         * &lt;code&gt;org.springframework.amqp.rabbit.connection.ConnectionFactory&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param connectionFactory the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder connectionFactory(
                Object connectionFactory) {
            doSetProperty("connectionFactory", connectionFactory);
            return this;
        }
        /**
         * The connection factory to be use. A connection factory must be
         * configured either on the component or endpoint.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.springframework.amqp.rabbit.connection.ConnectionFactory&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param connectionFactory the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder connectionFactory(
                String connectionFactory) {
            doSetProperty("connectionFactory", connectionFactory);
            return this;
        }
        /**
         * Specifies whether Camel ignores the ReplyTo header in messages. If
         * true, Camel does not send a reply back to the destination specified
         * in the ReplyTo header. You can use this option if you want Camel to
         * consume from a route and you do not want Camel to automatically send
         * back a reply message because another component in your code handles
         * the reply message. You can also use this option if you want to use
         * Camel as a proxy between different message brokers and you want to
         * route message from one system to another.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param disableReplyTo the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder disableReplyTo(
                boolean disableReplyTo) {
            doSetProperty("disableReplyTo", disableReplyTo);
            return this;
        }
        /**
         * Specifies whether Camel ignores the ReplyTo header in messages. If
         * true, Camel does not send a reply back to the destination specified
         * in the ReplyTo header. You can use this option if you want Camel to
         * consume from a route and you do not want Camel to automatically send
         * back a reply message because another component in your code handles
         * the reply message. You can also use this option if you want to use
         * Camel as a proxy between different message brokers and you want to
         * route message from one system to another.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param disableReplyTo the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder disableReplyTo(
                String disableReplyTo) {
            doSetProperty("disableReplyTo", disableReplyTo);
            return this;
        }
        /**
         * The value of a routing key to use. Default is empty which is not
         * helpful when using the default (or any direct) exchange, but fine if
         * the exchange is a headers exchange for instance.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param routingKey the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder routingKey(String routingKey) {
            doSetProperty("routingKey", routingKey);
            return this;
        }
        /**
         * Specifies whether to test the connection on startup. This ensures
         * that when Camel starts that all the JMS consumers have a valid
         * connection to the JMS broker. If a connection cannot be granted then
         * Camel throws an exception on startup. This ensures that Camel is not
         * started with failed connections. The JMS producers is tested as well.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param testConnectionOnStartup the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder testConnectionOnStartup(
                boolean testConnectionOnStartup) {
            doSetProperty("testConnectionOnStartup", testConnectionOnStartup);
            return this;
        }
        /**
         * Specifies whether to test the connection on startup. This ensures
         * that when Camel starts that all the JMS consumers have a valid
         * connection to the JMS broker. If a connection cannot be granted then
         * Camel throws an exception on startup. This ensures that Camel is not
         * started with failed connections. The JMS producers is tested as well.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param testConnectionOnStartup the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder testConnectionOnStartup(
                String testConnectionOnStartup) {
            doSetProperty("testConnectionOnStartup", testConnectionOnStartup);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: producer
         * 
         * @param lazyStartProducer the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Specify the timeout in milliseconds to be used when waiting for a
         * reply message when doing request/reply messaging. The default value
         * is 5 seconds. A negative value indicates an indefinite timeout.
         * 
         * The option is a: &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: producer
         * 
         * @param replyTimeout the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder replyTimeout(long replyTimeout) {
            doSetProperty("replyTimeout", replyTimeout);
            return this;
        }
        /**
         * Specify the timeout in milliseconds to be used when waiting for a
         * reply message when doing request/reply messaging. The default value
         * is 5 seconds. A negative value indicates an indefinite timeout.
         * 
         * The option will be converted to a &lt;code&gt;long&lt;/code&gt; type.
         * 
         * Default: 5000
         * Group: producer
         * 
         * @param replyTimeout the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointProducerBuilder replyTimeout(String replyTimeout) {
            doSetProperty("replyTimeout", replyTimeout);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Spring RabbitMQ
     * component.
     */
    public interface AdvancedRabbitMQEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default RabbitMQEndpointProducerBuilder basic() {
            return (RabbitMQEndpointProducerBuilder) this;
        }
        /**
         * Specify arguments for configuring the different RabbitMQ concepts, a
         * different prefix is required for each element: arg.consumer.
         * arg.exchange. arg.queue. arg.binding. arg.dlq.exchange.
         * arg.dlq.queue. arg.dlq.binding. For example to declare a queue with
         * message ttl argument: args=arg.queue.x-message-ttl=60000.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.Object&amp;gt;&lt;/code&gt; type.
         * The option is multivalued, and you can use the args(String, Object)
         * method to add a value (call the method multiple times to set more
         * values).
         * 
         * Group: advanced
         * 
         * @param key the option key
         * @param value the option value
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointProducerBuilder args(
                String key,
                Object value) {
            doSetMultiValueProperty("args", "arg." + key, value);
            return this;
        }
        /**
         * Specify arguments for configuring the different RabbitMQ concepts, a
         * different prefix is required for each element: arg.consumer.
         * arg.exchange. arg.queue. arg.binding. arg.dlq.exchange.
         * arg.dlq.queue. arg.dlq.binding. For example to declare a queue with
         * message ttl argument: args=arg.queue.x-message-ttl=60000.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.Object&amp;gt;&lt;/code&gt; type.
         * The option is multivalued, and you can use the args(String, Object)
         * method to add a value (call the method multiple times to set more
         * values).
         * 
         * Group: advanced
         * 
         * @param values the values
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointProducerBuilder args(Map values) {
            doSetMultiValueProperties("args", "arg.", values);
            return this;
        }
        /**
         * To use a custom MessageConverter so you can be in control how to map
         * to/from a org.springframework.amqp.core.Message.
         * 
         * The option is a:
         * &lt;code&gt;org.springframework.amqp.support.converter.MessageConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messageConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointProducerBuilder messageConverter(
                Object messageConverter) {
            doSetProperty("messageConverter", messageConverter);
            return this;
        }
        /**
         * To use a custom MessageConverter so you can be in control how to map
         * to/from a org.springframework.amqp.core.Message.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.springframework.amqp.support.converter.MessageConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messageConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointProducerBuilder messageConverter(
                String messageConverter) {
            doSetProperty("messageConverter", messageConverter);
            return this;
        }
        /**
         * To use a custom MessagePropertiesConverter so you can be in control
         * how to map to/from a org.springframework.amqp.core.MessageProperties.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.springrabbit.MessagePropertiesConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messagePropertiesConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointProducerBuilder messagePropertiesConverter(
                Object messagePropertiesConverter) {
            doSetProperty("messagePropertiesConverter", messagePropertiesConverter);
            return this;
        }
        /**
         * To use a custom MessagePropertiesConverter so you can be in control
         * how to map to/from a org.springframework.amqp.core.MessageProperties.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.component.springrabbit.MessagePropertiesConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messagePropertiesConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointProducerBuilder messagePropertiesConverter(
                String messagePropertiesConverter) {
            doSetProperty("messagePropertiesConverter", messagePropertiesConverter);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param synchronous the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointProducerBuilder synchronous(
                boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param synchronous the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointProducerBuilder synchronous(
                String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Spring RabbitMQ component.
     */
    public interface RabbitMQEndpointBuilder
            extends
                RabbitMQEndpointConsumerBuilder,
                RabbitMQEndpointProducerBuilder {
        default AdvancedRabbitMQEndpointBuilder advanced() {
            return (AdvancedRabbitMQEndpointBuilder) this;
        }
        /**
         * The connection factory to be use. A connection factory must be
         * configured either on the component or endpoint.
         * 
         * The option is a:
         * &lt;code&gt;org.springframework.amqp.rabbit.connection.ConnectionFactory&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param connectionFactory the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder connectionFactory(
                Object connectionFactory) {
            doSetProperty("connectionFactory", connectionFactory);
            return this;
        }
        /**
         * The connection factory to be use. A connection factory must be
         * configured either on the component or endpoint.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.springframework.amqp.rabbit.connection.ConnectionFactory&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param connectionFactory the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder connectionFactory(
                String connectionFactory) {
            doSetProperty("connectionFactory", connectionFactory);
            return this;
        }
        /**
         * Specifies whether Camel ignores the ReplyTo header in messages. If
         * true, Camel does not send a reply back to the destination specified
         * in the ReplyTo header. You can use this option if you want Camel to
         * consume from a route and you do not want Camel to automatically send
         * back a reply message because another component in your code handles
         * the reply message. You can also use this option if you want to use
         * Camel as a proxy between different message brokers and you want to
         * route message from one system to another.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param disableReplyTo the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder disableReplyTo(boolean disableReplyTo) {
            doSetProperty("disableReplyTo", disableReplyTo);
            return this;
        }
        /**
         * Specifies whether Camel ignores the ReplyTo header in messages. If
         * true, Camel does not send a reply back to the destination specified
         * in the ReplyTo header. You can use this option if you want Camel to
         * consume from a route and you do not want Camel to automatically send
         * back a reply message because another component in your code handles
         * the reply message. You can also use this option if you want to use
         * Camel as a proxy between different message brokers and you want to
         * route message from one system to another.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param disableReplyTo the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder disableReplyTo(String disableReplyTo) {
            doSetProperty("disableReplyTo", disableReplyTo);
            return this;
        }
        /**
         * The value of a routing key to use. Default is empty which is not
         * helpful when using the default (or any direct) exchange, but fine if
         * the exchange is a headers exchange for instance.
         * 
         * The option is a: &lt;code&gt;java.lang.String&lt;/code&gt; type.
         * 
         * Group: common
         * 
         * @param routingKey the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder routingKey(String routingKey) {
            doSetProperty("routingKey", routingKey);
            return this;
        }
        /**
         * Specifies whether to test the connection on startup. This ensures
         * that when Camel starts that all the JMS consumers have a valid
         * connection to the JMS broker. If a connection cannot be granted then
         * Camel throws an exception on startup. This ensures that Camel is not
         * started with failed connections. The JMS producers is tested as well.
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: common
         * 
         * @param testConnectionOnStartup the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder testConnectionOnStartup(
                boolean testConnectionOnStartup) {
            doSetProperty("testConnectionOnStartup", testConnectionOnStartup);
            return this;
        }
        /**
         * Specifies whether to test the connection on startup. This ensures
         * that when Camel starts that all the JMS consumers have a valid
         * connection to the JMS broker. If a connection cannot be granted then
         * Camel throws an exception on startup. This ensures that Camel is not
         * started with failed connections. The JMS producers is tested as well.
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: common
         * 
         * @param testConnectionOnStartup the value to set
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder testConnectionOnStartup(
                String testConnectionOnStartup) {
            doSetProperty("testConnectionOnStartup", testConnectionOnStartup);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Spring RabbitMQ component.
     */
    public interface AdvancedRabbitMQEndpointBuilder
            extends
                AdvancedRabbitMQEndpointConsumerBuilder,
                AdvancedRabbitMQEndpointProducerBuilder {
        default RabbitMQEndpointBuilder basic() {
            return (RabbitMQEndpointBuilder) this;
        }
        /**
         * Specify arguments for configuring the different RabbitMQ concepts, a
         * different prefix is required for each element: arg.consumer.
         * arg.exchange. arg.queue. arg.binding. arg.dlq.exchange.
         * arg.dlq.queue. arg.dlq.binding. For example to declare a queue with
         * message ttl argument: args=arg.queue.x-message-ttl=60000.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.Object&amp;gt;&lt;/code&gt; type.
         * The option is multivalued, and you can use the args(String, Object)
         * method to add a value (call the method multiple times to set more
         * values).
         * 
         * Group: advanced
         * 
         * @param key the option key
         * @param value the option value
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointBuilder args(String key, Object value) {
            doSetMultiValueProperty("args", "arg." + key, value);
            return this;
        }
        /**
         * Specify arguments for configuring the different RabbitMQ concepts, a
         * different prefix is required for each element: arg.consumer.
         * arg.exchange. arg.queue. arg.binding. arg.dlq.exchange.
         * arg.dlq.queue. arg.dlq.binding. For example to declare a queue with
         * message ttl argument: args=arg.queue.x-message-ttl=60000.
         * 
         * The option is a: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,
         * java.lang.Object&amp;gt;&lt;/code&gt; type.
         * The option is multivalued, and you can use the args(String, Object)
         * method to add a value (call the method multiple times to set more
         * values).
         * 
         * Group: advanced
         * 
         * @param values the values
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointBuilder args(Map values) {
            doSetMultiValueProperties("args", "arg.", values);
            return this;
        }
        /**
         * To use a custom MessageConverter so you can be in control how to map
         * to/from a org.springframework.amqp.core.Message.
         * 
         * The option is a:
         * &lt;code&gt;org.springframework.amqp.support.converter.MessageConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messageConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointBuilder messageConverter(
                Object messageConverter) {
            doSetProperty("messageConverter", messageConverter);
            return this;
        }
        /**
         * To use a custom MessageConverter so you can be in control how to map
         * to/from a org.springframework.amqp.core.Message.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.springframework.amqp.support.converter.MessageConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messageConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointBuilder messageConverter(
                String messageConverter) {
            doSetProperty("messageConverter", messageConverter);
            return this;
        }
        /**
         * To use a custom MessagePropertiesConverter so you can be in control
         * how to map to/from a org.springframework.amqp.core.MessageProperties.
         * 
         * The option is a:
         * &lt;code&gt;org.apache.camel.component.springrabbit.MessagePropertiesConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messagePropertiesConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointBuilder messagePropertiesConverter(
                Object messagePropertiesConverter) {
            doSetProperty("messagePropertiesConverter", messagePropertiesConverter);
            return this;
        }
        /**
         * To use a custom MessagePropertiesConverter so you can be in control
         * how to map to/from a org.springframework.amqp.core.MessageProperties.
         * 
         * The option will be converted to a
         * &lt;code&gt;org.apache.camel.component.springrabbit.MessagePropertiesConverter&lt;/code&gt; type.
         * 
         * Group: advanced
         * 
         * @param messagePropertiesConverter the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointBuilder messagePropertiesConverter(
                String messagePropertiesConverter) {
            doSetProperty("messagePropertiesConverter", messagePropertiesConverter);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param synchronous the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointBuilder synchronous(boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt;
         * type.
         * 
         * Default: false
         * Group: advanced
         * 
         * @param synchronous the value to set
         * @return the dsl builder
         */
        default AdvancedRabbitMQEndpointBuilder synchronous(String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Proxy enum for <code>org.springframework.amqp.core.AcknowledgeMode</code>
     * enum.
     */
    enum AcknowledgeMode {
        NONE,
        MANUAL,
        AUTO;
    }

    public interface RabbitMQBuilders {
        /**
         * Spring RabbitMQ (camel-spring-rabbitmq)
         * Send and receive messages from RabbitMQ using Spring RabbitMQ client.
         * 
         * Category: messaging
         * Since: 3.8
         * Maven coordinates: org.apache.camel:camel-spring-rabbitmq
         * 
         * Syntax: <code>spring-rabbitmq:exchangeName</code>
         * 
         * Path parameter: exchangeName (required)
         * The exchange name determines the exchange to which the produced
         * messages will be sent to. In the case of consumers, the exchange name
         * determines the exchange the queue will be bound to. Note: to use
         * default exchange then do not use empty name, but use default instead.
         * 
         * @param path exchangeName
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder springRabbitmq(String path) {
            return RabbitMQEndpointBuilderFactory.endpointBuilder("spring-rabbitmq", path);
        }
        /**
         * Spring RabbitMQ (camel-spring-rabbitmq)
         * Send and receive messages from RabbitMQ using Spring RabbitMQ client.
         * 
         * Category: messaging
         * Since: 3.8
         * Maven coordinates: org.apache.camel:camel-spring-rabbitmq
         * 
         * Syntax: <code>spring-rabbitmq:exchangeName</code>
         * 
         * Path parameter: exchangeName (required)
         * The exchange name determines the exchange to which the produced
         * messages will be sent to. In the case of consumers, the exchange name
         * determines the exchange the queue will be bound to. Note: to use
         * default exchange then do not use empty name, but use default instead.
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path exchangeName
         * @return the dsl builder
         */
        default RabbitMQEndpointBuilder springRabbitmq(
                String componentName,
                String path) {
            return RabbitMQEndpointBuilderFactory.endpointBuilder(componentName, path);
        }
    }
    static RabbitMQEndpointBuilder endpointBuilder(
            String componentName,
            String path) {
        class RabbitMQEndpointBuilderImpl extends AbstractEndpointBuilder implements RabbitMQEndpointBuilder, AdvancedRabbitMQEndpointBuilder {
            public RabbitMQEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new RabbitMQEndpointBuilderImpl(path);
    }
}