/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.math.BigInteger;
import java.time.Duration;
import java.util.List;
import java.util.Set;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Integrate with Consul service discovery and configuration store.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface ConsulEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Consul component.
     */
    public interface ConsulEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedConsulEndpointConsumerBuilder advanced() {
            return (AdvancedConsulEndpointConsumerBuilder) this;
        }
        /**
         * Connect timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder connectTimeout(
                Duration connectTimeout) {
            doSetProperty("connectTimeout", connectTimeout);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder connectTimeout(
                String connectTimeout) {
            doSetProperty("connectTimeout", connectTimeout);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient. Deprecation note: Use
         * connectTimeout instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointConsumerBuilder connectTimeoutMillis(
                Long connectTimeoutMillis) {
            doSetProperty("connectTimeoutMillis", connectTimeoutMillis);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient. Deprecation note: Use
         * connectTimeout instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointConsumerBuilder connectTimeoutMillis(
                String connectTimeoutMillis) {
            doSetProperty("connectTimeoutMillis", connectTimeoutMillis);
            return this;
        }
        /**
         * Reference to a com.orbitz.consul.Consul in the registry.
         * 
         * The option is a: <code>com.orbitz.consul.Consul</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder consulClient(Object consulClient) {
            doSetProperty("consulClient", consulClient);
            return this;
        }
        /**
         * Reference to a com.orbitz.consul.Consul in the registry.
         * 
         * The option will be converted to a
         * <code>com.orbitz.consul.Consul</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder consulClient(String consulClient) {
            doSetProperty("consulClient", consulClient);
            return this;
        }
        /**
         * The default key. Can be overridden by CamelConsulKey.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder key(String key) {
            doSetProperty("key", key);
            return this;
        }
        /**
         * Configure if the AgentClient should attempt a ping before returning
         * the Consul instance.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: common
         */
        default ConsulEndpointConsumerBuilder pingInstance(boolean pingInstance) {
            doSetProperty("pingInstance", pingInstance);
            return this;
        }
        /**
         * Configure if the AgentClient should attempt a ping before returning
         * the Consul instance.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: common
         */
        default ConsulEndpointConsumerBuilder pingInstance(String pingInstance) {
            doSetProperty("pingInstance", pingInstance);
            return this;
        }
        /**
         * Read timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder readTimeout(Duration readTimeout) {
            doSetProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * Read timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder readTimeout(String readTimeout) {
            doSetProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * Read timeout for OkHttpClient. Deprecation note: Use readTimeout
         * instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointConsumerBuilder readTimeoutMillis(
                Long readTimeoutMillis) {
            doSetProperty("readTimeoutMillis", readTimeoutMillis);
            return this;
        }
        /**
         * Read timeout for OkHttpClient. Deprecation note: Use readTimeout
         * instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointConsumerBuilder readTimeoutMillis(
                String readTimeoutMillis) {
            doSetProperty("readTimeoutMillis", readTimeoutMillis);
            return this;
        }
        /**
         * Set tags. You can separate multiple tags by comma.
         * 
         * The option is a: <code>java.util.Set&lt;java.lang.String&gt;</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder tags(Set<String> tags) {
            doSetProperty("tags", tags);
            return this;
        }
        /**
         * Set tags. You can separate multiple tags by comma.
         * 
         * The option will be converted to a
         * <code>java.util.Set&lt;java.lang.String&gt;</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder tags(String tags) {
            doSetProperty("tags", tags);
            return this;
        }
        /**
         * The Consul agent URL.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder url(String url) {
            doSetProperty("url", url);
            return this;
        }
        /**
         * Write timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder writeTimeout(Duration writeTimeout) {
            doSetProperty("writeTimeout", writeTimeout);
            return this;
        }
        /**
         * Write timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointConsumerBuilder writeTimeout(String writeTimeout) {
            doSetProperty("writeTimeout", writeTimeout);
            return this;
        }
        /**
         * Write timeout for OkHttpClient. Deprecation note: Use writeTimeout
         * instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointConsumerBuilder writeTimeoutMillis(
                Long writeTimeoutMillis) {
            doSetProperty("writeTimeoutMillis", writeTimeoutMillis);
            return this;
        }
        /**
         * Write timeout for OkHttpClient. Deprecation note: Use writeTimeout
         * instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointConsumerBuilder writeTimeoutMillis(
                String writeTimeoutMillis) {
            doSetProperty("writeTimeoutMillis", writeTimeoutMillis);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ConsulEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ConsulEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Sets the ACL token to be used with Consul.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointConsumerBuilder aclToken(String aclToken) {
            doSetProperty("aclToken", aclToken);
            return this;
        }
        /**
         * Sets the password to be used for basic authentication.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointConsumerBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * SSL configuration using an
         * org.apache.camel.support.jsse.SSLContextParameters instance.
         * 
         * The option is a:
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointConsumerBuilder sslContextParameters(
                Object sslContextParameters) {
            doSetProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * SSL configuration using an
         * org.apache.camel.support.jsse.SSLContextParameters instance.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointConsumerBuilder sslContextParameters(
                String sslContextParameters) {
            doSetProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * Sets the username to be used for basic authentication.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointConsumerBuilder userName(String userName) {
            doSetProperty("userName", userName);
            return this;
        }
        /**
         * The second to wait for a watch event, default 10 seconds.
         * 
         * The option is a: <code>java.lang.Integer</code> type.
         * 
         * Default: 10
         * Group: watch
         */
        default ConsulEndpointConsumerBuilder blockSeconds(Integer blockSeconds) {
            doSetProperty("blockSeconds", blockSeconds);
            return this;
        }
        /**
         * The second to wait for a watch event, default 10 seconds.
         * 
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * 
         * Default: 10
         * Group: watch
         */
        default ConsulEndpointConsumerBuilder blockSeconds(String blockSeconds) {
            doSetProperty("blockSeconds", blockSeconds);
            return this;
        }
        /**
         * The first index for watch for, default 0.
         * 
         * The option is a: <code>java.math.BigInteger</code> type.
         * 
         * Default: 0
         * Group: watch
         */
        default ConsulEndpointConsumerBuilder firstIndex(BigInteger firstIndex) {
            doSetProperty("firstIndex", firstIndex);
            return this;
        }
        /**
         * The first index for watch for, default 0.
         * 
         * The option will be converted to a <code>java.math.BigInteger</code>
         * type.
         * 
         * Default: 0
         * Group: watch
         */
        default ConsulEndpointConsumerBuilder firstIndex(String firstIndex) {
            doSetProperty("firstIndex", firstIndex);
            return this;
        }
        /**
         * Recursively watch, default false.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: watch
         */
        default ConsulEndpointConsumerBuilder recursive(boolean recursive) {
            doSetProperty("recursive", recursive);
            return this;
        }
        /**
         * Recursively watch, default false.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: watch
         */
        default ConsulEndpointConsumerBuilder recursive(String recursive) {
            doSetProperty("recursive", recursive);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Consul component.
     */
    public interface AdvancedConsulEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default ConsulEndpointConsumerBuilder basic() {
            return (ConsulEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option is a: <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedConsulEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedConsulEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option is a: <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedConsulEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedConsulEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * The consistencyMode used for queries, default
         * ConsistencyMode.DEFAULT.
         * 
         * The option is a:
         * <code>com.orbitz.consul.option.ConsistencyMode</code> type.
         * 
         * Default: DEFAULT
         * Group: advanced
         */
        default AdvancedConsulEndpointConsumerBuilder consistencyMode(
                Object consistencyMode) {
            doSetProperty("consistencyMode", consistencyMode);
            return this;
        }
        /**
         * The consistencyMode used for queries, default
         * ConsistencyMode.DEFAULT.
         * 
         * The option will be converted to a
         * <code>com.orbitz.consul.option.ConsistencyMode</code> type.
         * 
         * Default: DEFAULT
         * Group: advanced
         */
        default AdvancedConsulEndpointConsumerBuilder consistencyMode(
                String consistencyMode) {
            doSetProperty("consistencyMode", consistencyMode);
            return this;
        }
        /**
         * The data center.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointConsumerBuilder datacenter(
                String datacenter) {
            doSetProperty("datacenter", datacenter);
            return this;
        }
        /**
         * The near node to use for queries.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointConsumerBuilder nearNode(String nearNode) {
            doSetProperty("nearNode", nearNode);
            return this;
        }
        /**
         * The note meta-data to use for queries.
         * 
         * The option is a: <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointConsumerBuilder nodeMeta(
                List<String> nodeMeta) {
            doSetProperty("nodeMeta", nodeMeta);
            return this;
        }
        /**
         * The note meta-data to use for queries.
         * 
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointConsumerBuilder nodeMeta(String nodeMeta) {
            doSetProperty("nodeMeta", nodeMeta);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedConsulEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedConsulEndpointConsumerBuilder synchronous(
                String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Consul component.
     */
    public interface ConsulEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedConsulEndpointProducerBuilder advanced() {
            return (AdvancedConsulEndpointProducerBuilder) this;
        }
        /**
         * Connect timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder connectTimeout(
                Duration connectTimeout) {
            doSetProperty("connectTimeout", connectTimeout);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder connectTimeout(
                String connectTimeout) {
            doSetProperty("connectTimeout", connectTimeout);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient. Deprecation note: Use
         * connectTimeout instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointProducerBuilder connectTimeoutMillis(
                Long connectTimeoutMillis) {
            doSetProperty("connectTimeoutMillis", connectTimeoutMillis);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient. Deprecation note: Use
         * connectTimeout instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointProducerBuilder connectTimeoutMillis(
                String connectTimeoutMillis) {
            doSetProperty("connectTimeoutMillis", connectTimeoutMillis);
            return this;
        }
        /**
         * Reference to a com.orbitz.consul.Consul in the registry.
         * 
         * The option is a: <code>com.orbitz.consul.Consul</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder consulClient(Object consulClient) {
            doSetProperty("consulClient", consulClient);
            return this;
        }
        /**
         * Reference to a com.orbitz.consul.Consul in the registry.
         * 
         * The option will be converted to a
         * <code>com.orbitz.consul.Consul</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder consulClient(String consulClient) {
            doSetProperty("consulClient", consulClient);
            return this;
        }
        /**
         * The default key. Can be overridden by CamelConsulKey.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder key(String key) {
            doSetProperty("key", key);
            return this;
        }
        /**
         * Configure if the AgentClient should attempt a ping before returning
         * the Consul instance.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: common
         */
        default ConsulEndpointProducerBuilder pingInstance(boolean pingInstance) {
            doSetProperty("pingInstance", pingInstance);
            return this;
        }
        /**
         * Configure if the AgentClient should attempt a ping before returning
         * the Consul instance.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: common
         */
        default ConsulEndpointProducerBuilder pingInstance(String pingInstance) {
            doSetProperty("pingInstance", pingInstance);
            return this;
        }
        /**
         * Read timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder readTimeout(Duration readTimeout) {
            doSetProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * Read timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder readTimeout(String readTimeout) {
            doSetProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * Read timeout for OkHttpClient. Deprecation note: Use readTimeout
         * instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointProducerBuilder readTimeoutMillis(
                Long readTimeoutMillis) {
            doSetProperty("readTimeoutMillis", readTimeoutMillis);
            return this;
        }
        /**
         * Read timeout for OkHttpClient. Deprecation note: Use readTimeout
         * instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointProducerBuilder readTimeoutMillis(
                String readTimeoutMillis) {
            doSetProperty("readTimeoutMillis", readTimeoutMillis);
            return this;
        }
        /**
         * Set tags. You can separate multiple tags by comma.
         * 
         * The option is a: <code>java.util.Set&lt;java.lang.String&gt;</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder tags(Set<String> tags) {
            doSetProperty("tags", tags);
            return this;
        }
        /**
         * Set tags. You can separate multiple tags by comma.
         * 
         * The option will be converted to a
         * <code>java.util.Set&lt;java.lang.String&gt;</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder tags(String tags) {
            doSetProperty("tags", tags);
            return this;
        }
        /**
         * The Consul agent URL.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder url(String url) {
            doSetProperty("url", url);
            return this;
        }
        /**
         * Write timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder writeTimeout(Duration writeTimeout) {
            doSetProperty("writeTimeout", writeTimeout);
            return this;
        }
        /**
         * Write timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointProducerBuilder writeTimeout(String writeTimeout) {
            doSetProperty("writeTimeout", writeTimeout);
            return this;
        }
        /**
         * Write timeout for OkHttpClient. Deprecation note: Use writeTimeout
         * instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointProducerBuilder writeTimeoutMillis(
                Long writeTimeoutMillis) {
            doSetProperty("writeTimeoutMillis", writeTimeoutMillis);
            return this;
        }
        /**
         * Write timeout for OkHttpClient. Deprecation note: Use writeTimeout
         * instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointProducerBuilder writeTimeoutMillis(
                String writeTimeoutMillis) {
            doSetProperty("writeTimeoutMillis", writeTimeoutMillis);
            return this;
        }
        /**
         * The default action. Can be overridden by CamelConsulAction.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: producer
         */
        default ConsulEndpointProducerBuilder action(String action) {
            doSetProperty("action", action);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default ConsulEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default ConsulEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Default to transform values retrieved from Consul i.e. on KV endpoint
         * to string.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default ConsulEndpointProducerBuilder valueAsString(
                boolean valueAsString) {
            doSetProperty("valueAsString", valueAsString);
            return this;
        }
        /**
         * Default to transform values retrieved from Consul i.e. on KV endpoint
         * to string.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default ConsulEndpointProducerBuilder valueAsString(String valueAsString) {
            doSetProperty("valueAsString", valueAsString);
            return this;
        }
        /**
         * Sets the ACL token to be used with Consul.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointProducerBuilder aclToken(String aclToken) {
            doSetProperty("aclToken", aclToken);
            return this;
        }
        /**
         * Sets the password to be used for basic authentication.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointProducerBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * SSL configuration using an
         * org.apache.camel.support.jsse.SSLContextParameters instance.
         * 
         * The option is a:
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointProducerBuilder sslContextParameters(
                Object sslContextParameters) {
            doSetProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * SSL configuration using an
         * org.apache.camel.support.jsse.SSLContextParameters instance.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointProducerBuilder sslContextParameters(
                String sslContextParameters) {
            doSetProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * Sets the username to be used for basic authentication.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointProducerBuilder userName(String userName) {
            doSetProperty("userName", userName);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Consul component.
     */
    public interface AdvancedConsulEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default ConsulEndpointProducerBuilder basic() {
            return (ConsulEndpointProducerBuilder) this;
        }
        /**
         * The consistencyMode used for queries, default
         * ConsistencyMode.DEFAULT.
         * 
         * The option is a:
         * <code>com.orbitz.consul.option.ConsistencyMode</code> type.
         * 
         * Default: DEFAULT
         * Group: advanced
         */
        default AdvancedConsulEndpointProducerBuilder consistencyMode(
                Object consistencyMode) {
            doSetProperty("consistencyMode", consistencyMode);
            return this;
        }
        /**
         * The consistencyMode used for queries, default
         * ConsistencyMode.DEFAULT.
         * 
         * The option will be converted to a
         * <code>com.orbitz.consul.option.ConsistencyMode</code> type.
         * 
         * Default: DEFAULT
         * Group: advanced
         */
        default AdvancedConsulEndpointProducerBuilder consistencyMode(
                String consistencyMode) {
            doSetProperty("consistencyMode", consistencyMode);
            return this;
        }
        /**
         * The data center.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointProducerBuilder datacenter(
                String datacenter) {
            doSetProperty("datacenter", datacenter);
            return this;
        }
        /**
         * The near node to use for queries.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointProducerBuilder nearNode(String nearNode) {
            doSetProperty("nearNode", nearNode);
            return this;
        }
        /**
         * The note meta-data to use for queries.
         * 
         * The option is a: <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointProducerBuilder nodeMeta(
                List<String> nodeMeta) {
            doSetProperty("nodeMeta", nodeMeta);
            return this;
        }
        /**
         * The note meta-data to use for queries.
         * 
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointProducerBuilder nodeMeta(String nodeMeta) {
            doSetProperty("nodeMeta", nodeMeta);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedConsulEndpointProducerBuilder synchronous(
                boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedConsulEndpointProducerBuilder synchronous(
                String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Consul component.
     */
    public interface ConsulEndpointBuilder
            extends
                ConsulEndpointConsumerBuilder,
                ConsulEndpointProducerBuilder {
        default AdvancedConsulEndpointBuilder advanced() {
            return (AdvancedConsulEndpointBuilder) this;
        }
        /**
         * Connect timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder connectTimeout(Duration connectTimeout) {
            doSetProperty("connectTimeout", connectTimeout);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder connectTimeout(String connectTimeout) {
            doSetProperty("connectTimeout", connectTimeout);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient. Deprecation note: Use
         * connectTimeout instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointBuilder connectTimeoutMillis(
                Long connectTimeoutMillis) {
            doSetProperty("connectTimeoutMillis", connectTimeoutMillis);
            return this;
        }
        /**
         * Connect timeout for OkHttpClient. Deprecation note: Use
         * connectTimeout instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointBuilder connectTimeoutMillis(
                String connectTimeoutMillis) {
            doSetProperty("connectTimeoutMillis", connectTimeoutMillis);
            return this;
        }
        /**
         * Reference to a com.orbitz.consul.Consul in the registry.
         * 
         * The option is a: <code>com.orbitz.consul.Consul</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder consulClient(Object consulClient) {
            doSetProperty("consulClient", consulClient);
            return this;
        }
        /**
         * Reference to a com.orbitz.consul.Consul in the registry.
         * 
         * The option will be converted to a
         * <code>com.orbitz.consul.Consul</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder consulClient(String consulClient) {
            doSetProperty("consulClient", consulClient);
            return this;
        }
        /**
         * The default key. Can be overridden by CamelConsulKey.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder key(String key) {
            doSetProperty("key", key);
            return this;
        }
        /**
         * Configure if the AgentClient should attempt a ping before returning
         * the Consul instance.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: common
         */
        default ConsulEndpointBuilder pingInstance(boolean pingInstance) {
            doSetProperty("pingInstance", pingInstance);
            return this;
        }
        /**
         * Configure if the AgentClient should attempt a ping before returning
         * the Consul instance.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: common
         */
        default ConsulEndpointBuilder pingInstance(String pingInstance) {
            doSetProperty("pingInstance", pingInstance);
            return this;
        }
        /**
         * Read timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder readTimeout(Duration readTimeout) {
            doSetProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * Read timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder readTimeout(String readTimeout) {
            doSetProperty("readTimeout", readTimeout);
            return this;
        }
        /**
         * Read timeout for OkHttpClient. Deprecation note: Use readTimeout
         * instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointBuilder readTimeoutMillis(Long readTimeoutMillis) {
            doSetProperty("readTimeoutMillis", readTimeoutMillis);
            return this;
        }
        /**
         * Read timeout for OkHttpClient. Deprecation note: Use readTimeout
         * instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointBuilder readTimeoutMillis(String readTimeoutMillis) {
            doSetProperty("readTimeoutMillis", readTimeoutMillis);
            return this;
        }
        /**
         * Set tags. You can separate multiple tags by comma.
         * 
         * The option is a: <code>java.util.Set&lt;java.lang.String&gt;</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder tags(Set<String> tags) {
            doSetProperty("tags", tags);
            return this;
        }
        /**
         * Set tags. You can separate multiple tags by comma.
         * 
         * The option will be converted to a
         * <code>java.util.Set&lt;java.lang.String&gt;</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder tags(String tags) {
            doSetProperty("tags", tags);
            return this;
        }
        /**
         * The Consul agent URL.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder url(String url) {
            doSetProperty("url", url);
            return this;
        }
        /**
         * Write timeout for OkHttpClient.
         * 
         * The option is a: <code>java.time.Duration</code> type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder writeTimeout(Duration writeTimeout) {
            doSetProperty("writeTimeout", writeTimeout);
            return this;
        }
        /**
         * Write timeout for OkHttpClient.
         * 
         * The option will be converted to a <code>java.time.Duration</code>
         * type.
         * 
         * Group: common
         */
        default ConsulEndpointBuilder writeTimeout(String writeTimeout) {
            doSetProperty("writeTimeout", writeTimeout);
            return this;
        }
        /**
         * Write timeout for OkHttpClient. Deprecation note: Use writeTimeout
         * instead.
         * 
         * The option is a: <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointBuilder writeTimeoutMillis(Long writeTimeoutMillis) {
            doSetProperty("writeTimeoutMillis", writeTimeoutMillis);
            return this;
        }
        /**
         * Write timeout for OkHttpClient. Deprecation note: Use writeTimeout
         * instead.
         * 
         * The option will be converted to a <code>java.lang.Long</code> type.
         * 
         * Group: common
         */
        @Deprecated
        default ConsulEndpointBuilder writeTimeoutMillis(
                String writeTimeoutMillis) {
            doSetProperty("writeTimeoutMillis", writeTimeoutMillis);
            return this;
        }
        /**
         * Sets the ACL token to be used with Consul.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointBuilder aclToken(String aclToken) {
            doSetProperty("aclToken", aclToken);
            return this;
        }
        /**
         * Sets the password to be used for basic authentication.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * SSL configuration using an
         * org.apache.camel.support.jsse.SSLContextParameters instance.
         * 
         * The option is a:
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointBuilder sslContextParameters(
                Object sslContextParameters) {
            doSetProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * SSL configuration using an
         * org.apache.camel.support.jsse.SSLContextParameters instance.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointBuilder sslContextParameters(
                String sslContextParameters) {
            doSetProperty("sslContextParameters", sslContextParameters);
            return this;
        }
        /**
         * Sets the username to be used for basic authentication.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ConsulEndpointBuilder userName(String userName) {
            doSetProperty("userName", userName);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Consul component.
     */
    public interface AdvancedConsulEndpointBuilder
            extends
                AdvancedConsulEndpointConsumerBuilder,
                AdvancedConsulEndpointProducerBuilder {
        default ConsulEndpointBuilder basic() {
            return (ConsulEndpointBuilder) this;
        }
        /**
         * The consistencyMode used for queries, default
         * ConsistencyMode.DEFAULT.
         * 
         * The option is a:
         * <code>com.orbitz.consul.option.ConsistencyMode</code> type.
         * 
         * Default: DEFAULT
         * Group: advanced
         */
        default AdvancedConsulEndpointBuilder consistencyMode(
                Object consistencyMode) {
            doSetProperty("consistencyMode", consistencyMode);
            return this;
        }
        /**
         * The consistencyMode used for queries, default
         * ConsistencyMode.DEFAULT.
         * 
         * The option will be converted to a
         * <code>com.orbitz.consul.option.ConsistencyMode</code> type.
         * 
         * Default: DEFAULT
         * Group: advanced
         */
        default AdvancedConsulEndpointBuilder consistencyMode(
                String consistencyMode) {
            doSetProperty("consistencyMode", consistencyMode);
            return this;
        }
        /**
         * The data center.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointBuilder datacenter(String datacenter) {
            doSetProperty("datacenter", datacenter);
            return this;
        }
        /**
         * The near node to use for queries.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointBuilder nearNode(String nearNode) {
            doSetProperty("nearNode", nearNode);
            return this;
        }
        /**
         * The note meta-data to use for queries.
         * 
         * The option is a: <code>java.util.List&lt;java.lang.String&gt;</code>
         * type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointBuilder nodeMeta(List<String> nodeMeta) {
            doSetProperty("nodeMeta", nodeMeta);
            return this;
        }
        /**
         * The note meta-data to use for queries.
         * 
         * The option will be converted to a
         * <code>java.util.List&lt;java.lang.String&gt;</code> type.
         * 
         * Group: advanced
         */
        default AdvancedConsulEndpointBuilder nodeMeta(String nodeMeta) {
            doSetProperty("nodeMeta", nodeMeta);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedConsulEndpointBuilder synchronous(boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedConsulEndpointBuilder synchronous(String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    public interface ConsulBuilders {
        /**
         * Consul (camel-consul)
         * Integrate with Consul service discovery and configuration store.
         * 
         * Category: cloud,api
         * Since: 2.18
         * Maven coordinates: org.apache.camel:camel-consul
         * 
         * Syntax: <code>consul:apiEndpoint</code>
         * 
         * Path parameter: apiEndpoint (required)
         * The API endpoint
         * 
         * @param path apiEndpoint
         */
        default ConsulEndpointBuilder consul(String path) {
            return ConsulEndpointBuilderFactory.endpointBuilder("consul", path);
        }
        /**
         * Consul (camel-consul)
         * Integrate with Consul service discovery and configuration store.
         * 
         * Category: cloud,api
         * Since: 2.18
         * Maven coordinates: org.apache.camel:camel-consul
         * 
         * Syntax: <code>consul:apiEndpoint</code>
         * 
         * Path parameter: apiEndpoint (required)
         * The API endpoint
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path apiEndpoint
         */
        default ConsulEndpointBuilder consul(String componentName, String path) {
            return ConsulEndpointBuilderFactory.endpointBuilder(componentName, path);
        }
    }
    static ConsulEndpointBuilder endpointBuilder(
            String componentName,
            String path) {
        class ConsulEndpointBuilderImpl extends AbstractEndpointBuilder implements ConsulEndpointBuilder, AdvancedConsulEndpointBuilder {
            public ConsulEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new ConsulEndpointBuilderImpl(path);
    }
}