/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;

/**
 * Manage Zendesk tickets, users, organizations, etc.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface ZendeskEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Zendesk component.
     */
    public interface ZendeskEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedZendeskEndpointConsumerBuilder advanced() {
            return (AdvancedZendeskEndpointConsumerBuilder) this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointConsumerBuilder inBody(String inBody) {
            doSetProperty("inBody", inBody);
            return this;
        }
        /**
         * The server URL to connect.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointConsumerBuilder serverUrl(String serverUrl) {
            doSetProperty("serverUrl", serverUrl);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ZendeskEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ZendeskEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ZendeskEndpointConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            doSetProperty("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ZendeskEndpointConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            doSetProperty("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            doSetProperty("backoffErrorThreshold", backoffErrorThreshold);
            return this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            doSetProperty("backoffErrorThreshold", backoffErrorThreshold);
            return this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffIdleThreshold(
                int backoffIdleThreshold) {
            doSetProperty("backoffIdleThreshold", backoffIdleThreshold);
            return this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            doSetProperty("backoffIdleThreshold", backoffIdleThreshold);
            return this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffMultiplier(
                int backoffMultiplier) {
            doSetProperty("backoffMultiplier", backoffMultiplier);
            return this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffMultiplier(
                String backoffMultiplier) {
            doSetProperty("backoffMultiplier", backoffMultiplier);
            return this;
        }
        /**
         * Milliseconds before the next poll.
         * 
         * The option is a: <code>long</code> type.
         * 
         * Default: 500
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder delay(long delay) {
            doSetProperty("delay", delay);
            return this;
        }
        /**
         * Milliseconds before the next poll.
         * 
         * The option will be converted to a <code>long</code> type.
         * 
         * Default: 500
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder delay(String delay) {
            doSetProperty("delay", delay);
            return this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder greedy(boolean greedy) {
            doSetProperty("greedy", greedy);
            return this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder greedy(String greedy) {
            doSetProperty("greedy", greedy);
            return this;
        }
        /**
         * Milliseconds before the first poll starts.
         * 
         * The option is a: <code>long</code> type.
         * 
         * Default: 1000
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder initialDelay(long initialDelay) {
            doSetProperty("initialDelay", initialDelay);
            return this;
        }
        /**
         * Milliseconds before the first poll starts.
         * 
         * The option will be converted to a <code>long</code> type.
         * 
         * Default: 1000
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder initialDelay(String initialDelay) {
            doSetProperty("initialDelay", initialDelay);
            return this;
        }
        /**
         * Specifies a maximum limit of number of fires. So if you set it to 1,
         * the scheduler will only fire once. If you set it to 5, it will only
         * fire five times. A value of zero or negative means fire forever.
         * 
         * The option is a: <code>long</code> type.
         * 
         * Default: 0
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder repeatCount(long repeatCount) {
            doSetProperty("repeatCount", repeatCount);
            return this;
        }
        /**
         * Specifies a maximum limit of number of fires. So if you set it to 1,
         * the scheduler will only fire once. If you set it to 5, it will only
         * fire five times. A value of zero or negative means fire forever.
         * 
         * The option will be converted to a <code>long</code> type.
         * 
         * Default: 0
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder repeatCount(String repeatCount) {
            doSetProperty("repeatCount", repeatCount);
            return this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * 
         * The option is a: <code>org.apache.camel.LoggingLevel</code> type.
         * 
         * Default: trace
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder runLoggingLevel(
                LoggingLevel runLoggingLevel) {
            doSetProperty("runLoggingLevel", runLoggingLevel);
            return this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.LoggingLevel</code> type.
         * 
         * Default: trace
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder runLoggingLevel(
                String runLoggingLevel) {
            doSetProperty("runLoggingLevel", runLoggingLevel);
            return this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * 
         * The option is a:
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            doSetProperty("scheduledExecutorService", scheduledExecutorService);
            return this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * 
         * The option will be converted to a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            doSetProperty("scheduledExecutorService", scheduledExecutorService);
            return this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz
         * component. Use value spring or quartz for built in scheduler.
         * 
         * The option is a: <code>java.lang.Object</code> type.
         * 
         * Default: none
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder scheduler(Object scheduler) {
            doSetProperty("scheduler", scheduler);
            return this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz
         * component. Use value spring or quartz for built in scheduler.
         * 
         * The option will be converted to a <code>java.lang.Object</code> type.
         * 
         * Default: none
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder scheduler(String scheduler) {
            doSetProperty("scheduler", scheduler);
            return this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz, Spring based scheduler.
         * 
         * The option is a: <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * The option is multivalued, and you can use the
         * schedulerProperties(String, Object) method to add a value (call the
         * method multiple times to set more values).
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder schedulerProperties(
                String key,
                Object value) {
            doSetMultiValueProperty("schedulerProperties", "scheduler." + key, value);
            return this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz, Spring based scheduler.
         * 
         * The option is a: <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * The option is multivalued, and you can use the
         * schedulerProperties(String, Object) method to add a value (call the
         * method multiple times to set more values).
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder schedulerProperties(Map values) {
            doSetMultiValueProperties("schedulerProperties", "scheduler.", values);
            return this;
        }
        /**
         * Whether the scheduler should be auto started.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder startScheduler(
                boolean startScheduler) {
            doSetProperty("startScheduler", startScheduler);
            return this;
        }
        /**
         * Whether the scheduler should be auto started.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder startScheduler(
                String startScheduler) {
            doSetProperty("startScheduler", startScheduler);
            return this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * 
         * The option is a: <code>java.util.concurrent.TimeUnit</code> type.
         * 
         * Default: milliseconds
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder timeUnit(TimeUnit timeUnit) {
            doSetProperty("timeUnit", timeUnit);
            return this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * 
         * The option will be converted to a
         * <code>java.util.concurrent.TimeUnit</code> type.
         * 
         * Default: milliseconds
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder timeUnit(String timeUnit) {
            doSetProperty("timeUnit", timeUnit);
            return this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder useFixedDelay(
                boolean useFixedDelay) {
            doSetProperty("useFixedDelay", useFixedDelay);
            return this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder useFixedDelay(
                String useFixedDelay) {
            doSetProperty("useFixedDelay", useFixedDelay);
            return this;
        }
        /**
         * The OAuth token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointConsumerBuilder oauthToken(String oauthToken) {
            doSetProperty("oauthToken", oauthToken);
            return this;
        }
        /**
         * The password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointConsumerBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The security token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointConsumerBuilder token(String token) {
            doSetProperty("token", token);
            return this;
        }
        /**
         * The user name.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointConsumerBuilder username(String username) {
            doSetProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Zendesk component.
     */
    public interface AdvancedZendeskEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default ZendeskEndpointConsumerBuilder basic() {
            return (ZendeskEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option is a: <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option is a: <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * 
         * The option is a:
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            doSetProperty("pollStrategy", pollStrategy);
            return this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder pollStrategy(
                String pollStrategy) {
            doSetProperty("pollStrategy", pollStrategy);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointConsumerBuilder synchronous(
                String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Zendesk component.
     */
    public interface ZendeskEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedZendeskEndpointProducerBuilder advanced() {
            return (AdvancedZendeskEndpointProducerBuilder) this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointProducerBuilder inBody(String inBody) {
            doSetProperty("inBody", inBody);
            return this;
        }
        /**
         * The server URL to connect.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointProducerBuilder serverUrl(String serverUrl) {
            doSetProperty("serverUrl", serverUrl);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default ZendeskEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default ZendeskEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * The OAuth token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointProducerBuilder oauthToken(String oauthToken) {
            doSetProperty("oauthToken", oauthToken);
            return this;
        }
        /**
         * The password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointProducerBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The security token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointProducerBuilder token(String token) {
            doSetProperty("token", token);
            return this;
        }
        /**
         * The user name.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointProducerBuilder username(String username) {
            doSetProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Zendesk component.
     */
    public interface AdvancedZendeskEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default ZendeskEndpointProducerBuilder basic() {
            return (ZendeskEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointProducerBuilder synchronous(
                boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointProducerBuilder synchronous(
                String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Zendesk component.
     */
    public interface ZendeskEndpointBuilder
            extends
                ZendeskEndpointConsumerBuilder,
                ZendeskEndpointProducerBuilder {
        default AdvancedZendeskEndpointBuilder advanced() {
            return (AdvancedZendeskEndpointBuilder) this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointBuilder inBody(String inBody) {
            doSetProperty("inBody", inBody);
            return this;
        }
        /**
         * The server URL to connect.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointBuilder serverUrl(String serverUrl) {
            doSetProperty("serverUrl", serverUrl);
            return this;
        }
        /**
         * The OAuth token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointBuilder oauthToken(String oauthToken) {
            doSetProperty("oauthToken", oauthToken);
            return this;
        }
        /**
         * The password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The security token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointBuilder token(String token) {
            doSetProperty("token", token);
            return this;
        }
        /**
         * The user name.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointBuilder username(String username) {
            doSetProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Zendesk component.
     */
    public interface AdvancedZendeskEndpointBuilder
            extends
                AdvancedZendeskEndpointConsumerBuilder,
                AdvancedZendeskEndpointProducerBuilder {
        default ZendeskEndpointBuilder basic() {
            return (ZendeskEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointBuilder synchronous(boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointBuilder synchronous(String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    public interface ZendeskBuilders {
        /**
         * Zendesk (camel-zendesk)
         * Manage Zendesk tickets, users, organizations, etc.
         * 
         * Category: cloud,api,support
         * Since: 2.19
         * Maven coordinates: org.apache.camel:camel-zendesk
         * 
         * Syntax: <code>zendesk:methodName</code>
         * 
         * Path parameter: methodName (required)
         * What operation to use
         * There are 342 enums and the value can be one of:
         * add-tag-to-organisations, add-tag-to-ticket, add-tag-to-topics,
         * associate-attachments-to-article, change-user-password,
         * create-article, create-article-1, create-article-translation,
         * create-automation, create-category, create-category-translation,
         * create-comment, create-dynamic-content-item,
         * create-dynamic-content-item-variant, create-forum, create-group,
         * create-group-membership, create-group-membership-1, create-macro,
         * create-or-update-user, create-or-update-users,
         * create-or-update-users-1, create-or-update-users-async,
         * create-organization, create-organization-membership,
         * create-organization-membership-1, create-organization-memberships,
         * create-organization-memberships-1,
         * create-organization-memberships-async, create-organizations,
         * create-organizations-1, create-organizations-async,
         * create-permission-group, create-request, create-satisfaction-rating,
         * create-satisfaction-rating-1, create-section,
         * create-section-translation, create-target, create-ticket,
         * create-ticket-async, create-ticket-field, create-ticket-form,
         * create-ticket-from-tweet, create-tickets, create-tickets-1,
         * create-tickets-async, create-topic, create-trigger, create-upload,
         * create-upload-1, create-upload-2, create-upload-article,
         * create-upload-article-1, create-user, create-user-identity,
         * create-user-identity-1, create-user-segment, create-users,
         * create-users-1, create-users-async, delete-article,
         * delete-article-attachment, delete-article-attachment-1,
         * delete-attachment, delete-attachment-1, delete-automation,
         * delete-category, delete-dynamic-content-item,
         * delete-dynamic-content-item-variant, delete-forum, delete-group,
         * delete-group-1, delete-group-membership, delete-group-membership-1,
         * delete-group-membership-2, delete-group-membership-3,
         * delete-organization, delete-organization-1,
         * delete-organization-membership, delete-organization-membership-1,
         * delete-organization-membership-2, delete-organization-memberships,
         * delete-permission-group, delete-permission-group-1, delete-section,
         * delete-suspended-ticket, delete-suspended-ticket-1, delete-target,
         * delete-ticket, delete-ticket-1, delete-ticket-field,
         * delete-ticket-field-1, delete-tickets, delete-topic,
         * delete-translation, delete-translation-1, delete-trigger,
         * delete-upload, delete-upload-1, delete-user, delete-user-1,
         * delete-user-identity, delete-user-identity-1, delete-user-identity-2,
         * delete-user-segment, delete-user-segment-1, get-article,
         * get-article-from-search, get-article-from-search-1,
         * get-article-subscriptions, get-article-subscriptions-1,
         * get-article-translations, get-articles, get-articles-1,
         * get-articles-2, get-articles-3, get-articles-from-all-labels,
         * get-articles-from-any-labels, get-articles-from-page,
         * get-articles-incrementally, get-assignable-group-memberships,
         * get-assignable-group-memberships-1, get-assignable-groups,
         * get-attachment, get-attachment-1, get-attachments-from-article,
         * get-authenticated-user, get-auto-complete-organizations,
         * get-automation, get-automations, get-brands, get-cc-requests,
         * get-categories, get-category, get-category-translations,
         * get-compliance-deletion-statuses, get-current-user,
         * get-custom-agent-roles, get-deleted-tickets, get-deleted-tickets-1,
         * get-dynamic-content-item, get-dynamic-content-item-variant,
         * get-dynamic-content-item-variants, get-dynamic-content-items,
         * get-forum, get-forums, get-forums-1, get-group, get-group-membership,
         * get-group-membership-1, get-group-membership-by-user,
         * get-group-memberships, get-group-memberships-1,
         * get-group-organization, get-group-users, get-groups,
         * get-help-center-locales, get-holidays-for-schedule,
         * get-holidays-for-schedule-1, get-incremental-tickets-result,
         * get-job-status, get-job-status-async, get-job-statuses,
         * get-job-statuses-async, get-macro, get-macros, get-open-requests,
         * get-organization, get-organization-fields,
         * get-organization-membership, get-organization-membership-by-user,
         * get-organization-membership-for-user, get-organization-memberships,
         * get-organization-memberships-for-org,
         * get-organization-memberships-for-user, get-organization-tickets,
         * get-organization-users, get-organizations,
         * get-organizations-incrementally, get-permission-group,
         * get-permission-groups, get-recent-tickets, get-request,
         * get-request-comment, get-request-comment-1, get-request-comment-2,
         * get-request-comments, get-request-comments-1, get-requests,
         * get-satisfaction-rating, get-satisfaction-ratings, get-schedule,
         * get-schedule-1, get-schedules, get-search-results,
         * get-search-results-1, get-search-results-2, get-search-results-3,
         * get-search-results-4, get-section, get-section-subscriptions,
         * get-section-subscriptions-1, get-section-translations, get-sections,
         * get-sections-1, get-sections-2, get-solved-requests,
         * get-suspended-tickets, get-target, get-targets, get-ticket,
         * get-ticket-audit, get-ticket-audit-1, get-ticket-audit-2,
         * get-ticket-audits, get-ticket-audits-1, get-ticket-collaborators,
         * get-ticket-comments, get-ticket-comments-1, get-ticket-field,
         * get-ticket-fields, get-ticket-form, get-ticket-forms,
         * get-ticket-incidents, get-ticket-metric, get-ticket-metric-by-ticket,
         * get-ticket-metrics, get-tickets, get-tickets-1,
         * get-tickets-by-external-id, get-tickets-by-external-id-1,
         * get-tickets-from-search, get-tickets-incrementally,
         * get-tickets-incrementally-1, get-topic, get-topics, get-topics-1,
         * get-topics-2, get-topics-3, get-topics-by-user, get-trigger,
         * get-triggers, get-twitter-monitors, get-user, get-user-ccd-tickets,
         * get-user-fields, get-user-identities, get-user-identities-1,
         * get-user-identity, get-user-identity-1, get-user-identity-2,
         * get-user-related-info, get-user-requested-tickets, get-user-requests,
         * get-user-requests-1, get-user-segment, get-user-segments,
         * get-user-segments-1, get-user-segments-applicable,
         * get-user-subscriptions, get-user-subscriptions-1, get-users,
         * get-users-by-role, get-users-incrementally, import-ticket,
         * import-topic, lookup-organizations-by-external-id,
         * lookup-user-by-email, lookup-user-by-external-id,
         * macros-show-changes-to-ticket, macros-show-ticket-after-changes,
         * make-private-ticket-audit, make-private-ticket-audit-1,
         * make-private-ticket-audit-2, mark-ticket-as-spam,
         * mark-ticket-as-spam-1, merge-users, notify-app,
         * permanently-delete-ticket, permanently-delete-ticket-1,
         * permanently-delete-tickets, permanently-delete-user,
         * permanently-delete-user-1, queue-create-ticket-async,
         * remove-tag-from-organisations, remove-tag-from-ticket,
         * remove-tag-from-topics, request-verify-user-identity,
         * request-verify-user-identity-1, request-verify-user-identity-2,
         * reset-user-password, reset-user-password-1,
         * set-group-membership-as-default,
         * set-organization-membership-as-default, set-tag-on-organisations,
         * set-tag-on-ticket, set-tag-on-topics, set-user-primary-identity,
         * set-user-primary-identity-1, set-user-primary-identity-2,
         * suspend-user, trust-ticket-audit, trust-ticket-audit-1,
         * trust-ticket-audit-2, unsuspend-user, update-article,
         * update-article-translation, update-automation, update-category,
         * update-category-translation, update-dynamic-content-item,
         * update-dynamic-content-item-variant, update-forum, update-group,
         * update-installation, update-macro, update-organization,
         * update-organizations, update-organizations-1,
         * update-organizations-async, update-permission-group, update-request,
         * update-section, update-section-translation, update-ticket,
         * update-ticket-field, update-tickets, update-tickets-1,
         * update-tickets-async, update-topic, update-trigger, update-user,
         * update-user-identity, update-user-identity-1, update-user-segment,
         * update-users, update-users-1, update-users-async,
         * verify-user-identity, verify-user-identity-1, verify-user-identity-2
         * 
         * @param path methodName
         */
        default ZendeskEndpointBuilder zendesk(String path) {
            return ZendeskEndpointBuilderFactory.endpointBuilder("zendesk", path);
        }
        /**
         * Zendesk (camel-zendesk)
         * Manage Zendesk tickets, users, organizations, etc.
         * 
         * Category: cloud,api,support
         * Since: 2.19
         * Maven coordinates: org.apache.camel:camel-zendesk
         * 
         * Syntax: <code>zendesk:methodName</code>
         * 
         * Path parameter: methodName (required)
         * What operation to use
         * There are 342 enums and the value can be one of:
         * add-tag-to-organisations, add-tag-to-ticket, add-tag-to-topics,
         * associate-attachments-to-article, change-user-password,
         * create-article, create-article-1, create-article-translation,
         * create-automation, create-category, create-category-translation,
         * create-comment, create-dynamic-content-item,
         * create-dynamic-content-item-variant, create-forum, create-group,
         * create-group-membership, create-group-membership-1, create-macro,
         * create-or-update-user, create-or-update-users,
         * create-or-update-users-1, create-or-update-users-async,
         * create-organization, create-organization-membership,
         * create-organization-membership-1, create-organization-memberships,
         * create-organization-memberships-1,
         * create-organization-memberships-async, create-organizations,
         * create-organizations-1, create-organizations-async,
         * create-permission-group, create-request, create-satisfaction-rating,
         * create-satisfaction-rating-1, create-section,
         * create-section-translation, create-target, create-ticket,
         * create-ticket-async, create-ticket-field, create-ticket-form,
         * create-ticket-from-tweet, create-tickets, create-tickets-1,
         * create-tickets-async, create-topic, create-trigger, create-upload,
         * create-upload-1, create-upload-2, create-upload-article,
         * create-upload-article-1, create-user, create-user-identity,
         * create-user-identity-1, create-user-segment, create-users,
         * create-users-1, create-users-async, delete-article,
         * delete-article-attachment, delete-article-attachment-1,
         * delete-attachment, delete-attachment-1, delete-automation,
         * delete-category, delete-dynamic-content-item,
         * delete-dynamic-content-item-variant, delete-forum, delete-group,
         * delete-group-1, delete-group-membership, delete-group-membership-1,
         * delete-group-membership-2, delete-group-membership-3,
         * delete-organization, delete-organization-1,
         * delete-organization-membership, delete-organization-membership-1,
         * delete-organization-membership-2, delete-organization-memberships,
         * delete-permission-group, delete-permission-group-1, delete-section,
         * delete-suspended-ticket, delete-suspended-ticket-1, delete-target,
         * delete-ticket, delete-ticket-1, delete-ticket-field,
         * delete-ticket-field-1, delete-tickets, delete-topic,
         * delete-translation, delete-translation-1, delete-trigger,
         * delete-upload, delete-upload-1, delete-user, delete-user-1,
         * delete-user-identity, delete-user-identity-1, delete-user-identity-2,
         * delete-user-segment, delete-user-segment-1, get-article,
         * get-article-from-search, get-article-from-search-1,
         * get-article-subscriptions, get-article-subscriptions-1,
         * get-article-translations, get-articles, get-articles-1,
         * get-articles-2, get-articles-3, get-articles-from-all-labels,
         * get-articles-from-any-labels, get-articles-from-page,
         * get-articles-incrementally, get-assignable-group-memberships,
         * get-assignable-group-memberships-1, get-assignable-groups,
         * get-attachment, get-attachment-1, get-attachments-from-article,
         * get-authenticated-user, get-auto-complete-organizations,
         * get-automation, get-automations, get-brands, get-cc-requests,
         * get-categories, get-category, get-category-translations,
         * get-compliance-deletion-statuses, get-current-user,
         * get-custom-agent-roles, get-deleted-tickets, get-deleted-tickets-1,
         * get-dynamic-content-item, get-dynamic-content-item-variant,
         * get-dynamic-content-item-variants, get-dynamic-content-items,
         * get-forum, get-forums, get-forums-1, get-group, get-group-membership,
         * get-group-membership-1, get-group-membership-by-user,
         * get-group-memberships, get-group-memberships-1,
         * get-group-organization, get-group-users, get-groups,
         * get-help-center-locales, get-holidays-for-schedule,
         * get-holidays-for-schedule-1, get-incremental-tickets-result,
         * get-job-status, get-job-status-async, get-job-statuses,
         * get-job-statuses-async, get-macro, get-macros, get-open-requests,
         * get-organization, get-organization-fields,
         * get-organization-membership, get-organization-membership-by-user,
         * get-organization-membership-for-user, get-organization-memberships,
         * get-organization-memberships-for-org,
         * get-organization-memberships-for-user, get-organization-tickets,
         * get-organization-users, get-organizations,
         * get-organizations-incrementally, get-permission-group,
         * get-permission-groups, get-recent-tickets, get-request,
         * get-request-comment, get-request-comment-1, get-request-comment-2,
         * get-request-comments, get-request-comments-1, get-requests,
         * get-satisfaction-rating, get-satisfaction-ratings, get-schedule,
         * get-schedule-1, get-schedules, get-search-results,
         * get-search-results-1, get-search-results-2, get-search-results-3,
         * get-search-results-4, get-section, get-section-subscriptions,
         * get-section-subscriptions-1, get-section-translations, get-sections,
         * get-sections-1, get-sections-2, get-solved-requests,
         * get-suspended-tickets, get-target, get-targets, get-ticket,
         * get-ticket-audit, get-ticket-audit-1, get-ticket-audit-2,
         * get-ticket-audits, get-ticket-audits-1, get-ticket-collaborators,
         * get-ticket-comments, get-ticket-comments-1, get-ticket-field,
         * get-ticket-fields, get-ticket-form, get-ticket-forms,
         * get-ticket-incidents, get-ticket-metric, get-ticket-metric-by-ticket,
         * get-ticket-metrics, get-tickets, get-tickets-1,
         * get-tickets-by-external-id, get-tickets-by-external-id-1,
         * get-tickets-from-search, get-tickets-incrementally,
         * get-tickets-incrementally-1, get-topic, get-topics, get-topics-1,
         * get-topics-2, get-topics-3, get-topics-by-user, get-trigger,
         * get-triggers, get-twitter-monitors, get-user, get-user-ccd-tickets,
         * get-user-fields, get-user-identities, get-user-identities-1,
         * get-user-identity, get-user-identity-1, get-user-identity-2,
         * get-user-related-info, get-user-requested-tickets, get-user-requests,
         * get-user-requests-1, get-user-segment, get-user-segments,
         * get-user-segments-1, get-user-segments-applicable,
         * get-user-subscriptions, get-user-subscriptions-1, get-users,
         * get-users-by-role, get-users-incrementally, import-ticket,
         * import-topic, lookup-organizations-by-external-id,
         * lookup-user-by-email, lookup-user-by-external-id,
         * macros-show-changes-to-ticket, macros-show-ticket-after-changes,
         * make-private-ticket-audit, make-private-ticket-audit-1,
         * make-private-ticket-audit-2, mark-ticket-as-spam,
         * mark-ticket-as-spam-1, merge-users, notify-app,
         * permanently-delete-ticket, permanently-delete-ticket-1,
         * permanently-delete-tickets, permanently-delete-user,
         * permanently-delete-user-1, queue-create-ticket-async,
         * remove-tag-from-organisations, remove-tag-from-ticket,
         * remove-tag-from-topics, request-verify-user-identity,
         * request-verify-user-identity-1, request-verify-user-identity-2,
         * reset-user-password, reset-user-password-1,
         * set-group-membership-as-default,
         * set-organization-membership-as-default, set-tag-on-organisations,
         * set-tag-on-ticket, set-tag-on-topics, set-user-primary-identity,
         * set-user-primary-identity-1, set-user-primary-identity-2,
         * suspend-user, trust-ticket-audit, trust-ticket-audit-1,
         * trust-ticket-audit-2, unsuspend-user, update-article,
         * update-article-translation, update-automation, update-category,
         * update-category-translation, update-dynamic-content-item,
         * update-dynamic-content-item-variant, update-forum, update-group,
         * update-installation, update-macro, update-organization,
         * update-organizations, update-organizations-1,
         * update-organizations-async, update-permission-group, update-request,
         * update-section, update-section-translation, update-ticket,
         * update-ticket-field, update-tickets, update-tickets-1,
         * update-tickets-async, update-topic, update-trigger, update-user,
         * update-user-identity, update-user-identity-1, update-user-segment,
         * update-users, update-users-1, update-users-async,
         * verify-user-identity, verify-user-identity-1, verify-user-identity-2
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path methodName
         */
        default ZendeskEndpointBuilder zendesk(String componentName, String path) {
            return ZendeskEndpointBuilderFactory.endpointBuilder(componentName, path);
        }
    }
    static ZendeskEndpointBuilder endpointBuilder(
            String componentName,
            String path) {
        class ZendeskEndpointBuilderImpl extends AbstractEndpointBuilder implements ZendeskEndpointBuilder, AdvancedZendeskEndpointBuilder {
            public ZendeskEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new ZendeskEndpointBuilderImpl(path);
    }
}