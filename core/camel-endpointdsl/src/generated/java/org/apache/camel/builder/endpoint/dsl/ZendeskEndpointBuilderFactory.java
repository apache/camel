/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.builder.endpoint.dsl;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.EndpointConsumerBuilder;
import org.apache.camel.builder.EndpointProducerBuilder;
import org.apache.camel.builder.endpoint.AbstractEndpointBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;

/**
 * Manage Zendesk tickets, users, organizations, etc.
 * 
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface ZendeskEndpointBuilderFactory {


    /**
     * Builder for endpoint consumers for the Zendesk component.
     */
    public interface ZendeskEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default AdvancedZendeskEndpointConsumerBuilder advanced() {
            return (AdvancedZendeskEndpointConsumerBuilder) this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointConsumerBuilder inBody(String inBody) {
            doSetProperty("inBody", inBody);
            return this;
        }
        /**
         * The server URL to connect.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointConsumerBuilder serverUrl(String serverUrl) {
            doSetProperty("serverUrl", serverUrl);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ZendeskEndpointConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ZendeskEndpointConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            doSetProperty("bridgeErrorHandler", bridgeErrorHandler);
            return this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ZendeskEndpointConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            doSetProperty("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: consumer
         */
        default ZendeskEndpointConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            doSetProperty("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            doSetProperty("backoffErrorThreshold", backoffErrorThreshold);
            return this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            doSetProperty("backoffErrorThreshold", backoffErrorThreshold);
            return this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffIdleThreshold(
                int backoffIdleThreshold) {
            doSetProperty("backoffIdleThreshold", backoffIdleThreshold);
            return this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            doSetProperty("backoffIdleThreshold", backoffIdleThreshold);
            return this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * 
         * The option is a: <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffMultiplier(
                int backoffMultiplier) {
            doSetProperty("backoffMultiplier", backoffMultiplier);
            return this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * 
         * The option will be converted to a <code>int</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder backoffMultiplier(
                String backoffMultiplier) {
            doSetProperty("backoffMultiplier", backoffMultiplier);
            return this;
        }
        /**
         * Milliseconds before the next poll.
         * 
         * The option is a: <code>long</code> type.
         * 
         * Default: 500
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder delay(long delay) {
            doSetProperty("delay", delay);
            return this;
        }
        /**
         * Milliseconds before the next poll.
         * 
         * The option will be converted to a <code>long</code> type.
         * 
         * Default: 500
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder delay(String delay) {
            doSetProperty("delay", delay);
            return this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder greedy(boolean greedy) {
            doSetProperty("greedy", greedy);
            return this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder greedy(String greedy) {
            doSetProperty("greedy", greedy);
            return this;
        }
        /**
         * Milliseconds before the first poll starts.
         * 
         * The option is a: <code>long</code> type.
         * 
         * Default: 1000
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder initialDelay(long initialDelay) {
            doSetProperty("initialDelay", initialDelay);
            return this;
        }
        /**
         * Milliseconds before the first poll starts.
         * 
         * The option will be converted to a <code>long</code> type.
         * 
         * Default: 1000
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder initialDelay(String initialDelay) {
            doSetProperty("initialDelay", initialDelay);
            return this;
        }
        /**
         * Specifies a maximum limit of number of fires. So if you set it to 1,
         * the scheduler will only fire once. If you set it to 5, it will only
         * fire five times. A value of zero or negative means fire forever.
         * 
         * The option is a: <code>long</code> type.
         * 
         * Default: 0
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder repeatCount(long repeatCount) {
            doSetProperty("repeatCount", repeatCount);
            return this;
        }
        /**
         * Specifies a maximum limit of number of fires. So if you set it to 1,
         * the scheduler will only fire once. If you set it to 5, it will only
         * fire five times. A value of zero or negative means fire forever.
         * 
         * The option will be converted to a <code>long</code> type.
         * 
         * Default: 0
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder repeatCount(String repeatCount) {
            doSetProperty("repeatCount", repeatCount);
            return this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * 
         * The option is a: <code>org.apache.camel.LoggingLevel</code> type.
         * 
         * Default: TRACE
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder runLoggingLevel(
                LoggingLevel runLoggingLevel) {
            doSetProperty("runLoggingLevel", runLoggingLevel);
            return this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.LoggingLevel</code> type.
         * 
         * Default: TRACE
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder runLoggingLevel(
                String runLoggingLevel) {
            doSetProperty("runLoggingLevel", runLoggingLevel);
            return this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * 
         * The option is a:
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            doSetProperty("scheduledExecutorService", scheduledExecutorService);
            return this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * 
         * The option will be converted to a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            doSetProperty("scheduledExecutorService", scheduledExecutorService);
            return this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz
         * component. Use value spring or quartz for built in scheduler.
         * 
         * The option is a: <code>java.lang.Object</code> type.
         * 
         * Default: none
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder scheduler(Object scheduler) {
            doSetProperty("scheduler", scheduler);
            return this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz
         * component. Use value spring or quartz for built in scheduler.
         * 
         * The option will be converted to a <code>java.lang.Object</code> type.
         * 
         * Default: none
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder scheduler(String scheduler) {
            doSetProperty("scheduler", scheduler);
            return this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz, Spring based scheduler.
         * 
         * The option is a: <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * The option is multivalued, and you can use the
         * schedulerProperties(String, Object) method to add a value (call the
         * method multiple times to set more values).
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder schedulerProperties(
                String key,
                Object value) {
            doSetMultiValueProperty("schedulerProperties", "scheduler." + key, value);
            return this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz, Spring based scheduler.
         * 
         * The option is a: <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * The option is multivalued, and you can use the
         * schedulerProperties(String, Object) method to add a value (call the
         * method multiple times to set more values).
         * 
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder schedulerProperties(Map values) {
            doSetMultiValueProperties("schedulerProperties", "scheduler.", values);
            return this;
        }
        /**
         * Whether the scheduler should be auto started.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder startScheduler(
                boolean startScheduler) {
            doSetProperty("startScheduler", startScheduler);
            return this;
        }
        /**
         * Whether the scheduler should be auto started.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder startScheduler(
                String startScheduler) {
            doSetProperty("startScheduler", startScheduler);
            return this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * 
         * The option is a: <code>java.util.concurrent.TimeUnit</code> type.
         * 
         * Default: MILLISECONDS
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder timeUnit(TimeUnit timeUnit) {
            doSetProperty("timeUnit", timeUnit);
            return this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * 
         * The option will be converted to a
         * <code>java.util.concurrent.TimeUnit</code> type.
         * 
         * Default: MILLISECONDS
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder timeUnit(String timeUnit) {
            doSetProperty("timeUnit", timeUnit);
            return this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: true
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder useFixedDelay(
                boolean useFixedDelay) {
            doSetProperty("useFixedDelay", useFixedDelay);
            return this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: true
         * Group: scheduler
         */
        default ZendeskEndpointConsumerBuilder useFixedDelay(
                String useFixedDelay) {
            doSetProperty("useFixedDelay", useFixedDelay);
            return this;
        }
        /**
         * The OAuth token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointConsumerBuilder oauthToken(String oauthToken) {
            doSetProperty("oauthToken", oauthToken);
            return this;
        }
        /**
         * The password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointConsumerBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The security token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointConsumerBuilder token(String token) {
            doSetProperty("token", token);
            return this;
        }
        /**
         * The user name.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointConsumerBuilder username(String username) {
            doSetProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint consumers for the Zendesk component.
     */
    public interface AdvancedZendeskEndpointConsumerBuilder
            extends
                EndpointConsumerBuilder {
        default ZendeskEndpointConsumerBuilder basic() {
            return (ZendeskEndpointConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option is a: <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            doSetProperty("exceptionHandler", exceptionHandler);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option is a: <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder exchangePattern(
                String exchangePattern) {
            doSetProperty("exchangePattern", exchangePattern);
            return this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * 
         * The option is a:
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            doSetProperty("pollStrategy", pollStrategy);
            return this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * 
         * The option will be converted to a
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         * 
         * Group: consumer (advanced)
         */
        default AdvancedZendeskEndpointConsumerBuilder pollStrategy(
                String pollStrategy) {
            doSetProperty("pollStrategy", pollStrategy);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointConsumerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointConsumerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointConsumerBuilder synchronous(
                boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointConsumerBuilder synchronous(
                String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint producers for the Zendesk component.
     */
    public interface ZendeskEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default AdvancedZendeskEndpointProducerBuilder advanced() {
            return (AdvancedZendeskEndpointProducerBuilder) this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointProducerBuilder inBody(String inBody) {
            doSetProperty("inBody", inBody);
            return this;
        }
        /**
         * The server URL to connect.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointProducerBuilder serverUrl(String serverUrl) {
            doSetProperty("serverUrl", serverUrl);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default ZendeskEndpointProducerBuilder lazyStartProducer(
                boolean lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * Whether the producer should be started lazy (on the first message).
         * By starting lazy you can use this to allow CamelContext and routes to
         * startup in situations where a producer may otherwise fail during
         * starting and cause the route to fail being started. By deferring this
         * startup to be lazy then the startup failure can be handled during
         * routing messages via Camel's routing error handlers. Beware that when
         * the first message is processed then creating and starting the
         * producer may take a little time and prolong the total processing time
         * of the processing.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: producer
         */
        default ZendeskEndpointProducerBuilder lazyStartProducer(
                String lazyStartProducer) {
            doSetProperty("lazyStartProducer", lazyStartProducer);
            return this;
        }
        /**
         * The OAuth token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointProducerBuilder oauthToken(String oauthToken) {
            doSetProperty("oauthToken", oauthToken);
            return this;
        }
        /**
         * The password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointProducerBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The security token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointProducerBuilder token(String token) {
            doSetProperty("token", token);
            return this;
        }
        /**
         * The user name.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointProducerBuilder username(String username) {
            doSetProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint producers for the Zendesk component.
     */
    public interface AdvancedZendeskEndpointProducerBuilder
            extends
                EndpointProducerBuilder {
        default ZendeskEndpointProducerBuilder basic() {
            return (ZendeskEndpointProducerBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointProducerBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointProducerBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointProducerBuilder synchronous(
                boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointProducerBuilder synchronous(
                String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    /**
     * Builder for endpoint for the Zendesk component.
     */
    public interface ZendeskEndpointBuilder
            extends
                ZendeskEndpointConsumerBuilder,
                ZendeskEndpointProducerBuilder {
        default AdvancedZendeskEndpointBuilder advanced() {
            return (AdvancedZendeskEndpointBuilder) this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointBuilder inBody(String inBody) {
            doSetProperty("inBody", inBody);
            return this;
        }
        /**
         * The server URL to connect.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: common
         */
        default ZendeskEndpointBuilder serverUrl(String serverUrl) {
            doSetProperty("serverUrl", serverUrl);
            return this;
        }
        /**
         * The OAuth token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointBuilder oauthToken(String oauthToken) {
            doSetProperty("oauthToken", oauthToken);
            return this;
        }
        /**
         * The password.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointBuilder password(String password) {
            doSetProperty("password", password);
            return this;
        }
        /**
         * The security token.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointBuilder token(String token) {
            doSetProperty("token", token);
            return this;
        }
        /**
         * The user name.
         * 
         * The option is a: <code>java.lang.String</code> type.
         * 
         * Group: security
         */
        default ZendeskEndpointBuilder username(String username) {
            doSetProperty("username", username);
            return this;
        }
    }

    /**
     * Advanced builder for endpoint for the Zendesk component.
     */
    public interface AdvancedZendeskEndpointBuilder
            extends
                AdvancedZendeskEndpointConsumerBuilder,
                AdvancedZendeskEndpointProducerBuilder {
        default ZendeskEndpointBuilder basic() {
            return (ZendeskEndpointBuilder) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointBuilder basicPropertyBinding(
                boolean basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointBuilder basicPropertyBinding(
                String basicPropertyBinding) {
            doSetProperty("basicPropertyBinding", basicPropertyBinding);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option is a: <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointBuilder synchronous(boolean synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * 
         * The option will be converted to a <code>boolean</code> type.
         * 
         * Default: false
         * Group: advanced
         */
        default AdvancedZendeskEndpointBuilder synchronous(String synchronous) {
            doSetProperty("synchronous", synchronous);
            return this;
        }
    }

    public interface ZendeskBuilders {
        /**
         * Zendesk (camel-zendesk)
         * Manage Zendesk tickets, users, organizations, etc.
         * 
         * Category: cloud,api,support
         * Since: 2.19
         * Maven coordinates: org.apache.camel:camel-zendesk
         * 
         * Syntax: <code>zendesk:methodName</code>
         * 
         * Path parameter: methodName (required)
         * What operation to use
         * There are 342 enums and the value can be one of:
         * ADDTAGTOORGANISATIONS, ADDTAGTOTICKET, ADDTAGTOTOPICS,
         * ASSOCIATEATTACHMENTSTOARTICLE, CHANGEUSERPASSWORD, CREATEARTICLE,
         * CREATEARTICLE_1, CREATEARTICLETRANSLATION, CREATEAUTOMATION,
         * CREATECATEGORY, CREATECATEGORYTRANSLATION, CREATECOMMENT,
         * CREATEDYNAMICCONTENTITEM, CREATEDYNAMICCONTENTITEMVARIANT,
         * CREATEFORUM, CREATEGROUP, CREATEGROUPMEMBERSHIP,
         * CREATEGROUPMEMBERSHIP_1, CREATEMACRO, CREATEORUPDATEUSER,
         * CREATEORUPDATEUSERS, CREATEORUPDATEUSERS_1, CREATEORUPDATEUSERSASYNC,
         * CREATEORGANIZATION, CREATEORGANIZATIONMEMBERSHIP,
         * CREATEORGANIZATIONMEMBERSHIP_1, CREATEORGANIZATIONMEMBERSHIPS,
         * CREATEORGANIZATIONMEMBERSHIPS_1, CREATEORGANIZATIONMEMBERSHIPSASYNC,
         * CREATEORGANIZATIONS, CREATEORGANIZATIONS_1, CREATEORGANIZATIONSASYNC,
         * CREATEPERMISSIONGROUP, CREATEREQUEST, CREATESATISFACTIONRATING,
         * CREATESATISFACTIONRATING_1, CREATESECTION, CREATESECTIONTRANSLATION,
         * CREATETARGET, CREATETICKET, CREATETICKETASYNC, CREATETICKETFIELD,
         * CREATETICKETFORM, CREATETICKETFROMTWEET, CREATETICKETS,
         * CREATETICKETS_1, CREATETICKETSASYNC, CREATETOPIC, CREATETRIGGER,
         * CREATEUPLOAD, CREATEUPLOAD_1, CREATEUPLOAD_2, CREATEUPLOADARTICLE,
         * CREATEUPLOADARTICLE_1, CREATEUSER, CREATEUSERIDENTITY,
         * CREATEUSERIDENTITY_1, CREATEUSERSEGMENT, CREATEUSERS, CREATEUSERS_1,
         * CREATEUSERSASYNC, DELETEARTICLE, DELETEARTICLEATTACHMENT,
         * DELETEARTICLEATTACHMENT_1, DELETEATTACHMENT, DELETEATTACHMENT_1,
         * DELETEAUTOMATION, DELETECATEGORY, DELETEDYNAMICCONTENTITEM,
         * DELETEDYNAMICCONTENTITEMVARIANT, DELETEFORUM, DELETEGROUP,
         * DELETEGROUP_1, DELETEGROUPMEMBERSHIP, DELETEGROUPMEMBERSHIP_1,
         * DELETEGROUPMEMBERSHIP_2, DELETEGROUPMEMBERSHIP_3, DELETEORGANIZATION,
         * DELETEORGANIZATION_1, DELETEORGANIZATIONMEMBERSHIP,
         * DELETEORGANIZATIONMEMBERSHIP_1, DELETEORGANIZATIONMEMBERSHIP_2,
         * DELETEORGANIZATIONMEMBERSHIPS, DELETEPERMISSIONGROUP,
         * DELETEPERMISSIONGROUP_1, DELETESECTION, DELETESUSPENDEDTICKET,
         * DELETESUSPENDEDTICKET_1, DELETETARGET, DELETETICKET, DELETETICKET_1,
         * DELETETICKETFIELD, DELETETICKETFIELD_1, DELETETICKETS, DELETETOPIC,
         * DELETETRANSLATION, DELETETRANSLATION_1, DELETETRIGGER, DELETEUPLOAD,
         * DELETEUPLOAD_1, DELETEUSER, DELETEUSER_1, DELETEUSERIDENTITY,
         * DELETEUSERIDENTITY_1, DELETEUSERIDENTITY_2, DELETEUSERSEGMENT,
         * DELETEUSERSEGMENT_1, GETARTICLE, GETARTICLEFROMSEARCH,
         * GETARTICLEFROMSEARCH_1, GETARTICLESUBSCRIPTIONS,
         * GETARTICLESUBSCRIPTIONS_1, GETARTICLETRANSLATIONS, GETARTICLES,
         * GETARTICLES_1, GETARTICLES_2, GETARTICLES_3,
         * GETARTICLESFROMALLLABELS, GETARTICLESFROMANYLABELS,
         * GETARTICLESFROMPAGE, GETARTICLESINCREMENTALLY,
         * GETASSIGNABLEGROUPMEMBERSHIPS, GETASSIGNABLEGROUPMEMBERSHIPS_1,
         * GETASSIGNABLEGROUPS, GETATTACHMENT, GETATTACHMENT_1,
         * GETATTACHMENTSFROMARTICLE, GETAUTHENTICATEDUSER,
         * GETAUTOCOMPLETEORGANIZATIONS, GETAUTOMATION, GETAUTOMATIONS,
         * GETBRANDS, GETCCREQUESTS, GETCATEGORIES, GETCATEGORY,
         * GETCATEGORYTRANSLATIONS, GETCOMPLIANCEDELETIONSTATUSES,
         * GETCURRENTUSER, GETCUSTOMAGENTROLES, GETDELETEDTICKETS,
         * GETDELETEDTICKETS_1, GETDYNAMICCONTENTITEM,
         * GETDYNAMICCONTENTITEMVARIANT, GETDYNAMICCONTENTITEMVARIANTS,
         * GETDYNAMICCONTENTITEMS, GETFORUM, GETFORUMS, GETFORUMS_1, GETGROUP,
         * GETGROUPMEMBERSHIP, GETGROUPMEMBERSHIP_1, GETGROUPMEMBERSHIPBYUSER,
         * GETGROUPMEMBERSHIPS, GETGROUPMEMBERSHIPS_1, GETGROUPORGANIZATION,
         * GETGROUPUSERS, GETGROUPS, GETHELPCENTERLOCALES,
         * GETHOLIDAYSFORSCHEDULE, GETHOLIDAYSFORSCHEDULE_1,
         * GETINCREMENTALTICKETSRESULT, GETJOBSTATUS, GETJOBSTATUSASYNC,
         * GETJOBSTATUSES, GETJOBSTATUSESASYNC, GETMACRO, GETMACROS,
         * GETOPENREQUESTS, GETORGANIZATION, GETORGANIZATIONFIELDS,
         * GETORGANIZATIONMEMBERSHIP, GETORGANIZATIONMEMBERSHIPBYUSER,
         * GETORGANIZATIONMEMBERSHIPFORUSER, GETORGANIZATIONMEMBERSHIPS,
         * GETORGANIZATIONMEMBERSHIPSFORORG, GETORGANIZATIONMEMBERSHIPSFORUSER,
         * GETORGANIZATIONTICKETS, GETORGANIZATIONUSERS, GETORGANIZATIONS,
         * GETORGANIZATIONSINCREMENTALLY, GETPERMISSIONGROUP,
         * GETPERMISSIONGROUPS, GETRECENTTICKETS, GETREQUEST, GETREQUESTCOMMENT,
         * GETREQUESTCOMMENT_1, GETREQUESTCOMMENT_2, GETREQUESTCOMMENTS,
         * GETREQUESTCOMMENTS_1, GETREQUESTS, GETSATISFACTIONRATING,
         * GETSATISFACTIONRATINGS, GETSCHEDULE, GETSCHEDULE_1, GETSCHEDULES,
         * GETSEARCHRESULTS, GETSEARCHRESULTS_1, GETSEARCHRESULTS_2,
         * GETSEARCHRESULTS_3, GETSEARCHRESULTS_4, GETSECTION,
         * GETSECTIONSUBSCRIPTIONS, GETSECTIONSUBSCRIPTIONS_1,
         * GETSECTIONTRANSLATIONS, GETSECTIONS, GETSECTIONS_1, GETSECTIONS_2,
         * GETSOLVEDREQUESTS, GETSUSPENDEDTICKETS, GETTARGET, GETTARGETS,
         * GETTICKET, GETTICKETAUDIT, GETTICKETAUDIT_1, GETTICKETAUDIT_2,
         * GETTICKETAUDITS, GETTICKETAUDITS_1, GETTICKETCOLLABORATORS,
         * GETTICKETCOMMENTS, GETTICKETCOMMENTS_1, GETTICKETFIELD,
         * GETTICKETFIELDS, GETTICKETFORM, GETTICKETFORMS, GETTICKETINCIDENTS,
         * GETTICKETMETRIC, GETTICKETMETRICBYTICKET, GETTICKETMETRICS,
         * GETTICKETS, GETTICKETS_1, GETTICKETSBYEXTERNALID,
         * GETTICKETSBYEXTERNALID_1, GETTICKETSFROMSEARCH,
         * GETTICKETSINCREMENTALLY, GETTICKETSINCREMENTALLY_1, GETTOPIC,
         * GETTOPICS, GETTOPICS_1, GETTOPICS_2, GETTOPICS_3, GETTOPICSBYUSER,
         * GETTRIGGER, GETTRIGGERS, GETTWITTERMONITORS, GETUSER,
         * GETUSERCCDTICKETS, GETUSERFIELDS, GETUSERIDENTITIES,
         * GETUSERIDENTITIES_1, GETUSERIDENTITY, GETUSERIDENTITY_1,
         * GETUSERIDENTITY_2, GETUSERRELATEDINFO, GETUSERREQUESTEDTICKETS,
         * GETUSERREQUESTS, GETUSERREQUESTS_1, GETUSERSEGMENT, GETUSERSEGMENTS,
         * GETUSERSEGMENTS_1, GETUSERSEGMENTSAPPLICABLE, GETUSERSUBSCRIPTIONS,
         * GETUSERSUBSCRIPTIONS_1, GETUSERS, GETUSERSBYROLE,
         * GETUSERSINCREMENTALLY, IMPORTTICKET, IMPORTTOPIC,
         * LOOKUPORGANIZATIONSBYEXTERNALID, LOOKUPUSERBYEMAIL,
         * LOOKUPUSERBYEXTERNALID, MACROSSHOWCHANGESTOTICKET,
         * MACROSSHOWTICKETAFTERCHANGES, MAKEPRIVATETICKETAUDIT,
         * MAKEPRIVATETICKETAUDIT_1, MAKEPRIVATETICKETAUDIT_2, MARKTICKETASSPAM,
         * MARKTICKETASSPAM_1, MERGEUSERS, NOTIFYAPP, PERMANENTLYDELETETICKET,
         * PERMANENTLYDELETETICKET_1, PERMANENTLYDELETETICKETS,
         * PERMANENTLYDELETEUSER, PERMANENTLYDELETEUSER_1,
         * QUEUECREATETICKETASYNC, REMOVETAGFROMORGANISATIONS,
         * REMOVETAGFROMTICKET, REMOVETAGFROMTOPICS, REQUESTVERIFYUSERIDENTITY,
         * REQUESTVERIFYUSERIDENTITY_1, REQUESTVERIFYUSERIDENTITY_2,
         * RESETUSERPASSWORD, RESETUSERPASSWORD_1, SETGROUPMEMBERSHIPASDEFAULT,
         * SETORGANIZATIONMEMBERSHIPASDEFAULT, SETTAGONORGANISATIONS,
         * SETTAGONTICKET, SETTAGONTOPICS, SETUSERPRIMARYIDENTITY,
         * SETUSERPRIMARYIDENTITY_1, SETUSERPRIMARYIDENTITY_2, SUSPENDUSER,
         * TRUSTTICKETAUDIT, TRUSTTICKETAUDIT_1, TRUSTTICKETAUDIT_2,
         * UNSUSPENDUSER, UPDATEARTICLE, UPDATEARTICLETRANSLATION,
         * UPDATEAUTOMATION, UPDATECATEGORY, UPDATECATEGORYTRANSLATION,
         * UPDATEDYNAMICCONTENTITEM, UPDATEDYNAMICCONTENTITEMVARIANT,
         * UPDATEFORUM, UPDATEGROUP, UPDATEINSTALLATION, UPDATEMACRO,
         * UPDATEORGANIZATION, UPDATEORGANIZATIONS, UPDATEORGANIZATIONS_1,
         * UPDATEORGANIZATIONSASYNC, UPDATEPERMISSIONGROUP, UPDATEREQUEST,
         * UPDATESECTION, UPDATESECTIONTRANSLATION, UPDATETICKET,
         * UPDATETICKETFIELD, UPDATETICKETS, UPDATETICKETS_1,
         * UPDATETICKETSASYNC, UPDATETOPIC, UPDATETRIGGER, UPDATEUSER,
         * UPDATEUSERIDENTITY, UPDATEUSERIDENTITY_1, UPDATEUSERSEGMENT,
         * UPDATEUSERS, UPDATEUSERS_1, UPDATEUSERSASYNC, VERIFYUSERIDENTITY,
         * VERIFYUSERIDENTITY_1, VERIFYUSERIDENTITY_2
         * 
         * @param path methodName
         */
        default ZendeskEndpointBuilder zendesk(String path) {
            return ZendeskEndpointBuilderFactory.endpointBuilder("zendesk", path);
        }
        /**
         * Zendesk (camel-zendesk)
         * Manage Zendesk tickets, users, organizations, etc.
         * 
         * Category: cloud,api,support
         * Since: 2.19
         * Maven coordinates: org.apache.camel:camel-zendesk
         * 
         * Syntax: <code>zendesk:methodName</code>
         * 
         * Path parameter: methodName (required)
         * What operation to use
         * There are 342 enums and the value can be one of:
         * ADDTAGTOORGANISATIONS, ADDTAGTOTICKET, ADDTAGTOTOPICS,
         * ASSOCIATEATTACHMENTSTOARTICLE, CHANGEUSERPASSWORD, CREATEARTICLE,
         * CREATEARTICLE_1, CREATEARTICLETRANSLATION, CREATEAUTOMATION,
         * CREATECATEGORY, CREATECATEGORYTRANSLATION, CREATECOMMENT,
         * CREATEDYNAMICCONTENTITEM, CREATEDYNAMICCONTENTITEMVARIANT,
         * CREATEFORUM, CREATEGROUP, CREATEGROUPMEMBERSHIP,
         * CREATEGROUPMEMBERSHIP_1, CREATEMACRO, CREATEORUPDATEUSER,
         * CREATEORUPDATEUSERS, CREATEORUPDATEUSERS_1, CREATEORUPDATEUSERSASYNC,
         * CREATEORGANIZATION, CREATEORGANIZATIONMEMBERSHIP,
         * CREATEORGANIZATIONMEMBERSHIP_1, CREATEORGANIZATIONMEMBERSHIPS,
         * CREATEORGANIZATIONMEMBERSHIPS_1, CREATEORGANIZATIONMEMBERSHIPSASYNC,
         * CREATEORGANIZATIONS, CREATEORGANIZATIONS_1, CREATEORGANIZATIONSASYNC,
         * CREATEPERMISSIONGROUP, CREATEREQUEST, CREATESATISFACTIONRATING,
         * CREATESATISFACTIONRATING_1, CREATESECTION, CREATESECTIONTRANSLATION,
         * CREATETARGET, CREATETICKET, CREATETICKETASYNC, CREATETICKETFIELD,
         * CREATETICKETFORM, CREATETICKETFROMTWEET, CREATETICKETS,
         * CREATETICKETS_1, CREATETICKETSASYNC, CREATETOPIC, CREATETRIGGER,
         * CREATEUPLOAD, CREATEUPLOAD_1, CREATEUPLOAD_2, CREATEUPLOADARTICLE,
         * CREATEUPLOADARTICLE_1, CREATEUSER, CREATEUSERIDENTITY,
         * CREATEUSERIDENTITY_1, CREATEUSERSEGMENT, CREATEUSERS, CREATEUSERS_1,
         * CREATEUSERSASYNC, DELETEARTICLE, DELETEARTICLEATTACHMENT,
         * DELETEARTICLEATTACHMENT_1, DELETEATTACHMENT, DELETEATTACHMENT_1,
         * DELETEAUTOMATION, DELETECATEGORY, DELETEDYNAMICCONTENTITEM,
         * DELETEDYNAMICCONTENTITEMVARIANT, DELETEFORUM, DELETEGROUP,
         * DELETEGROUP_1, DELETEGROUPMEMBERSHIP, DELETEGROUPMEMBERSHIP_1,
         * DELETEGROUPMEMBERSHIP_2, DELETEGROUPMEMBERSHIP_3, DELETEORGANIZATION,
         * DELETEORGANIZATION_1, DELETEORGANIZATIONMEMBERSHIP,
         * DELETEORGANIZATIONMEMBERSHIP_1, DELETEORGANIZATIONMEMBERSHIP_2,
         * DELETEORGANIZATIONMEMBERSHIPS, DELETEPERMISSIONGROUP,
         * DELETEPERMISSIONGROUP_1, DELETESECTION, DELETESUSPENDEDTICKET,
         * DELETESUSPENDEDTICKET_1, DELETETARGET, DELETETICKET, DELETETICKET_1,
         * DELETETICKETFIELD, DELETETICKETFIELD_1, DELETETICKETS, DELETETOPIC,
         * DELETETRANSLATION, DELETETRANSLATION_1, DELETETRIGGER, DELETEUPLOAD,
         * DELETEUPLOAD_1, DELETEUSER, DELETEUSER_1, DELETEUSERIDENTITY,
         * DELETEUSERIDENTITY_1, DELETEUSERIDENTITY_2, DELETEUSERSEGMENT,
         * DELETEUSERSEGMENT_1, GETARTICLE, GETARTICLEFROMSEARCH,
         * GETARTICLEFROMSEARCH_1, GETARTICLESUBSCRIPTIONS,
         * GETARTICLESUBSCRIPTIONS_1, GETARTICLETRANSLATIONS, GETARTICLES,
         * GETARTICLES_1, GETARTICLES_2, GETARTICLES_3,
         * GETARTICLESFROMALLLABELS, GETARTICLESFROMANYLABELS,
         * GETARTICLESFROMPAGE, GETARTICLESINCREMENTALLY,
         * GETASSIGNABLEGROUPMEMBERSHIPS, GETASSIGNABLEGROUPMEMBERSHIPS_1,
         * GETASSIGNABLEGROUPS, GETATTACHMENT, GETATTACHMENT_1,
         * GETATTACHMENTSFROMARTICLE, GETAUTHENTICATEDUSER,
         * GETAUTOCOMPLETEORGANIZATIONS, GETAUTOMATION, GETAUTOMATIONS,
         * GETBRANDS, GETCCREQUESTS, GETCATEGORIES, GETCATEGORY,
         * GETCATEGORYTRANSLATIONS, GETCOMPLIANCEDELETIONSTATUSES,
         * GETCURRENTUSER, GETCUSTOMAGENTROLES, GETDELETEDTICKETS,
         * GETDELETEDTICKETS_1, GETDYNAMICCONTENTITEM,
         * GETDYNAMICCONTENTITEMVARIANT, GETDYNAMICCONTENTITEMVARIANTS,
         * GETDYNAMICCONTENTITEMS, GETFORUM, GETFORUMS, GETFORUMS_1, GETGROUP,
         * GETGROUPMEMBERSHIP, GETGROUPMEMBERSHIP_1, GETGROUPMEMBERSHIPBYUSER,
         * GETGROUPMEMBERSHIPS, GETGROUPMEMBERSHIPS_1, GETGROUPORGANIZATION,
         * GETGROUPUSERS, GETGROUPS, GETHELPCENTERLOCALES,
         * GETHOLIDAYSFORSCHEDULE, GETHOLIDAYSFORSCHEDULE_1,
         * GETINCREMENTALTICKETSRESULT, GETJOBSTATUS, GETJOBSTATUSASYNC,
         * GETJOBSTATUSES, GETJOBSTATUSESASYNC, GETMACRO, GETMACROS,
         * GETOPENREQUESTS, GETORGANIZATION, GETORGANIZATIONFIELDS,
         * GETORGANIZATIONMEMBERSHIP, GETORGANIZATIONMEMBERSHIPBYUSER,
         * GETORGANIZATIONMEMBERSHIPFORUSER, GETORGANIZATIONMEMBERSHIPS,
         * GETORGANIZATIONMEMBERSHIPSFORORG, GETORGANIZATIONMEMBERSHIPSFORUSER,
         * GETORGANIZATIONTICKETS, GETORGANIZATIONUSERS, GETORGANIZATIONS,
         * GETORGANIZATIONSINCREMENTALLY, GETPERMISSIONGROUP,
         * GETPERMISSIONGROUPS, GETRECENTTICKETS, GETREQUEST, GETREQUESTCOMMENT,
         * GETREQUESTCOMMENT_1, GETREQUESTCOMMENT_2, GETREQUESTCOMMENTS,
         * GETREQUESTCOMMENTS_1, GETREQUESTS, GETSATISFACTIONRATING,
         * GETSATISFACTIONRATINGS, GETSCHEDULE, GETSCHEDULE_1, GETSCHEDULES,
         * GETSEARCHRESULTS, GETSEARCHRESULTS_1, GETSEARCHRESULTS_2,
         * GETSEARCHRESULTS_3, GETSEARCHRESULTS_4, GETSECTION,
         * GETSECTIONSUBSCRIPTIONS, GETSECTIONSUBSCRIPTIONS_1,
         * GETSECTIONTRANSLATIONS, GETSECTIONS, GETSECTIONS_1, GETSECTIONS_2,
         * GETSOLVEDREQUESTS, GETSUSPENDEDTICKETS, GETTARGET, GETTARGETS,
         * GETTICKET, GETTICKETAUDIT, GETTICKETAUDIT_1, GETTICKETAUDIT_2,
         * GETTICKETAUDITS, GETTICKETAUDITS_1, GETTICKETCOLLABORATORS,
         * GETTICKETCOMMENTS, GETTICKETCOMMENTS_1, GETTICKETFIELD,
         * GETTICKETFIELDS, GETTICKETFORM, GETTICKETFORMS, GETTICKETINCIDENTS,
         * GETTICKETMETRIC, GETTICKETMETRICBYTICKET, GETTICKETMETRICS,
         * GETTICKETS, GETTICKETS_1, GETTICKETSBYEXTERNALID,
         * GETTICKETSBYEXTERNALID_1, GETTICKETSFROMSEARCH,
         * GETTICKETSINCREMENTALLY, GETTICKETSINCREMENTALLY_1, GETTOPIC,
         * GETTOPICS, GETTOPICS_1, GETTOPICS_2, GETTOPICS_3, GETTOPICSBYUSER,
         * GETTRIGGER, GETTRIGGERS, GETTWITTERMONITORS, GETUSER,
         * GETUSERCCDTICKETS, GETUSERFIELDS, GETUSERIDENTITIES,
         * GETUSERIDENTITIES_1, GETUSERIDENTITY, GETUSERIDENTITY_1,
         * GETUSERIDENTITY_2, GETUSERRELATEDINFO, GETUSERREQUESTEDTICKETS,
         * GETUSERREQUESTS, GETUSERREQUESTS_1, GETUSERSEGMENT, GETUSERSEGMENTS,
         * GETUSERSEGMENTS_1, GETUSERSEGMENTSAPPLICABLE, GETUSERSUBSCRIPTIONS,
         * GETUSERSUBSCRIPTIONS_1, GETUSERS, GETUSERSBYROLE,
         * GETUSERSINCREMENTALLY, IMPORTTICKET, IMPORTTOPIC,
         * LOOKUPORGANIZATIONSBYEXTERNALID, LOOKUPUSERBYEMAIL,
         * LOOKUPUSERBYEXTERNALID, MACROSSHOWCHANGESTOTICKET,
         * MACROSSHOWTICKETAFTERCHANGES, MAKEPRIVATETICKETAUDIT,
         * MAKEPRIVATETICKETAUDIT_1, MAKEPRIVATETICKETAUDIT_2, MARKTICKETASSPAM,
         * MARKTICKETASSPAM_1, MERGEUSERS, NOTIFYAPP, PERMANENTLYDELETETICKET,
         * PERMANENTLYDELETETICKET_1, PERMANENTLYDELETETICKETS,
         * PERMANENTLYDELETEUSER, PERMANENTLYDELETEUSER_1,
         * QUEUECREATETICKETASYNC, REMOVETAGFROMORGANISATIONS,
         * REMOVETAGFROMTICKET, REMOVETAGFROMTOPICS, REQUESTVERIFYUSERIDENTITY,
         * REQUESTVERIFYUSERIDENTITY_1, REQUESTVERIFYUSERIDENTITY_2,
         * RESETUSERPASSWORD, RESETUSERPASSWORD_1, SETGROUPMEMBERSHIPASDEFAULT,
         * SETORGANIZATIONMEMBERSHIPASDEFAULT, SETTAGONORGANISATIONS,
         * SETTAGONTICKET, SETTAGONTOPICS, SETUSERPRIMARYIDENTITY,
         * SETUSERPRIMARYIDENTITY_1, SETUSERPRIMARYIDENTITY_2, SUSPENDUSER,
         * TRUSTTICKETAUDIT, TRUSTTICKETAUDIT_1, TRUSTTICKETAUDIT_2,
         * UNSUSPENDUSER, UPDATEARTICLE, UPDATEARTICLETRANSLATION,
         * UPDATEAUTOMATION, UPDATECATEGORY, UPDATECATEGORYTRANSLATION,
         * UPDATEDYNAMICCONTENTITEM, UPDATEDYNAMICCONTENTITEMVARIANT,
         * UPDATEFORUM, UPDATEGROUP, UPDATEINSTALLATION, UPDATEMACRO,
         * UPDATEORGANIZATION, UPDATEORGANIZATIONS, UPDATEORGANIZATIONS_1,
         * UPDATEORGANIZATIONSASYNC, UPDATEPERMISSIONGROUP, UPDATEREQUEST,
         * UPDATESECTION, UPDATESECTIONTRANSLATION, UPDATETICKET,
         * UPDATETICKETFIELD, UPDATETICKETS, UPDATETICKETS_1,
         * UPDATETICKETSASYNC, UPDATETOPIC, UPDATETRIGGER, UPDATEUSER,
         * UPDATEUSERIDENTITY, UPDATEUSERIDENTITY_1, UPDATEUSERSEGMENT,
         * UPDATEUSERS, UPDATEUSERS_1, UPDATEUSERSASYNC, VERIFYUSERIDENTITY,
         * VERIFYUSERIDENTITY_1, VERIFYUSERIDENTITY_2
         * 
         * @param componentName to use a custom component name for the endpoint
         * instead of the default name
         * @param path methodName
         */
        default ZendeskEndpointBuilder zendesk(String componentName, String path) {
            return ZendeskEndpointBuilderFactory.endpointBuilder(componentName, path);
        }
    }
    static ZendeskEndpointBuilder endpointBuilder(
            String componentName,
            String path) {
        class ZendeskEndpointBuilderImpl extends AbstractEndpointBuilder implements ZendeskEndpointBuilder, AdvancedZendeskEndpointBuilder {
            public ZendeskEndpointBuilderImpl(String path) {
                super(componentName, path);
            }
        }
        return new ZendeskEndpointBuilderImpl(path);
    }
}