/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.processor.errorhandler;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.processor.errorhandler.RedeliveryPolicy;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class RedeliveryPolicyConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.processor.errorhandler.RedeliveryPolicy target = (org.apache.camel.processor.errorhandler.RedeliveryPolicy) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowredeliverywhilestopping":
        case "AllowRedeliveryWhileStopping": target.setAllowRedeliveryWhileStopping(property(camelContext, boolean.class, value)); return true;
        case "asyncdelayedredelivery":
        case "AsyncDelayedRedelivery": target.setAsyncDelayedRedelivery(property(camelContext, boolean.class, value)); return true;
        case "backoffmultiplier":
        case "BackOffMultiplier": target.setBackOffMultiplier(property(camelContext, double.class, value)); return true;
        case "collisionavoidancefactor":
        case "CollisionAvoidanceFactor": target.setCollisionAvoidanceFactor(property(camelContext, double.class, value)); return true;
        case "collisionavoidancepercent":
        case "CollisionAvoidancePercent": target.setCollisionAvoidancePercent(property(camelContext, double.class, value)); return true;
        case "delaypattern":
        case "DelayPattern": target.setDelayPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "exchangeformatterref":
        case "ExchangeFormatterRef": target.setExchangeFormatterRef(property(camelContext, java.lang.String.class, value)); return true;
        case "logcontinued":
        case "LogContinued": target.setLogContinued(property(camelContext, boolean.class, value)); return true;
        case "logexhausted":
        case "LogExhausted": target.setLogExhausted(property(camelContext, boolean.class, value)); return true;
        case "logexhaustedmessagebody":
        case "LogExhaustedMessageBody": target.setLogExhaustedMessageBody(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "logexhaustedmessagehistory":
        case "LogExhaustedMessageHistory": target.setLogExhaustedMessageHistory(property(camelContext, boolean.class, value)); return true;
        case "loghandled":
        case "LogHandled": target.setLogHandled(property(camelContext, boolean.class, value)); return true;
        case "lognewexception":
        case "LogNewException": target.setLogNewException(property(camelContext, boolean.class, value)); return true;
        case "logretryattempted":
        case "LogRetryAttempted": target.setLogRetryAttempted(property(camelContext, boolean.class, value)); return true;
        case "logretrystacktrace":
        case "LogRetryStackTrace": target.setLogRetryStackTrace(property(camelContext, boolean.class, value)); return true;
        case "logstacktrace":
        case "LogStackTrace": target.setLogStackTrace(property(camelContext, boolean.class, value)); return true;
        case "maximumredeliveries":
        case "MaximumRedeliveries": target.setMaximumRedeliveries(property(camelContext, int.class, value)); return true;
        case "maximumredeliverydelay":
        case "MaximumRedeliveryDelay": target.setMaximumRedeliveryDelay(property(camelContext, long.class, value)); return true;
        case "redeliverydelay":
        case "RedeliveryDelay": target.setRedeliveryDelay(property(camelContext, long.class, value)); return true;
        case "retriesexhaustedloglevel":
        case "RetriesExhaustedLogLevel": target.setRetriesExhaustedLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "retryattemptedloginterval":
        case "RetryAttemptedLogInterval": target.setRetryAttemptedLogInterval(property(camelContext, int.class, value)); return true;
        case "retryattemptedloglevel":
        case "RetryAttemptedLogLevel": target.setRetryAttemptedLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "usecollisionavoidance":
        case "UseCollisionAvoidance": target.setUseCollisionAvoidance(property(camelContext, boolean.class, value)); return true;
        case "useexponentialbackoff":
        case "UseExponentialBackOff": target.setUseExponentialBackOff(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowredeliverywhilestopping":
        case "AllowRedeliveryWhileStopping": return boolean.class;
        case "asyncdelayedredelivery":
        case "AsyncDelayedRedelivery": return boolean.class;
        case "backoffmultiplier":
        case "BackOffMultiplier": return double.class;
        case "collisionavoidancefactor":
        case "CollisionAvoidanceFactor": return double.class;
        case "collisionavoidancepercent":
        case "CollisionAvoidancePercent": return double.class;
        case "delaypattern":
        case "DelayPattern": return java.lang.String.class;
        case "exchangeformatterref":
        case "ExchangeFormatterRef": return java.lang.String.class;
        case "logcontinued":
        case "LogContinued": return boolean.class;
        case "logexhausted":
        case "LogExhausted": return boolean.class;
        case "logexhaustedmessagebody":
        case "LogExhaustedMessageBody": return java.lang.Boolean.class;
        case "logexhaustedmessagehistory":
        case "LogExhaustedMessageHistory": return boolean.class;
        case "loghandled":
        case "LogHandled": return boolean.class;
        case "lognewexception":
        case "LogNewException": return boolean.class;
        case "logretryattempted":
        case "LogRetryAttempted": return boolean.class;
        case "logretrystacktrace":
        case "LogRetryStackTrace": return boolean.class;
        case "logstacktrace":
        case "LogStackTrace": return boolean.class;
        case "maximumredeliveries":
        case "MaximumRedeliveries": return int.class;
        case "maximumredeliverydelay":
        case "MaximumRedeliveryDelay": return long.class;
        case "redeliverydelay":
        case "RedeliveryDelay": return long.class;
        case "retriesexhaustedloglevel":
        case "RetriesExhaustedLogLevel": return org.apache.camel.LoggingLevel.class;
        case "retryattemptedloginterval":
        case "RetryAttemptedLogInterval": return int.class;
        case "retryattemptedloglevel":
        case "RetryAttemptedLogLevel": return org.apache.camel.LoggingLevel.class;
        case "usecollisionavoidance":
        case "UseCollisionAvoidance": return boolean.class;
        case "useexponentialbackoff":
        case "UseExponentialBackOff": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.processor.errorhandler.RedeliveryPolicy target = (org.apache.camel.processor.errorhandler.RedeliveryPolicy) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowredeliverywhilestopping":
        case "AllowRedeliveryWhileStopping": return target.isAllowRedeliveryWhileStopping();
        case "asyncdelayedredelivery":
        case "AsyncDelayedRedelivery": return target.isAsyncDelayedRedelivery();
        case "backoffmultiplier":
        case "BackOffMultiplier": return target.getBackOffMultiplier();
        case "collisionavoidancefactor":
        case "CollisionAvoidanceFactor": return target.getCollisionAvoidanceFactor();
        case "collisionavoidancepercent":
        case "CollisionAvoidancePercent": return target.getCollisionAvoidancePercent();
        case "delaypattern":
        case "DelayPattern": return target.getDelayPattern();
        case "exchangeformatterref":
        case "ExchangeFormatterRef": return target.getExchangeFormatterRef();
        case "logcontinued":
        case "LogContinued": return target.isLogContinued();
        case "logexhausted":
        case "LogExhausted": return target.isLogExhausted();
        case "logexhaustedmessagebody":
        case "LogExhaustedMessageBody": return target.isLogExhaustedMessageBody();
        case "logexhaustedmessagehistory":
        case "LogExhaustedMessageHistory": return target.isLogExhaustedMessageHistory();
        case "loghandled":
        case "LogHandled": return target.isLogHandled();
        case "lognewexception":
        case "LogNewException": return target.isLogNewException();
        case "logretryattempted":
        case "LogRetryAttempted": return target.isLogRetryAttempted();
        case "logretrystacktrace":
        case "LogRetryStackTrace": return target.isLogRetryStackTrace();
        case "logstacktrace":
        case "LogStackTrace": return target.isLogStackTrace();
        case "maximumredeliveries":
        case "MaximumRedeliveries": return target.getMaximumRedeliveries();
        case "maximumredeliverydelay":
        case "MaximumRedeliveryDelay": return target.getMaximumRedeliveryDelay();
        case "redeliverydelay":
        case "RedeliveryDelay": return target.getRedeliveryDelay();
        case "retriesexhaustedloglevel":
        case "RetriesExhaustedLogLevel": return target.getRetriesExhaustedLogLevel();
        case "retryattemptedloginterval":
        case "RetryAttemptedLogInterval": return target.getRetryAttemptedLogInterval();
        case "retryattemptedloglevel":
        case "RetryAttemptedLogLevel": return target.getRetryAttemptedLogLevel();
        case "usecollisionavoidance":
        case "UseCollisionAvoidance": return target.isUseCollisionAvoidance();
        case "useexponentialbackoff":
        case "UseExponentialBackOff": return target.isUseExponentialBackOff();
        default: return null;
        }
    }
}

