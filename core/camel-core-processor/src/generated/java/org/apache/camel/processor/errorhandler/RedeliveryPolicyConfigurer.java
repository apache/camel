/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.processor.errorhandler;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.processor.errorhandler.RedeliveryPolicy;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class RedeliveryPolicyConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.processor.errorhandler.RedeliveryPolicy target = (org.apache.camel.processor.errorhandler.RedeliveryPolicy) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowredeliverywhilestopping":
        case "allowRedeliveryWhileStopping": target.setAllowRedeliveryWhileStopping(property(camelContext, boolean.class, value)); return true;
        case "asyncdelayedredelivery":
        case "asyncDelayedRedelivery": target.setAsyncDelayedRedelivery(property(camelContext, boolean.class, value)); return true;
        case "backoffmultiplier":
        case "backOffMultiplier": target.setBackOffMultiplier(property(camelContext, double.class, value)); return true;
        case "collisionavoidancefactor":
        case "collisionAvoidanceFactor": target.setCollisionAvoidanceFactor(property(camelContext, double.class, value)); return true;
        case "collisionavoidancepercent":
        case "collisionAvoidancePercent": target.setCollisionAvoidancePercent(property(camelContext, double.class, value)); return true;
        case "delaypattern":
        case "delayPattern": target.setDelayPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "exchangeformatterref":
        case "exchangeFormatterRef": target.setExchangeFormatterRef(property(camelContext, java.lang.String.class, value)); return true;
        case "logcontinued":
        case "logContinued": target.setLogContinued(property(camelContext, boolean.class, value)); return true;
        case "logexhausted":
        case "logExhausted": target.setLogExhausted(property(camelContext, boolean.class, value)); return true;
        case "logexhaustedmessagebody":
        case "logExhaustedMessageBody": target.setLogExhaustedMessageBody(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "logexhaustedmessagehistory":
        case "logExhaustedMessageHistory": target.setLogExhaustedMessageHistory(property(camelContext, boolean.class, value)); return true;
        case "loghandled":
        case "logHandled": target.setLogHandled(property(camelContext, boolean.class, value)); return true;
        case "lognewexception":
        case "logNewException": target.setLogNewException(property(camelContext, boolean.class, value)); return true;
        case "logretryattempted":
        case "logRetryAttempted": target.setLogRetryAttempted(property(camelContext, boolean.class, value)); return true;
        case "logretrystacktrace":
        case "logRetryStackTrace": target.setLogRetryStackTrace(property(camelContext, boolean.class, value)); return true;
        case "logstacktrace":
        case "logStackTrace": target.setLogStackTrace(property(camelContext, boolean.class, value)); return true;
        case "maximumredeliveries":
        case "maximumRedeliveries": target.setMaximumRedeliveries(property(camelContext, int.class, value)); return true;
        case "maximumredeliverydelay":
        case "maximumRedeliveryDelay": target.setMaximumRedeliveryDelay(property(camelContext, long.class, value)); return true;
        case "redeliverydelay":
        case "redeliveryDelay": target.setRedeliveryDelay(property(camelContext, long.class, value)); return true;
        case "retriesexhaustedloglevel":
        case "retriesExhaustedLogLevel": target.setRetriesExhaustedLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "retryattemptedloginterval":
        case "retryAttemptedLogInterval": target.setRetryAttemptedLogInterval(property(camelContext, int.class, value)); return true;
        case "retryattemptedloglevel":
        case "retryAttemptedLogLevel": target.setRetryAttemptedLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "usecollisionavoidance":
        case "useCollisionAvoidance": target.setUseCollisionAvoidance(property(camelContext, boolean.class, value)); return true;
        case "useexponentialbackoff":
        case "useExponentialBackOff": target.setUseExponentialBackOff(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowredeliverywhilestopping":
        case "allowRedeliveryWhileStopping": return boolean.class;
        case "asyncdelayedredelivery":
        case "asyncDelayedRedelivery": return boolean.class;
        case "backoffmultiplier":
        case "backOffMultiplier": return double.class;
        case "collisionavoidancefactor":
        case "collisionAvoidanceFactor": return double.class;
        case "collisionavoidancepercent":
        case "collisionAvoidancePercent": return double.class;
        case "delaypattern":
        case "delayPattern": return java.lang.String.class;
        case "exchangeformatterref":
        case "exchangeFormatterRef": return java.lang.String.class;
        case "logcontinued":
        case "logContinued": return boolean.class;
        case "logexhausted":
        case "logExhausted": return boolean.class;
        case "logexhaustedmessagebody":
        case "logExhaustedMessageBody": return java.lang.Boolean.class;
        case "logexhaustedmessagehistory":
        case "logExhaustedMessageHistory": return boolean.class;
        case "loghandled":
        case "logHandled": return boolean.class;
        case "lognewexception":
        case "logNewException": return boolean.class;
        case "logretryattempted":
        case "logRetryAttempted": return boolean.class;
        case "logretrystacktrace":
        case "logRetryStackTrace": return boolean.class;
        case "logstacktrace":
        case "logStackTrace": return boolean.class;
        case "maximumredeliveries":
        case "maximumRedeliveries": return int.class;
        case "maximumredeliverydelay":
        case "maximumRedeliveryDelay": return long.class;
        case "redeliverydelay":
        case "redeliveryDelay": return long.class;
        case "retriesexhaustedloglevel":
        case "retriesExhaustedLogLevel": return org.apache.camel.LoggingLevel.class;
        case "retryattemptedloginterval":
        case "retryAttemptedLogInterval": return int.class;
        case "retryattemptedloglevel":
        case "retryAttemptedLogLevel": return org.apache.camel.LoggingLevel.class;
        case "usecollisionavoidance":
        case "useCollisionAvoidance": return boolean.class;
        case "useexponentialbackoff":
        case "useExponentialBackOff": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.processor.errorhandler.RedeliveryPolicy target = (org.apache.camel.processor.errorhandler.RedeliveryPolicy) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowredeliverywhilestopping":
        case "allowRedeliveryWhileStopping": return target.isAllowRedeliveryWhileStopping();
        case "asyncdelayedredelivery":
        case "asyncDelayedRedelivery": return target.isAsyncDelayedRedelivery();
        case "backoffmultiplier":
        case "backOffMultiplier": return target.getBackOffMultiplier();
        case "collisionavoidancefactor":
        case "collisionAvoidanceFactor": return target.getCollisionAvoidanceFactor();
        case "collisionavoidancepercent":
        case "collisionAvoidancePercent": return target.getCollisionAvoidancePercent();
        case "delaypattern":
        case "delayPattern": return target.getDelayPattern();
        case "exchangeformatterref":
        case "exchangeFormatterRef": return target.getExchangeFormatterRef();
        case "logcontinued":
        case "logContinued": return target.isLogContinued();
        case "logexhausted":
        case "logExhausted": return target.isLogExhausted();
        case "logexhaustedmessagebody":
        case "logExhaustedMessageBody": return target.isLogExhaustedMessageBody();
        case "logexhaustedmessagehistory":
        case "logExhaustedMessageHistory": return target.isLogExhaustedMessageHistory();
        case "loghandled":
        case "logHandled": return target.isLogHandled();
        case "lognewexception":
        case "logNewException": return target.isLogNewException();
        case "logretryattempted":
        case "logRetryAttempted": return target.isLogRetryAttempted();
        case "logretrystacktrace":
        case "logRetryStackTrace": return target.isLogRetryStackTrace();
        case "logstacktrace":
        case "logStackTrace": return target.isLogStackTrace();
        case "maximumredeliveries":
        case "maximumRedeliveries": return target.getMaximumRedeliveries();
        case "maximumredeliverydelay":
        case "maximumRedeliveryDelay": return target.getMaximumRedeliveryDelay();
        case "redeliverydelay":
        case "redeliveryDelay": return target.getRedeliveryDelay();
        case "retriesexhaustedloglevel":
        case "retriesExhaustedLogLevel": return target.getRetriesExhaustedLogLevel();
        case "retryattemptedloginterval":
        case "retryAttemptedLogInterval": return target.getRetryAttemptedLogInterval();
        case "retryattemptedloglevel":
        case "retryAttemptedLogLevel": return target.getRetryAttemptedLogLevel();
        case "usecollisionavoidance":
        case "useCollisionAvoidance": return target.isUseCollisionAvoidance();
        case "useexponentialbackoff":
        case "useExponentialBackOff": return target.isUseExponentialBackOff();
        default: return null;
        }
    }
}

