{
  "bean": {
    "kind": "bean",
    "name": "DefaultHeaderFilterStrategy",
    "javaType": "org.apache.camel.support.DefaultHeaderFilterStrategy",
    "interfaceType": "org.apache.camel.spi.HeaderFilterStrategy",
    "title": "Default Header Filter Strategy",
    "description": "The default header filtering strategy. Users can configure which headers is allowed or denied.",
    "deprecated": true,
    "groupId": "org.apache.camel",
    "artifactId": "camel-support",
    "version": "4.6.0-SNAPSHOT",
    "properties": { "inFilter": { "index": 0, "kind": "property", "displayName": "In Filter", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Sets the in direction filter set. The in direction is referred to copying headers from an external message to a Camel message. Multiple patterns can be separated by comma" }, "outFilter": { "index": 1, "kind": "property", "displayName": "Out Filter", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Sets the out direction filter set. The out direction is referred to copying headers from a Camel message to an external message. Multiple patterns can be separated by comma" }, "lowerCase": { "index": 2, "kind": "property", "displayName": "Lower Case", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "false", "description": "Whether header names should be converted to lower case before checking it with the filter Set. It does not affect filtering using regular expression pattern." }, "allowNullValues": { "index": 3, "kind": "property", "displayName": "Allow Null Values", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "false", "description": "Whether to allow null values. By default a header is skipped if its value is null. Setting this to true will preserve the header." }, "caseInsensitive": { "index": 4, "kind": "property", "displayName": "Case Insensitive", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "false", "description": "Sets the caseInsensitive property which is a boolean to determine whether header names should be case insensitive when checking it with the filter set. It does not affect filtering using regular expression pattern." }, "filterOnMatch": { "index": 5, "kind": "property", "displayName": "Filter On Match", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "true", "description": "Sets what to do when a pattern or filter set is matched. When set to true, a match will filter out the header. This is the default value for backwards compatibility. When set to false, the pattern or filter will indicate that the header must be kept; anything not matched will be filtered (skipped)." } }
  }
}

