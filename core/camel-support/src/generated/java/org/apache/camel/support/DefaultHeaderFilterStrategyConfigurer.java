/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.support;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.DefaultHeaderFilterStrategy;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class DefaultHeaderFilterStrategyConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.support.DefaultHeaderFilterStrategy target = (org.apache.camel.support.DefaultHeaderFilterStrategy) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allownullvalues":
        case "allowNullValues": target.setAllowNullValues(property(camelContext, boolean.class, value)); return true;
        case "caseinsensitive":
        case "caseInsensitive": target.setCaseInsensitive(property(camelContext, boolean.class, value)); return true;
        case "filteronmatch":
        case "filterOnMatch": target.setFilterOnMatch(property(camelContext, boolean.class, value)); return true;
        case "infilter":
        case "inFilter": target.setInFilter(property(camelContext, java.util.Set.class, value)); return true;
        case "lowercase":
        case "lowerCase": target.setLowerCase(property(camelContext, boolean.class, value)); return true;
        case "outfilter":
        case "outFilter": target.setOutFilter(property(camelContext, java.util.Set.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allownullvalues":
        case "allowNullValues": return boolean.class;
        case "caseinsensitive":
        case "caseInsensitive": return boolean.class;
        case "filteronmatch":
        case "filterOnMatch": return boolean.class;
        case "infilter":
        case "inFilter": return java.util.Set.class;
        case "lowercase":
        case "lowerCase": return boolean.class;
        case "outfilter":
        case "outFilter": return java.util.Set.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.support.DefaultHeaderFilterStrategy target = (org.apache.camel.support.DefaultHeaderFilterStrategy) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allownullvalues":
        case "allowNullValues": return target.isAllowNullValues();
        case "caseinsensitive":
        case "caseInsensitive": return target.isCaseInsensitive();
        case "filteronmatch":
        case "filterOnMatch": return target.isFilterOnMatch();
        case "infilter":
        case "inFilter": return target.getInFilter();
        case "lowercase":
        case "lowerCase": return target.isLowerCase();
        case "outfilter":
        case "outFilter": return target.getOutFilter();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "infilter":
        case "inFilter": return java.lang.String.class;
        case "outfilter":
        case "outFilter": return java.lang.String.class;
        default: return null;
        }
    }
}

