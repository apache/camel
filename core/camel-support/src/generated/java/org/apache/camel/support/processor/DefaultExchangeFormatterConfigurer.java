/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.support.processor;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.processor.DefaultExchangeFormatter;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DefaultExchangeFormatterConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.support.processor.DefaultExchangeFormatter target = (org.apache.camel.support.processor.DefaultExchangeFormatter) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "maxchars":
        case "MaxChars": target.setMaxChars(property(camelContext, int.class, value)); return true;
        case "multiline":
        case "Multiline": target.setMultiline(property(camelContext, boolean.class, value)); return true;
        case "showall":
        case "ShowAll": target.setShowAll(property(camelContext, boolean.class, value)); return true;
        case "showbody":
        case "ShowBody": target.setShowBody(property(camelContext, boolean.class, value)); return true;
        case "showbodytype":
        case "ShowBodyType": target.setShowBodyType(property(camelContext, boolean.class, value)); return true;
        case "showcaughtexception":
        case "ShowCaughtException": target.setShowCaughtException(property(camelContext, boolean.class, value)); return true;
        case "showexception":
        case "ShowException": target.setShowException(property(camelContext, boolean.class, value)); return true;
        case "showexchangeid":
        case "ShowExchangeId": target.setShowExchangeId(property(camelContext, boolean.class, value)); return true;
        case "showexchangepattern":
        case "ShowExchangePattern": target.setShowExchangePattern(property(camelContext, boolean.class, value)); return true;
        case "showfiles":
        case "ShowFiles": target.setShowFiles(property(camelContext, boolean.class, value)); return true;
        case "showfuture":
        case "ShowFuture": target.setShowFuture(property(camelContext, boolean.class, value)); return true;
        case "showheaders":
        case "ShowHeaders": target.setShowHeaders(property(camelContext, boolean.class, value)); return true;
        case "showproperties":
        case "ShowProperties": target.setShowProperties(property(camelContext, boolean.class, value)); return true;
        case "showstacktrace":
        case "ShowStackTrace": target.setShowStackTrace(property(camelContext, boolean.class, value)); return true;
        case "showstreams":
        case "ShowStreams": target.setShowStreams(property(camelContext, boolean.class, value)); return true;
        case "skipbodylineseparator":
        case "SkipBodyLineSeparator": target.setSkipBodyLineSeparator(property(camelContext, boolean.class, value)); return true;
        case "style":
        case "Style": target.setStyle(property(camelContext, org.apache.camel.support.processor.DefaultExchangeFormatter.OutputStyle.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("MaxChars", int.class);
        answer.put("Multiline", boolean.class);
        answer.put("ShowAll", boolean.class);
        answer.put("ShowBody", boolean.class);
        answer.put("ShowBodyType", boolean.class);
        answer.put("ShowCaughtException", boolean.class);
        answer.put("ShowException", boolean.class);
        answer.put("ShowExchangeId", boolean.class);
        answer.put("ShowExchangePattern", boolean.class);
        answer.put("ShowFiles", boolean.class);
        answer.put("ShowFuture", boolean.class);
        answer.put("ShowHeaders", boolean.class);
        answer.put("ShowProperties", boolean.class);
        answer.put("ShowStackTrace", boolean.class);
        answer.put("ShowStreams", boolean.class);
        answer.put("SkipBodyLineSeparator", boolean.class);
        answer.put("Style", org.apache.camel.support.processor.DefaultExchangeFormatter.OutputStyle.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.support.processor.DefaultExchangeFormatter target = (org.apache.camel.support.processor.DefaultExchangeFormatter) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "maxchars":
        case "MaxChars": return target.getMaxChars();
        case "multiline":
        case "Multiline": return target.isMultiline();
        case "showall":
        case "ShowAll": return target.isShowAll();
        case "showbody":
        case "ShowBody": return target.isShowBody();
        case "showbodytype":
        case "ShowBodyType": return target.isShowBodyType();
        case "showcaughtexception":
        case "ShowCaughtException": return target.isShowCaughtException();
        case "showexception":
        case "ShowException": return target.isShowException();
        case "showexchangeid":
        case "ShowExchangeId": return target.isShowExchangeId();
        case "showexchangepattern":
        case "ShowExchangePattern": return target.isShowExchangePattern();
        case "showfiles":
        case "ShowFiles": return target.isShowFiles();
        case "showfuture":
        case "ShowFuture": return target.isShowFuture();
        case "showheaders":
        case "ShowHeaders": return target.isShowHeaders();
        case "showproperties":
        case "ShowProperties": return target.isShowProperties();
        case "showstacktrace":
        case "ShowStackTrace": return target.isShowStackTrace();
        case "showstreams":
        case "ShowStreams": return target.isShowStreams();
        case "skipbodylineseparator":
        case "SkipBodyLineSeparator": return target.isSkipBodyLineSeparator();
        case "style":
        case "Style": return target.getStyle();
        default: return null;
        }
    }
}

