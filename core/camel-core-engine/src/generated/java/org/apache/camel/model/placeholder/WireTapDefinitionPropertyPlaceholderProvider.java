/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.model.placeholder;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.apache.camel.CamelContext;
import org.apache.camel.model.WireTapDefinition;
import org.apache.camel.spi.PropertyPlaceholderConfigurer;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class WireTapDefinitionPropertyPlaceholderProvider implements PropertyPlaceholderConfigurer {

    private final Map<String, Supplier<String>> readPlaceholders = new HashMap<>();
    private final Map<String, Consumer<String>> writePlaceholders = new HashMap<>();

    public WireTapDefinitionPropertyPlaceholderProvider(Object obj) {
        WireTapDefinition definition = (WireTapDefinition) obj;

        readPlaceholders.put("processorRef", definition::getNewExchangeProcessorRef);
        writePlaceholders.put("processorRef", definition::setNewExchangeProcessorRef);
        readPlaceholders.put("executorServiceRef", definition::getExecutorServiceRef);
        writePlaceholders.put("executorServiceRef", definition::setExecutorServiceRef);
        readPlaceholders.put("copy", definition::getCopy);
        writePlaceholders.put("copy", definition::setCopy);
        readPlaceholders.put("dynamicUri", definition::getDynamicUri);
        writePlaceholders.put("dynamicUri", definition::setDynamicUri);
        readPlaceholders.put("onPrepareRef", definition::getOnPrepareRef);
        writePlaceholders.put("onPrepareRef", definition::setOnPrepareRef);
        readPlaceholders.put("uri", definition::getUri);
        writePlaceholders.put("uri", definition::setUri);
        readPlaceholders.put("pattern", definition::getPattern);
        writePlaceholders.put("pattern", definition::setPattern);
        readPlaceholders.put("cacheSize", definition::getCacheSize);
        writePlaceholders.put("cacheSize", definition::setCacheSize);
        readPlaceholders.put("ignoreInvalidEndpoint", definition::getIgnoreInvalidEndpoint);
        writePlaceholders.put("ignoreInvalidEndpoint", definition::setIgnoreInvalidEndpoint);
        readPlaceholders.put("allowOptimisedComponents", definition::getAllowOptimisedComponents);
        writePlaceholders.put("allowOptimisedComponents", definition::setAllowOptimisedComponents);
        readPlaceholders.put("id", definition::getId);
        writePlaceholders.put("id", definition::setId);
    }

    @Override
    public Map<String, Supplier<String>> getReadPropertyPlaceholderOptions(CamelContext camelContext) {
        return readPlaceholders;
    }

    @Override
    public Map<String, Consumer<String>> getWritePropertyPlaceholderOptions(CamelContext camelContext) {
        return writePlaceholders;
    }

}

