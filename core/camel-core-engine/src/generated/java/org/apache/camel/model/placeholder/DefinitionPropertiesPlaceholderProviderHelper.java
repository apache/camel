/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.model.placeholder;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;

import org.apache.camel.spi.PropertyPlaceholderConfigurer;
import org.apache.camel.model.AggregateDefinition;
import org.apache.camel.model.BeanDefinition;
import org.apache.camel.model.CatchDefinition;
import org.apache.camel.model.ChoiceDefinition;
import org.apache.camel.model.CircuitBreakerDefinition;
import org.apache.camel.model.ClaimCheckDefinition;
import org.apache.camel.model.cloud.ServiceCallDefinition;
import org.apache.camel.model.ConvertBodyDefinition;
import org.apache.camel.model.dataformat.Any23DataFormat;
import org.apache.camel.model.dataformat.ASN1DataFormat;
import org.apache.camel.model.dataformat.AvroDataFormat;
import org.apache.camel.model.dataformat.BarcodeDataFormat;
import org.apache.camel.model.dataformat.Base64DataFormat;
import org.apache.camel.model.dataformat.BeanioDataFormat;
import org.apache.camel.model.dataformat.BindyDataFormat;
import org.apache.camel.model.dataformat.CBORDataFormat;
import org.apache.camel.model.dataformat.CryptoDataFormat;
import org.apache.camel.model.dataformat.CsvDataFormat;
import org.apache.camel.model.dataformat.CustomDataFormat;
import org.apache.camel.model.dataformat.FhirJsonDataFormat;
import org.apache.camel.model.dataformat.FhirXmlDataFormat;
import org.apache.camel.model.dataformat.FlatpackDataFormat;
import org.apache.camel.model.dataformat.GrokDataFormat;
import org.apache.camel.model.dataformat.GzipDataFormat;
import org.apache.camel.model.dataformat.HL7DataFormat;
import org.apache.camel.model.dataformat.IcalDataFormat;
import org.apache.camel.model.dataformat.JacksonXMLDataFormat;
import org.apache.camel.model.dataformat.JaxbDataFormat;
import org.apache.camel.model.dataformat.JsonApiDataFormat;
import org.apache.camel.model.dataformat.JsonDataFormat;
import org.apache.camel.model.dataformat.LZFDataFormat;
import org.apache.camel.model.dataformat.MimeMultipartDataFormat;
import org.apache.camel.model.dataformat.PGPDataFormat;
import org.apache.camel.model.dataformat.ProtobufDataFormat;
import org.apache.camel.model.dataformat.RssDataFormat;
import org.apache.camel.model.dataformat.SoapJaxbDataFormat;
import org.apache.camel.model.dataformat.SyslogDataFormat;
import org.apache.camel.model.dataformat.TarFileDataFormat;
import org.apache.camel.model.dataformat.ThriftDataFormat;
import org.apache.camel.model.dataformat.TidyMarkupDataFormat;
import org.apache.camel.model.dataformat.UniVocityCsvDataFormat;
import org.apache.camel.model.dataformat.UniVocityFixedWidthDataFormat;
import org.apache.camel.model.dataformat.UniVocityTsvDataFormat;
import org.apache.camel.model.dataformat.XmlRpcDataFormat;
import org.apache.camel.model.dataformat.XMLSecurityDataFormat;
import org.apache.camel.model.dataformat.XStreamDataFormat;
import org.apache.camel.model.dataformat.YAMLDataFormat;
import org.apache.camel.model.dataformat.ZipDeflaterDataFormat;
import org.apache.camel.model.dataformat.ZipFileDataFormat;
import org.apache.camel.model.DelayDefinition;
import org.apache.camel.model.DynamicRouterDefinition;
import org.apache.camel.model.EnrichDefinition;
import org.apache.camel.model.FilterDefinition;
import org.apache.camel.model.FinallyDefinition;
import org.apache.camel.model.FromDefinition;
import org.apache.camel.model.IdempotentConsumerDefinition;
import org.apache.camel.model.InOnlyDefinition;
import org.apache.camel.model.InOutDefinition;
import org.apache.camel.model.InterceptDefinition;
import org.apache.camel.model.InterceptFromDefinition;
import org.apache.camel.model.InterceptSendToEndpointDefinition;
import org.apache.camel.model.language.ConstantExpression;
import org.apache.camel.model.language.ExchangePropertyExpression;
import org.apache.camel.model.language.ExpressionDefinition;
import org.apache.camel.model.language.GroovyExpression;
import org.apache.camel.model.language.HeaderExpression;
import org.apache.camel.model.language.Hl7TerserExpression;
import org.apache.camel.model.language.JsonPathExpression;
import org.apache.camel.model.language.LanguageExpression;
import org.apache.camel.model.language.MethodCallExpression;
import org.apache.camel.model.language.MvelExpression;
import org.apache.camel.model.language.OgnlExpression;
import org.apache.camel.model.language.RefExpression;
import org.apache.camel.model.language.SimpleExpression;
import org.apache.camel.model.language.SpELExpression;
import org.apache.camel.model.language.TokenizerExpression;
import org.apache.camel.model.language.XMLTokenizerExpression;
import org.apache.camel.model.language.XPathExpression;
import org.apache.camel.model.language.XQueryExpression;
import org.apache.camel.model.LoadBalanceDefinition;
import org.apache.camel.model.LogDefinition;
import org.apache.camel.model.LoopDefinition;
import org.apache.camel.model.MarshalDefinition;
import org.apache.camel.model.MulticastDefinition;
import org.apache.camel.model.OnCompletionDefinition;
import org.apache.camel.model.OnExceptionDefinition;
import org.apache.camel.model.OnFallbackDefinition;
import org.apache.camel.model.OtherwiseDefinition;
import org.apache.camel.model.PipelineDefinition;
import org.apache.camel.model.PolicyDefinition;
import org.apache.camel.model.PollEnrichDefinition;
import org.apache.camel.model.ProcessDefinition;
import org.apache.camel.model.RecipientListDefinition;
import org.apache.camel.model.RemoveHeaderDefinition;
import org.apache.camel.model.RemoveHeadersDefinition;
import org.apache.camel.model.RemovePropertiesDefinition;
import org.apache.camel.model.RemovePropertyDefinition;
import org.apache.camel.model.ResequenceDefinition;
import org.apache.camel.model.rest.DeleteVerbDefinition;
import org.apache.camel.model.rest.GetVerbDefinition;
import org.apache.camel.model.rest.HeadVerbDefinition;
import org.apache.camel.model.rest.PatchVerbDefinition;
import org.apache.camel.model.rest.PostVerbDefinition;
import org.apache.camel.model.rest.PutVerbDefinition;
import org.apache.camel.model.rest.RestBindingDefinition;
import org.apache.camel.model.rest.RestConfigurationDefinition;
import org.apache.camel.model.rest.RestDefinition;
import org.apache.camel.model.rest.RestOperationParamDefinition;
import org.apache.camel.model.rest.RestOperationResponseHeaderDefinition;
import org.apache.camel.model.rest.RestOperationResponseMsgDefinition;
import org.apache.camel.model.rest.RestPropertyDefinition;
import org.apache.camel.model.rest.RestsDefinition;
import org.apache.camel.model.rest.RestSecuritiesDefinition;
import org.apache.camel.model.rest.RestSecurityApiKey;
import org.apache.camel.model.rest.RestSecurityBasicAuth;
import org.apache.camel.model.rest.RestSecurityOAuth2;
import org.apache.camel.model.rest.SecurityDefinition;
import org.apache.camel.model.rest.VerbDefinition;
import org.apache.camel.model.RollbackDefinition;
import org.apache.camel.model.RouteDefinition;
import org.apache.camel.model.RoutingSlipDefinition;
import org.apache.camel.model.SagaDefinition;
import org.apache.camel.model.SamplingDefinition;
import org.apache.camel.model.ScriptDefinition;
import org.apache.camel.model.SetBodyDefinition;
import org.apache.camel.model.SetExchangePatternDefinition;
import org.apache.camel.model.SetHeaderDefinition;
import org.apache.camel.model.SetPropertyDefinition;
import org.apache.camel.model.SortDefinition;
import org.apache.camel.model.SplitDefinition;
import org.apache.camel.model.StepDefinition;
import org.apache.camel.model.StopDefinition;
import org.apache.camel.model.ThreadsDefinition;
import org.apache.camel.model.ThrottleDefinition;
import org.apache.camel.model.ThrowExceptionDefinition;
import org.apache.camel.model.ToDefinition;
import org.apache.camel.model.ToDynamicDefinition;
import org.apache.camel.model.TransactedDefinition;
import org.apache.camel.model.TransformDefinition;
import org.apache.camel.model.TryDefinition;
import org.apache.camel.model.UnmarshalDefinition;
import org.apache.camel.model.ValidateDefinition;
import org.apache.camel.model.WhenDefinition;
import org.apache.camel.model.WhenSkipSendToEndpointDefinition;
import org.apache.camel.model.WireTapDefinition;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class DefinitionPropertiesPlaceholderProviderHelper {

    private static final Map<Class, Function<Object, PropertyPlaceholderConfigurer>> MAP;
    static {
        Map<Class, Function<Object, PropertyPlaceholderConfigurer>> map = new HashMap<>(145);
        map.put(AggregateDefinition.class, AggregateDefinitionPropertyPlaceholderProvider::new);
        map.put(BeanDefinition.class, BeanDefinitionPropertyPlaceholderProvider::new);
        map.put(CatchDefinition.class, CatchDefinitionPropertyPlaceholderProvider::new);
        map.put(ChoiceDefinition.class, ChoiceDefinitionPropertyPlaceholderProvider::new);
        map.put(CircuitBreakerDefinition.class, CircuitBreakerDefinitionPropertyPlaceholderProvider::new);
        map.put(ClaimCheckDefinition.class, ClaimCheckDefinitionPropertyPlaceholderProvider::new);
        map.put(ServiceCallDefinition.class, ServiceCallDefinitionPropertyPlaceholderProvider::new);
        map.put(ConvertBodyDefinition.class, ConvertBodyDefinitionPropertyPlaceholderProvider::new);
        map.put(Any23DataFormat.class, Any23DataFormatPropertyPlaceholderProvider::new);
        map.put(ASN1DataFormat.class, ASN1DataFormatPropertyPlaceholderProvider::new);
        map.put(AvroDataFormat.class, AvroDataFormatPropertyPlaceholderProvider::new);
        map.put(BarcodeDataFormat.class, BarcodeDataFormatPropertyPlaceholderProvider::new);
        map.put(Base64DataFormat.class, Base64DataFormatPropertyPlaceholderProvider::new);
        map.put(BeanioDataFormat.class, BeanioDataFormatPropertyPlaceholderProvider::new);
        map.put(BindyDataFormat.class, BindyDataFormatPropertyPlaceholderProvider::new);
        map.put(CBORDataFormat.class, CBORDataFormatPropertyPlaceholderProvider::new);
        map.put(CryptoDataFormat.class, CryptoDataFormatPropertyPlaceholderProvider::new);
        map.put(CsvDataFormat.class, CsvDataFormatPropertyPlaceholderProvider::new);
        map.put(CustomDataFormat.class, CustomDataFormatPropertyPlaceholderProvider::new);
        map.put(FhirJsonDataFormat.class, FhirJsonDataFormatPropertyPlaceholderProvider::new);
        map.put(FhirXmlDataFormat.class, FhirXmlDataFormatPropertyPlaceholderProvider::new);
        map.put(FlatpackDataFormat.class, FlatpackDataFormatPropertyPlaceholderProvider::new);
        map.put(GrokDataFormat.class, GrokDataFormatPropertyPlaceholderProvider::new);
        map.put(GzipDataFormat.class, GzipDataFormatPropertyPlaceholderProvider::new);
        map.put(HL7DataFormat.class, HL7DataFormatPropertyPlaceholderProvider::new);
        map.put(IcalDataFormat.class, IcalDataFormatPropertyPlaceholderProvider::new);
        map.put(JacksonXMLDataFormat.class, JacksonXMLDataFormatPropertyPlaceholderProvider::new);
        map.put(JaxbDataFormat.class, JaxbDataFormatPropertyPlaceholderProvider::new);
        map.put(JsonApiDataFormat.class, JsonApiDataFormatPropertyPlaceholderProvider::new);
        map.put(JsonDataFormat.class, JsonDataFormatPropertyPlaceholderProvider::new);
        map.put(LZFDataFormat.class, LZFDataFormatPropertyPlaceholderProvider::new);
        map.put(MimeMultipartDataFormat.class, MimeMultipartDataFormatPropertyPlaceholderProvider::new);
        map.put(PGPDataFormat.class, PGPDataFormatPropertyPlaceholderProvider::new);
        map.put(ProtobufDataFormat.class, ProtobufDataFormatPropertyPlaceholderProvider::new);
        map.put(RssDataFormat.class, RssDataFormatPropertyPlaceholderProvider::new);
        map.put(SoapJaxbDataFormat.class, SoapJaxbDataFormatPropertyPlaceholderProvider::new);
        map.put(SyslogDataFormat.class, SyslogDataFormatPropertyPlaceholderProvider::new);
        map.put(TarFileDataFormat.class, TarFileDataFormatPropertyPlaceholderProvider::new);
        map.put(ThriftDataFormat.class, ThriftDataFormatPropertyPlaceholderProvider::new);
        map.put(TidyMarkupDataFormat.class, TidyMarkupDataFormatPropertyPlaceholderProvider::new);
        map.put(UniVocityCsvDataFormat.class, UniVocityCsvDataFormatPropertyPlaceholderProvider::new);
        map.put(UniVocityFixedWidthDataFormat.class, UniVocityFixedWidthDataFormatPropertyPlaceholderProvider::new);
        map.put(UniVocityTsvDataFormat.class, UniVocityTsvDataFormatPropertyPlaceholderProvider::new);
        map.put(XmlRpcDataFormat.class, XmlRpcDataFormatPropertyPlaceholderProvider::new);
        map.put(XMLSecurityDataFormat.class, XMLSecurityDataFormatPropertyPlaceholderProvider::new);
        map.put(XStreamDataFormat.class, XStreamDataFormatPropertyPlaceholderProvider::new);
        map.put(YAMLDataFormat.class, YAMLDataFormatPropertyPlaceholderProvider::new);
        map.put(ZipDeflaterDataFormat.class, ZipDeflaterDataFormatPropertyPlaceholderProvider::new);
        map.put(ZipFileDataFormat.class, ZipFileDataFormatPropertyPlaceholderProvider::new);
        map.put(DelayDefinition.class, DelayDefinitionPropertyPlaceholderProvider::new);
        map.put(DynamicRouterDefinition.class, DynamicRouterDefinitionPropertyPlaceholderProvider::new);
        map.put(EnrichDefinition.class, EnrichDefinitionPropertyPlaceholderProvider::new);
        map.put(FilterDefinition.class, FilterDefinitionPropertyPlaceholderProvider::new);
        map.put(FinallyDefinition.class, FinallyDefinitionPropertyPlaceholderProvider::new);
        map.put(FromDefinition.class, FromDefinitionPropertyPlaceholderProvider::new);
        map.put(IdempotentConsumerDefinition.class, IdempotentConsumerDefinitionPropertyPlaceholderProvider::new);
        map.put(InOnlyDefinition.class, InOnlyDefinitionPropertyPlaceholderProvider::new);
        map.put(InOutDefinition.class, InOutDefinitionPropertyPlaceholderProvider::new);
        map.put(InterceptDefinition.class, InterceptDefinitionPropertyPlaceholderProvider::new);
        map.put(InterceptFromDefinition.class, InterceptFromDefinitionPropertyPlaceholderProvider::new);
        map.put(InterceptSendToEndpointDefinition.class, InterceptSendToEndpointDefinitionPropertyPlaceholderProvider::new);
        map.put(ConstantExpression.class, ConstantExpressionPropertyPlaceholderProvider::new);
        map.put(ExchangePropertyExpression.class, ExchangePropertyExpressionPropertyPlaceholderProvider::new);
        map.put(ExpressionDefinition.class, ExpressionDefinitionPropertyPlaceholderProvider::new);
        map.put(GroovyExpression.class, GroovyExpressionPropertyPlaceholderProvider::new);
        map.put(HeaderExpression.class, HeaderExpressionPropertyPlaceholderProvider::new);
        map.put(Hl7TerserExpression.class, Hl7TerserExpressionPropertyPlaceholderProvider::new);
        map.put(JsonPathExpression.class, JsonPathExpressionPropertyPlaceholderProvider::new);
        map.put(LanguageExpression.class, LanguageExpressionPropertyPlaceholderProvider::new);
        map.put(MethodCallExpression.class, MethodCallExpressionPropertyPlaceholderProvider::new);
        map.put(MvelExpression.class, MvelExpressionPropertyPlaceholderProvider::new);
        map.put(OgnlExpression.class, OgnlExpressionPropertyPlaceholderProvider::new);
        map.put(RefExpression.class, RefExpressionPropertyPlaceholderProvider::new);
        map.put(SimpleExpression.class, SimpleExpressionPropertyPlaceholderProvider::new);
        map.put(SpELExpression.class, SpELExpressionPropertyPlaceholderProvider::new);
        map.put(TokenizerExpression.class, TokenizerExpressionPropertyPlaceholderProvider::new);
        map.put(XMLTokenizerExpression.class, XMLTokenizerExpressionPropertyPlaceholderProvider::new);
        map.put(XPathExpression.class, XPathExpressionPropertyPlaceholderProvider::new);
        map.put(XQueryExpression.class, XQueryExpressionPropertyPlaceholderProvider::new);
        map.put(LoadBalanceDefinition.class, LoadBalanceDefinitionPropertyPlaceholderProvider::new);
        map.put(LogDefinition.class, LogDefinitionPropertyPlaceholderProvider::new);
        map.put(LoopDefinition.class, LoopDefinitionPropertyPlaceholderProvider::new);
        map.put(MarshalDefinition.class, MarshalDefinitionPropertyPlaceholderProvider::new);
        map.put(MulticastDefinition.class, MulticastDefinitionPropertyPlaceholderProvider::new);
        map.put(OnCompletionDefinition.class, OnCompletionDefinitionPropertyPlaceholderProvider::new);
        map.put(OnExceptionDefinition.class, OnExceptionDefinitionPropertyPlaceholderProvider::new);
        map.put(OnFallbackDefinition.class, OnFallbackDefinitionPropertyPlaceholderProvider::new);
        map.put(OtherwiseDefinition.class, OtherwiseDefinitionPropertyPlaceholderProvider::new);
        map.put(PipelineDefinition.class, PipelineDefinitionPropertyPlaceholderProvider::new);
        map.put(PolicyDefinition.class, PolicyDefinitionPropertyPlaceholderProvider::new);
        map.put(PollEnrichDefinition.class, PollEnrichDefinitionPropertyPlaceholderProvider::new);
        map.put(ProcessDefinition.class, ProcessDefinitionPropertyPlaceholderProvider::new);
        map.put(RecipientListDefinition.class, RecipientListDefinitionPropertyPlaceholderProvider::new);
        map.put(RemoveHeaderDefinition.class, RemoveHeaderDefinitionPropertyPlaceholderProvider::new);
        map.put(RemoveHeadersDefinition.class, RemoveHeadersDefinitionPropertyPlaceholderProvider::new);
        map.put(RemovePropertiesDefinition.class, RemovePropertiesDefinitionPropertyPlaceholderProvider::new);
        map.put(RemovePropertyDefinition.class, RemovePropertyDefinitionPropertyPlaceholderProvider::new);
        map.put(ResequenceDefinition.class, ResequenceDefinitionPropertyPlaceholderProvider::new);
        map.put(DeleteVerbDefinition.class, DeleteVerbDefinitionPropertyPlaceholderProvider::new);
        map.put(GetVerbDefinition.class, GetVerbDefinitionPropertyPlaceholderProvider::new);
        map.put(HeadVerbDefinition.class, HeadVerbDefinitionPropertyPlaceholderProvider::new);
        map.put(PatchVerbDefinition.class, PatchVerbDefinitionPropertyPlaceholderProvider::new);
        map.put(PostVerbDefinition.class, PostVerbDefinitionPropertyPlaceholderProvider::new);
        map.put(PutVerbDefinition.class, PutVerbDefinitionPropertyPlaceholderProvider::new);
        map.put(RestBindingDefinition.class, RestBindingDefinitionPropertyPlaceholderProvider::new);
        map.put(RestConfigurationDefinition.class, RestConfigurationDefinitionPropertyPlaceholderProvider::new);
        map.put(RestDefinition.class, RestDefinitionPropertyPlaceholderProvider::new);
        map.put(RestOperationParamDefinition.class, RestOperationParamDefinitionPropertyPlaceholderProvider::new);
        map.put(RestOperationResponseHeaderDefinition.class, RestOperationResponseHeaderDefinitionPropertyPlaceholderProvider::new);
        map.put(RestOperationResponseMsgDefinition.class, RestOperationResponseMsgDefinitionPropertyPlaceholderProvider::new);
        map.put(RestPropertyDefinition.class, RestPropertyDefinitionPropertyPlaceholderProvider::new);
        map.put(RestsDefinition.class, RestsDefinitionPropertyPlaceholderProvider::new);
        map.put(RestSecuritiesDefinition.class, RestSecuritiesDefinitionPropertyPlaceholderProvider::new);
        map.put(RestSecurityApiKey.class, RestSecurityApiKeyPropertyPlaceholderProvider::new);
        map.put(RestSecurityBasicAuth.class, RestSecurityBasicAuthPropertyPlaceholderProvider::new);
        map.put(RestSecurityOAuth2.class, RestSecurityOAuth2PropertyPlaceholderProvider::new);
        map.put(SecurityDefinition.class, SecurityDefinitionPropertyPlaceholderProvider::new);
        map.put(VerbDefinition.class, VerbDefinitionPropertyPlaceholderProvider::new);
        map.put(RollbackDefinition.class, RollbackDefinitionPropertyPlaceholderProvider::new);
        map.put(RouteDefinition.class, RouteDefinitionPropertyPlaceholderProvider::new);
        map.put(RoutingSlipDefinition.class, RoutingSlipDefinitionPropertyPlaceholderProvider::new);
        map.put(SagaDefinition.class, SagaDefinitionPropertyPlaceholderProvider::new);
        map.put(SamplingDefinition.class, SamplingDefinitionPropertyPlaceholderProvider::new);
        map.put(ScriptDefinition.class, ScriptDefinitionPropertyPlaceholderProvider::new);
        map.put(SetBodyDefinition.class, SetBodyDefinitionPropertyPlaceholderProvider::new);
        map.put(SetExchangePatternDefinition.class, SetExchangePatternDefinitionPropertyPlaceholderProvider::new);
        map.put(SetHeaderDefinition.class, SetHeaderDefinitionPropertyPlaceholderProvider::new);
        map.put(SetPropertyDefinition.class, SetPropertyDefinitionPropertyPlaceholderProvider::new);
        map.put(SortDefinition.class, SortDefinitionPropertyPlaceholderProvider::new);
        map.put(SplitDefinition.class, SplitDefinitionPropertyPlaceholderProvider::new);
        map.put(StepDefinition.class, StepDefinitionPropertyPlaceholderProvider::new);
        map.put(StopDefinition.class, StopDefinitionPropertyPlaceholderProvider::new);
        map.put(ThreadsDefinition.class, ThreadsDefinitionPropertyPlaceholderProvider::new);
        map.put(ThrottleDefinition.class, ThrottleDefinitionPropertyPlaceholderProvider::new);
        map.put(ThrowExceptionDefinition.class, ThrowExceptionDefinitionPropertyPlaceholderProvider::new);
        map.put(ToDefinition.class, ToDefinitionPropertyPlaceholderProvider::new);
        map.put(ToDynamicDefinition.class, ToDynamicDefinitionPropertyPlaceholderProvider::new);
        map.put(TransactedDefinition.class, TransactedDefinitionPropertyPlaceholderProvider::new);
        map.put(TransformDefinition.class, TransformDefinitionPropertyPlaceholderProvider::new);
        map.put(TryDefinition.class, TryDefinitionPropertyPlaceholderProvider::new);
        map.put(UnmarshalDefinition.class, UnmarshalDefinitionPropertyPlaceholderProvider::new);
        map.put(ValidateDefinition.class, ValidateDefinitionPropertyPlaceholderProvider::new);
        map.put(WhenDefinition.class, WhenDefinitionPropertyPlaceholderProvider::new);
        map.put(WhenSkipSendToEndpointDefinition.class, WhenSkipSendToEndpointDefinitionPropertyPlaceholderProvider::new);
        map.put(WireTapDefinition.class, WireTapDefinitionPropertyPlaceholderProvider::new);
        MAP = map;
    }

    public static Optional<PropertyPlaceholderConfigurer> provider(Object definition) {
        Function<Object, PropertyPlaceholderConfigurer> func = MAP.get(definition.getClass());
        if (func != null) {
            return Optional.of(func.apply(definition));
        }
        return Optional.empty();
    }

}

