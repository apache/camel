/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.model.placeholder;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.apache.camel.CamelContext;
import org.apache.camel.model.rest.RestConfigurationDefinition;
import org.apache.camel.spi.PropertyPlaceholderConfigurer;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class RestConfigurationDefinitionPropertyPlaceholderProvider implements PropertyPlaceholderConfigurer {

    private final Map<String, Supplier<String>> readPlaceholders = new HashMap<>();
    private final Map<String, Consumer<String>> writePlaceholders = new HashMap<>();

    public RestConfigurationDefinitionPropertyPlaceholderProvider(Object obj) {
        RestConfigurationDefinition definition = (RestConfigurationDefinition) obj;

        readPlaceholders.put("component", definition::getComponent);
        writePlaceholders.put("component", definition::setComponent);
        readPlaceholders.put("apiComponent", definition::getApiComponent);
        writePlaceholders.put("apiComponent", definition::setApiComponent);
        readPlaceholders.put("producerComponent", definition::getProducerComponent);
        writePlaceholders.put("producerComponent", definition::setProducerComponent);
        readPlaceholders.put("scheme", definition::getScheme);
        writePlaceholders.put("scheme", definition::setScheme);
        readPlaceholders.put("host", definition::getHost);
        writePlaceholders.put("host", definition::setHost);
        readPlaceholders.put("apiHost", definition::getApiHost);
        writePlaceholders.put("apiHost", definition::setApiHost);
        readPlaceholders.put("port", definition::getPort);
        writePlaceholders.put("port", definition::setPort);
        readPlaceholders.put("producerApiDoc", definition::getProducerApiDoc);
        writePlaceholders.put("producerApiDoc", definition::setProducerApiDoc);
        readPlaceholders.put("contextPath", definition::getContextPath);
        writePlaceholders.put("contextPath", definition::setContextPath);
        readPlaceholders.put("apiContextPath", definition::getApiContextPath);
        writePlaceholders.put("apiContextPath", definition::setApiContextPath);
        readPlaceholders.put("apiContextRouteId", definition::getApiContextRouteId);
        writePlaceholders.put("apiContextRouteId", definition::setApiContextRouteId);
        readPlaceholders.put("apiContextIdPattern", definition::getApiContextIdPattern);
        writePlaceholders.put("apiContextIdPattern", definition::setApiContextIdPattern);
        readPlaceholders.put("jsonDataFormat", definition::getJsonDataFormat);
        writePlaceholders.put("jsonDataFormat", definition::setJsonDataFormat);
        readPlaceholders.put("xmlDataFormat", definition::getXmlDataFormat);
        writePlaceholders.put("xmlDataFormat", definition::setXmlDataFormat);
    }

    @Override
    public Map<String, Supplier<String>> getReadPropertyPlaceholderOptions(CamelContext camelContext) {
        return readPlaceholders;
    }

    @Override
    public Map<String, Consumer<String>> getWritePropertyPlaceholderOptions(CamelContext camelContext) {
        return writePlaceholders;
    }

}

