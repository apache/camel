<?xml version="1.0" encoding="UTF-8"?>

<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project name="camel common build file" default="build.classes">

  <property environment="env"/>
  <property name="build.dir" location="${basedir}/target"/>
  <property name="build.classes.dir" location="${build.dir}/classes"/>
  <property name="build.test.classes.dir" location="${build.dir}/test-classes"/>
  
  <property name="build.src.dir" location="${basedir}/src/main/java"/>
  <property name="build.test.dir" location="${basedir}/src/test/java"/>
  <property name="build.resources.dir" location="${basedir}/src/main/resources"/>

  <property name="camel.lib" location="../../lib"/>

  <property name="activemq.home" value="${env.ACTIVEMQ_HOME}"/>
  <property name="hibernate.core.home" value="${env.HIBERNATE_CORE_HOME}"/>
  <property name="hibernate.entitymanager.home" value="${env.HIBERNATE_EM_HOME}"/>
  <property name="hsqldb.home" value="${env.HSQLDB_HOME}"/>

  <condition property="build.src">
    <available file="${build.src.dir}"/>
  </condition> 

  <condition property="build.test">
    <and>
      <available file="${build.test.dir}"/>
      <available classname="junit.framework.TestCase"/>
    </and>
  </condition> 

  <mkdir dir="${build.dir}"/>

  <!-- Define some classpaths used by the different samples. -->
  
  <path id="activemq.classpath">
    <fileset dir="${activemq.home}/lib">
      <include name="**/geronimo-j2ee-management_*_spec-*.jar"/>
      <include name="**/geronimo-jms_*_spec-*.jar"/>
      <include name="**/activemq-core-*.jar"/>
      <include name="**/backport-util-concurrent-*.jar"/>
    </fileset>
  </path>

  <path id="hibernate.classpath">
    <fileset dir="${hibernate.core.home}">
      <include name="**/hibernate*.jar"/>
      <include name="**/antlr-*.jar"/>
      <include name="**/asm*.jar"/>
      <include name="**/cglib-*.jar"/>
      <include name="**/dom4j-*.jar"/>
      <include name="**/javassist*.jar"/>
      <include name="**/jta.jar"/>
    </fileset>
    <fileset dir="${hibernate.entitymanager.home}">
      <include name="**/hibernate-*.jar"/>
      <include name="**/jboss-archive-browsing*.jar"/>
      <include name="**/*persistence.jar"/>
    </fileset>
    <fileset dir="${hsqldb.home}">
      <include name="**/hsqldb.jar"/>
    </fileset>
  </path>

  <path id="log4j.classpath">
    <fileset dir="${camel.lib}">
      <include name="**/log4j-*.jar"/>
    </fileset>
  </path>

  <path id="camel.core.classpath">
    <fileset dir="${camel.lib}">
      <include name="**/camel-core-*.jar"/>
      <include name="**/commons-logging-*.jar"/>
      <include name="**/jaxb-api-*.jar"/>
      <include name="**/spring-*.jar"/>
      <exclude name="**/*-tests.jar"/>
    </fileset>
  </path>
  
  <path id="camel.spring.classpath">
    <path refid="camel.core.classpath"/>
    <fileset dir="${camel.lib}">
      <include name="**/camel-spring-*.jar"/>
      <include name="**/activation-*.jar"/>
      <include name="**/jaxb-impl-*.jar"/>
      <include name="**/stax-api-*.jar"/>
      <exclude name="**/*-tests.jar"/>
    </fileset>
  </path>

  <target name="build.classes" if="build.src">
    <mkdir dir="${build.classes.dir}"/>

    <javac destdir="${build.classes.dir}" debug="true">
      <src path="${build.src.dir}"/>
      <src path="${build.dir}"/>
      <classpath>
        <path refid="sample.build.classpath"/>
      </classpath>
    </javac>
    
    <copy todir="${build.classes.dir}">
      <fileset dir="${build.resources.dir}" includes="**/*"/>
    </copy>
  </target>

  <target name="build.test" if="build.test">
    <mkdir dir="${build.test.classes.dir}"/>

    <javac destdir="${build.test.classes.dir}" debug="true">
      <src path="${build.test.dir}"/>
      <classpath>
        <path refid="sample.build.classpath"/>
      </classpath>
    </javac>
  </target>

  <target name="build" depends="build.classes,build.test"/>
    
  <macrodef name="camelrun">
    <attribute name="mainClass" default="org.apache.camel.spring.Main"/>
    <element name="arguments" optional="true"/>
    <sequential>
      <path id="sample.run.classpath">
        <pathelement location="${build.classes.dir}"/>
        <path refid="sample.build.classpath"/>
        <path refid="log4j.classpath"/>
      </path>
      <!--
      <property name="sampleclasspath" refid="sample.run.classpath"/>
      <echo message="running with classpath: ${sampleclasspath}"/>
      -->

      <java classname="@{mainClass}"
        fork="true" 
        failonerror="true">
        <classpath refid="sample.run.classpath"/>
        <arguments/> 
        <sysproperty key="java.util.logging.config.file" value="${build.classes.dir}/logging.properties"/>
      </java>
    </sequential>
  </macrodef>
  
  <condition property="shell.command" value="cmd.exe">
    <os family="windows"/>
  </condition>
  <property name="shell.command" value="/bin/bash"/>
  <condition property="shell.suffix" value=".exe">
    <os family="windows"/>
  </condition>
  <property name="shell.suffix" value=""/>
  <condition property="shell.arg" value="/c">
    <os family="windows"/>
  </condition>
  <property name="shell.arg" value="-c"/>
  <!-- Define shell.file because dot on windows doesn't seem to
       like the wildcard "*.dot". -->
  <condition property="shell.file" value="routes.dot">
    <os family="windows"/>
  </condition>
  <property name="shell.file" value="*.dot"/>
  
  <!-- This macro assumes the dot executable is on your path. -->
  <macrodef name="generatedot">
    <attribute name="dotFileDir"/>
    <attribute name="dotFile" default="${shell.file}"/>
    <attribute name="outputType" default="svg"/>
    <sequential>
      <exec executable="${shell.command}">
        <arg value="${shell.arg}"/>
        <arg value="dot${shell.suffix} -T @{outputType} -O @{dotFileDir}/@{dotFile}"/>
      </exec>
    </sequential>
  </macrodef>

  <target name="clean">
    <delete dir="${build.test.classes.dir}"/>
    <delete dir="${build.classes.dir}"/>
    <delete dir="${build.dir}"/>
  </target>
  
</project>
