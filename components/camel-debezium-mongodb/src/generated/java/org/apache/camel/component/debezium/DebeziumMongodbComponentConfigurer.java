/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.debezium;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DebeziumMongodbComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.debezium.configuration.MongoDbConnectorEmbeddedDebeziumConfiguration getOrCreateConfiguration(DebeziumMongodbComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.debezium.configuration.MongoDbConnectorEmbeddedDebeziumConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DebeziumMongodbComponent target = (DebeziumMongodbComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "additionalproperties":
        case "additionalProperties": getOrCreateConfiguration(target).setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "collectionblacklist":
        case "collectionBlacklist": getOrCreateConfiguration(target).setCollectionBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "collectionwhitelist":
        case "collectionWhitelist": getOrCreateConfiguration(target).setCollectionWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.debezium.configuration.MongoDbConnectorEmbeddedDebeziumConfiguration.class, value)); return true;
        case "connectbackoffinitialdelayms":
        case "connectBackoffInitialDelayMs": getOrCreateConfiguration(target).setConnectBackoffInitialDelayMs(property(camelContext, long.class, value)); return true;
        case "connectbackoffmaxdelayms":
        case "connectBackoffMaxDelayMs": getOrCreateConfiguration(target).setConnectBackoffMaxDelayMs(property(camelContext, long.class, value)); return true;
        case "connectmaxattempts":
        case "connectMaxAttempts": getOrCreateConfiguration(target).setConnectMaxAttempts(property(camelContext, int.class, value)); return true;
        case "databaseblacklist":
        case "databaseBlacklist": getOrCreateConfiguration(target).setDatabaseBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistoryfilefilename":
        case "databaseHistoryFileFilename": getOrCreateConfiguration(target).setDatabaseHistoryFileFilename(property(camelContext, java.lang.String.class, value)); return true;
        case "databasewhitelist":
        case "databaseWhitelist": getOrCreateConfiguration(target).setDatabaseWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "fieldblacklist":
        case "fieldBlacklist": getOrCreateConfiguration(target).setFieldBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "fieldrenames":
        case "fieldRenames": getOrCreateConfiguration(target).setFieldRenames(property(camelContext, java.lang.String.class, value)); return true;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": getOrCreateConfiguration(target).setHeartbeatIntervalMs(property(camelContext, int.class, value)); return true;
        case "heartbeattopicsprefix":
        case "heartbeatTopicsPrefix": getOrCreateConfiguration(target).setHeartbeatTopicsPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "initialsyncmaxthreads":
        case "initialSyncMaxThreads": getOrCreateConfiguration(target).setInitialSyncMaxThreads(property(camelContext, int.class, value)); return true;
        case "internalkeyconverter":
        case "internalKeyConverter": getOrCreateConfiguration(target).setInternalKeyConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "internalvalueconverter":
        case "internalValueConverter": getOrCreateConfiguration(target).setInternalValueConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "maxbatchsize":
        case "maxBatchSize": getOrCreateConfiguration(target).setMaxBatchSize(property(camelContext, int.class, value)); return true;
        case "maxqueuesize":
        case "maxQueueSize": getOrCreateConfiguration(target).setMaxQueueSize(property(camelContext, int.class, value)); return true;
        case "mongodbhosts":
        case "mongodbHosts": getOrCreateConfiguration(target).setMongodbHosts(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbmembersautodiscover":
        case "mongodbMembersAutoDiscover": getOrCreateConfiguration(target).setMongodbMembersAutoDiscover(property(camelContext, boolean.class, value)); return true;
        case "mongodbname":
        case "mongodbName": getOrCreateConfiguration(target).setMongodbName(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbpassword":
        case "mongodbPassword": getOrCreateConfiguration(target).setMongodbPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbsslenabled":
        case "mongodbSslEnabled": getOrCreateConfiguration(target).setMongodbSslEnabled(property(camelContext, boolean.class, value)); return true;
        case "mongodbsslinvalidhostnameallowed":
        case "mongodbSslInvalidHostnameAllowed": getOrCreateConfiguration(target).setMongodbSslInvalidHostnameAllowed(property(camelContext, boolean.class, value)); return true;
        case "mongodbuser":
        case "mongodbUser": getOrCreateConfiguration(target).setMongodbUser(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommitpolicy":
        case "offsetCommitPolicy": getOrCreateConfiguration(target).setOffsetCommitPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommittimeoutms":
        case "offsetCommitTimeoutMs": getOrCreateConfiguration(target).setOffsetCommitTimeoutMs(property(camelContext, long.class, value)); return true;
        case "offsetflushintervalms":
        case "offsetFlushIntervalMs": getOrCreateConfiguration(target).setOffsetFlushIntervalMs(property(camelContext, long.class, value)); return true;
        case "offsetstorage":
        case "offsetStorage": getOrCreateConfiguration(target).setOffsetStorage(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragefilename":
        case "offsetStorageFileName": getOrCreateConfiguration(target).setOffsetStorageFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragepartitions":
        case "offsetStoragePartitions": getOrCreateConfiguration(target).setOffsetStoragePartitions(property(camelContext, int.class, value)); return true;
        case "offsetstoragereplicationfactor":
        case "offsetStorageReplicationFactor": getOrCreateConfiguration(target).setOffsetStorageReplicationFactor(property(camelContext, int.class, value)); return true;
        case "offsetstoragetopic":
        case "offsetStorageTopic": getOrCreateConfiguration(target).setOffsetStorageTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "pollintervalms":
        case "pollIntervalMs": getOrCreateConfiguration(target).setPollIntervalMs(property(camelContext, long.class, value)); return true;
        case "snapshotdelayms":
        case "snapshotDelayMs": getOrCreateConfiguration(target).setSnapshotDelayMs(property(camelContext, long.class, value)); return true;
        case "snapshotfetchsize":
        case "snapshotFetchSize": getOrCreateConfiguration(target).setSnapshotFetchSize(property(camelContext, int.class, value)); return true;
        case "snapshotmode":
        case "snapshotMode": getOrCreateConfiguration(target).setSnapshotMode(property(camelContext, java.lang.String.class, value)); return true;
        case "sourcestructversion":
        case "sourceStructVersion": getOrCreateConfiguration(target).setSourceStructVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "tombstonesondelete":
        case "tombstonesOnDelete": getOrCreateConfiguration(target).setTombstonesOnDelete(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("additionalProperties", java.util.Map.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("collectionBlacklist", java.lang.String.class);
        answer.put("collectionWhitelist", java.lang.String.class);
        answer.put("configuration", org.apache.camel.component.debezium.configuration.MongoDbConnectorEmbeddedDebeziumConfiguration.class);
        answer.put("connectBackoffInitialDelayMs", long.class);
        answer.put("connectBackoffMaxDelayMs", long.class);
        answer.put("connectMaxAttempts", int.class);
        answer.put("databaseBlacklist", java.lang.String.class);
        answer.put("databaseHistoryFileFilename", java.lang.String.class);
        answer.put("databaseWhitelist", java.lang.String.class);
        answer.put("fieldBlacklist", java.lang.String.class);
        answer.put("fieldRenames", java.lang.String.class);
        answer.put("heartbeatIntervalMs", int.class);
        answer.put("heartbeatTopicsPrefix", java.lang.String.class);
        answer.put("initialSyncMaxThreads", int.class);
        answer.put("internalKeyConverter", java.lang.String.class);
        answer.put("internalValueConverter", java.lang.String.class);
        answer.put("maxBatchSize", int.class);
        answer.put("maxQueueSize", int.class);
        answer.put("mongodbHosts", java.lang.String.class);
        answer.put("mongodbMembersAutoDiscover", boolean.class);
        answer.put("mongodbName", java.lang.String.class);
        answer.put("mongodbPassword", java.lang.String.class);
        answer.put("mongodbSslEnabled", boolean.class);
        answer.put("mongodbSslInvalidHostnameAllowed", boolean.class);
        answer.put("mongodbUser", java.lang.String.class);
        answer.put("offsetCommitPolicy", java.lang.String.class);
        answer.put("offsetCommitTimeoutMs", long.class);
        answer.put("offsetFlushIntervalMs", long.class);
        answer.put("offsetStorage", java.lang.String.class);
        answer.put("offsetStorageFileName", java.lang.String.class);
        answer.put("offsetStoragePartitions", int.class);
        answer.put("offsetStorageReplicationFactor", int.class);
        answer.put("offsetStorageTopic", java.lang.String.class);
        answer.put("pollIntervalMs", long.class);
        answer.put("snapshotDelayMs", long.class);
        answer.put("snapshotFetchSize", int.class);
        answer.put("snapshotMode", java.lang.String.class);
        answer.put("sourceStructVersion", java.lang.String.class);
        answer.put("tombstonesOnDelete", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DebeziumMongodbComponent target = (DebeziumMongodbComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "additionalproperties":
        case "additionalProperties": getOrCreateConfiguration(target).getAdditionalProperties(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "collectionblacklist":
        case "collectionBlacklist": getOrCreateConfiguration(target).getCollectionBlacklist(); return true;
        case "collectionwhitelist":
        case "collectionWhitelist": getOrCreateConfiguration(target).getCollectionWhitelist(); return true;
        case "configuration": target.getConfiguration(); return true;
        case "connectbackoffinitialdelayms":
        case "connectBackoffInitialDelayMs": getOrCreateConfiguration(target).getConnectBackoffInitialDelayMs(); return true;
        case "connectbackoffmaxdelayms":
        case "connectBackoffMaxDelayMs": getOrCreateConfiguration(target).getConnectBackoffMaxDelayMs(); return true;
        case "connectmaxattempts":
        case "connectMaxAttempts": getOrCreateConfiguration(target).getConnectMaxAttempts(); return true;
        case "databaseblacklist":
        case "databaseBlacklist": getOrCreateConfiguration(target).getDatabaseBlacklist(); return true;
        case "databasehistoryfilefilename":
        case "databaseHistoryFileFilename": getOrCreateConfiguration(target).getDatabaseHistoryFileFilename(); return true;
        case "databasewhitelist":
        case "databaseWhitelist": getOrCreateConfiguration(target).getDatabaseWhitelist(); return true;
        case "fieldblacklist":
        case "fieldBlacklist": getOrCreateConfiguration(target).getFieldBlacklist(); return true;
        case "fieldrenames":
        case "fieldRenames": getOrCreateConfiguration(target).getFieldRenames(); return true;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": getOrCreateConfiguration(target).getHeartbeatIntervalMs(); return true;
        case "heartbeattopicsprefix":
        case "heartbeatTopicsPrefix": getOrCreateConfiguration(target).getHeartbeatTopicsPrefix(); return true;
        case "initialsyncmaxthreads":
        case "initialSyncMaxThreads": getOrCreateConfiguration(target).getInitialSyncMaxThreads(); return true;
        case "internalkeyconverter":
        case "internalKeyConverter": getOrCreateConfiguration(target).getInternalKeyConverter(); return true;
        case "internalvalueconverter":
        case "internalValueConverter": getOrCreateConfiguration(target).getInternalValueConverter(); return true;
        case "maxbatchsize":
        case "maxBatchSize": getOrCreateConfiguration(target).getMaxBatchSize(); return true;
        case "maxqueuesize":
        case "maxQueueSize": getOrCreateConfiguration(target).getMaxQueueSize(); return true;
        case "mongodbhosts":
        case "mongodbHosts": getOrCreateConfiguration(target).getMongodbHosts(); return true;
        case "mongodbmembersautodiscover":
        case "mongodbMembersAutoDiscover": getOrCreateConfiguration(target).isMongodbMembersAutoDiscover(); return true;
        case "mongodbname":
        case "mongodbName": getOrCreateConfiguration(target).getMongodbName(); return true;
        case "mongodbpassword":
        case "mongodbPassword": getOrCreateConfiguration(target).getMongodbPassword(); return true;
        case "mongodbsslenabled":
        case "mongodbSslEnabled": getOrCreateConfiguration(target).isMongodbSslEnabled(); return true;
        case "mongodbsslinvalidhostnameallowed":
        case "mongodbSslInvalidHostnameAllowed": getOrCreateConfiguration(target).isMongodbSslInvalidHostnameAllowed(); return true;
        case "mongodbuser":
        case "mongodbUser": getOrCreateConfiguration(target).getMongodbUser(); return true;
        case "offsetcommitpolicy":
        case "offsetCommitPolicy": getOrCreateConfiguration(target).getOffsetCommitPolicy(); return true;
        case "offsetcommittimeoutms":
        case "offsetCommitTimeoutMs": getOrCreateConfiguration(target).getOffsetCommitTimeoutMs(); return true;
        case "offsetflushintervalms":
        case "offsetFlushIntervalMs": getOrCreateConfiguration(target).getOffsetFlushIntervalMs(); return true;
        case "offsetstorage":
        case "offsetStorage": getOrCreateConfiguration(target).getOffsetStorage(); return true;
        case "offsetstoragefilename":
        case "offsetStorageFileName": getOrCreateConfiguration(target).getOffsetStorageFileName(); return true;
        case "offsetstoragepartitions":
        case "offsetStoragePartitions": getOrCreateConfiguration(target).getOffsetStoragePartitions(); return true;
        case "offsetstoragereplicationfactor":
        case "offsetStorageReplicationFactor": getOrCreateConfiguration(target).getOffsetStorageReplicationFactor(); return true;
        case "offsetstoragetopic":
        case "offsetStorageTopic": getOrCreateConfiguration(target).getOffsetStorageTopic(); return true;
        case "pollintervalms":
        case "pollIntervalMs": getOrCreateConfiguration(target).getPollIntervalMs(); return true;
        case "snapshotdelayms":
        case "snapshotDelayMs": getOrCreateConfiguration(target).getSnapshotDelayMs(); return true;
        case "snapshotfetchsize":
        case "snapshotFetchSize": getOrCreateConfiguration(target).getSnapshotFetchSize(); return true;
        case "snapshotmode":
        case "snapshotMode": getOrCreateConfiguration(target).getSnapshotMode(); return true;
        case "sourcestructversion":
        case "sourceStructVersion": getOrCreateConfiguration(target).getSourceStructVersion(); return true;
        case "tombstonesondelete":
        case "tombstonesOnDelete": getOrCreateConfiguration(target).isTombstonesOnDelete(); return true;
        default: return null;
        }
    }
}

