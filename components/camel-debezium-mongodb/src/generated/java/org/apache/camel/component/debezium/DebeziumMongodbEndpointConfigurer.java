/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.debezium;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DebeziumMongodbEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "additionalProperties": ((DebeziumMongodbEndpoint) target).getConfiguration().setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "bridgeErrorHandler": ((DebeziumMongodbEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "internalKeyConverter": ((DebeziumMongodbEndpoint) target).getConfiguration().setInternalKeyConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "internalValueConverter": ((DebeziumMongodbEndpoint) target).getConfiguration().setInternalValueConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetCommitPolicy": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetCommitPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetCommitTimeoutMs": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetCommitTimeoutMs(property(camelContext, long.class, value)); return true;
        case "offsetFlushIntervalMs": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetFlushIntervalMs(property(camelContext, long.class, value)); return true;
        case "offsetStorage": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStorage(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetStorageFileName": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStorageFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetStoragePartitions": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStoragePartitions(property(camelContext, int.class, value)); return true;
        case "offsetStorageReplicationFactor": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStorageReplicationFactor(property(camelContext, int.class, value)); return true;
        case "offsetStorageTopic": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStorageTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionHandler": ((DebeziumMongodbEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((DebeziumMongodbEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "basicPropertyBinding": ((DebeziumMongodbEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((DebeziumMongodbEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "collectionBlacklist": ((DebeziumMongodbEndpoint) target).getConfiguration().setCollectionBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "collectionWhitelist": ((DebeziumMongodbEndpoint) target).getConfiguration().setCollectionWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "connectBackoffInitialDelayMs": ((DebeziumMongodbEndpoint) target).getConfiguration().setConnectBackoffInitialDelayMs(property(camelContext, long.class, value)); return true;
        case "connectBackoffMaxDelayMs": ((DebeziumMongodbEndpoint) target).getConfiguration().setConnectBackoffMaxDelayMs(property(camelContext, long.class, value)); return true;
        case "connectMaxAttempts": ((DebeziumMongodbEndpoint) target).getConfiguration().setConnectMaxAttempts(property(camelContext, int.class, value)); return true;
        case "databaseBlacklist": ((DebeziumMongodbEndpoint) target).getConfiguration().setDatabaseBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseHistoryFileFilename": ((DebeziumMongodbEndpoint) target).getConfiguration().setDatabaseHistoryFileFilename(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseWhitelist": ((DebeziumMongodbEndpoint) target).getConfiguration().setDatabaseWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "fieldBlacklist": ((DebeziumMongodbEndpoint) target).getConfiguration().setFieldBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "fieldRenames": ((DebeziumMongodbEndpoint) target).getConfiguration().setFieldRenames(property(camelContext, java.lang.String.class, value)); return true;
        case "heartbeatIntervalMs": ((DebeziumMongodbEndpoint) target).getConfiguration().setHeartbeatIntervalMs(property(camelContext, int.class, value)); return true;
        case "heartbeatTopicsPrefix": ((DebeziumMongodbEndpoint) target).getConfiguration().setHeartbeatTopicsPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "initialSyncMaxThreads": ((DebeziumMongodbEndpoint) target).getConfiguration().setInitialSyncMaxThreads(property(camelContext, int.class, value)); return true;
        case "maxBatchSize": ((DebeziumMongodbEndpoint) target).getConfiguration().setMaxBatchSize(property(camelContext, int.class, value)); return true;
        case "maxQueueSize": ((DebeziumMongodbEndpoint) target).getConfiguration().setMaxQueueSize(property(camelContext, int.class, value)); return true;
        case "mongodbHosts": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbHosts(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbMembersAutoDiscover": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbMembersAutoDiscover(property(camelContext, boolean.class, value)); return true;
        case "mongodbName": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbName(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbPassword": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbSslEnabled": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbSslEnabled(property(camelContext, boolean.class, value)); return true;
        case "mongodbSslInvalidHostnameAllowed": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbSslInvalidHostnameAllowed(property(camelContext, boolean.class, value)); return true;
        case "mongodbUser": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbUser(property(camelContext, java.lang.String.class, value)); return true;
        case "pollIntervalMs": ((DebeziumMongodbEndpoint) target).getConfiguration().setPollIntervalMs(property(camelContext, long.class, value)); return true;
        case "snapshotDelayMs": ((DebeziumMongodbEndpoint) target).getConfiguration().setSnapshotDelayMs(property(camelContext, long.class, value)); return true;
        case "snapshotFetchSize": ((DebeziumMongodbEndpoint) target).getConfiguration().setSnapshotFetchSize(property(camelContext, int.class, value)); return true;
        case "snapshotMode": ((DebeziumMongodbEndpoint) target).getConfiguration().setSnapshotMode(property(camelContext, java.lang.String.class, value)); return true;
        case "sourceStructVersion": ((DebeziumMongodbEndpoint) target).getConfiguration().setSourceStructVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "tombstonesOnDelete": ((DebeziumMongodbEndpoint) target).getConfiguration().setTombstonesOnDelete(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "additionalproperties": ((DebeziumMongodbEndpoint) target).getConfiguration().setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "bridgeerrorhandler": ((DebeziumMongodbEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "internalkeyconverter": ((DebeziumMongodbEndpoint) target).getConfiguration().setInternalKeyConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "internalvalueconverter": ((DebeziumMongodbEndpoint) target).getConfiguration().setInternalValueConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommitpolicy": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetCommitPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommittimeoutms": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetCommitTimeoutMs(property(camelContext, long.class, value)); return true;
        case "offsetflushintervalms": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetFlushIntervalMs(property(camelContext, long.class, value)); return true;
        case "offsetstorage": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStorage(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragefilename": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStorageFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragepartitions": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStoragePartitions(property(camelContext, int.class, value)); return true;
        case "offsetstoragereplicationfactor": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStorageReplicationFactor(property(camelContext, int.class, value)); return true;
        case "offsetstoragetopic": ((DebeziumMongodbEndpoint) target).getConfiguration().setOffsetStorageTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler": ((DebeziumMongodbEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((DebeziumMongodbEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "basicpropertybinding": ((DebeziumMongodbEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((DebeziumMongodbEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "collectionblacklist": ((DebeziumMongodbEndpoint) target).getConfiguration().setCollectionBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "collectionwhitelist": ((DebeziumMongodbEndpoint) target).getConfiguration().setCollectionWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "connectbackoffinitialdelayms": ((DebeziumMongodbEndpoint) target).getConfiguration().setConnectBackoffInitialDelayMs(property(camelContext, long.class, value)); return true;
        case "connectbackoffmaxdelayms": ((DebeziumMongodbEndpoint) target).getConfiguration().setConnectBackoffMaxDelayMs(property(camelContext, long.class, value)); return true;
        case "connectmaxattempts": ((DebeziumMongodbEndpoint) target).getConfiguration().setConnectMaxAttempts(property(camelContext, int.class, value)); return true;
        case "databaseblacklist": ((DebeziumMongodbEndpoint) target).getConfiguration().setDatabaseBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistoryfilefilename": ((DebeziumMongodbEndpoint) target).getConfiguration().setDatabaseHistoryFileFilename(property(camelContext, java.lang.String.class, value)); return true;
        case "databasewhitelist": ((DebeziumMongodbEndpoint) target).getConfiguration().setDatabaseWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "fieldblacklist": ((DebeziumMongodbEndpoint) target).getConfiguration().setFieldBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "fieldrenames": ((DebeziumMongodbEndpoint) target).getConfiguration().setFieldRenames(property(camelContext, java.lang.String.class, value)); return true;
        case "heartbeatintervalms": ((DebeziumMongodbEndpoint) target).getConfiguration().setHeartbeatIntervalMs(property(camelContext, int.class, value)); return true;
        case "heartbeattopicsprefix": ((DebeziumMongodbEndpoint) target).getConfiguration().setHeartbeatTopicsPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "initialsyncmaxthreads": ((DebeziumMongodbEndpoint) target).getConfiguration().setInitialSyncMaxThreads(property(camelContext, int.class, value)); return true;
        case "maxbatchsize": ((DebeziumMongodbEndpoint) target).getConfiguration().setMaxBatchSize(property(camelContext, int.class, value)); return true;
        case "maxqueuesize": ((DebeziumMongodbEndpoint) target).getConfiguration().setMaxQueueSize(property(camelContext, int.class, value)); return true;
        case "mongodbhosts": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbHosts(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbmembersautodiscover": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbMembersAutoDiscover(property(camelContext, boolean.class, value)); return true;
        case "mongodbname": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbName(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbpassword": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "mongodbsslenabled": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbSslEnabled(property(camelContext, boolean.class, value)); return true;
        case "mongodbsslinvalidhostnameallowed": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbSslInvalidHostnameAllowed(property(camelContext, boolean.class, value)); return true;
        case "mongodbuser": ((DebeziumMongodbEndpoint) target).getConfiguration().setMongodbUser(property(camelContext, java.lang.String.class, value)); return true;
        case "pollintervalms": ((DebeziumMongodbEndpoint) target).getConfiguration().setPollIntervalMs(property(camelContext, long.class, value)); return true;
        case "snapshotdelayms": ((DebeziumMongodbEndpoint) target).getConfiguration().setSnapshotDelayMs(property(camelContext, long.class, value)); return true;
        case "snapshotfetchsize": ((DebeziumMongodbEndpoint) target).getConfiguration().setSnapshotFetchSize(property(camelContext, int.class, value)); return true;
        case "snapshotmode": ((DebeziumMongodbEndpoint) target).getConfiguration().setSnapshotMode(property(camelContext, java.lang.String.class, value)); return true;
        case "sourcestructversion": ((DebeziumMongodbEndpoint) target).getConfiguration().setSourceStructVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "tombstonesondelete": ((DebeziumMongodbEndpoint) target).getConfiguration().setTombstonesOnDelete(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

