/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.xquery;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class XQueryEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "allowStAX": ((XQueryEndpoint) target).setAllowStAX(property(camelContext, boolean.class, value)); return true;
        case "headerName": ((XQueryEndpoint) target).setHeaderName(property(camelContext, java.lang.String.class, value)); return true;
        case "namespacePrefixes": ((XQueryEndpoint) target).setNamespacePrefixes(property(camelContext, java.util.Map.class, value)); return true;
        case "resultsFormat": ((XQueryEndpoint) target).setResultsFormat(property(camelContext, org.apache.camel.component.xquery.ResultFormat.class, value)); return true;
        case "resultType": ((XQueryEndpoint) target).setResultType(property(camelContext, java.lang.Class.class, value)); return true;
        case "stripsAllWhiteSpace": ((XQueryEndpoint) target).setStripsAllWhiteSpace(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((XQueryEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((XQueryEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((XQueryEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((XQueryEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((XQueryEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazyStartProducer": ((XQueryEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((XQueryEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "configuration": ((XQueryEndpoint) target).setConfiguration(property(camelContext, net.sf.saxon.Configuration.class, value)); return true;
        case "configurationProperties": ((XQueryEndpoint) target).setConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "moduleURIResolver": ((XQueryEndpoint) target).setModuleURIResolver(property(camelContext, net.sf.saxon.lib.ModuleURIResolver.class, value)); return true;
        case "parameters": ((XQueryEndpoint) target).setParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "properties": ((XQueryEndpoint) target).setProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "staticQueryContext": ((XQueryEndpoint) target).setStaticQueryContext(property(camelContext, net.sf.saxon.query.StaticQueryContext.class, value)); return true;
        case "synchronous": ((XQueryEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffErrorThreshold": ((XQueryEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((XQueryEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((XQueryEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((XQueryEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((XQueryEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((XQueryEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((XQueryEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((XQueryEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((XQueryEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((XQueryEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((XQueryEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((XQueryEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((XQueryEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((XQueryEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "allowstax": ((XQueryEndpoint) target).setAllowStAX(property(camelContext, boolean.class, value)); return true;
        case "headername": ((XQueryEndpoint) target).setHeaderName(property(camelContext, java.lang.String.class, value)); return true;
        case "namespaceprefixes": ((XQueryEndpoint) target).setNamespacePrefixes(property(camelContext, java.util.Map.class, value)); return true;
        case "resultsformat": ((XQueryEndpoint) target).setResultsFormat(property(camelContext, org.apache.camel.component.xquery.ResultFormat.class, value)); return true;
        case "resulttype": ((XQueryEndpoint) target).setResultType(property(camelContext, java.lang.Class.class, value)); return true;
        case "stripsallwhitespace": ((XQueryEndpoint) target).setStripsAllWhiteSpace(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((XQueryEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendemptymessagewhenidle": ((XQueryEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((XQueryEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((XQueryEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((XQueryEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazystartproducer": ((XQueryEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((XQueryEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "configuration": ((XQueryEndpoint) target).setConfiguration(property(camelContext, net.sf.saxon.Configuration.class, value)); return true;
        case "configurationproperties": ((XQueryEndpoint) target).setConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "moduleuriresolver": ((XQueryEndpoint) target).setModuleURIResolver(property(camelContext, net.sf.saxon.lib.ModuleURIResolver.class, value)); return true;
        case "parameters": ((XQueryEndpoint) target).setParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "properties": ((XQueryEndpoint) target).setProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "staticquerycontext": ((XQueryEndpoint) target).setStaticQueryContext(property(camelContext, net.sf.saxon.query.StaticQueryContext.class, value)); return true;
        case "synchronous": ((XQueryEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold": ((XQueryEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((XQueryEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((XQueryEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((XQueryEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((XQueryEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((XQueryEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((XQueryEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((XQueryEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((XQueryEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((XQueryEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((XQueryEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((XQueryEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((XQueryEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((XQueryEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

