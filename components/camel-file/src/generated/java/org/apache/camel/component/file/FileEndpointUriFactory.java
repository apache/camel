/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.file;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class FileEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":directoryName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "allowNullBody", "antExclude", "antFilterCaseSensitive", "antInclude", "appendChars", "autoCreate",
            "backoffErrorThreshold", "backoffIdleThreshold", "backoffMultiplier", "bridgeErrorHandler", "bufferSize",
            "charset", "chmod", "chmodDirectory", "copyAndDeleteOnRenameFail", "delay", "delete", "directoryMustExist",
            "directoryName", "doneFileName", "eagerDeleteTargetFile", "eagerMaxMessagesPerPoll", "exceptionHandler",
            "exchangePattern", "exclude", "excludeExt", "exclusiveReadLockStrategy", "extendedAttributes", "fileExist",
            "fileName", "filter", "filterDirectory", "filterFile", "flatten", "forceWrites", "greedy", "idempotent",
            "idempotentKey", "idempotentRepository", "inProgressRepository", "include", "includeExt", "initialDelay",
            "jailStartingDirectory", "keepLastModified", "lazyStartProducer", "localWorkDirectory", "maxDepth",
            "maxMessagesPerPoll", "minDepth", "move", "moveExisting", "moveExistingFileStrategy", "moveFailed", "noop",
            "onCompletionExceptionHandler", "pollStrategy", "preMove", "preSort", "probeContentType", "processStrategy",
            "readLock", "readLockCheckInterval", "readLockDeleteOrphanLockFiles", "readLockIdempotentReleaseAsync",
            "readLockIdempotentReleaseAsyncPoolSize", "readLockIdempotentReleaseDelay",
            "readLockIdempotentReleaseExecutorService", "readLockLoggingLevel", "readLockMarkerFile", "readLockMinAge",
            "readLockMinLength", "readLockRemoveOnCommit", "readLockRemoveOnRollback", "readLockTimeout", "recursive",
            "renameUsingCopy", "repeatCount", "runLoggingLevel", "scheduledExecutorService", "scheduler",
            "schedulerProperties", "sendEmptyMessageWhenIdle", "shuffle", "sortBy", "sorter", "startScheduler",
            "startingDirectoryMustExist", "startingDirectoryMustHaveAccess", "synchronous", "tempFileName", "tempPrefix",
            "timeUnit", "useFixedDelay");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of();
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "scheduler.");

    @Override
    public boolean isEnabled(String scheme) {
        return "file".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "directoryName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

