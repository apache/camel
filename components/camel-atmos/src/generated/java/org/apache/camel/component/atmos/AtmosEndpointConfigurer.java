/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.atmos;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class AtmosEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "localPath": ((AtmosEndpoint) target).getConfiguration().setLocalPath(property(camelContext, java.lang.String.class, value)); return true;
        case "newRemotePath": ((AtmosEndpoint) target).getConfiguration().setNewRemotePath(property(camelContext, java.lang.String.class, value)); return true;
        case "query": ((AtmosEndpoint) target).getConfiguration().setQuery(property(camelContext, java.lang.String.class, value)); return true;
        case "remotePath": ((AtmosEndpoint) target).getConfiguration().setRemotePath(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((AtmosEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((AtmosEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((AtmosEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazyStartProducer": ((AtmosEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((AtmosEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((AtmosEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "uri": ((AtmosEndpoint) target).getConfiguration().setUri(property(camelContext, java.lang.String.class, value)); return true;
        case "fullTokenId": ((AtmosEndpoint) target).getConfiguration().setFullTokenId(property(camelContext, java.lang.String.class, value)); return true;
        case "secretKey": ((AtmosEndpoint) target).getConfiguration().setSecretKey(property(camelContext, java.lang.String.class, value)); return true;
        case "sslValidation": ((AtmosEndpoint) target).getConfiguration().setSslValidation(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "localpath": ((AtmosEndpoint) target).getConfiguration().setLocalPath(property(camelContext, java.lang.String.class, value)); return true;
        case "newremotepath": ((AtmosEndpoint) target).getConfiguration().setNewRemotePath(property(camelContext, java.lang.String.class, value)); return true;
        case "query": ((AtmosEndpoint) target).getConfiguration().setQuery(property(camelContext, java.lang.String.class, value)); return true;
        case "remotepath": ((AtmosEndpoint) target).getConfiguration().setRemotePath(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((AtmosEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((AtmosEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((AtmosEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazystartproducer": ((AtmosEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((AtmosEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((AtmosEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "uri": ((AtmosEndpoint) target).getConfiguration().setUri(property(camelContext, java.lang.String.class, value)); return true;
        case "fulltokenid": ((AtmosEndpoint) target).getConfiguration().setFullTokenId(property(camelContext, java.lang.String.class, value)); return true;
        case "secretkey": ((AtmosEndpoint) target).getConfiguration().setSecretKey(property(camelContext, java.lang.String.class, value)); return true;
        case "sslvalidation": ((AtmosEndpoint) target).getConfiguration().setSslValidation(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

