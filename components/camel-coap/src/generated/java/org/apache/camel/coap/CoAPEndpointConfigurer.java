/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.coap;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class CoAPEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        CoAPEndpoint target = (CoAPEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "alias": target.setAlias(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "ciphersuites":
        case "cipherSuites": target.setCipherSuites(property(camelContext, java.lang.String.class, value)); return true;
        case "clientauthentication":
        case "clientAuthentication": target.setClientAuthentication(property(camelContext, java.lang.String.class, value)); return true;
        case "coapmethodrestrict":
        case "coapMethodRestrict": target.setCoapMethodRestrict(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "privatekey":
        case "privateKey": target.setPrivateKey(property(camelContext, java.security.PrivateKey.class, value)); return true;
        case "pskstore":
        case "pskStore": target.setPskStore(property(camelContext, org.eclipse.californium.scandium.dtls.pskstore.PskStore.class, value)); return true;
        case "publickey":
        case "publicKey": target.setPublicKey(property(camelContext, java.security.PublicKey.class, value)); return true;
        case "recommendedciphersuitesonly":
        case "recommendedCipherSuitesOnly": target.setRecommendedCipherSuitesOnly(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "trustedrpkstore":
        case "trustedRpkStore": target.setTrustedRpkStore(property(camelContext, org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("alias", java.lang.String.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("cipherSuites", java.lang.String.class);
        answer.put("clientAuthentication", java.lang.String.class);
        answer.put("coapMethodRestrict", java.lang.String.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("privateKey", java.security.PrivateKey.class);
        answer.put("pskStore", org.eclipse.californium.scandium.dtls.pskstore.PskStore.class);
        answer.put("publicKey", java.security.PublicKey.class);
        answer.put("recommendedCipherSuitesOnly", boolean.class);
        answer.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        answer.put("synchronous", boolean.class);
        answer.put("trustedRpkStore", org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        CoAPEndpoint target = (CoAPEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "alias": target.getAlias(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "ciphersuites":
        case "cipherSuites": target.getCipherSuites(); return true;
        case "clientauthentication":
        case "clientAuthentication": target.getClientAuthentication(); return true;
        case "coapmethodrestrict":
        case "coapMethodRestrict": target.getCoapMethodRestrict(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "privatekey":
        case "privateKey": target.getPrivateKey(); return true;
        case "pskstore":
        case "pskStore": target.getPskStore(); return true;
        case "publickey":
        case "publicKey": target.getPublicKey(); return true;
        case "recommendedciphersuitesonly":
        case "recommendedCipherSuitesOnly": target.isRecommendedCipherSuitesOnly(); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.getSslContextParameters(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "trustedrpkstore":
        case "trustedRpkStore": target.getTrustedRpkStore(); return true;
        default: return null;
        }
    }
}

