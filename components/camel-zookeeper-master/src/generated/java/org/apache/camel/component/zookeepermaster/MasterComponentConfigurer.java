/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.zookeepermaster;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class MasterComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        MasterComponent target = (MasterComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "containeridfactory":
        case "containerIdFactory": target.setContainerIdFactory(property(camelContext, org.apache.camel.component.zookeepermaster.ContainerIdFactory.class, value)); return true;
        case "curator": target.setCurator(property(camelContext, org.apache.curator.framework.CuratorFramework.class, value)); return true;
        case "maximumconnectiontimeout":
        case "maximumConnectionTimeout": target.setMaximumConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "zkroot":
        case "zkRoot": target.setZkRoot(property(camelContext, java.lang.String.class, value)); return true;
        case "zookeeperpassword":
        case "zooKeeperPassword": target.setZooKeeperPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "zookeeperurl":
        case "zooKeeperUrl": target.setZooKeeperUrl(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("containerIdFactory", org.apache.camel.component.zookeepermaster.ContainerIdFactory.class);
        answer.put("curator", org.apache.curator.framework.CuratorFramework.class);
        answer.put("maximumConnectionTimeout", int.class);
        answer.put("zkRoot", java.lang.String.class);
        answer.put("zooKeeperPassword", java.lang.String.class);
        answer.put("zooKeeperUrl", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        MasterComponent target = (MasterComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "containeridfactory":
        case "containerIdFactory": return target.getContainerIdFactory();
        case "curator": return target.getCurator();
        case "maximumconnectiontimeout":
        case "maximumConnectionTimeout": return target.getMaximumConnectionTimeout();
        case "zkroot":
        case "zkRoot": return target.getZkRoot();
        case "zookeeperpassword":
        case "zooKeeperPassword": return target.getZooKeeperPassword();
        case "zookeeperurl":
        case "zooKeeperUrl": return target.getZooKeeperUrl();
        default: return null;
        }
    }
}

