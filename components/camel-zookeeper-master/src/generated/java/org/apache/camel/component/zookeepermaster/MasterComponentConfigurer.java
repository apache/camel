/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.zookeepermaster;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class MasterComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "containerIdFactory": ((MasterComponent) target).setContainerIdFactory(property(camelContext, org.apache.camel.component.zookeepermaster.ContainerIdFactory.class, value)); return true;
        case "zkRoot": ((MasterComponent) target).setZkRoot(property(camelContext, java.lang.String.class, value)); return true;
        case "curator": ((MasterComponent) target).setCurator(property(camelContext, org.apache.curator.framework.CuratorFramework.class, value)); return true;
        case "maximumConnectionTimeout": ((MasterComponent) target).setMaximumConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "zooKeeperUrl": ((MasterComponent) target).setZooKeeperUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "zooKeeperPassword": ((MasterComponent) target).setZooKeeperPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "basicPropertyBinding": ((MasterComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((MasterComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "containeridfactory": ((MasterComponent) target).setContainerIdFactory(property(camelContext, org.apache.camel.component.zookeepermaster.ContainerIdFactory.class, value)); return true;
        case "zkroot": ((MasterComponent) target).setZkRoot(property(camelContext, java.lang.String.class, value)); return true;
        case "curator": ((MasterComponent) target).setCurator(property(camelContext, org.apache.curator.framework.CuratorFramework.class, value)); return true;
        case "maximumconnectiontimeout": ((MasterComponent) target).setMaximumConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "zookeeperurl": ((MasterComponent) target).setZooKeeperUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "zookeeperpassword": ((MasterComponent) target).setZooKeeperPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding": ((MasterComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((MasterComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

