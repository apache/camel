/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.ironmq;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class IronMQEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "client": ((IronMQEndpoint) target).getConfiguration().setClient(property(camelContext, io.iron.ironmq.Client.class, value)); return true;
        case "ironMQCloud": ((IronMQEndpoint) target).getConfiguration().setIronMQCloud(property(camelContext, java.lang.String.class, value)); return true;
        case "preserveHeaders": ((IronMQEndpoint) target).getConfiguration().setPreserveHeaders(property(camelContext, boolean.class, value)); return true;
        case "projectId": ((IronMQEndpoint) target).getConfiguration().setProjectId(property(camelContext, java.lang.String.class, value)); return true;
        case "token": ((IronMQEndpoint) target).getConfiguration().setToken(property(camelContext, java.lang.String.class, value)); return true;
        case "batchDelete": ((IronMQEndpoint) target).getConfiguration().setBatchDelete(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((IronMQEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentConsumers": ((IronMQEndpoint) target).getConfiguration().setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "maxMessagesPerPoll": ((IronMQEndpoint) target).getConfiguration().setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((IronMQEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "timeout": ((IronMQEndpoint) target).getConfiguration().setTimeout(property(camelContext, int.class, value)); return true;
        case "wait": ((IronMQEndpoint) target).getConfiguration().setWait(property(camelContext, int.class, value)); return true;
        case "exceptionHandler": ((IronMQEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((IronMQEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((IronMQEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazyStartProducer": ((IronMQEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "visibilityDelay": ((IronMQEndpoint) target).getConfiguration().setVisibilityDelay(property(camelContext, int.class, value)); return true;
        case "basicPropertyBinding": ((IronMQEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((IronMQEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffErrorThreshold": ((IronMQEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((IronMQEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((IronMQEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((IronMQEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((IronMQEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((IronMQEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((IronMQEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((IronMQEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((IronMQEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((IronMQEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((IronMQEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((IronMQEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((IronMQEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((IronMQEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "client": ((IronMQEndpoint) target).getConfiguration().setClient(property(camelContext, io.iron.ironmq.Client.class, value)); return true;
        case "ironmqcloud": ((IronMQEndpoint) target).getConfiguration().setIronMQCloud(property(camelContext, java.lang.String.class, value)); return true;
        case "preserveheaders": ((IronMQEndpoint) target).getConfiguration().setPreserveHeaders(property(camelContext, boolean.class, value)); return true;
        case "projectid": ((IronMQEndpoint) target).getConfiguration().setProjectId(property(camelContext, java.lang.String.class, value)); return true;
        case "token": ((IronMQEndpoint) target).getConfiguration().setToken(property(camelContext, java.lang.String.class, value)); return true;
        case "batchdelete": ((IronMQEndpoint) target).getConfiguration().setBatchDelete(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((IronMQEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentconsumers": ((IronMQEndpoint) target).getConfiguration().setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "maxmessagesperpoll": ((IronMQEndpoint) target).getConfiguration().setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "sendemptymessagewhenidle": ((IronMQEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "timeout": ((IronMQEndpoint) target).getConfiguration().setTimeout(property(camelContext, int.class, value)); return true;
        case "wait": ((IronMQEndpoint) target).getConfiguration().setWait(property(camelContext, int.class, value)); return true;
        case "exceptionhandler": ((IronMQEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((IronMQEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((IronMQEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazystartproducer": ((IronMQEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "visibilitydelay": ((IronMQEndpoint) target).getConfiguration().setVisibilityDelay(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding": ((IronMQEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((IronMQEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold": ((IronMQEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((IronMQEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((IronMQEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((IronMQEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((IronMQEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((IronMQEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((IronMQEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((IronMQEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((IronMQEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((IronMQEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((IronMQEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((IronMQEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((IronMQEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((IronMQEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

