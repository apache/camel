/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.olingo4;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class Olingo4EndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "connectTimeout": ((Olingo4Endpoint) target).getConfiguration().setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "contentType": ((Olingo4Endpoint) target).getConfiguration().setContentType(property(camelContext, java.lang.String.class, value)); return true;
        case "filterAlreadySeen": ((Olingo4Endpoint) target).getConfiguration().setFilterAlreadySeen(property(camelContext, boolean.class, value)); return true;
        case "httpAsyncClientBuilder": ((Olingo4Endpoint) target).getConfiguration().setHttpAsyncClientBuilder(property(camelContext, org.apache.http.impl.nio.client.HttpAsyncClientBuilder.class, value)); return true;
        case "httpClientBuilder": ((Olingo4Endpoint) target).getConfiguration().setHttpClientBuilder(property(camelContext, org.apache.http.impl.client.HttpClientBuilder.class, value)); return true;
        case "httpHeaders": ((Olingo4Endpoint) target).getConfiguration().setHttpHeaders(property(camelContext, java.util.Map.class, value)); return true;
        case "inBody": ((Olingo4Endpoint) target).setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "proxy": ((Olingo4Endpoint) target).getConfiguration().setProxy(property(camelContext, org.apache.http.HttpHost.class, value)); return true;
        case "serviceUri": ((Olingo4Endpoint) target).getConfiguration().setServiceUri(property(camelContext, java.lang.String.class, value)); return true;
        case "socketTimeout": ((Olingo4Endpoint) target).getConfiguration().setSocketTimeout(property(camelContext, int.class, value)); return true;
        case "sslContextParameters": ((Olingo4Endpoint) target).getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "bridgeErrorHandler": ((Olingo4Endpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((Olingo4Endpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "splitResult": ((Olingo4Endpoint) target).getConfiguration().setSplitResult(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((Olingo4Endpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((Olingo4Endpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((Olingo4Endpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazyStartProducer": ((Olingo4Endpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((Olingo4Endpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((Olingo4Endpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffErrorThreshold": ((Olingo4Endpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((Olingo4Endpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((Olingo4Endpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((Olingo4Endpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((Olingo4Endpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((Olingo4Endpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((Olingo4Endpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((Olingo4Endpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((Olingo4Endpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((Olingo4Endpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((Olingo4Endpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((Olingo4Endpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((Olingo4Endpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((Olingo4Endpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "connecttimeout": ((Olingo4Endpoint) target).getConfiguration().setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "contenttype": ((Olingo4Endpoint) target).getConfiguration().setContentType(property(camelContext, java.lang.String.class, value)); return true;
        case "filteralreadyseen": ((Olingo4Endpoint) target).getConfiguration().setFilterAlreadySeen(property(camelContext, boolean.class, value)); return true;
        case "httpasyncclientbuilder": ((Olingo4Endpoint) target).getConfiguration().setHttpAsyncClientBuilder(property(camelContext, org.apache.http.impl.nio.client.HttpAsyncClientBuilder.class, value)); return true;
        case "httpclientbuilder": ((Olingo4Endpoint) target).getConfiguration().setHttpClientBuilder(property(camelContext, org.apache.http.impl.client.HttpClientBuilder.class, value)); return true;
        case "httpheaders": ((Olingo4Endpoint) target).getConfiguration().setHttpHeaders(property(camelContext, java.util.Map.class, value)); return true;
        case "inbody": ((Olingo4Endpoint) target).setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "proxy": ((Olingo4Endpoint) target).getConfiguration().setProxy(property(camelContext, org.apache.http.HttpHost.class, value)); return true;
        case "serviceuri": ((Olingo4Endpoint) target).getConfiguration().setServiceUri(property(camelContext, java.lang.String.class, value)); return true;
        case "sockettimeout": ((Olingo4Endpoint) target).getConfiguration().setSocketTimeout(property(camelContext, int.class, value)); return true;
        case "sslcontextparameters": ((Olingo4Endpoint) target).getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "bridgeerrorhandler": ((Olingo4Endpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendemptymessagewhenidle": ((Olingo4Endpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "splitresult": ((Olingo4Endpoint) target).getConfiguration().setSplitResult(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((Olingo4Endpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((Olingo4Endpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((Olingo4Endpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazystartproducer": ((Olingo4Endpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((Olingo4Endpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((Olingo4Endpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold": ((Olingo4Endpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((Olingo4Endpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((Olingo4Endpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((Olingo4Endpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((Olingo4Endpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((Olingo4Endpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((Olingo4Endpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((Olingo4Endpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((Olingo4Endpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((Olingo4Endpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((Olingo4Endpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((Olingo4Endpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((Olingo4Endpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((Olingo4Endpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

