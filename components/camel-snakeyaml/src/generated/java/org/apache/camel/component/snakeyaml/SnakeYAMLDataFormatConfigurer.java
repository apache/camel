/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.snakeyaml;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.snakeyaml.SnakeYAMLDataFormat;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class SnakeYAMLDataFormatConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("AllowAnyType", boolean.class);
        map.put("AllowRecursiveKeys", boolean.class);
        map.put("Constructor", org.yaml.snakeyaml.constructor.BaseConstructor.class);
        map.put("DumperOptions", org.yaml.snakeyaml.DumperOptions.class);
        map.put("MaxAliasesForCollections", int.class);
        map.put("PrettyFlow", boolean.class);
        map.put("Representer", org.yaml.snakeyaml.representer.Representer.class);
        map.put("Resolver", org.yaml.snakeyaml.resolver.Resolver.class);
        map.put("UnmarshalType", java.lang.Class.class);
        map.put("UseApplicationContextClassLoader", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        SnakeYAMLDataFormat target = (SnakeYAMLDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowanytype":
        case "allowAnyType": target.setAllowAnyType(property(camelContext, boolean.class, value)); return true;
        case "allowrecursivekeys":
        case "allowRecursiveKeys": target.setAllowRecursiveKeys(property(camelContext, boolean.class, value)); return true;
        case "constructor": target.setConstructor(property(camelContext, org.yaml.snakeyaml.constructor.BaseConstructor.class, value)); return true;
        case "dumperoptions":
        case "dumperOptions": target.setDumperOptions(property(camelContext, org.yaml.snakeyaml.DumperOptions.class, value)); return true;
        case "maxaliasesforcollections":
        case "maxAliasesForCollections": target.setMaxAliasesForCollections(property(camelContext, int.class, value)); return true;
        case "prettyflow":
        case "prettyFlow": target.setPrettyFlow(property(camelContext, boolean.class, value)); return true;
        case "representer": target.setRepresenter(property(camelContext, org.yaml.snakeyaml.representer.Representer.class, value)); return true;
        case "resolver": target.setResolver(property(camelContext, org.yaml.snakeyaml.resolver.Resolver.class, value)); return true;
        case "unmarshaltype":
        case "unmarshalType": target.setUnmarshalType(property(camelContext, java.lang.Class.class, value)); return true;
        case "useapplicationcontextclassloader":
        case "useApplicationContextClassLoader": target.setUseApplicationContextClassLoader(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowanytype":
        case "allowAnyType": return boolean.class;
        case "allowrecursivekeys":
        case "allowRecursiveKeys": return boolean.class;
        case "constructor": return org.yaml.snakeyaml.constructor.BaseConstructor.class;
        case "dumperoptions":
        case "dumperOptions": return org.yaml.snakeyaml.DumperOptions.class;
        case "maxaliasesforcollections":
        case "maxAliasesForCollections": return int.class;
        case "prettyflow":
        case "prettyFlow": return boolean.class;
        case "representer": return org.yaml.snakeyaml.representer.Representer.class;
        case "resolver": return org.yaml.snakeyaml.resolver.Resolver.class;
        case "unmarshaltype":
        case "unmarshalType": return java.lang.Class.class;
        case "useapplicationcontextclassloader":
        case "useApplicationContextClassLoader": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        SnakeYAMLDataFormat target = (SnakeYAMLDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowanytype":
        case "allowAnyType": return target.isAllowAnyType();
        case "allowrecursivekeys":
        case "allowRecursiveKeys": return target.isAllowRecursiveKeys();
        case "constructor": return target.getConstructor();
        case "dumperoptions":
        case "dumperOptions": return target.getDumperOptions();
        case "maxaliasesforcollections":
        case "maxAliasesForCollections": return target.getMaxAliasesForCollections();
        case "prettyflow":
        case "prettyFlow": return target.isPrettyFlow();
        case "representer": return target.getRepresenter();
        case "resolver": return target.getResolver();
        case "unmarshaltype":
        case "unmarshalType": return target.getUnmarshalType();
        case "useapplicationcontextclassloader":
        case "useApplicationContextClassLoader": return target.isUseApplicationContextClassLoader();
        default: return null;
        }
    }
}

