/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.netty.http;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class NettyHttpEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        NettyHttpEndpoint target = (NettyHttpEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeendpoint":
        case "bridgeEndpoint": target.getConfiguration().setBridgeEndpoint(property(camelContext, boolean.class, value)); return true;
        case "disconnect": target.getConfiguration().setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "keepalive":
        case "keepAlive": target.getConfiguration().setKeepAlive(property(camelContext, boolean.class, value)); return true;
        case "reuseaddress":
        case "reuseAddress": target.getConfiguration().setReuseAddress(property(camelContext, boolean.class, value)); return true;
        case "reusechannel":
        case "reuseChannel": target.getConfiguration().setReuseChannel(property(camelContext, boolean.class, value)); return true;
        case "sync": target.getConfiguration().setSync(property(camelContext, boolean.class, value)); return true;
        case "tcpnodelay":
        case "tcpNoDelay": target.getConfiguration().setTcpNoDelay(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "matchonuriprefix":
        case "matchOnUriPrefix": target.getConfiguration().setMatchOnUriPrefix(property(camelContext, boolean.class, value)); return true;
        case "muteexception":
        case "muteException": target.getConfiguration().setMuteException(property(camelContext, boolean.class, value)); return true;
        case "send503whensuspended":
        case "send503whenSuspended": target.getConfiguration().setSend503whenSuspended(property(camelContext, boolean.class, value)); return true;
        case "backlog": target.getConfiguration().setBacklog(property(camelContext, int.class, value)); return true;
        case "bosscount":
        case "bossCount": target.getConfiguration().setBossCount(property(camelContext, int.class, value)); return true;
        case "bossgroup":
        case "bossGroup": target.getConfiguration().setBossGroup(property(camelContext, io.netty.channel.EventLoopGroup.class, value)); return true;
        case "chunkedmaxcontentlength":
        case "chunkedMaxContentLength": target.getConfiguration().setChunkedMaxContentLength(property(camelContext, int.class, value)); return true;
        case "compression": target.getConfiguration().setCompression(property(camelContext, boolean.class, value)); return true;
        case "disconnectonnoreply":
        case "disconnectOnNoReply": target.getConfiguration().setDisconnectOnNoReply(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "httpmethodrestrict":
        case "httpMethodRestrict": target.setHttpMethodRestrict(property(camelContext, java.lang.String.class, value)); return true;
        case "logwarnonbadrequest":
        case "logWarnOnBadRequest": target.getConfiguration().setLogWarnOnBadRequest(property(camelContext, boolean.class, value)); return true;
        case "mapheaders":
        case "mapHeaders": target.getConfiguration().setMapHeaders(property(camelContext, boolean.class, value)); return true;
        case "maxheadersize":
        case "maxHeaderSize": target.getConfiguration().setMaxHeaderSize(property(camelContext, int.class, value)); return true;
        case "nettyserverbootstrapfactory":
        case "nettyServerBootstrapFactory": target.getConfiguration().setNettyServerBootstrapFactory(property(camelContext, org.apache.camel.component.netty.NettyServerBootstrapFactory.class, value)); return true;
        case "nettysharedhttpserver":
        case "nettySharedHttpServer": target.setNettySharedHttpServer(property(camelContext, org.apache.camel.component.netty.http.NettySharedHttpServer.class, value)); return true;
        case "noreplyloglevel":
        case "noReplyLogLevel": target.getConfiguration().setNoReplyLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "serverclosedchannelexceptioncaughtloglevel":
        case "serverClosedChannelExceptionCaughtLogLevel": target.getConfiguration().setServerClosedChannelExceptionCaughtLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "serverexceptioncaughtloglevel":
        case "serverExceptionCaughtLogLevel": target.getConfiguration().setServerExceptionCaughtLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "serverinitializerfactory":
        case "serverInitializerFactory": target.getConfiguration().setServerInitializerFactory(property(camelContext, org.apache.camel.component.netty.ServerInitializerFactory.class, value)); return true;
        case "traceenabled":
        case "traceEnabled": target.setTraceEnabled(property(camelContext, boolean.class, value)); return true;
        case "urldecodeheaders":
        case "urlDecodeHeaders": target.getConfiguration().setUrlDecodeHeaders(property(camelContext, boolean.class, value)); return true;
        case "usingexecutorservice":
        case "usingExecutorService": target.getConfiguration().setUsingExecutorService(property(camelContext, boolean.class, value)); return true;
        case "connecttimeout":
        case "connectTimeout": target.getConfiguration().setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "cookiehandler":
        case "cookieHandler": target.setCookieHandler(property(camelContext, org.apache.camel.http.base.cookie.CookieHandler.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.getConfiguration().setRequestTimeout(property(camelContext, long.class, value)); return true;
        case "throwexceptiononfailure":
        case "throwExceptionOnFailure": target.getConfiguration().setThrowExceptionOnFailure(property(camelContext, boolean.class, value)); return true;
        case "clientinitializerfactory":
        case "clientInitializerFactory": target.getConfiguration().setClientInitializerFactory(property(camelContext, org.apache.camel.component.netty.ClientInitializerFactory.class, value)); return true;
        case "lazychannelcreation":
        case "lazyChannelCreation": target.getConfiguration().setLazyChannelCreation(property(camelContext, boolean.class, value)); return true;
        case "okstatuscoderange":
        case "okStatusCodeRange": target.getConfiguration().setOkStatusCodeRange(property(camelContext, java.lang.String.class, value)); return true;
        case "producerpoolenabled":
        case "producerPoolEnabled": target.getConfiguration().setProducerPoolEnabled(property(camelContext, boolean.class, value)); return true;
        case "producerpoolmaxactive":
        case "producerPoolMaxActive": target.getConfiguration().setProducerPoolMaxActive(property(camelContext, int.class, value)); return true;
        case "producerpoolmaxidle":
        case "producerPoolMaxIdle": target.getConfiguration().setProducerPoolMaxIdle(property(camelContext, int.class, value)); return true;
        case "producerpoolminevictableidle":
        case "producerPoolMinEvictableIdle": target.getConfiguration().setProducerPoolMinEvictableIdle(property(camelContext, long.class, value)); return true;
        case "producerpoolminidle":
        case "producerPoolMinIdle": target.getConfiguration().setProducerPoolMinIdle(property(camelContext, int.class, value)); return true;
        case "userelativepath":
        case "useRelativePath": target.getConfiguration().setUseRelativePath(property(camelContext, boolean.class, value)); return true;
        case "allowserializedheaders":
        case "allowSerializedHeaders": target.getConfiguration().setAllowSerializedHeaders(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "channelgroup":
        case "channelGroup": target.getConfiguration().setChannelGroup(property(camelContext, io.netty.channel.group.ChannelGroup.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.netty.http.NettyHttpConfiguration.class, value)); return true;
        case "disablestreamcache":
        case "disableStreamCache": target.getConfiguration().setDisableStreamCache(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "nativetransport":
        case "nativeTransport": target.getConfiguration().setNativeTransport(property(camelContext, boolean.class, value)); return true;
        case "nettyhttpbinding":
        case "nettyHttpBinding": target.setNettyHttpBinding(property(camelContext, org.apache.camel.component.netty.http.NettyHttpBinding.class, value)); return true;
        case "options": target.getConfiguration().setOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "receivebuffersize":
        case "receiveBufferSize": target.getConfiguration().setReceiveBufferSize(property(camelContext, int.class, value)); return true;
        case "receivebuffersizepredictor":
        case "receiveBufferSizePredictor": target.getConfiguration().setReceiveBufferSizePredictor(property(camelContext, int.class, value)); return true;
        case "sendbuffersize":
        case "sendBufferSize": target.getConfiguration().setSendBufferSize(property(camelContext, int.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "transferexception":
        case "transferException": target.getConfiguration().setTransferException(property(camelContext, boolean.class, value)); return true;
        case "transferexchange":
        case "transferExchange": target.getConfiguration().setTransferExchange(property(camelContext, boolean.class, value)); return true;
        case "workercount":
        case "workerCount": target.getConfiguration().setWorkerCount(property(camelContext, int.class, value)); return true;
        case "workergroup":
        case "workerGroup": target.getConfiguration().setWorkerGroup(property(camelContext, io.netty.channel.EventLoopGroup.class, value)); return true;
        case "decoders": target.getConfiguration().setDecoders(property(camelContext, java.util.List.class, value)); return true;
        case "encoders": target.getConfiguration().setEncoders(property(camelContext, java.util.List.class, value)); return true;
        case "enabledprotocols":
        case "enabledProtocols": target.getConfiguration().setEnabledProtocols(property(camelContext, java.lang.String.class, value)); return true;
        case "keystorefile":
        case "keyStoreFile": target.getConfiguration().setKeyStoreFile(property(camelContext, java.io.File.class, value)); return true;
        case "keystoreformat":
        case "keyStoreFormat": target.getConfiguration().setKeyStoreFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "keystoreresource":
        case "keyStoreResource": target.getConfiguration().setKeyStoreResource(property(camelContext, java.lang.String.class, value)); return true;
        case "needclientauth":
        case "needClientAuth": target.getConfiguration().setNeedClientAuth(property(camelContext, boolean.class, value)); return true;
        case "passphrase": target.getConfiguration().setPassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "securityconfiguration":
        case "securityConfiguration": target.setSecurityConfiguration(property(camelContext, org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration.class, value)); return true;
        case "securityoptions":
        case "securityOptions": target.setSecurityOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "securityprovider":
        case "securityProvider": target.getConfiguration().setSecurityProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "ssl": target.getConfiguration().setSsl(property(camelContext, boolean.class, value)); return true;
        case "sslclientcertheaders":
        case "sslClientCertHeaders": target.getConfiguration().setSslClientCertHeaders(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "sslhandler":
        case "sslHandler": target.getConfiguration().setSslHandler(property(camelContext, io.netty.handler.ssl.SslHandler.class, value)); return true;
        case "truststorefile":
        case "trustStoreFile": target.getConfiguration().setTrustStoreFile(property(camelContext, java.io.File.class, value)); return true;
        case "truststoreresource":
        case "trustStoreResource": target.getConfiguration().setTrustStoreResource(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

}

