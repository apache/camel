/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.netty.http;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.netty.NettyComponentConfigurer;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class NettyHttpComponentConfigurer extends NettyComponentConfigurer implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("configuration", org.apache.camel.component.netty.NettyConfiguration.class);
        map.put("disconnect", boolean.class);
        map.put("keepAlive", boolean.class);
        map.put("reuseAddress", boolean.class);
        map.put("reuseChannel", boolean.class);
        map.put("sync", boolean.class);
        map.put("tcpNoDelay", boolean.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("broadcast", boolean.class);
        map.put("clientMode", boolean.class);
        map.put("reconnect", boolean.class);
        map.put("reconnectInterval", int.class);
        map.put("backlog", int.class);
        map.put("bossCount", int.class);
        map.put("bossGroup", io.netty.channel.EventLoopGroup.class);
        map.put("disconnectOnNoReply", boolean.class);
        map.put("executorService", io.netty.util.concurrent.EventExecutorGroup.class);
        map.put("maximumPoolSize", int.class);
        map.put("nettyServerBootstrapFactory", org.apache.camel.component.netty.NettyServerBootstrapFactory.class);
        map.put("networkInterface", java.lang.String.class);
        map.put("noReplyLogLevel", org.apache.camel.LoggingLevel.class);
        map.put("serverClosedChannelExceptionCaughtLogLevel", org.apache.camel.LoggingLevel.class);
        map.put("serverExceptionCaughtLogLevel", org.apache.camel.LoggingLevel.class);
        map.put("serverInitializerFactory", org.apache.camel.component.netty.ServerInitializerFactory.class);
        map.put("usingExecutorService", boolean.class);
        map.put("connectTimeout", int.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("requestTimeout", long.class);
        map.put("clientInitializerFactory", org.apache.camel.component.netty.ClientInitializerFactory.class);
        map.put("correlationManager", org.apache.camel.component.netty.NettyCamelStateCorrelationManager.class);
        map.put("lazyChannelCreation", boolean.class);
        map.put("producerPoolEnabled", boolean.class);
        map.put("producerPoolMaxActive", int.class);
        map.put("producerPoolMaxIdle", int.class);
        map.put("producerPoolMinEvictableIdle", long.class);
        map.put("producerPoolMinIdle", int.class);
        map.put("udpConnectionlessSending", boolean.class);
        map.put("useByteBuf", boolean.class);
        map.put("allowSerializedHeaders", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("channelGroup", io.netty.channel.group.ChannelGroup.class);
        map.put("headerFilterStrategy", org.apache.camel.spi.HeaderFilterStrategy.class);
        map.put("nativeTransport", boolean.class);
        map.put("nettyHttpBinding", org.apache.camel.component.netty.http.NettyHttpBinding.class);
        map.put("options", java.util.Map.class);
        map.put("receiveBufferSize", int.class);
        map.put("receiveBufferSizePredictor", int.class);
        map.put("sendBufferSize", int.class);
        map.put("transferExchange", boolean.class);
        map.put("udpByteArrayCodec", boolean.class);
        map.put("workerCount", int.class);
        map.put("workerGroup", io.netty.channel.EventLoopGroup.class);
        map.put("allowDefaultCodec", boolean.class);
        map.put("autoAppendDelimiter", boolean.class);
        map.put("decoderMaxLineLength", int.class);
        map.put("decoders", java.util.List.class);
        map.put("delimiter", org.apache.camel.component.netty.TextLineDelimiter.class);
        map.put("encoders", java.util.List.class);
        map.put("encoding", java.lang.String.class);
        map.put("textline", boolean.class);
        map.put("enabledProtocols", java.lang.String.class);
        map.put("keyStoreFile", java.io.File.class);
        map.put("keyStoreFormat", java.lang.String.class);
        map.put("keyStoreResource", java.lang.String.class);
        map.put("needClientAuth", boolean.class);
        map.put("passphrase", java.lang.String.class);
        map.put("securityConfiguration", org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration.class);
        map.put("securityProvider", java.lang.String.class);
        map.put("ssl", boolean.class);
        map.put("sslClientCertHeaders", boolean.class);
        map.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        map.put("sslHandler", io.netty.handler.ssl.SslHandler.class);
        map.put("trustStoreFile", java.io.File.class);
        map.put("trustStoreResource", java.lang.String.class);
        map.put("useGlobalSslContextParameters", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        NettyHttpComponent target = (NettyHttpComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "nettyhttpbinding":
        case "nettyHttpBinding": target.setNettyHttpBinding(property(camelContext, org.apache.camel.component.netty.http.NettyHttpBinding.class, value)); return true;
        case "securityconfiguration":
        case "securityConfiguration": target.setSecurityConfiguration(property(camelContext, org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration.class, value)); return true;
        default: return super.configure(camelContext, obj, name, value, ignoreCase);
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        NettyHttpComponent target = (NettyHttpComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "headerfilterstrategy":
        case "headerFilterStrategy": return target.getHeaderFilterStrategy();
        case "nettyhttpbinding":
        case "nettyHttpBinding": return target.getNettyHttpBinding();
        case "securityconfiguration":
        case "securityConfiguration": return target.getSecurityConfiguration();
        default: return super.getOptionValue(obj, name, ignoreCase);
        }
    }
}

