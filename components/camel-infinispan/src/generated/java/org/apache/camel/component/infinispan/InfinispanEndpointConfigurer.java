/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.infinispan;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class InfinispanEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "hosts": ((InfinispanEndpoint) target).getConfiguration().setHosts(property(camelContext, java.lang.String.class, value)); return true;
        case "queryBuilder": ((InfinispanEndpoint) target).getConfiguration().setQueryBuilder(property(camelContext, org.apache.camel.component.infinispan.InfinispanQueryBuilder.class, value)); return true;
        case "bridgeErrorHandler": ((InfinispanEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "clusteredListener": ((InfinispanEndpoint) target).getConfiguration().setClusteredListener(property(camelContext, boolean.class, value)); return true;
        case "command": ((InfinispanEndpoint) target).getConfiguration().setCommand(property(camelContext, java.lang.String.class, value)); return true;
        case "customListener": ((InfinispanEndpoint) target).getConfiguration().setCustomListener(property(camelContext, org.apache.camel.component.infinispan.InfinispanCustomListener.class, value)); return true;
        case "eventTypes": ((InfinispanEndpoint) target).getConfiguration().setEventTypes(property(camelContext, java.lang.String.class, value)); return true;
        case "sync": ((InfinispanEndpoint) target).getConfiguration().setSync(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((InfinispanEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((InfinispanEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazyStartProducer": ((InfinispanEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "operation": ((InfinispanEndpoint) target).getConfiguration().setOperation(property(camelContext, org.apache.camel.component.infinispan.InfinispanOperation.class, value)); return true;
        case "basicPropertyBinding": ((InfinispanEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "cacheContainer": ((InfinispanEndpoint) target).getConfiguration().setCacheContainer(property(camelContext, org.infinispan.commons.api.BasicCacheContainer.class, value)); return true;
        case "cacheContainerConfiguration": ((InfinispanEndpoint) target).getConfiguration().setCacheContainerConfiguration(property(camelContext, java.lang.Object.class, value)); return true;
        case "configurationProperties": ((InfinispanEndpoint) target).getConfiguration().setConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "configurationUri": ((InfinispanEndpoint) target).getConfiguration().setConfigurationUri(property(camelContext, java.lang.String.class, value)); return true;
        case "flags": ((InfinispanEndpoint) target).getConfiguration().setFlags(property(camelContext, java.lang.String.class, value)); return true;
        case "remappingFunction": ((InfinispanEndpoint) target).getConfiguration().setRemappingFunction(property(camelContext, java.util.function.BiFunction.class, value)); return true;
        case "resultHeader": ((InfinispanEndpoint) target).getConfiguration().setResultHeader(property(camelContext, java.lang.Object.class, value)); return true;
        case "synchronous": ((InfinispanEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "hosts": ((InfinispanEndpoint) target).getConfiguration().setHosts(property(camelContext, java.lang.String.class, value)); return true;
        case "querybuilder": ((InfinispanEndpoint) target).getConfiguration().setQueryBuilder(property(camelContext, org.apache.camel.component.infinispan.InfinispanQueryBuilder.class, value)); return true;
        case "bridgeerrorhandler": ((InfinispanEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "clusteredlistener": ((InfinispanEndpoint) target).getConfiguration().setClusteredListener(property(camelContext, boolean.class, value)); return true;
        case "command": ((InfinispanEndpoint) target).getConfiguration().setCommand(property(camelContext, java.lang.String.class, value)); return true;
        case "customlistener": ((InfinispanEndpoint) target).getConfiguration().setCustomListener(property(camelContext, org.apache.camel.component.infinispan.InfinispanCustomListener.class, value)); return true;
        case "eventtypes": ((InfinispanEndpoint) target).getConfiguration().setEventTypes(property(camelContext, java.lang.String.class, value)); return true;
        case "sync": ((InfinispanEndpoint) target).getConfiguration().setSync(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((InfinispanEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((InfinispanEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazystartproducer": ((InfinispanEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "operation": ((InfinispanEndpoint) target).getConfiguration().setOperation(property(camelContext, org.apache.camel.component.infinispan.InfinispanOperation.class, value)); return true;
        case "basicpropertybinding": ((InfinispanEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "cachecontainer": ((InfinispanEndpoint) target).getConfiguration().setCacheContainer(property(camelContext, org.infinispan.commons.api.BasicCacheContainer.class, value)); return true;
        case "cachecontainerconfiguration": ((InfinispanEndpoint) target).getConfiguration().setCacheContainerConfiguration(property(camelContext, java.lang.Object.class, value)); return true;
        case "configurationproperties": ((InfinispanEndpoint) target).getConfiguration().setConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "configurationuri": ((InfinispanEndpoint) target).getConfiguration().setConfigurationUri(property(camelContext, java.lang.String.class, value)); return true;
        case "flags": ((InfinispanEndpoint) target).getConfiguration().setFlags(property(camelContext, java.lang.String.class, value)); return true;
        case "remappingfunction": ((InfinispanEndpoint) target).getConfiguration().setRemappingFunction(property(camelContext, java.util.function.BiFunction.class, value)); return true;
        case "resultheader": ((InfinispanEndpoint) target).getConfiguration().setResultHeader(property(camelContext, java.lang.Object.class, value)); return true;
        case "synchronous": ((InfinispanEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

