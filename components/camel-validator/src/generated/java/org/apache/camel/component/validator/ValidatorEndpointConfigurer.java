/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.validator;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ValidatorEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ValidatorEndpoint target = (ValidatorEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "errorhandler":
        case "errorHandler": target.setErrorHandler(property(camelContext, org.apache.camel.support.processor.validation.ValidatorErrorHandler.class, value)); return true;
        case "failonnullbody":
        case "failOnNullBody": target.setFailOnNullBody(property(camelContext, boolean.class, value)); return true;
        case "failonnullheader":
        case "failOnNullHeader": target.setFailOnNullHeader(property(camelContext, boolean.class, value)); return true;
        case "headername":
        case "headerName": target.setHeaderName(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "resourceresolver":
        case "resourceResolver": target.setResourceResolver(property(camelContext, org.w3c.dom.ls.LSResourceResolver.class, value)); return true;
        case "resourceresolverfactory":
        case "resourceResolverFactory": target.setResourceResolverFactory(property(camelContext, org.apache.camel.component.validator.ValidatorResourceResolverFactory.class, value)); return true;
        case "schemafactory":
        case "schemaFactory": target.setSchemaFactory(property(camelContext, javax.xml.validation.SchemaFactory.class, value)); return true;
        case "schemalanguage":
        case "schemaLanguage": target.setSchemaLanguage(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "usesharedschema":
        case "useSharedSchema": target.setUseSharedSchema(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "errorhandler":
        case "errorHandler": return org.apache.camel.support.processor.validation.ValidatorErrorHandler.class;
        case "failonnullbody":
        case "failOnNullBody": return boolean.class;
        case "failonnullheader":
        case "failOnNullHeader": return boolean.class;
        case "headername":
        case "headerName": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "resourceresolver":
        case "resourceResolver": return org.w3c.dom.ls.LSResourceResolver.class;
        case "resourceresolverfactory":
        case "resourceResolverFactory": return org.apache.camel.component.validator.ValidatorResourceResolverFactory.class;
        case "schemafactory":
        case "schemaFactory": return javax.xml.validation.SchemaFactory.class;
        case "schemalanguage":
        case "schemaLanguage": return java.lang.String.class;
        case "synchronous": return boolean.class;
        case "usesharedschema":
        case "useSharedSchema": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ValidatorEndpoint target = (ValidatorEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "errorhandler":
        case "errorHandler": return target.getErrorHandler();
        case "failonnullbody":
        case "failOnNullBody": return target.isFailOnNullBody();
        case "failonnullheader":
        case "failOnNullHeader": return target.isFailOnNullHeader();
        case "headername":
        case "headerName": return target.getHeaderName();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "resourceresolver":
        case "resourceResolver": return target.getResourceResolver();
        case "resourceresolverfactory":
        case "resourceResolverFactory": return target.getResourceResolverFactory();
        case "schemafactory":
        case "schemaFactory": return target.getSchemaFactory();
        case "schemalanguage":
        case "schemaLanguage": return target.getSchemaLanguage();
        case "synchronous": return target.isSynchronous();
        case "usesharedschema":
        case "useSharedSchema": return target.isUseSharedSchema();
        default: return null;
        }
    }
}

