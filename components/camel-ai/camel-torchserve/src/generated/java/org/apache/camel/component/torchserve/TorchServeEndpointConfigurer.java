/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.torchserve;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class TorchServeEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        TorchServeEndpoint target = (TorchServeEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "inferenceaddress":
        case "inferenceAddress": target.getConfiguration().setInferenceAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "inferencekey":
        case "inferenceKey": target.getConfiguration().setInferenceKey(property(camelContext, java.lang.String.class, value)); return true;
        case "inferenceport":
        case "inferencePort": target.getConfiguration().setInferencePort(property(camelContext, int.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "listlimit":
        case "listLimit": target.getConfiguration().setListLimit(property(camelContext, int.class, value)); return true;
        case "listnextpagetoken":
        case "listNextPageToken": target.getConfiguration().setListNextPageToken(property(camelContext, java.lang.String.class, value)); return true;
        case "managementaddress":
        case "managementAddress": target.getConfiguration().setManagementAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "managementkey":
        case "managementKey": target.getConfiguration().setManagementKey(property(camelContext, java.lang.String.class, value)); return true;
        case "managementport":
        case "managementPort": target.getConfiguration().setManagementPort(property(camelContext, int.class, value)); return true;
        case "metricsaddress":
        case "metricsAddress": target.getConfiguration().setMetricsAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "metricsname":
        case "metricsName": target.getConfiguration().setMetricsName(property(camelContext, java.lang.String.class, value)); return true;
        case "metricsport":
        case "metricsPort": target.getConfiguration().setMetricsPort(property(camelContext, int.class, value)); return true;
        case "modelname":
        case "modelName": target.getConfiguration().setModelName(property(camelContext, java.lang.String.class, value)); return true;
        case "modelversion":
        case "modelVersion": target.getConfiguration().setModelVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "registeroptions":
        case "registerOptions": target.getConfiguration().setRegisterOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.RegisterOptions.class, value)); return true;
        case "scaleworkeroptions":
        case "scaleWorkerOptions": target.getConfiguration().setScaleWorkerOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions.class, value)); return true;
        case "unregisteroptions":
        case "unregisterOptions": target.getConfiguration().setUnregisterOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.UnregisterOptions.class, value)); return true;
        case "url": target.getConfiguration().setUrl(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "inferenceaddress":
        case "inferenceAddress": return java.lang.String.class;
        case "inferencekey":
        case "inferenceKey": return java.lang.String.class;
        case "inferenceport":
        case "inferencePort": return int.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "listlimit":
        case "listLimit": return int.class;
        case "listnextpagetoken":
        case "listNextPageToken": return java.lang.String.class;
        case "managementaddress":
        case "managementAddress": return java.lang.String.class;
        case "managementkey":
        case "managementKey": return java.lang.String.class;
        case "managementport":
        case "managementPort": return int.class;
        case "metricsaddress":
        case "metricsAddress": return java.lang.String.class;
        case "metricsname":
        case "metricsName": return java.lang.String.class;
        case "metricsport":
        case "metricsPort": return int.class;
        case "modelname":
        case "modelName": return java.lang.String.class;
        case "modelversion":
        case "modelVersion": return java.lang.String.class;
        case "registeroptions":
        case "registerOptions": return org.apache.camel.component.torchserve.client.model.RegisterOptions.class;
        case "scaleworkeroptions":
        case "scaleWorkerOptions": return org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions.class;
        case "unregisteroptions":
        case "unregisterOptions": return org.apache.camel.component.torchserve.client.model.UnregisterOptions.class;
        case "url": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        TorchServeEndpoint target = (TorchServeEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "inferenceaddress":
        case "inferenceAddress": return target.getConfiguration().getInferenceAddress();
        case "inferencekey":
        case "inferenceKey": return target.getConfiguration().getInferenceKey();
        case "inferenceport":
        case "inferencePort": return target.getConfiguration().getInferencePort();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "listlimit":
        case "listLimit": return target.getConfiguration().getListLimit();
        case "listnextpagetoken":
        case "listNextPageToken": return target.getConfiguration().getListNextPageToken();
        case "managementaddress":
        case "managementAddress": return target.getConfiguration().getManagementAddress();
        case "managementkey":
        case "managementKey": return target.getConfiguration().getManagementKey();
        case "managementport":
        case "managementPort": return target.getConfiguration().getManagementPort();
        case "metricsaddress":
        case "metricsAddress": return target.getConfiguration().getMetricsAddress();
        case "metricsname":
        case "metricsName": return target.getConfiguration().getMetricsName();
        case "metricsport":
        case "metricsPort": return target.getConfiguration().getMetricsPort();
        case "modelname":
        case "modelName": return target.getConfiguration().getModelName();
        case "modelversion":
        case "modelVersion": return target.getConfiguration().getModelVersion();
        case "registeroptions":
        case "registerOptions": return target.getConfiguration().getRegisterOptions();
        case "scaleworkeroptions":
        case "scaleWorkerOptions": return target.getConfiguration().getScaleWorkerOptions();
        case "unregisteroptions":
        case "unregisterOptions": return target.getConfiguration().getUnregisterOptions();
        case "url": return target.getConfiguration().getUrl();
        default: return null;
        }
    }
}

