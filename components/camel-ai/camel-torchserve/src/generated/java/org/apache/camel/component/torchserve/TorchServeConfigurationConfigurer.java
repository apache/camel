/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.torchserve;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.torchserve.TorchServeConfiguration;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class TorchServeConfigurationConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.torchserve.TorchServeConfiguration target = (org.apache.camel.component.torchserve.TorchServeConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "inferenceaddress":
        case "inferenceAddress": target.setInferenceAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "inferencekey":
        case "inferenceKey": target.setInferenceKey(property(camelContext, java.lang.String.class, value)); return true;
        case "inferenceport":
        case "inferencePort": target.setInferencePort(property(camelContext, int.class, value)); return true;
        case "listlimit":
        case "listLimit": target.setListLimit(property(camelContext, int.class, value)); return true;
        case "listnextpagetoken":
        case "listNextPageToken": target.setListNextPageToken(property(camelContext, java.lang.String.class, value)); return true;
        case "managementaddress":
        case "managementAddress": target.setManagementAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "managementkey":
        case "managementKey": target.setManagementKey(property(camelContext, java.lang.String.class, value)); return true;
        case "managementport":
        case "managementPort": target.setManagementPort(property(camelContext, int.class, value)); return true;
        case "metricsaddress":
        case "metricsAddress": target.setMetricsAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "metricsname":
        case "metricsName": target.setMetricsName(property(camelContext, java.lang.String.class, value)); return true;
        case "metricsport":
        case "metricsPort": target.setMetricsPort(property(camelContext, int.class, value)); return true;
        case "modelname":
        case "modelName": target.setModelName(property(camelContext, java.lang.String.class, value)); return true;
        case "modelversion":
        case "modelVersion": target.setModelVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "registeroptions":
        case "registerOptions": target.setRegisterOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.RegisterOptions.class, value)); return true;
        case "scaleworkeroptions":
        case "scaleWorkerOptions": target.setScaleWorkerOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions.class, value)); return true;
        case "unregisteroptions":
        case "unregisterOptions": target.setUnregisterOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.UnregisterOptions.class, value)); return true;
        case "url": target.setUrl(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "inferenceaddress":
        case "inferenceAddress": return java.lang.String.class;
        case "inferencekey":
        case "inferenceKey": return java.lang.String.class;
        case "inferenceport":
        case "inferencePort": return int.class;
        case "listlimit":
        case "listLimit": return int.class;
        case "listnextpagetoken":
        case "listNextPageToken": return java.lang.String.class;
        case "managementaddress":
        case "managementAddress": return java.lang.String.class;
        case "managementkey":
        case "managementKey": return java.lang.String.class;
        case "managementport":
        case "managementPort": return int.class;
        case "metricsaddress":
        case "metricsAddress": return java.lang.String.class;
        case "metricsname":
        case "metricsName": return java.lang.String.class;
        case "metricsport":
        case "metricsPort": return int.class;
        case "modelname":
        case "modelName": return java.lang.String.class;
        case "modelversion":
        case "modelVersion": return java.lang.String.class;
        case "registeroptions":
        case "registerOptions": return org.apache.camel.component.torchserve.client.model.RegisterOptions.class;
        case "scaleworkeroptions":
        case "scaleWorkerOptions": return org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions.class;
        case "unregisteroptions":
        case "unregisterOptions": return org.apache.camel.component.torchserve.client.model.UnregisterOptions.class;
        case "url": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.torchserve.TorchServeConfiguration target = (org.apache.camel.component.torchserve.TorchServeConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "inferenceaddress":
        case "inferenceAddress": return target.getInferenceAddress();
        case "inferencekey":
        case "inferenceKey": return target.getInferenceKey();
        case "inferenceport":
        case "inferencePort": return target.getInferencePort();
        case "listlimit":
        case "listLimit": return target.getListLimit();
        case "listnextpagetoken":
        case "listNextPageToken": return target.getListNextPageToken();
        case "managementaddress":
        case "managementAddress": return target.getManagementAddress();
        case "managementkey":
        case "managementKey": return target.getManagementKey();
        case "managementport":
        case "managementPort": return target.getManagementPort();
        case "metricsaddress":
        case "metricsAddress": return target.getMetricsAddress();
        case "metricsname":
        case "metricsName": return target.getMetricsName();
        case "metricsport":
        case "metricsPort": return target.getMetricsPort();
        case "modelname":
        case "modelName": return target.getModelName();
        case "modelversion":
        case "modelVersion": return target.getModelVersion();
        case "registeroptions":
        case "registerOptions": return target.getRegisterOptions();
        case "scaleworkeroptions":
        case "scaleWorkerOptions": return target.getScaleWorkerOptions();
        case "unregisteroptions":
        case "unregisterOptions": return target.getUnregisterOptions();
        case "url": return target.getUrl();
        default: return null;
        }
    }
}

