/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.torchserve;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class TorchServeComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.torchserve.TorchServeConfiguration getOrCreateConfiguration(TorchServeComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.torchserve.TorchServeConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        TorchServeComponent target = (TorchServeComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": target.setAutowiredEnabled(property(camelContext, boolean.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.torchserve.TorchServeConfiguration.class, value)); return true;
        case "healthcheckconsumerenabled":
        case "healthCheckConsumerEnabled": target.setHealthCheckConsumerEnabled(property(camelContext, boolean.class, value)); return true;
        case "healthcheckproducerenabled":
        case "healthCheckProducerEnabled": target.setHealthCheckProducerEnabled(property(camelContext, boolean.class, value)); return true;
        case "inferenceaddress":
        case "inferenceAddress": getOrCreateConfiguration(target).setInferenceAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "inferencekey":
        case "inferenceKey": getOrCreateConfiguration(target).setInferenceKey(property(camelContext, java.lang.String.class, value)); return true;
        case "inferenceport":
        case "inferencePort": getOrCreateConfiguration(target).setInferencePort(property(camelContext, int.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "listlimit":
        case "listLimit": getOrCreateConfiguration(target).setListLimit(property(camelContext, int.class, value)); return true;
        case "listnextpagetoken":
        case "listNextPageToken": getOrCreateConfiguration(target).setListNextPageToken(property(camelContext, java.lang.String.class, value)); return true;
        case "managementaddress":
        case "managementAddress": getOrCreateConfiguration(target).setManagementAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "managementkey":
        case "managementKey": getOrCreateConfiguration(target).setManagementKey(property(camelContext, java.lang.String.class, value)); return true;
        case "managementport":
        case "managementPort": getOrCreateConfiguration(target).setManagementPort(property(camelContext, int.class, value)); return true;
        case "metricsaddress":
        case "metricsAddress": getOrCreateConfiguration(target).setMetricsAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "metricsname":
        case "metricsName": getOrCreateConfiguration(target).setMetricsName(property(camelContext, java.lang.String.class, value)); return true;
        case "metricsport":
        case "metricsPort": getOrCreateConfiguration(target).setMetricsPort(property(camelContext, int.class, value)); return true;
        case "modelname":
        case "modelName": getOrCreateConfiguration(target).setModelName(property(camelContext, java.lang.String.class, value)); return true;
        case "modelversion":
        case "modelVersion": getOrCreateConfiguration(target).setModelVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "registeroptions":
        case "registerOptions": getOrCreateConfiguration(target).setRegisterOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.RegisterOptions.class, value)); return true;
        case "scaleworkeroptions":
        case "scaleWorkerOptions": getOrCreateConfiguration(target).setScaleWorkerOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions.class, value)); return true;
        case "unregisteroptions":
        case "unregisterOptions": getOrCreateConfiguration(target).setUnregisterOptions(property(camelContext, org.apache.camel.component.torchserve.client.model.UnregisterOptions.class, value)); return true;
        case "url": getOrCreateConfiguration(target).setUrl(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return boolean.class;
        case "configuration": return org.apache.camel.component.torchserve.TorchServeConfiguration.class;
        case "healthcheckconsumerenabled":
        case "healthCheckConsumerEnabled": return boolean.class;
        case "healthcheckproducerenabled":
        case "healthCheckProducerEnabled": return boolean.class;
        case "inferenceaddress":
        case "inferenceAddress": return java.lang.String.class;
        case "inferencekey":
        case "inferenceKey": return java.lang.String.class;
        case "inferenceport":
        case "inferencePort": return int.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "listlimit":
        case "listLimit": return int.class;
        case "listnextpagetoken":
        case "listNextPageToken": return java.lang.String.class;
        case "managementaddress":
        case "managementAddress": return java.lang.String.class;
        case "managementkey":
        case "managementKey": return java.lang.String.class;
        case "managementport":
        case "managementPort": return int.class;
        case "metricsaddress":
        case "metricsAddress": return java.lang.String.class;
        case "metricsname":
        case "metricsName": return java.lang.String.class;
        case "metricsport":
        case "metricsPort": return int.class;
        case "modelname":
        case "modelName": return java.lang.String.class;
        case "modelversion":
        case "modelVersion": return java.lang.String.class;
        case "registeroptions":
        case "registerOptions": return org.apache.camel.component.torchserve.client.model.RegisterOptions.class;
        case "scaleworkeroptions":
        case "scaleWorkerOptions": return org.apache.camel.component.torchserve.client.model.ScaleWorkerOptions.class;
        case "unregisteroptions":
        case "unregisterOptions": return org.apache.camel.component.torchserve.client.model.UnregisterOptions.class;
        case "url": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        TorchServeComponent target = (TorchServeComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return target.isAutowiredEnabled();
        case "configuration": return target.getConfiguration();
        case "healthcheckconsumerenabled":
        case "healthCheckConsumerEnabled": return target.isHealthCheckConsumerEnabled();
        case "healthcheckproducerenabled":
        case "healthCheckProducerEnabled": return target.isHealthCheckProducerEnabled();
        case "inferenceaddress":
        case "inferenceAddress": return getOrCreateConfiguration(target).getInferenceAddress();
        case "inferencekey":
        case "inferenceKey": return getOrCreateConfiguration(target).getInferenceKey();
        case "inferenceport":
        case "inferencePort": return getOrCreateConfiguration(target).getInferencePort();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "listlimit":
        case "listLimit": return getOrCreateConfiguration(target).getListLimit();
        case "listnextpagetoken":
        case "listNextPageToken": return getOrCreateConfiguration(target).getListNextPageToken();
        case "managementaddress":
        case "managementAddress": return getOrCreateConfiguration(target).getManagementAddress();
        case "managementkey":
        case "managementKey": return getOrCreateConfiguration(target).getManagementKey();
        case "managementport":
        case "managementPort": return getOrCreateConfiguration(target).getManagementPort();
        case "metricsaddress":
        case "metricsAddress": return getOrCreateConfiguration(target).getMetricsAddress();
        case "metricsname":
        case "metricsName": return getOrCreateConfiguration(target).getMetricsName();
        case "metricsport":
        case "metricsPort": return getOrCreateConfiguration(target).getMetricsPort();
        case "modelname":
        case "modelName": return getOrCreateConfiguration(target).getModelName();
        case "modelversion":
        case "modelVersion": return getOrCreateConfiguration(target).getModelVersion();
        case "registeroptions":
        case "registerOptions": return getOrCreateConfiguration(target).getRegisterOptions();
        case "scaleworkeroptions":
        case "scaleWorkerOptions": return getOrCreateConfiguration(target).getScaleWorkerOptions();
        case "unregisteroptions":
        case "unregisterOptions": return getOrCreateConfiguration(target).getUnregisterOptions();
        case "url": return getOrCreateConfiguration(target).getUrl();
        default: return null;
        }
    }
}

