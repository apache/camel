/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.docling;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class DoclingComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.docling.DoclingConfiguration getOrCreateConfiguration(DoclingComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.docling.DoclingConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DoclingComponent target = (DoclingComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": target.setAutowiredEnabled(property(camelContext, boolean.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.docling.DoclingConfiguration.class, value)); return true;
        case "contentinbody":
        case "contentInBody": getOrCreateConfiguration(target).setContentInBody(property(camelContext, boolean.class, value)); return true;
        case "doclingcommand":
        case "doclingCommand": getOrCreateConfiguration(target).setDoclingCommand(property(camelContext, java.lang.String.class, value)); return true;
        case "doclingserveurl":
        case "doclingServeUrl": getOrCreateConfiguration(target).setDoclingServeUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "enableocr":
        case "enableOCR": getOrCreateConfiguration(target).setEnableOCR(property(camelContext, boolean.class, value)); return true;
        case "includelayoutinfo":
        case "includeLayoutInfo": getOrCreateConfiguration(target).setIncludeLayoutInfo(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxfilesize":
        case "maxFileSize": getOrCreateConfiguration(target).setMaxFileSize(property(camelContext, long.class, value)); return true;
        case "ocrlanguage":
        case "ocrLanguage": getOrCreateConfiguration(target).setOcrLanguage(property(camelContext, java.lang.String.class, value)); return true;
        case "operation": getOrCreateConfiguration(target).setOperation(property(camelContext, org.apache.camel.component.docling.DoclingOperations.class, value)); return true;
        case "outputformat":
        case "outputFormat": getOrCreateConfiguration(target).setOutputFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "processtimeout":
        case "processTimeout": getOrCreateConfiguration(target).setProcessTimeout(property(camelContext, long.class, value)); return true;
        case "usedoclingserve":
        case "useDoclingServe": getOrCreateConfiguration(target).setUseDoclingServe(property(camelContext, boolean.class, value)); return true;
        case "workingdirectory":
        case "workingDirectory": getOrCreateConfiguration(target).setWorkingDirectory(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return boolean.class;
        case "configuration": return org.apache.camel.component.docling.DoclingConfiguration.class;
        case "contentinbody":
        case "contentInBody": return boolean.class;
        case "doclingcommand":
        case "doclingCommand": return java.lang.String.class;
        case "doclingserveurl":
        case "doclingServeUrl": return java.lang.String.class;
        case "enableocr":
        case "enableOCR": return boolean.class;
        case "includelayoutinfo":
        case "includeLayoutInfo": return boolean.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxfilesize":
        case "maxFileSize": return long.class;
        case "ocrlanguage":
        case "ocrLanguage": return java.lang.String.class;
        case "operation": return org.apache.camel.component.docling.DoclingOperations.class;
        case "outputformat":
        case "outputFormat": return java.lang.String.class;
        case "processtimeout":
        case "processTimeout": return long.class;
        case "usedoclingserve":
        case "useDoclingServe": return boolean.class;
        case "workingdirectory":
        case "workingDirectory": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DoclingComponent target = (DoclingComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return target.isAutowiredEnabled();
        case "configuration": return target.getConfiguration();
        case "contentinbody":
        case "contentInBody": return getOrCreateConfiguration(target).isContentInBody();
        case "doclingcommand":
        case "doclingCommand": return getOrCreateConfiguration(target).getDoclingCommand();
        case "doclingserveurl":
        case "doclingServeUrl": return getOrCreateConfiguration(target).getDoclingServeUrl();
        case "enableocr":
        case "enableOCR": return getOrCreateConfiguration(target).isEnableOCR();
        case "includelayoutinfo":
        case "includeLayoutInfo": return getOrCreateConfiguration(target).isIncludeLayoutInfo();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxfilesize":
        case "maxFileSize": return getOrCreateConfiguration(target).getMaxFileSize();
        case "ocrlanguage":
        case "ocrLanguage": return getOrCreateConfiguration(target).getOcrLanguage();
        case "operation": return getOrCreateConfiguration(target).getOperation();
        case "outputformat":
        case "outputFormat": return getOrCreateConfiguration(target).getOutputFormat();
        case "processtimeout":
        case "processTimeout": return getOrCreateConfiguration(target).getProcessTimeout();
        case "usedoclingserve":
        case "useDoclingServe": return getOrCreateConfiguration(target).isUseDoclingServe();
        case "workingdirectory":
        case "workingDirectory": return getOrCreateConfiguration(target).getWorkingDirectory();
        default: return null;
        }
    }
}

