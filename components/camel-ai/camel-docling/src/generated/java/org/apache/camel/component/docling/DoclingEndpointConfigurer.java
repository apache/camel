/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.docling;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class DoclingEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DoclingEndpoint target = (DoclingEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "contentinbody":
        case "contentInBody": target.getConfiguration().setContentInBody(property(camelContext, boolean.class, value)); return true;
        case "doclingcommand":
        case "doclingCommand": target.getConfiguration().setDoclingCommand(property(camelContext, java.lang.String.class, value)); return true;
        case "enableocr":
        case "enableOCR": target.getConfiguration().setEnableOCR(property(camelContext, boolean.class, value)); return true;
        case "includelayoutinfo":
        case "includeLayoutInfo": target.getConfiguration().setIncludeLayoutInfo(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxfilesize":
        case "maxFileSize": target.getConfiguration().setMaxFileSize(property(camelContext, long.class, value)); return true;
        case "ocrlanguage":
        case "ocrLanguage": target.getConfiguration().setOcrLanguage(property(camelContext, java.lang.String.class, value)); return true;
        case "operation": target.getConfiguration().setOperation(property(camelContext, org.apache.camel.component.docling.DoclingOperations.class, value)); return true;
        case "outputformat":
        case "outputFormat": target.getConfiguration().setOutputFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "processtimeout":
        case "processTimeout": target.getConfiguration().setProcessTimeout(property(camelContext, long.class, value)); return true;
        case "workingdirectory":
        case "workingDirectory": target.getConfiguration().setWorkingDirectory(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "contentinbody":
        case "contentInBody": return boolean.class;
        case "doclingcommand":
        case "doclingCommand": return java.lang.String.class;
        case "enableocr":
        case "enableOCR": return boolean.class;
        case "includelayoutinfo":
        case "includeLayoutInfo": return boolean.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxfilesize":
        case "maxFileSize": return long.class;
        case "ocrlanguage":
        case "ocrLanguage": return java.lang.String.class;
        case "operation": return org.apache.camel.component.docling.DoclingOperations.class;
        case "outputformat":
        case "outputFormat": return java.lang.String.class;
        case "processtimeout":
        case "processTimeout": return long.class;
        case "workingdirectory":
        case "workingDirectory": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DoclingEndpoint target = (DoclingEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "contentinbody":
        case "contentInBody": return target.getConfiguration().isContentInBody();
        case "doclingcommand":
        case "doclingCommand": return target.getConfiguration().getDoclingCommand();
        case "enableocr":
        case "enableOCR": return target.getConfiguration().isEnableOCR();
        case "includelayoutinfo":
        case "includeLayoutInfo": return target.getConfiguration().isIncludeLayoutInfo();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxfilesize":
        case "maxFileSize": return target.getConfiguration().getMaxFileSize();
        case "ocrlanguage":
        case "ocrLanguage": return target.getConfiguration().getOcrLanguage();
        case "operation": return target.getConfiguration().getOperation();
        case "outputformat":
        case "outputFormat": return target.getConfiguration().getOutputFormat();
        case "processtimeout":
        case "processTimeout": return target.getConfiguration().getProcessTimeout();
        case "workingdirectory":
        case "workingDirectory": return target.getConfiguration().getWorkingDirectory();
        default: return null;
        }
    }
}

