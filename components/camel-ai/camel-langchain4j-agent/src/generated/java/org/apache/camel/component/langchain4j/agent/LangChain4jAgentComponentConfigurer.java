/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.langchain4j.agent;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class LangChain4jAgentComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration getOrCreateConfiguration(LangChain4jAgentComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        LangChain4jAgentComponent target = (LangChain4jAgentComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": target.setAutowiredEnabled(property(camelContext, boolean.class, value)); return true;
        case "chatmemoryprovider":
        case "chatMemoryProvider": getOrCreateConfiguration(target).setChatMemoryProvider(property(camelContext, dev.langchain4j.memory.chat.ChatMemoryProvider.class, value)); return true;
        case "chatmodel":
        case "chatModel": getOrCreateConfiguration(target).setChatModel(property(camelContext, dev.langchain4j.model.chat.ChatModel.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration.class, value)); return true;
        case "inputguardrails":
        case "inputGuardrails": getOrCreateConfiguration(target).setInputGuardrails(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "outputguardrails":
        case "outputGuardrails": getOrCreateConfiguration(target).setOutputGuardrails(property(camelContext, java.lang.String.class, value)); return true;
        case "retrievalaugmentor":
        case "retrievalAugmentor": getOrCreateConfiguration(target).setRetrievalAugmentor(property(camelContext, dev.langchain4j.rag.RetrievalAugmentor.class, value)); return true;
        case "tags": getOrCreateConfiguration(target).setTags(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public String[] getAutowiredNames() {
        return new String[]{"chatMemoryProvider", "chatModel", "retrievalAugmentor"};
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return boolean.class;
        case "chatmemoryprovider":
        case "chatMemoryProvider": return dev.langchain4j.memory.chat.ChatMemoryProvider.class;
        case "chatmodel":
        case "chatModel": return dev.langchain4j.model.chat.ChatModel.class;
        case "configuration": return org.apache.camel.component.langchain4j.agent.LangChain4jAgentConfiguration.class;
        case "inputguardrails":
        case "inputGuardrails": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "outputguardrails":
        case "outputGuardrails": return java.lang.String.class;
        case "retrievalaugmentor":
        case "retrievalAugmentor": return dev.langchain4j.rag.RetrievalAugmentor.class;
        case "tags": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        LangChain4jAgentComponent target = (LangChain4jAgentComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return target.isAutowiredEnabled();
        case "chatmemoryprovider":
        case "chatMemoryProvider": return getOrCreateConfiguration(target).getChatMemoryProvider();
        case "chatmodel":
        case "chatModel": return getOrCreateConfiguration(target).getChatModel();
        case "configuration": return target.getConfiguration();
        case "inputguardrails":
        case "inputGuardrails": return getOrCreateConfiguration(target).getInputGuardrails();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "outputguardrails":
        case "outputGuardrails": return getOrCreateConfiguration(target).getOutputGuardrails();
        case "retrievalaugmentor":
        case "retrievalAugmentor": return getOrCreateConfiguration(target).getRetrievalAugmentor();
        case "tags": return getOrCreateConfiguration(target).getTags();
        default: return null;
        }
    }
}

