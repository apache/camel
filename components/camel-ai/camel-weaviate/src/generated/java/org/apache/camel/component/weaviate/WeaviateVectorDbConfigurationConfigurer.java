/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.weaviate;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.weaviate.WeaviateVectorDbConfiguration;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class WeaviateVectorDbConfigurationConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.weaviate.WeaviateVectorDbConfiguration target = (org.apache.camel.component.weaviate.WeaviateVectorDbConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apikey":
        case "apiKey": target.setApiKey(property(camelContext, java.lang.String.class, value)); return true;
        case "client": target.setClient(property(camelContext, io.weaviate.client.WeaviateClient.class, value)); return true;
        case "host": target.setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyhost":
        case "proxyHost": target.setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport":
        case "proxyPort": target.setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyscheme":
        case "proxyScheme": target.setProxyScheme(property(camelContext, java.lang.String.class, value)); return true;
        case "scheme": target.setScheme(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apikey":
        case "apiKey": return java.lang.String.class;
        case "client": return io.weaviate.client.WeaviateClient.class;
        case "host": return java.lang.String.class;
        case "proxyhost":
        case "proxyHost": return java.lang.String.class;
        case "proxyport":
        case "proxyPort": return java.lang.Integer.class;
        case "proxyscheme":
        case "proxyScheme": return java.lang.String.class;
        case "scheme": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.weaviate.WeaviateVectorDbConfiguration target = (org.apache.camel.component.weaviate.WeaviateVectorDbConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apikey":
        case "apiKey": return target.getApiKey();
        case "client": return target.getClient();
        case "host": return target.getHost();
        case "proxyhost":
        case "proxyHost": return target.getProxyHost();
        case "proxyport":
        case "proxyPort": return target.getProxyPort();
        case "proxyscheme":
        case "proxyScheme": return target.getProxyScheme();
        case "scheme": return target.getScheme();
        default: return null;
        }
    }
}

