/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option cc_enable_arenas = true;

import "tensorflow_serving/apis/get_model_status.proto";
import "tensorflow_serving/apis/model_management.proto";

package tensorflow.serving;

// ModelService provides methods to query and update the state of the server,
// e.g. which models/versions are being served.
service ModelService {
  // Gets status of model. If the ModelSpec in the request does not specify
  // version, information about all versions of the model will be returned. If
  // the ModelSpec in the request does specify a version, the status of only
  // that version will be returned.
  rpc GetModelStatus(GetModelStatusRequest) returns (GetModelStatusResponse);

  // Reloads the set of served models. The new config supersedes the old one,
  // so if a model is omitted from the new config it will be unloaded and no
  // longer served.
  rpc HandleReloadConfigRequest(ReloadConfigRequest)
      returns (ReloadConfigResponse);
}
