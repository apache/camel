/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.tahu;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class TahuHostEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        TahuHostEndpoint target = (TahuHostEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "checkclientidlength":
        case "checkClientIdLength": target.getConfiguration().setCheckClientIdLength(property(camelContext, boolean.class, value)); return true;
        case "clientid":
        case "clientId": target.getConfiguration().setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "keepalivetimeout":
        case "keepAliveTimeout": target.getConfiguration().setKeepAliveTimeout(property(camelContext, int.class, value)); return true;
        case "password": target.getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "rebirthdebouncedelay":
        case "rebirthDebounceDelay": target.getConfiguration().setRebirthDebounceDelay(property(camelContext, long.class, value)); return true;
        case "servers": target.getConfiguration().setServers(property(camelContext, java.lang.String.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "username": target.getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "checkclientidlength":
        case "checkClientIdLength": return boolean.class;
        case "clientid":
        case "clientId": return java.lang.String.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "keepalivetimeout":
        case "keepAliveTimeout": return int.class;
        case "password": return java.lang.String.class;
        case "rebirthdebouncedelay":
        case "rebirthDebounceDelay": return long.class;
        case "servers": return java.lang.String.class;
        case "sslcontextparameters":
        case "sslContextParameters": return org.apache.camel.support.jsse.SSLContextParameters.class;
        case "username": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        TahuHostEndpoint target = (TahuHostEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "checkclientidlength":
        case "checkClientIdLength": return target.getConfiguration().isCheckClientIdLength();
        case "clientid":
        case "clientId": return target.getConfiguration().getClientId();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "keepalivetimeout":
        case "keepAliveTimeout": return target.getConfiguration().getKeepAliveTimeout();
        case "password": return target.getConfiguration().getPassword();
        case "rebirthdebouncedelay":
        case "rebirthDebounceDelay": return target.getConfiguration().getRebirthDebounceDelay();
        case "servers": return target.getConfiguration().getServers();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getConfiguration().getSslContextParameters();
        case "username": return target.getConfiguration().getUsername();
        default: return null;
        }
    }
}

