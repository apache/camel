/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.twitter.directmessage;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class TwitterDirectMessageComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("bridgeErrorHandler", boolean.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("httpProxyHost", java.lang.String.class);
        map.put("httpProxyPassword", java.lang.String.class);
        map.put("httpProxyPort", int.class);
        map.put("httpProxyUser", java.lang.String.class);
        map.put("accessToken", java.lang.String.class);
        map.put("accessTokenSecret", java.lang.String.class);
        map.put("consumerKey", java.lang.String.class);
        map.put("consumerSecret", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        TwitterDirectMessageComponent target = (TwitterDirectMessageComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesstoken":
        case "accessToken": target.setAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "accesstokensecret":
        case "accessTokenSecret": target.setAccessTokenSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "consumerkey":
        case "consumerKey": target.setConsumerKey(property(camelContext, java.lang.String.class, value)); return true;
        case "consumersecret":
        case "consumerSecret": target.setConsumerSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxyhost":
        case "httpProxyHost": target.setHttpProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxypassword":
        case "httpProxyPassword": target.setHttpProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxyport":
        case "httpProxyPort": target.setHttpProxyPort(property(camelContext, int.class, value)); return true;
        case "httpproxyuser":
        case "httpProxyUser": target.setHttpProxyUser(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        TwitterDirectMessageComponent target = (TwitterDirectMessageComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesstoken":
        case "accessToken": return target.getAccessToken();
        case "accesstokensecret":
        case "accessTokenSecret": return target.getAccessTokenSecret();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "consumerkey":
        case "consumerKey": return target.getConsumerKey();
        case "consumersecret":
        case "consumerSecret": return target.getConsumerSecret();
        case "httpproxyhost":
        case "httpProxyHost": return target.getHttpProxyHost();
        case "httpproxypassword":
        case "httpProxyPassword": return target.getHttpProxyPassword();
        case "httpproxyport":
        case "httpProxyPort": return target.getHttpProxyPort();
        case "httpproxyuser":
        case "httpProxyUser": return target.getHttpProxyUser();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        default: return null;
        }
    }
}

