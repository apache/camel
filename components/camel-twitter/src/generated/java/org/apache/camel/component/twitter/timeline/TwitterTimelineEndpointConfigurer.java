/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.twitter.timeline;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class TwitterTimelineEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "user": ((TwitterTimelineEndpoint) target).setUser(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((TwitterTimelineEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((TwitterTimelineEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "type": ((TwitterTimelineEndpoint) target).getProperties().setType(property(camelContext, org.apache.camel.component.twitter.data.EndpointType.class, value)); return true;
        case "distanceMetric": ((TwitterTimelineEndpoint) target).getProperties().setDistanceMetric(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionHandler": ((TwitterTimelineEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((TwitterTimelineEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "extendedMode": ((TwitterTimelineEndpoint) target).getProperties().setExtendedMode(property(camelContext, boolean.class, value)); return true;
        case "latitude": ((TwitterTimelineEndpoint) target).getProperties().setLatitude(property(camelContext, java.lang.Double.class, value)); return true;
        case "locations": ((TwitterTimelineEndpoint) target).getProperties().setLocations(property(camelContext, java.lang.String.class, value)); return true;
        case "longitude": ((TwitterTimelineEndpoint) target).getProperties().setLongitude(property(camelContext, java.lang.Double.class, value)); return true;
        case "pollStrategy": ((TwitterTimelineEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "radius": ((TwitterTimelineEndpoint) target).getProperties().setRadius(property(camelContext, java.lang.Double.class, value)); return true;
        case "lazyStartProducer": ((TwitterTimelineEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((TwitterTimelineEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((TwitterTimelineEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "count": ((TwitterTimelineEndpoint) target).getProperties().setCount(property(camelContext, java.lang.Integer.class, value)); return true;
        case "filterOld": ((TwitterTimelineEndpoint) target).getProperties().setFilterOld(property(camelContext, boolean.class, value)); return true;
        case "lang": ((TwitterTimelineEndpoint) target).getProperties().setLang(property(camelContext, java.lang.String.class, value)); return true;
        case "numberOfPages": ((TwitterTimelineEndpoint) target).getProperties().setNumberOfPages(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sinceId": ((TwitterTimelineEndpoint) target).getProperties().setSinceId(property(camelContext, long.class, value)); return true;
        case "userIds": ((TwitterTimelineEndpoint) target).getProperties().setUserIds(property(camelContext, java.lang.String.class, value)); return true;
        case "backoffErrorThreshold": ((TwitterTimelineEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((TwitterTimelineEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((TwitterTimelineEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((TwitterTimelineEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((TwitterTimelineEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((TwitterTimelineEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((TwitterTimelineEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((TwitterTimelineEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((TwitterTimelineEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((TwitterTimelineEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((TwitterTimelineEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((TwitterTimelineEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((TwitterTimelineEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((TwitterTimelineEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "sortById": ((TwitterTimelineEndpoint) target).getProperties().setSortById(property(camelContext, boolean.class, value)); return true;
        case "httpProxyHost": ((TwitterTimelineEndpoint) target).getProperties().setHttpProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "httpProxyPassword": ((TwitterTimelineEndpoint) target).getProperties().setHttpProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "httpProxyPort": ((TwitterTimelineEndpoint) target).getProperties().setHttpProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpProxyUser": ((TwitterTimelineEndpoint) target).getProperties().setHttpProxyUser(property(camelContext, java.lang.String.class, value)); return true;
        case "accessToken": ((TwitterTimelineEndpoint) target).getProperties().setAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "accessTokenSecret": ((TwitterTimelineEndpoint) target).getProperties().setAccessTokenSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "consumerKey": ((TwitterTimelineEndpoint) target).getProperties().setConsumerKey(property(camelContext, java.lang.String.class, value)); return true;
        case "consumerSecret": ((TwitterTimelineEndpoint) target).getProperties().setConsumerSecret(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "user": ((TwitterTimelineEndpoint) target).setUser(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((TwitterTimelineEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendemptymessagewhenidle": ((TwitterTimelineEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "type": ((TwitterTimelineEndpoint) target).getProperties().setType(property(camelContext, org.apache.camel.component.twitter.data.EndpointType.class, value)); return true;
        case "distancemetric": ((TwitterTimelineEndpoint) target).getProperties().setDistanceMetric(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler": ((TwitterTimelineEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((TwitterTimelineEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "extendedmode": ((TwitterTimelineEndpoint) target).getProperties().setExtendedMode(property(camelContext, boolean.class, value)); return true;
        case "latitude": ((TwitterTimelineEndpoint) target).getProperties().setLatitude(property(camelContext, java.lang.Double.class, value)); return true;
        case "locations": ((TwitterTimelineEndpoint) target).getProperties().setLocations(property(camelContext, java.lang.String.class, value)); return true;
        case "longitude": ((TwitterTimelineEndpoint) target).getProperties().setLongitude(property(camelContext, java.lang.Double.class, value)); return true;
        case "pollstrategy": ((TwitterTimelineEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "radius": ((TwitterTimelineEndpoint) target).getProperties().setRadius(property(camelContext, java.lang.Double.class, value)); return true;
        case "lazystartproducer": ((TwitterTimelineEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((TwitterTimelineEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((TwitterTimelineEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "count": ((TwitterTimelineEndpoint) target).getProperties().setCount(property(camelContext, java.lang.Integer.class, value)); return true;
        case "filterold": ((TwitterTimelineEndpoint) target).getProperties().setFilterOld(property(camelContext, boolean.class, value)); return true;
        case "lang": ((TwitterTimelineEndpoint) target).getProperties().setLang(property(camelContext, java.lang.String.class, value)); return true;
        case "numberofpages": ((TwitterTimelineEndpoint) target).getProperties().setNumberOfPages(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sinceid": ((TwitterTimelineEndpoint) target).getProperties().setSinceId(property(camelContext, long.class, value)); return true;
        case "userids": ((TwitterTimelineEndpoint) target).getProperties().setUserIds(property(camelContext, java.lang.String.class, value)); return true;
        case "backofferrorthreshold": ((TwitterTimelineEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((TwitterTimelineEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((TwitterTimelineEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((TwitterTimelineEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((TwitterTimelineEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((TwitterTimelineEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((TwitterTimelineEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((TwitterTimelineEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((TwitterTimelineEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((TwitterTimelineEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((TwitterTimelineEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((TwitterTimelineEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((TwitterTimelineEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((TwitterTimelineEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "sortbyid": ((TwitterTimelineEndpoint) target).getProperties().setSortById(property(camelContext, boolean.class, value)); return true;
        case "httpproxyhost": ((TwitterTimelineEndpoint) target).getProperties().setHttpProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxypassword": ((TwitterTimelineEndpoint) target).getProperties().setHttpProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxyport": ((TwitterTimelineEndpoint) target).getProperties().setHttpProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpproxyuser": ((TwitterTimelineEndpoint) target).getProperties().setHttpProxyUser(property(camelContext, java.lang.String.class, value)); return true;
        case "accesstoken": ((TwitterTimelineEndpoint) target).getProperties().setAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "accesstokensecret": ((TwitterTimelineEndpoint) target).getProperties().setAccessTokenSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "consumerkey": ((TwitterTimelineEndpoint) target).getProperties().setConsumerKey(property(camelContext, java.lang.String.class, value)); return true;
        case "consumersecret": ((TwitterTimelineEndpoint) target).getProperties().setConsumerSecret(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

