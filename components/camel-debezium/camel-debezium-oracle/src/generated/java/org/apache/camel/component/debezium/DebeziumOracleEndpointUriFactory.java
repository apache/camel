/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.debezium;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class DebeziumOracleEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":name";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "additionalProperties", "binaryHandlingMode", "bridgeErrorHandler", "columnBlacklist", "columnExcludeList",
            "columnIncludeList", "columnPropagateSourceType", "columnWhitelist", "converters", "databaseConnectionAdapter",
            "databaseDbname", "databaseHistory", "databaseHistoryFileFilename", "databaseHistoryKafkaBootstrapServers",
            "databaseHistoryKafkaQueryTimeoutMs", "databaseHistoryKafkaRecoveryAttempts",
            "databaseHistoryKafkaRecoveryPollIntervalMs", "databaseHistoryKafkaTopic", "databaseHistorySkipUnparseableDdl",
            "databaseHistoryStoreOnlyCapturedTablesDdl", "databaseHistoryStoreOnlyMonitoredTablesDdl", "databaseHostname",
            "databaseOutServerName", "databasePassword", "databasePdbName", "databasePort", "databaseServerName",
            "databaseUrl", "databaseUser", "datatypePropagateSourceType", "decimalHandlingMode",
            "eventProcessingFailureHandlingMode", "exceptionHandler", "exchangePattern", "heartbeatActionQuery",
            "heartbeatIntervalMs", "heartbeatTopicsPrefix", "includeSchemaChanges", "includeSchemaComments",
            "internalKeyConverter", "internalValueConverter", "intervalHandlingMode", "lobEnabled",
            "logMiningArchiveDestinationName", "logMiningArchiveLogHours", "logMiningArchiveLogOnlyMode",
            "logMiningArchiveLogOnlyScnPollIntervalMs", "logMiningBatchSizeDefault", "logMiningBatchSizeMax",
            "logMiningBatchSizeMin", "logMiningBufferDropOnStop", "logMiningBufferInfinispanCacheEvents",
            "logMiningBufferInfinispanCacheProcessedTransactions", "logMiningBufferInfinispanCacheSchemaChanges",
            "logMiningBufferInfinispanCacheTransactions", "logMiningBufferType", "logMiningScnGapDetectionGapSizeMin",
            "logMiningScnGapDetectionTimeIntervalMaxMs", "logMiningSessionMaxMs", "logMiningSleepTimeDefaultMs",
            "logMiningSleepTimeIncrementMs", "logMiningSleepTimeMaxMs", "logMiningSleepTimeMinMs", "logMiningStrategy",
            "logMiningTransactionRetentionHours", "logMiningUsernameExcludeList", "maxBatchSize", "maxQueueSize",
            "maxQueueSizeInBytes", "messageKeyColumns", "name", "offsetCommitPolicy", "offsetCommitTimeoutMs",
            "offsetFlushIntervalMs", "offsetStorage", "offsetStorageFileName", "offsetStoragePartitions",
            "offsetStorageReplicationFactor", "offsetStorageTopic", "pollIntervalMs", "provideTransactionMetadata",
            "queryFetchSize", "racNodes", "retriableRestartConnectorWaitMs", "sanitizeFieldNames",
            "schemaNameAdjustmentMode", "signalDataCollection", "skippedOperations", "snapshotDelayMs",
            "snapshotEnhancePredicateScn", "snapshotFetchSize", "snapshotIncludeCollectionList", "snapshotLockTimeoutMs",
            "snapshotLockingMode", "snapshotMaxThreads", "snapshotMode", "snapshotSelectStatementOverrides",
            "sourceStructVersion", "tableBlacklist", "tableExcludeList", "tableIncludeList", "tableWhitelist",
            "timePrecisionMode", "tombstonesOnDelete", "transactionTopic", "unavailableValuePlaceholder");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of();
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "additionalProperties.");

    @Override
    public boolean isEnabled(String scheme) {
        return "debezium-oracle".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "name", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

