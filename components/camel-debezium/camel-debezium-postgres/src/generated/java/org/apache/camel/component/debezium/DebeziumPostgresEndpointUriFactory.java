/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.debezium;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class DebeziumPostgresEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":name";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "additionalProperties", "binaryHandlingMode", "bridgeErrorHandler", "columnBlacklist", "columnExcludeList",
            "columnIncludeList", "columnPropagateSourceType", "columnWhitelist", "converters", "databaseDbname",
            "databaseHistoryFileFilename", "databaseHostname", "databaseInitialStatements", "databasePassword",
            "databasePort", "databaseServerName", "databaseSslcert", "databaseSslfactory", "databaseSslkey",
            "databaseSslmode", "databaseSslpassword", "databaseSslrootcert", "databaseTcpkeepalive", "databaseUser",
            "datatypePropagateSourceType", "decimalHandlingMode", "eventProcessingFailureHandlingMode", "exceptionHandler",
            "exchangePattern", "heartbeatActionQuery", "heartbeatIntervalMs", "heartbeatTopicsPrefix",
            "hstoreHandlingMode", "includeSchemaComments", "includeUnknownDatatypes", "incrementalSnapshotChunkSize",
            "internalKeyConverter", "internalValueConverter", "intervalHandlingMode", "maxBatchSize", "maxQueueSize",
            "maxQueueSizeInBytes", "messageKeyColumns", "messagePrefixExcludeList", "messagePrefixIncludeList", "name",
            "offsetCommitPolicy", "offsetCommitTimeoutMs", "offsetFlushIntervalMs", "offsetStorage",
            "offsetStorageFileName", "offsetStoragePartitions", "offsetStorageReplicationFactor", "offsetStorageTopic",
            "pluginName", "pollIntervalMs", "provideTransactionMetadata", "publicationAutocreateMode", "publicationName",
            "queryFetchSize", "retriableRestartConnectorWaitMs", "sanitizeFieldNames", "schemaBlacklist",
            "schemaExcludeList", "schemaIncludeList", "schemaNameAdjustmentMode", "schemaRefreshMode", "schemaWhitelist",
            "signalDataCollection", "skippedOperations", "slotDropOnStop", "slotMaxRetries", "slotName",
            "slotRetryDelayMs", "slotStreamParams", "snapshotCustomClass", "snapshotDelayMs", "snapshotFetchSize",
            "snapshotIncludeCollectionList", "snapshotLockTimeoutMs", "snapshotMaxThreads", "snapshotMode",
            "snapshotSelectStatementOverrides", "sourceStructVersion", "statusUpdateIntervalMs", "tableBlacklist",
            "tableExcludeList", "tableIgnoreBuiltin", "tableIncludeList", "tableWhitelist", "timePrecisionMode",
            "tombstonesOnDelete", "transactionTopic", "unavailableValuePlaceholder", "xminFetchIntervalMs");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of();
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "additionalProperties.");

    @Override
    public boolean isEnabled(String scheme) {
        return "debezium-postgres".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "name", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

