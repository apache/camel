{
  "component": {
    "kind": "component",
    "name": "debezium-db2",
    "title": "Debezium DB2 Connector",
    "description": "Capture changes from a DB2 database.",
    "deprecated": false,
    "firstVersion": "3.17.0",
    "label": "database",
    "javaType": "org.apache.camel.component.debezium.DebeziumDb2Component",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-debezium-db2",
    "version": "4.0.0-SNAPSHOT",
    "scheme": "debezium-db2",
    "extendsScheme": "",
    "syntax": "debezium-db2:name",
    "async": false,
    "api": false,
    "consumerOnly": true,
    "producerOnly": false,
    "lenientProperties": false
  },
  "componentProperties": {
    "additionalProperties": { "index": 0, "kind": "property", "displayName": "Additional Properties", "group": "common", "label": "common", "required": false, "type": "object", "javaType": "java.util.Map<java.lang.String, java.lang.Object>", "prefix": "additionalProperties.", "multiValue": true, "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Additional properties for debezium components in case they can't be set directly on the camel configurations (e.g: setting Kafka Connect properties needed by Debezium engine, for example setting KafkaOffsetBackingStore), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http:\/\/localhost:8811\/avro" },
    "bridgeErrorHandler": { "index": 1, "kind": "property", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "configuration": { "index": 2, "kind": "property", "displayName": "Configuration", "group": "consumer", "label": "", "required": false, "type": "object", "javaType": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "deprecated": false, "autowired": false, "secret": false, "description": "Allow pre-configured Configurations to be set." },
    "internalKeyConverter": { "index": 3, "kind": "property", "displayName": "Internal Key Converter", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "org.apache.kafka.connect.json.JsonConverter", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The Converter class that should be used to serialize and deserialize key data for offsets. The default is JSON converter." },
    "internalValueConverter": { "index": 4, "kind": "property", "displayName": "Internal Value Converter", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "org.apache.kafka.connect.json.JsonConverter", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The Converter class that should be used to serialize and deserialize value data for offsets. The default is JSON converter." },
    "offsetCommitPolicy": { "index": 5, "kind": "property", "displayName": "Offset Commit Policy", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the Java class of the commit policy. It defines when offsets commit has to be triggered based on the number of events processed and the time elapsed since the last commit. This class must implement the interface 'OffsetCommitPolicy'. The default is a periodic commit policy based upon time intervals." },
    "offsetCommitTimeoutMs": { "index": 6, "kind": "property", "displayName": "Offset Commit Timeout Ms", "group": "consumer", "label": "consumer", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "5000", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt. The default is 5 seconds." },
    "offsetFlushIntervalMs": { "index": 7, "kind": "property", "displayName": "Offset Flush Interval Ms", "group": "consumer", "label": "consumer", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "60000", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Interval at which to try committing offsets. The default is 1 minute." },
    "offsetStorage": { "index": 8, "kind": "property", "displayName": "Offset Storage", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "org.apache.kafka.connect.storage.FileOffsetBackingStore", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the Java class that is responsible for persistence of connector offsets." },
    "offsetStorageFileName": { "index": 9, "kind": "property", "displayName": "Offset Storage File Name", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Path to file where offsets are to be stored. Required when offset.storage is set to the FileOffsetBackingStore." },
    "offsetStoragePartitions": { "index": 10, "kind": "property", "displayName": "Offset Storage Partitions", "group": "consumer", "label": "consumer", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The number of partitions used when creating the offset storage topic. Required when offset.storage is set to the 'KafkaOffsetBackingStore'." },
    "offsetStorageReplicationFactor": { "index": 11, "kind": "property", "displayName": "Offset Storage Replication Factor", "group": "consumer", "label": "consumer", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Replication factor used when creating the offset storage topic. Required when offset.storage is set to the KafkaOffsetBackingStore" },
    "offsetStorageTopic": { "index": 12, "kind": "property", "displayName": "Offset Storage Topic", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the Kafka topic where offsets are to be stored. Required when offset.storage is set to the KafkaOffsetBackingStore." },
    "autowiredEnabled": { "index": 13, "kind": "property", "displayName": "Autowired Enabled", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc." },
    "columnExcludeList": { "index": 14, "kind": "property", "displayName": "Column Exclude List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Regular expressions matching columns to exclude from change events" },
    "columnIncludeList": { "index": 15, "kind": "property", "displayName": "Column Include List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Regular expressions matching columns to include in change events" },
    "columnPropagateSourceType": { "index": 16, "kind": "property", "displayName": "Column Propagate Source Type", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A comma-separated list of regular expressions matching fully-qualified names of columns that adds the columns original type and original length as parameters to the corresponding field schemas in the emitted change records." },
    "converters": { "index": 17, "kind": "property", "displayName": "Converters", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Optional list of custom converters that would be used instead of default ones. The converters are defined using '.type' config option and configured using options '.'" },
    "databaseDbname": { "index": 18, "kind": "property", "displayName": "Database Dbname", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the database from which the connector should capture changes" },
    "databaseHostname": { "index": 19, "kind": "property", "displayName": "Database Hostname", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Resolvable hostname or IP address of the database server." },
    "databasePassword": { "index": 20, "kind": "property", "displayName": "Database Password", "group": "db2", "label": "consumer,db2", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Password of the database user to be used when connecting to the database." },
    "databasePort": { "index": 21, "kind": "property", "displayName": "Database Port", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 50000, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Port of the database server." },
    "databaseUser": { "index": 22, "kind": "property", "displayName": "Database User", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Name of the database user to be used when connecting to the database." },
    "datatypePropagateSourceType": { "index": 23, "kind": "property", "displayName": "Datatype Propagate Source Type", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A comma-separated list of regular expressions matching the database-specific data type names that adds the data type's original type and original length as parameters to the corresponding field schemas in the emitted change records." },
    "decimalHandlingMode": { "index": 24, "kind": "property", "displayName": "Decimal Handling Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "precise", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Specify how DECIMAL and NUMERIC columns should be represented in change events, including: 'precise' (the default) uses java.math.BigDecimal to represent values, which are encoded in the change events using a binary representation and Kafka Connect's 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to represent values; 'double' represents values using Java's 'double', which may not offer the precision but will be far easier to use in consumers." },
    "eventProcessingFailureHandlingMode": { "index": 25, "kind": "property", "displayName": "Event Processing Failure Handling Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "fail", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Specify how failures during processing of events (i.e. when encountering a corrupted event) should be handled, including: 'fail' (the default) an exception indicating the problematic event and its position is raised, causing the connector to be stopped; 'warn' the problematic event and its position will be logged and the event will be skipped; 'ignore' the problematic event will be skipped." },
    "heartbeatIntervalMs": { "index": 26, "kind": "property", "displayName": "Heartbeat Interval Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "0ms", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Length of an interval in milli-seconds in in which the connector periodically sends heartbeat messages to a heartbeat topic. Use 0 to disable heartbeat messages. Disabled by default." },
    "heartbeatTopicsPrefix": { "index": 27, "kind": "property", "displayName": "Heartbeat Topics Prefix", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "__debezium-heartbeat", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The prefix that is used to name heartbeat topics.Defaults to __debezium-heartbeat." },
    "includeSchemaChanges": { "index": 28, "kind": "property", "displayName": "Include Schema Changes", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Whether the connector should publish changes in the database schema to a Kafka topic with the same name as the database server ID. Each schema change will be recorded using a key that contains the database name and whose value include logical description of the new schema and optionally the DDL statement(s). The default is 'true'. This is independent of how the connector internally records database schema history." },
    "incrementalSnapshotChunkSize": { "index": 29, "kind": "property", "displayName": "Incremental Snapshot Chunk Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 1024, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The maximum size of chunk (number of documents\/rows) for incremental snapshotting" },
    "maxBatchSize": { "index": 30, "kind": "property", "displayName": "Max Batch Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 2048, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Maximum size of each batch of source records. Defaults to 2048." },
    "maxQueueSize": { "index": 31, "kind": "property", "displayName": "Max Queue Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 8192, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Maximum size of the queue for change events read from the database log but not yet recorded or forwarded. Defaults to 8192, and should always be larger than the maximum batch size." },
    "maxQueueSizeInBytes": { "index": 32, "kind": "property", "displayName": "Max Queue Size In Bytes", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 0, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Maximum size of the queue in bytes for change events read from the database log but not yet recorded or forwarded. Defaults to 0. Mean the feature is not enabled" },
    "messageKeyColumns": { "index": 33, "kind": "property", "displayName": "Message Key Columns", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A semicolon-separated list of expressions that match fully-qualified tables and column(s) to be used as message key. Each expression must match the pattern ':', where the table names could be defined as (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the specific connector, and the key columns are a comma-separated list of columns representing the custom key. For any table without an explicit key configuration the table's primary key column(s) will be used as message key. Example: dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id" },
    "notificationEnabledChannels": { "index": 34, "kind": "property", "displayName": "Notification Enabled Channels", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "List of notification channels names that are enabled." },
    "notificationSinkTopicName": { "index": 35, "kind": "property", "displayName": "Notification Sink Topic Name", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the topic for the notifications. This is required in case 'sink' is in the list of enabled channels" },
    "pollIntervalMs": { "index": 36, "kind": "property", "displayName": "Poll Interval Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "500ms", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Time to wait for new change events to appear after receiving no events, given in milliseconds. Defaults to 500 ms." },
    "provideTransactionMetadata": { "index": 37, "kind": "property", "displayName": "Provide Transaction Metadata", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Enables transaction metadata extraction together with event counting" },
    "queryFetchSize": { "index": 38, "kind": "property", "displayName": "Query Fetch Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 10000, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The maximum number of records that should be loaded into memory while streaming. A value of '0' uses the default JDBC fetch size. The default value is '10000'." },
    "retriableRestartConnectorWaitMs": { "index": 39, "kind": "property", "displayName": "Retriable Restart Connector Wait Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "10s", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Time to wait before restarting connector after retriable exception occurs. Defaults to 10000ms." },
    "schemaHistoryInternal": { "index": 40, "kind": "property", "displayName": "Schema History Internal", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "io.debezium.storage.kafka.history.KafkaSchemaHistory", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the SchemaHistory class that should be used to store and recover database schema changes. The configuration properties for the history are prefixed with the 'schema.history.internal.' string." },
    "schemaHistoryInternalFileFilename": { "index": 41, "kind": "property", "displayName": "Schema History Internal File Filename", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The path to the file that will be used to record the database schema history" },
    "schemaHistoryInternalSkipUnparseableDdl": { "index": 42, "kind": "property", "displayName": "Schema History Internal Skip Unparseable Ddl", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Controls the action Debezium will take when it meets a DDL statement in binlog, that it cannot parse.By default the connector will stop operating but by changing the setting it can ignore the statements which it cannot parse. If skipping is enabled then Debezium can miss metadata changes." },
    "schemaHistoryInternalStoreOnlyCapturedDatabasesDdl": { "index": 43, "kind": "property", "displayName": "Schema History Internal Store Only Captured Databases Ddl", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Controls what DDL will Debezium store in database schema history. By default (true) only DDL that manipulates a table from captured schema\/database will be stored. If set to false, then Debezium will store all incoming DDL statements." },
    "schemaHistoryInternalStoreOnlyCapturedTablesDdl": { "index": 44, "kind": "property", "displayName": "Schema History Internal Store Only Captured Tables Ddl", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Controls what DDL will Debezium store in database schema history. By default (false) Debezium will store all incoming DDL statements. If set to true, then only DDL that manipulates a captured table will be stored." },
    "schemaNameAdjustmentMode": { "index": 45, "kind": "property", "displayName": "Schema Name Adjustment Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "none", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Specify how schema names should be adjusted for compatibility with the message converter used by the connector, including: 'avro' replaces the characters that cannot be used in the Avro type name with underscore; 'avro_unicode' replaces the underscore or characters that cannot be used in the Avro type name with corresponding unicode like _uxxxx. Note: _ is an escape sequence like backslash in Java;'none' does not apply any adjustment (default)" },
    "signalDataCollection": { "index": 46, "kind": "property", "displayName": "Signal Data Collection", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the data collection that is used to send signals\/commands to Debezium. Signaling is disabled when not set." },
    "signalEnabledChannels": { "index": 47, "kind": "property", "displayName": "Signal Enabled Channels", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "source", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "List of channels names that are enabled. Source channel is enabled by default" },
    "signalPollIntervalMs": { "index": 48, "kind": "property", "displayName": "Signal Poll Interval Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "5s", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Interval for looking for new signals in registered channels, given in milliseconds. Defaults to 5 seconds." },
    "skippedOperations": { "index": 49, "kind": "property", "displayName": "Skipped Operations", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "t", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The comma-separated list of operations to skip during streaming, defined as: 'c' for inserts\/create; 'u' for updates; 'd' for deletes, 't' for truncates, and 'none' to indicate nothing skipped. By default, only truncate operations will be skipped." },
    "snapshotDelayMs": { "index": 50, "kind": "property", "displayName": "Snapshot Delay Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "0ms", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A delay period before a snapshot will begin, given in milliseconds. Defaults to 0 ms." },
    "snapshotFetchSize": { "index": 51, "kind": "property", "displayName": "Snapshot Fetch Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The maximum number of records that should be loaded into memory while performing a snapshot." },
    "snapshotIncludeCollectionList": { "index": 52, "kind": "property", "displayName": "Snapshot Include Collection List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "This setting must be set to specify a list of tables\/collections whose snapshot must be taken on creating or restarting the connector." },
    "snapshotLockTimeoutMs": { "index": 53, "kind": "property", "displayName": "Snapshot Lock Timeout Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "10s", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The maximum number of millis to wait for table locks at the beginning of a snapshot. If locks cannot be acquired in this time frame, the snapshot will be aborted. Defaults to 10 seconds" },
    "snapshotMode": { "index": 54, "kind": "property", "displayName": "Snapshot Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "initial", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The criteria for running a snapshot upon startup of the connector. Options include: 'initial' (the default) to specify the connector should run a snapshot only when no offsets are available for the logical server name; 'schema_only' to specify the connector should run a snapshot of the schema when no offsets are available for the logical server name." },
    "snapshotSelectStatementOverrides": { "index": 55, "kind": "property", "displayName": "Snapshot Select Statement Overrides", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "This property contains a comma-separated list of fully-qualified tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the specific connectors. Select statements for the individual tables are specified in further configuration properties, one for each table, identified by the id 'snapshot.select.statement.overrides.DB_NAME.TABLE_NAME' or 'snapshot.select.statement.overrides.SCHEMA_NAME.TABLE_NAME', respectively. The value of those properties is the select statement to use when retrieving data from the specific table during snapshotting. A possible use case for large append-only tables is setting a specific point where to start (resume) snapshotting, in case a previous snapshotting was interrupted." },
    "snapshotTablesOrderByRowCount": { "index": 56, "kind": "property", "displayName": "Snapshot Tables Order By Row Count", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "disabled", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Controls the order in which tables are processed in the initial snapshot. A descending value will order the tables by row count descending. A ascending value will order the tables by row count ascending. A value of disabled (the default) will disable ordering by row count." },
    "sourceinfoStructMaker": { "index": 57, "kind": "property", "displayName": "Sourceinfo Struct Maker", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "io.debezium.connector.db2.Db2SourceInfoStructMaker", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the SourceInfoStructMaker class that returns SourceInfo schema and struct." },
    "tableExcludeList": { "index": 58, "kind": "property", "displayName": "Table Exclude List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A comma-separated list of regular expressions that match the fully-qualified names of tables to be excluded from monitoring" },
    "tableIgnoreBuiltin": { "index": 59, "kind": "property", "displayName": "Table Ignore Builtin", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Flag specifying whether built-in tables should be ignored." },
    "tableIncludeList": { "index": 60, "kind": "property", "displayName": "Table Include List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The tables for which changes are to be captured" },
    "timePrecisionMode": { "index": 61, "kind": "property", "displayName": "Time Precision Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "adaptive", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Time, date, and timestamps can be represented with different kinds of precisions, including: 'adaptive' (the default) bases the precision of time, date, and timestamp values on the database column's precision; 'adaptive_time_microseconds' like 'adaptive' mode, but TIME fields always use microseconds precision; 'connect' always represents time, date, and timestamp values using Kafka Connect's built-in representations for Time, Date, and Timestamp, which uses millisecond precision regardless of the database columns' precision." },
    "tombstonesOnDelete": { "index": 62, "kind": "property", "displayName": "Tombstones On Delete", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Whether delete operations should be represented by a delete event and a subsequent tombstone event (true) or only by a delete event (false). Emitting the tombstone event (the default behavior) allows Kafka to completely delete all events pertaining to the given key once the source record got deleted." },
    "topicNamingStrategy": { "index": 63, "kind": "property", "displayName": "Topic Naming Strategy", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "io.debezium.schema.SchemaTopicNamingStrategy", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the TopicNamingStrategy class that should be used to determine the topic name for data change, schema change, transaction, heartbeat event etc." },
    "topicPrefix": { "index": 64, "kind": "property", "displayName": "Topic Prefix", "group": "db2", "label": "consumer,db2", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Topic prefix that identifies and provides a namespace for the particular database server\/cluster is capturing changes. The topic prefix should be unique across all other connectors, since it is used as a prefix for all Kafka topic names that receive events emitted by this connector. Only alphanumeric characters, hyphens, dots and underscores must be accepted." }
  },
  "headers": {
    "CamelDebeziumSourceMetadata": { "index": 0, "kind": "header", "displayName": "", "group": "consumer", "label": "", "required": false, "javaType": "Map<String, Object>", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The metadata about the source event, for example table name, database name, log position, etc, please refer to the Debezium documentation for more info.", "constantName": "org.apache.camel.component.debezium.DebeziumConstants#HEADER_SOURCE_METADATA" },
    "CamelDebeziumIdentifier": { "index": 1, "kind": "header", "displayName": "", "group": "consumer", "label": "", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The identifier of the connector, normally is this format {server-name}.{database-name}.{table-name}.", "constantName": "org.apache.camel.component.debezium.DebeziumConstants#HEADER_IDENTIFIER" },
    "CamelDebeziumKey": { "index": 2, "kind": "header", "displayName": "", "group": "consumer", "label": "", "required": false, "javaType": "Struct", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The key of the event, normally is the table Primary Key.", "constantName": "org.apache.camel.component.debezium.DebeziumConstants#HEADER_KEY" },
    "CamelDebeziumOperation": { "index": 3, "kind": "header", "displayName": "", "group": "consumer", "label": "", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "If presents, the type of event operation. Values for the connector are c for create (or insert), u for update, d for delete or r for read (in the case of a initial sync) or in case of a snapshot event.", "constantName": "org.apache.camel.component.debezium.DebeziumConstants#HEADER_OPERATION" },
    "CamelDebeziumTimestamp": { "index": 4, "kind": "header", "displayName": "", "group": "consumer", "label": "", "required": false, "javaType": "Long", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "If presents, the time (using the system clock in the JVM) at which the connector processed the event.", "constantName": "org.apache.camel.component.debezium.DebeziumConstants#HEADER_TIMESTAMP" },
    "CamelDebeziumBefore": { "index": 5, "kind": "header", "displayName": "", "group": "consumer", "label": "", "required": false, "javaType": "Struct", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "If presents, contains the state of the row before the event occurred.", "constantName": "org.apache.camel.component.debezium.DebeziumConstants#HEADER_BEFORE" },
    "CamelDebeziumDdlSQL": { "index": 6, "kind": "header", "displayName": "", "group": "consumer", "label": "", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "If presents, the ddl sql text of the event.", "constantName": "org.apache.camel.component.debezium.DebeziumConstants#HEADER_DDL_SQL" }
  },
  "properties": {
    "name": { "index": 0, "kind": "path", "displayName": "Name", "group": "consumer", "label": "consumer", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Unique name for the connector. Attempting to register again with the same name will fail." },
    "additionalProperties": { "index": 1, "kind": "parameter", "displayName": "Additional Properties", "group": "common", "label": "common", "required": false, "type": "object", "javaType": "java.util.Map<java.lang.String, java.lang.Object>", "prefix": "additionalProperties.", "multiValue": true, "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Additional properties for debezium components in case they can't be set directly on the camel configurations (e.g: setting Kafka Connect properties needed by Debezium engine, for example setting KafkaOffsetBackingStore), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http:\/\/localhost:8811\/avro" },
    "internalKeyConverter": { "index": 2, "kind": "parameter", "displayName": "Internal Key Converter", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "org.apache.kafka.connect.json.JsonConverter", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The Converter class that should be used to serialize and deserialize key data for offsets. The default is JSON converter." },
    "internalValueConverter": { "index": 3, "kind": "parameter", "displayName": "Internal Value Converter", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "org.apache.kafka.connect.json.JsonConverter", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The Converter class that should be used to serialize and deserialize value data for offsets. The default is JSON converter." },
    "offsetCommitPolicy": { "index": 4, "kind": "parameter", "displayName": "Offset Commit Policy", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the Java class of the commit policy. It defines when offsets commit has to be triggered based on the number of events processed and the time elapsed since the last commit. This class must implement the interface 'OffsetCommitPolicy'. The default is a periodic commit policy based upon time intervals." },
    "offsetCommitTimeoutMs": { "index": 5, "kind": "parameter", "displayName": "Offset Commit Timeout Ms", "group": "consumer", "label": "consumer", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "5000", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt. The default is 5 seconds." },
    "offsetFlushIntervalMs": { "index": 6, "kind": "parameter", "displayName": "Offset Flush Interval Ms", "group": "consumer", "label": "consumer", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "60000", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Interval at which to try committing offsets. The default is 1 minute." },
    "offsetStorage": { "index": 7, "kind": "parameter", "displayName": "Offset Storage", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "org.apache.kafka.connect.storage.FileOffsetBackingStore", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the Java class that is responsible for persistence of connector offsets." },
    "offsetStorageFileName": { "index": 8, "kind": "parameter", "displayName": "Offset Storage File Name", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Path to file where offsets are to be stored. Required when offset.storage is set to the FileOffsetBackingStore." },
    "offsetStoragePartitions": { "index": 9, "kind": "parameter", "displayName": "Offset Storage Partitions", "group": "consumer", "label": "consumer", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The number of partitions used when creating the offset storage topic. Required when offset.storage is set to the 'KafkaOffsetBackingStore'." },
    "offsetStorageReplicationFactor": { "index": 10, "kind": "parameter", "displayName": "Offset Storage Replication Factor", "group": "consumer", "label": "consumer", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Replication factor used when creating the offset storage topic. Required when offset.storage is set to the KafkaOffsetBackingStore" },
    "offsetStorageTopic": { "index": 11, "kind": "parameter", "displayName": "Offset Storage Topic", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the Kafka topic where offsets are to be stored. Required when offset.storage is set to the KafkaOffsetBackingStore." },
    "bridgeErrorHandler": { "index": 12, "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exceptionHandler": { "index": 13, "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "autowired": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "index": 14, "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut" ], "deprecated": false, "autowired": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "columnExcludeList": { "index": 15, "kind": "parameter", "displayName": "Column Exclude List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Regular expressions matching columns to exclude from change events" },
    "columnIncludeList": { "index": 16, "kind": "parameter", "displayName": "Column Include List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Regular expressions matching columns to include in change events" },
    "columnPropagateSourceType": { "index": 17, "kind": "parameter", "displayName": "Column Propagate Source Type", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A comma-separated list of regular expressions matching fully-qualified names of columns that adds the columns original type and original length as parameters to the corresponding field schemas in the emitted change records." },
    "converters": { "index": 18, "kind": "parameter", "displayName": "Converters", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Optional list of custom converters that would be used instead of default ones. The converters are defined using '.type' config option and configured using options '.'" },
    "databaseDbname": { "index": 19, "kind": "parameter", "displayName": "Database Dbname", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the database from which the connector should capture changes" },
    "databaseHostname": { "index": 20, "kind": "parameter", "displayName": "Database Hostname", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Resolvable hostname or IP address of the database server." },
    "databasePassword": { "index": 21, "kind": "parameter", "displayName": "Database Password", "group": "db2", "label": "consumer,db2", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Password of the database user to be used when connecting to the database." },
    "databasePort": { "index": 22, "kind": "parameter", "displayName": "Database Port", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 50000, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Port of the database server." },
    "databaseUser": { "index": 23, "kind": "parameter", "displayName": "Database User", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Name of the database user to be used when connecting to the database." },
    "datatypePropagateSourceType": { "index": 24, "kind": "parameter", "displayName": "Datatype Propagate Source Type", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A comma-separated list of regular expressions matching the database-specific data type names that adds the data type's original type and original length as parameters to the corresponding field schemas in the emitted change records." },
    "decimalHandlingMode": { "index": 25, "kind": "parameter", "displayName": "Decimal Handling Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "precise", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Specify how DECIMAL and NUMERIC columns should be represented in change events, including: 'precise' (the default) uses java.math.BigDecimal to represent values, which are encoded in the change events using a binary representation and Kafka Connect's 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to represent values; 'double' represents values using Java's 'double', which may not offer the precision but will be far easier to use in consumers." },
    "eventProcessingFailureHandlingMode": { "index": 26, "kind": "parameter", "displayName": "Event Processing Failure Handling Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "fail", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Specify how failures during processing of events (i.e. when encountering a corrupted event) should be handled, including: 'fail' (the default) an exception indicating the problematic event and its position is raised, causing the connector to be stopped; 'warn' the problematic event and its position will be logged and the event will be skipped; 'ignore' the problematic event will be skipped." },
    "heartbeatIntervalMs": { "index": 27, "kind": "parameter", "displayName": "Heartbeat Interval Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "0ms", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Length of an interval in milli-seconds in in which the connector periodically sends heartbeat messages to a heartbeat topic. Use 0 to disable heartbeat messages. Disabled by default." },
    "heartbeatTopicsPrefix": { "index": 28, "kind": "parameter", "displayName": "Heartbeat Topics Prefix", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "__debezium-heartbeat", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The prefix that is used to name heartbeat topics.Defaults to __debezium-heartbeat." },
    "includeSchemaChanges": { "index": 29, "kind": "parameter", "displayName": "Include Schema Changes", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Whether the connector should publish changes in the database schema to a Kafka topic with the same name as the database server ID. Each schema change will be recorded using a key that contains the database name and whose value include logical description of the new schema and optionally the DDL statement(s). The default is 'true'. This is independent of how the connector internally records database schema history." },
    "incrementalSnapshotChunkSize": { "index": 30, "kind": "parameter", "displayName": "Incremental Snapshot Chunk Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 1024, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The maximum size of chunk (number of documents\/rows) for incremental snapshotting" },
    "maxBatchSize": { "index": 31, "kind": "parameter", "displayName": "Max Batch Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 2048, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Maximum size of each batch of source records. Defaults to 2048." },
    "maxQueueSize": { "index": 32, "kind": "parameter", "displayName": "Max Queue Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 8192, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Maximum size of the queue for change events read from the database log but not yet recorded or forwarded. Defaults to 8192, and should always be larger than the maximum batch size." },
    "maxQueueSizeInBytes": { "index": 33, "kind": "parameter", "displayName": "Max Queue Size In Bytes", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 0, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Maximum size of the queue in bytes for change events read from the database log but not yet recorded or forwarded. Defaults to 0. Mean the feature is not enabled" },
    "messageKeyColumns": { "index": 34, "kind": "parameter", "displayName": "Message Key Columns", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A semicolon-separated list of expressions that match fully-qualified tables and column(s) to be used as message key. Each expression must match the pattern ':', where the table names could be defined as (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the specific connector, and the key columns are a comma-separated list of columns representing the custom key. For any table without an explicit key configuration the table's primary key column(s) will be used as message key. Example: dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id" },
    "notificationEnabledChannels": { "index": 35, "kind": "parameter", "displayName": "Notification Enabled Channels", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "List of notification channels names that are enabled." },
    "notificationSinkTopicName": { "index": 36, "kind": "parameter", "displayName": "Notification Sink Topic Name", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the topic for the notifications. This is required in case 'sink' is in the list of enabled channels" },
    "pollIntervalMs": { "index": 37, "kind": "parameter", "displayName": "Poll Interval Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "500ms", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Time to wait for new change events to appear after receiving no events, given in milliseconds. Defaults to 500 ms." },
    "provideTransactionMetadata": { "index": 38, "kind": "parameter", "displayName": "Provide Transaction Metadata", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Enables transaction metadata extraction together with event counting" },
    "queryFetchSize": { "index": 39, "kind": "parameter", "displayName": "Query Fetch Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 10000, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The maximum number of records that should be loaded into memory while streaming. A value of '0' uses the default JDBC fetch size. The default value is '10000'." },
    "retriableRestartConnectorWaitMs": { "index": 40, "kind": "parameter", "displayName": "Retriable Restart Connector Wait Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "10s", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Time to wait before restarting connector after retriable exception occurs. Defaults to 10000ms." },
    "schemaHistoryInternal": { "index": 41, "kind": "parameter", "displayName": "Schema History Internal", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "io.debezium.storage.kafka.history.KafkaSchemaHistory", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the SchemaHistory class that should be used to store and recover database schema changes. The configuration properties for the history are prefixed with the 'schema.history.internal.' string." },
    "schemaHistoryInternalFileFilename": { "index": 42, "kind": "parameter", "displayName": "Schema History Internal File Filename", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The path to the file that will be used to record the database schema history" },
    "schemaHistoryInternalSkipUnparseableDdl": { "index": 43, "kind": "parameter", "displayName": "Schema History Internal Skip Unparseable Ddl", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Controls the action Debezium will take when it meets a DDL statement in binlog, that it cannot parse.By default the connector will stop operating but by changing the setting it can ignore the statements which it cannot parse. If skipping is enabled then Debezium can miss metadata changes." },
    "schemaHistoryInternalStoreOnlyCapturedDatabasesDdl": { "index": 44, "kind": "parameter", "displayName": "Schema History Internal Store Only Captured Databases Ddl", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Controls what DDL will Debezium store in database schema history. By default (true) only DDL that manipulates a table from captured schema\/database will be stored. If set to false, then Debezium will store all incoming DDL statements." },
    "schemaHistoryInternalStoreOnlyCapturedTablesDdl": { "index": 45, "kind": "parameter", "displayName": "Schema History Internal Store Only Captured Tables Ddl", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Controls what DDL will Debezium store in database schema history. By default (false) Debezium will store all incoming DDL statements. If set to true, then only DDL that manipulates a captured table will be stored." },
    "schemaNameAdjustmentMode": { "index": 46, "kind": "parameter", "displayName": "Schema Name Adjustment Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "none", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Specify how schema names should be adjusted for compatibility with the message converter used by the connector, including: 'avro' replaces the characters that cannot be used in the Avro type name with underscore; 'avro_unicode' replaces the underscore or characters that cannot be used in the Avro type name with corresponding unicode like _uxxxx. Note: _ is an escape sequence like backslash in Java;'none' does not apply any adjustment (default)" },
    "signalDataCollection": { "index": 47, "kind": "parameter", "displayName": "Signal Data Collection", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the data collection that is used to send signals\/commands to Debezium. Signaling is disabled when not set." },
    "signalEnabledChannels": { "index": 48, "kind": "parameter", "displayName": "Signal Enabled Channels", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "source", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "List of channels names that are enabled. Source channel is enabled by default" },
    "signalPollIntervalMs": { "index": 49, "kind": "parameter", "displayName": "Signal Poll Interval Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "5s", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Interval for looking for new signals in registered channels, given in milliseconds. Defaults to 5 seconds." },
    "skippedOperations": { "index": 50, "kind": "parameter", "displayName": "Skipped Operations", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "t", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The comma-separated list of operations to skip during streaming, defined as: 'c' for inserts\/create; 'u' for updates; 'd' for deletes, 't' for truncates, and 'none' to indicate nothing skipped. By default, only truncate operations will be skipped." },
    "snapshotDelayMs": { "index": 51, "kind": "parameter", "displayName": "Snapshot Delay Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "0ms", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A delay period before a snapshot will begin, given in milliseconds. Defaults to 0 ms." },
    "snapshotFetchSize": { "index": 52, "kind": "parameter", "displayName": "Snapshot Fetch Size", "group": "db2", "label": "consumer,db2", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The maximum number of records that should be loaded into memory while performing a snapshot." },
    "snapshotIncludeCollectionList": { "index": 53, "kind": "parameter", "displayName": "Snapshot Include Collection List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "This setting must be set to specify a list of tables\/collections whose snapshot must be taken on creating or restarting the connector." },
    "snapshotLockTimeoutMs": { "index": 54, "kind": "parameter", "displayName": "Snapshot Lock Timeout Ms", "group": "db2", "label": "consumer,db2", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "10s", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The maximum number of millis to wait for table locks at the beginning of a snapshot. If locks cannot be acquired in this time frame, the snapshot will be aborted. Defaults to 10 seconds" },
    "snapshotMode": { "index": 55, "kind": "parameter", "displayName": "Snapshot Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "initial", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The criteria for running a snapshot upon startup of the connector. Options include: 'initial' (the default) to specify the connector should run a snapshot only when no offsets are available for the logical server name; 'schema_only' to specify the connector should run a snapshot of the schema when no offsets are available for the logical server name." },
    "snapshotSelectStatementOverrides": { "index": 56, "kind": "parameter", "displayName": "Snapshot Select Statement Overrides", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "This property contains a comma-separated list of fully-qualified tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the specific connectors. Select statements for the individual tables are specified in further configuration properties, one for each table, identified by the id 'snapshot.select.statement.overrides.DB_NAME.TABLE_NAME' or 'snapshot.select.statement.overrides.SCHEMA_NAME.TABLE_NAME', respectively. The value of those properties is the select statement to use when retrieving data from the specific table during snapshotting. A possible use case for large append-only tables is setting a specific point where to start (resume) snapshotting, in case a previous snapshotting was interrupted." },
    "snapshotTablesOrderByRowCount": { "index": 57, "kind": "parameter", "displayName": "Snapshot Tables Order By Row Count", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "disabled", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Controls the order in which tables are processed in the initial snapshot. A descending value will order the tables by row count descending. A ascending value will order the tables by row count ascending. A value of disabled (the default) will disable ordering by row count." },
    "sourceinfoStructMaker": { "index": 58, "kind": "parameter", "displayName": "Sourceinfo Struct Maker", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "io.debezium.connector.db2.Db2SourceInfoStructMaker", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the SourceInfoStructMaker class that returns SourceInfo schema and struct." },
    "tableExcludeList": { "index": 59, "kind": "parameter", "displayName": "Table Exclude List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "A comma-separated list of regular expressions that match the fully-qualified names of tables to be excluded from monitoring" },
    "tableIgnoreBuiltin": { "index": 60, "kind": "parameter", "displayName": "Table Ignore Builtin", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Flag specifying whether built-in tables should be ignored." },
    "tableIncludeList": { "index": 61, "kind": "parameter", "displayName": "Table Include List", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The tables for which changes are to be captured" },
    "timePrecisionMode": { "index": 62, "kind": "parameter", "displayName": "Time Precision Mode", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "adaptive", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Time, date, and timestamps can be represented with different kinds of precisions, including: 'adaptive' (the default) bases the precision of time, date, and timestamp values on the database column's precision; 'adaptive_time_microseconds' like 'adaptive' mode, but TIME fields always use microseconds precision; 'connect' always represents time, date, and timestamp values using Kafka Connect's built-in representations for Time, Date, and Timestamp, which uses millisecond precision regardless of the database columns' precision." },
    "tombstonesOnDelete": { "index": 63, "kind": "parameter", "displayName": "Tombstones On Delete", "group": "db2", "label": "consumer,db2", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Whether delete operations should be represented by a delete event and a subsequent tombstone event (true) or only by a delete event (false). Emitting the tombstone event (the default behavior) allows Kafka to completely delete all events pertaining to the given key once the source record got deleted." },
    "topicNamingStrategy": { "index": 64, "kind": "parameter", "displayName": "Topic Naming Strategy", "group": "db2", "label": "consumer,db2", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "io.debezium.schema.SchemaTopicNamingStrategy", "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "The name of the TopicNamingStrategy class that should be used to determine the topic name for data change, schema change, transaction, heartbeat event etc." },
    "topicPrefix": { "index": 65, "kind": "parameter", "displayName": "Topic Prefix", "group": "db2", "label": "consumer,db2", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.debezium.configuration.Db2ConnectorEmbeddedDebeziumConfiguration", "configurationField": "configuration", "description": "Topic prefix that identifies and provides a namespace for the particular database server\/cluster is capturing changes. The topic prefix should be unique across all other connectors, since it is used as a prefix for all Kafka topic names that receive events emitted by this connector. Only alphanumeric characters, hyphens, dots and underscores must be accepted." }
  }
}
