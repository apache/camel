/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.debezium;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class DebeziumMySqlEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":name";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "additionalProperties", "bigintUnsignedHandlingMode", "binaryHandlingMode", "binlogBufferSize",
            "bridgeErrorHandler", "columnBlacklist", "columnExcludeList", "columnIncludeList", "columnPropagateSourceType",
            "columnWhitelist", "connectKeepAlive", "connectKeepAliveIntervalMs", "connectTimeoutMs", "converters",
            "databaseExcludeList", "databaseHistory", "databaseHistoryFileFilename",
            "databaseHistoryKafkaBootstrapServers", "databaseHistoryKafkaQueryTimeoutMs",
            "databaseHistoryKafkaRecoveryAttempts", "databaseHistoryKafkaRecoveryPollIntervalMs",
            "databaseHistoryKafkaTopic", "databaseHistorySkipUnparseableDdl", "databaseHistoryStoreOnlyCapturedTablesDdl",
            "databaseHistoryStoreOnlyMonitoredTablesDdl", "databaseHostname", "databaseIncludeList",
            "databaseInitialStatements", "databaseJdbcDriver", "databasePassword", "databasePort", "databaseServerId",
            "databaseServerIdOffset", "databaseServerName", "databaseSslKeystore", "databaseSslKeystorePassword",
            "databaseSslMode", "databaseSslTruststore", "databaseSslTruststorePassword", "databaseUser",
            "datatypePropagateSourceType", "decimalHandlingMode", "enableTimeAdjuster",
            "eventDeserializationFailureHandlingMode", "eventProcessingFailureHandlingMode", "exceptionHandler",
            "exchangePattern", "gtidSourceExcludes", "gtidSourceFilterDmlEvents", "gtidSourceIncludes",
            "heartbeatActionQuery", "heartbeatIntervalMs", "heartbeatTopicsPrefix", "includeQuery", "includeSchemaChanges",
            "includeSchemaComments", "inconsistentSchemaHandlingMode", "incrementalSnapshotAllowSchemaChanges",
            "incrementalSnapshotChunkSize", "internalKeyConverter", "internalValueConverter", "maxBatchSize",
            "maxQueueSize", "maxQueueSizeInBytes", "messageKeyColumns", "minRowCountToStreamResults", "name",
            "offsetCommitPolicy", "offsetCommitTimeoutMs", "offsetFlushIntervalMs", "offsetStorage",
            "offsetStorageFileName", "offsetStoragePartitions", "offsetStorageReplicationFactor", "offsetStorageTopic",
            "pollIntervalMs", "provideTransactionMetadata", "queryFetchSize", "retriableRestartConnectorWaitMs",
            "sanitizeFieldNames", "schemaNameAdjustmentMode", "signalDataCollection", "skippedOperations",
            "snapshotDelayMs", "snapshotFetchSize", "snapshotIncludeCollectionList", "snapshotLockTimeoutMs",
            "snapshotLockingMode", "snapshotMaxThreads", "snapshotMode", "snapshotNewTables",
            "snapshotSelectStatementOverrides", "sourceStructVersion", "tableBlacklist", "tableExcludeList",
            "tableIgnoreBuiltin", "tableIncludeList", "tableWhitelist", "timePrecisionMode", "tombstonesOnDelete",
            "transactionTopic");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of();
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "additionalProperties.");

    @Override
    public boolean isEnabled(String scheme) {
        return "debezium-mysql".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "name", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

