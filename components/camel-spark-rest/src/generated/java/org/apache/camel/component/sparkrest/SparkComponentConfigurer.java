/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.sparkrest;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SparkComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "port": ((SparkComponent) target).setPort(property(camelContext, int.class, value)); return true;
        case "ipAddress": ((SparkComponent) target).setIpAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "minThreads": ((SparkComponent) target).setMinThreads(property(camelContext, int.class, value)); return true;
        case "maxThreads": ((SparkComponent) target).setMaxThreads(property(camelContext, int.class, value)); return true;
        case "timeOutMillis": ((SparkComponent) target).setTimeOutMillis(property(camelContext, int.class, value)); return true;
        case "keystoreFile": ((SparkComponent) target).setKeystoreFile(property(camelContext, java.lang.String.class, value)); return true;
        case "keystorePassword": ((SparkComponent) target).setKeystorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "truststoreFile": ((SparkComponent) target).setTruststoreFile(property(camelContext, java.lang.String.class, value)); return true;
        case "truststorePassword": ((SparkComponent) target).setTruststorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sparkConfiguration": ((SparkComponent) target).setSparkConfiguration(property(camelContext, org.apache.camel.component.sparkrest.SparkConfiguration.class, value)); return true;
        case "sparkBinding": ((SparkComponent) target).setSparkBinding(property(camelContext, org.apache.camel.component.sparkrest.SparkBinding.class, value)); return true;
        case "basicPropertyBinding": ((SparkComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((SparkComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "port": ((SparkComponent) target).setPort(property(camelContext, int.class, value)); return true;
        case "ipaddress": ((SparkComponent) target).setIpAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "minthreads": ((SparkComponent) target).setMinThreads(property(camelContext, int.class, value)); return true;
        case "maxthreads": ((SparkComponent) target).setMaxThreads(property(camelContext, int.class, value)); return true;
        case "timeoutmillis": ((SparkComponent) target).setTimeOutMillis(property(camelContext, int.class, value)); return true;
        case "keystorefile": ((SparkComponent) target).setKeystoreFile(property(camelContext, java.lang.String.class, value)); return true;
        case "keystorepassword": ((SparkComponent) target).setKeystorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "truststorefile": ((SparkComponent) target).setTruststoreFile(property(camelContext, java.lang.String.class, value)); return true;
        case "truststorepassword": ((SparkComponent) target).setTruststorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sparkconfiguration": ((SparkComponent) target).setSparkConfiguration(property(camelContext, org.apache.camel.component.sparkrest.SparkConfiguration.class, value)); return true;
        case "sparkbinding": ((SparkComponent) target).setSparkBinding(property(camelContext, org.apache.camel.component.sparkrest.SparkBinding.class, value)); return true;
        case "basicpropertybinding": ((SparkComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((SparkComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

