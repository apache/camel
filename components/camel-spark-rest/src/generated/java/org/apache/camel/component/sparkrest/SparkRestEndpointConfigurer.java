/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.sparkrest;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SparkRestEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        SparkRestEndpoint target = (SparkRestEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accept": target.setAccept(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "disablestreamcache":
        case "disableStreamCache": target.getSparkConfiguration().setDisableStreamCache(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "mapheaders":
        case "mapHeaders": target.getSparkConfiguration().setMapHeaders(property(camelContext, boolean.class, value)); return true;
        case "matchonuriprefix":
        case "matchOnUriPrefix": target.getSparkConfiguration().setMatchOnUriPrefix(property(camelContext, boolean.class, value)); return true;
        case "sparkbinding":
        case "sparkBinding": target.setSparkBinding(property(camelContext, org.apache.camel.component.sparkrest.SparkBinding.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "transferexception":
        case "transferException": target.getSparkConfiguration().setTransferException(property(camelContext, boolean.class, value)); return true;
        case "urldecodeheaders":
        case "urlDecodeHeaders": target.getSparkConfiguration().setUrlDecodeHeaders(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("accept", java.lang.String.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("disableStreamCache", boolean.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("mapHeaders", boolean.class);
        answer.put("matchOnUriPrefix", boolean.class);
        answer.put("sparkBinding", org.apache.camel.component.sparkrest.SparkBinding.class);
        answer.put("synchronous", boolean.class);
        answer.put("transferException", boolean.class);
        answer.put("urlDecodeHeaders", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        SparkRestEndpoint target = (SparkRestEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accept": return target.getAccept();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "disablestreamcache":
        case "disableStreamCache": return target.getSparkConfiguration().isDisableStreamCache();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "mapheaders":
        case "mapHeaders": return target.getSparkConfiguration().isMapHeaders();
        case "matchonuriprefix":
        case "matchOnUriPrefix": return target.getSparkConfiguration().isMatchOnUriPrefix();
        case "sparkbinding":
        case "sparkBinding": return target.getSparkBinding();
        case "synchronous": return target.isSynchronous();
        case "transferexception":
        case "transferException": return target.getSparkConfiguration().isTransferException();
        case "urldecodeheaders":
        case "urlDecodeHeaders": return target.getSparkConfiguration().isUrlDecodeHeaders();
        default: return null;
        }
    }
}

