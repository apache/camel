/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.ahc;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class AhcComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "client": ((AhcComponent) target).setClient(property(camelContext, org.asynchttpclient.AsyncHttpClient.class, value)); return true;
        case "binding": ((AhcComponent) target).setBinding(property(camelContext, org.apache.camel.component.ahc.AhcBinding.class, value)); return true;
        case "clientConfig": ((AhcComponent) target).setClientConfig(property(camelContext, org.asynchttpclient.AsyncHttpClientConfig.class, value)); return true;
        case "sslContextParameters": ((AhcComponent) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "allowJavaSerializedObject": ((AhcComponent) target).setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "useGlobalSslContextParameters": ((AhcComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "headerFilterStrategy": ((AhcComponent) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicPropertyBinding": ((AhcComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((AhcComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "client": ((AhcComponent) target).setClient(property(camelContext, org.asynchttpclient.AsyncHttpClient.class, value)); return true;
        case "binding": ((AhcComponent) target).setBinding(property(camelContext, org.apache.camel.component.ahc.AhcBinding.class, value)); return true;
        case "clientconfig": ((AhcComponent) target).setClientConfig(property(camelContext, org.asynchttpclient.AsyncHttpClientConfig.class, value)); return true;
        case "sslcontextparameters": ((AhcComponent) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "allowjavaserializedobject": ((AhcComponent) target).setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "useglobalsslcontextparameters": ((AhcComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy": ((AhcComponent) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicpropertybinding": ((AhcComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((AhcComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

