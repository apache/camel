/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.ahc;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class AhcEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "bridgeEndpoint": ((AhcEndpoint) target).setBridgeEndpoint(property(camelContext, boolean.class, value)); return true;
        case "bufferSize": ((AhcEndpoint) target).setBufferSize(property(camelContext, int.class, value)); return true;
        case "connectionClose": ((AhcEndpoint) target).setConnectionClose(property(camelContext, boolean.class, value)); return true;
        case "cookieHandler": ((AhcEndpoint) target).setCookieHandler(property(camelContext, org.apache.camel.http.base.cookie.CookieHandler.class, value)); return true;
        case "headerFilterStrategy": ((AhcEndpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "lazyStartProducer": ((AhcEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "throwExceptionOnFailure": ((AhcEndpoint) target).setThrowExceptionOnFailure(property(camelContext, boolean.class, value)); return true;
        case "transferException": ((AhcEndpoint) target).setTransferException(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((AhcEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "binding": ((AhcEndpoint) target).setBinding(property(camelContext, org.apache.camel.component.ahc.AhcBinding.class, value)); return true;
        case "clientConfig": ((AhcEndpoint) target).setClientConfig(property(camelContext, org.asynchttpclient.AsyncHttpClientConfig.class, value)); return true;
        case "clientConfigOptions": ((AhcEndpoint) target).setClientConfigOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "synchronous": ((AhcEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "clientConfigRealmOptions": ((AhcEndpoint) target).setClientConfigRealmOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "sslContextParameters": ((AhcEndpoint) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "bridgeendpoint": ((AhcEndpoint) target).setBridgeEndpoint(property(camelContext, boolean.class, value)); return true;
        case "buffersize": ((AhcEndpoint) target).setBufferSize(property(camelContext, int.class, value)); return true;
        case "connectionclose": ((AhcEndpoint) target).setConnectionClose(property(camelContext, boolean.class, value)); return true;
        case "cookiehandler": ((AhcEndpoint) target).setCookieHandler(property(camelContext, org.apache.camel.http.base.cookie.CookieHandler.class, value)); return true;
        case "headerfilterstrategy": ((AhcEndpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "lazystartproducer": ((AhcEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "throwexceptiononfailure": ((AhcEndpoint) target).setThrowExceptionOnFailure(property(camelContext, boolean.class, value)); return true;
        case "transferexception": ((AhcEndpoint) target).setTransferException(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((AhcEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "binding": ((AhcEndpoint) target).setBinding(property(camelContext, org.apache.camel.component.ahc.AhcBinding.class, value)); return true;
        case "clientconfig": ((AhcEndpoint) target).setClientConfig(property(camelContext, org.asynchttpclient.AsyncHttpClientConfig.class, value)); return true;
        case "clientconfigoptions": ((AhcEndpoint) target).setClientConfigOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "synchronous": ((AhcEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "clientconfigrealmoptions": ((AhcEndpoint) target).setClientConfigRealmOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "sslcontextparameters": ((AhcEndpoint) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
            default: return false;
        }
    }

}

