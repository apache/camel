/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jms;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JmsEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        JmsEndpoint target = (JmsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acceptmessageswhilestopping":
        case "acceptMessagesWhileStopping": target.getConfiguration().setAcceptMessagesWhileStopping(property(camelContext, boolean.class, value)); return true;
        case "acknowledgementmodename":
        case "acknowledgementModeName": target.getConfiguration().setAcknowledgementModeName(property(camelContext, java.lang.String.class, value)); return true;
        case "allowadditionalheaders":
        case "allowAdditionalHeaders": target.getConfiguration().setAllowAdditionalHeaders(property(camelContext, java.lang.String.class, value)); return true;
        case "allownullbody":
        case "allowNullBody": target.getConfiguration().setAllowNullBody(property(camelContext, boolean.class, value)); return true;
        case "allowreplymanagerquickstop":
        case "allowReplyManagerQuickStop": target.getConfiguration().setAllowReplyManagerQuickStop(property(camelContext, boolean.class, value)); return true;
        case "allowserializedheaders":
        case "allowSerializedHeaders": target.getConfiguration().setAllowSerializedHeaders(property(camelContext, boolean.class, value)); return true;
        case "alwayscopymessage":
        case "alwaysCopyMessage": target.getConfiguration().setAlwaysCopyMessage(property(camelContext, boolean.class, value)); return true;
        case "artemisstreamingenabled":
        case "artemisStreamingEnabled": target.getConfiguration().setArtemisStreamingEnabled(property(camelContext, boolean.class, value)); return true;
        case "asyncconsumer":
        case "asyncConsumer": target.getConfiguration().setAsyncConsumer(property(camelContext, boolean.class, value)); return true;
        case "asyncstartlistener":
        case "asyncStartListener": target.getConfiguration().setAsyncStartListener(property(camelContext, boolean.class, value)); return true;
        case "asyncstoplistener":
        case "asyncStopListener": target.getConfiguration().setAsyncStopListener(property(camelContext, boolean.class, value)); return true;
        case "autostartup":
        case "autoStartup": target.getConfiguration().setAutoStartup(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "cachelevel":
        case "cacheLevel": target.getConfiguration().setCacheLevel(property(camelContext, int.class, value)); return true;
        case "cachelevelname":
        case "cacheLevelName": target.getConfiguration().setCacheLevelName(property(camelContext, java.lang.String.class, value)); return true;
        case "clientid":
        case "clientId": target.getConfiguration().setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": target.getConfiguration().setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "connectionfactory":
        case "connectionFactory": target.getConfiguration().setConnectionFactory(property(camelContext, javax.jms.ConnectionFactory.class, value)); return true;
        case "consumertype":
        case "consumerType": target.getConfiguration().setConsumerType(property(camelContext, org.apache.camel.component.jms.ConsumerType.class, value)); return true;
        case "correlationproperty":
        case "correlationProperty": target.getConfiguration().setCorrelationProperty(property(camelContext, java.lang.String.class, value)); return true;
        case "defaulttaskexecutortype":
        case "defaultTaskExecutorType": target.getConfiguration().setDefaultTaskExecutorType(property(camelContext, org.apache.camel.component.jms.DefaultTaskExecutorType.class, value)); return true;
        case "deliverydelay":
        case "deliveryDelay": target.getConfiguration().setDeliveryDelay(property(camelContext, long.class, value)); return true;
        case "deliverymode":
        case "deliveryMode": target.getConfiguration().setDeliveryMode(property(camelContext, java.lang.Integer.class, value)); return true;
        case "deliverypersistent":
        case "deliveryPersistent": target.getConfiguration().setDeliveryPersistent(property(camelContext, boolean.class, value)); return true;
        case "destinationresolver":
        case "destinationResolver": target.getConfiguration().setDestinationResolver(property(camelContext, org.springframework.jms.support.destination.DestinationResolver.class, value)); return true;
        case "disablereplyto":
        case "disableReplyTo": target.getConfiguration().setDisableReplyTo(property(camelContext, boolean.class, value)); return true;
        case "disabletimetolive":
        case "disableTimeToLive": target.getConfiguration().setDisableTimeToLive(property(camelContext, boolean.class, value)); return true;
        case "durablesubscriptionname":
        case "durableSubscriptionName": target.getConfiguration().setDurableSubscriptionName(property(camelContext, java.lang.String.class, value)); return true;
        case "eagerloadingofproperties":
        case "eagerLoadingOfProperties": target.getConfiguration().setEagerLoadingOfProperties(property(camelContext, boolean.class, value)); return true;
        case "eagerpoisonbody":
        case "eagerPoisonBody": target.getConfiguration().setEagerPoisonBody(property(camelContext, java.lang.String.class, value)); return true;
        case "errorhandler":
        case "errorHandler": target.getConfiguration().setErrorHandler(property(camelContext, org.springframework.util.ErrorHandler.class, value)); return true;
        case "errorhandlerlogstacktrace":
        case "errorHandlerLogStackTrace": target.getConfiguration().setErrorHandlerLogStackTrace(property(camelContext, boolean.class, value)); return true;
        case "errorhandlerlogginglevel":
        case "errorHandlerLoggingLevel": target.getConfiguration().setErrorHandlerLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exceptionlistener":
        case "exceptionListener": target.getConfiguration().setExceptionListener(property(camelContext, javax.jms.ExceptionListener.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "explicitqosenabled":
        case "explicitQosEnabled": target.getConfiguration().setExplicitQosEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "exposelistenersession":
        case "exposeListenerSession": target.getConfiguration().setExposeListenerSession(property(camelContext, boolean.class, value)); return true;
        case "forcesendoriginalmessage":
        case "forceSendOriginalMessage": target.getConfiguration().setForceSendOriginalMessage(property(camelContext, boolean.class, value)); return true;
        case "formatdateheaderstoiso8601":
        case "formatDateHeadersToIso8601": target.getConfiguration().setFormatDateHeadersToIso8601(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "idleconsumerlimit":
        case "idleConsumerLimit": target.getConfiguration().setIdleConsumerLimit(property(camelContext, int.class, value)); return true;
        case "idletaskexecutionlimit":
        case "idleTaskExecutionLimit": target.getConfiguration().setIdleTaskExecutionLimit(property(camelContext, int.class, value)); return true;
        case "includealljmsxproperties":
        case "includeAllJMSXProperties": target.getConfiguration().setIncludeAllJMSXProperties(property(camelContext, boolean.class, value)); return true;
        case "includesentjmsmessageid":
        case "includeSentJMSMessageID": target.getConfiguration().setIncludeSentJMSMessageID(property(camelContext, boolean.class, value)); return true;
        case "jmskeyformatstrategy":
        case "jmsKeyFormatStrategy": target.getConfiguration().setJmsKeyFormatStrategy(property(camelContext, org.apache.camel.component.jms.JmsKeyFormatStrategy.class, value)); return true;
        case "jmsmessagetype":
        case "jmsMessageType": target.getConfiguration().setJmsMessageType(property(camelContext, org.apache.camel.component.jms.JmsMessageType.class, value)); return true;
        case "lazycreatetransactionmanager":
        case "lazyCreateTransactionManager": target.getConfiguration().setLazyCreateTransactionManager(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "mapjmsmessage":
        case "mapJmsMessage": target.getConfiguration().setMapJmsMessage(property(camelContext, boolean.class, value)); return true;
        case "maxconcurrentconsumers":
        case "maxConcurrentConsumers": target.getConfiguration().setMaxConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "maxmessagespertask":
        case "maxMessagesPerTask": target.getConfiguration().setMaxMessagesPerTask(property(camelContext, int.class, value)); return true;
        case "messageconverter":
        case "messageConverter": target.getConfiguration().setMessageConverter(property(camelContext, org.springframework.jms.support.converter.MessageConverter.class, value)); return true;
        case "messagecreatedstrategy":
        case "messageCreatedStrategy": target.getConfiguration().setMessageCreatedStrategy(property(camelContext, org.apache.camel.component.jms.MessageCreatedStrategy.class, value)); return true;
        case "messageidenabled":
        case "messageIdEnabled": target.getConfiguration().setMessageIdEnabled(property(camelContext, boolean.class, value)); return true;
        case "messagelistenercontainerfactory":
        case "messageListenerContainerFactory": target.getConfiguration().setMessageListenerContainerFactory(property(camelContext, org.apache.camel.component.jms.MessageListenerContainerFactory.class, value)); return true;
        case "messagetimestampenabled":
        case "messageTimestampEnabled": target.getConfiguration().setMessageTimestampEnabled(property(camelContext, boolean.class, value)); return true;
        case "password": target.getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "preservemessageqos":
        case "preserveMessageQos": target.getConfiguration().setPreserveMessageQos(property(camelContext, boolean.class, value)); return true;
        case "priority": target.getConfiguration().setPriority(property(camelContext, int.class, value)); return true;
        case "pubsubnolocal":
        case "pubSubNoLocal": target.getConfiguration().setPubSubNoLocal(property(camelContext, boolean.class, value)); return true;
        case "receivetimeout":
        case "receiveTimeout": target.getConfiguration().setReceiveTimeout(property(camelContext, long.class, value)); return true;
        case "recoveryinterval":
        case "recoveryInterval": target.getConfiguration().setRecoveryInterval(property(camelContext, long.class, value)); return true;
        case "replyto":
        case "replyTo": target.getConfiguration().setReplyTo(property(camelContext, java.lang.String.class, value)); return true;
        case "replytocachelevelname":
        case "replyToCacheLevelName": target.getConfiguration().setReplyToCacheLevelName(property(camelContext, java.lang.String.class, value)); return true;
        case "replytoconcurrentconsumers":
        case "replyToConcurrentConsumers": target.getConfiguration().setReplyToConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "replytodeliverypersistent":
        case "replyToDeliveryPersistent": target.getConfiguration().setReplyToDeliveryPersistent(property(camelContext, boolean.class, value)); return true;
        case "replytodestinationselectorname":
        case "replyToDestinationSelectorName": target.getConfiguration().setReplyToDestinationSelectorName(property(camelContext, java.lang.String.class, value)); return true;
        case "replytomaxconcurrentconsumers":
        case "replyToMaxConcurrentConsumers": target.getConfiguration().setReplyToMaxConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "replytoontimeoutmaxconcurrentconsumers":
        case "replyToOnTimeoutMaxConcurrentConsumers": target.getConfiguration().setReplyToOnTimeoutMaxConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "replytooverride":
        case "replyToOverride": target.getConfiguration().setReplyToOverride(property(camelContext, java.lang.String.class, value)); return true;
        case "replytosamedestinationallowed":
        case "replyToSameDestinationAllowed": target.getConfiguration().setReplyToSameDestinationAllowed(property(camelContext, boolean.class, value)); return true;
        case "replytotype":
        case "replyToType": target.getConfiguration().setReplyToType(property(camelContext, org.apache.camel.component.jms.ReplyToType.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.getConfiguration().setRequestTimeout(property(camelContext, long.class, value)); return true;
        case "requesttimeoutcheckerinterval":
        case "requestTimeoutCheckerInterval": target.getConfiguration().setRequestTimeoutCheckerInterval(property(camelContext, long.class, value)); return true;
        case "selector": target.getConfiguration().setSelector(property(camelContext, java.lang.String.class, value)); return true;
        case "streammessagetypeenabled":
        case "streamMessageTypeEnabled": target.getConfiguration().setStreamMessageTypeEnabled(property(camelContext, boolean.class, value)); return true;
        case "subscriptiondurable":
        case "subscriptionDurable": target.getConfiguration().setSubscriptionDurable(property(camelContext, boolean.class, value)); return true;
        case "subscriptionname":
        case "subscriptionName": target.getConfiguration().setSubscriptionName(property(camelContext, java.lang.String.class, value)); return true;
        case "subscriptionshared":
        case "subscriptionShared": target.getConfiguration().setSubscriptionShared(property(camelContext, boolean.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "taskexecutor":
        case "taskExecutor": target.getConfiguration().setTaskExecutor(property(camelContext, org.springframework.core.task.TaskExecutor.class, value)); return true;
        case "testconnectiononstartup":
        case "testConnectionOnStartup": target.getConfiguration().setTestConnectionOnStartup(property(camelContext, boolean.class, value)); return true;
        case "timetolive":
        case "timeToLive": target.getConfiguration().setTimeToLive(property(camelContext, long.class, value)); return true;
        case "transacted": target.getConfiguration().setTransacted(property(camelContext, boolean.class, value)); return true;
        case "transactionmanager":
        case "transactionManager": target.getConfiguration().setTransactionManager(property(camelContext, org.springframework.transaction.PlatformTransactionManager.class, value)); return true;
        case "transactionname":
        case "transactionName": target.getConfiguration().setTransactionName(property(camelContext, java.lang.String.class, value)); return true;
        case "transactiontimeout":
        case "transactionTimeout": target.getConfiguration().setTransactionTimeout(property(camelContext, int.class, value)); return true;
        case "transferexception":
        case "transferException": target.getConfiguration().setTransferException(property(camelContext, boolean.class, value)); return true;
        case "transferexchange":
        case "transferExchange": target.getConfiguration().setTransferExchange(property(camelContext, boolean.class, value)); return true;
        case "usemessageidascorrelationid":
        case "useMessageIDAsCorrelationID": target.getConfiguration().setUseMessageIDAsCorrelationID(property(camelContext, boolean.class, value)); return true;
        case "username": target.getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "waitforprovisioncorrelationtobeupdatedcounter":
        case "waitForProvisionCorrelationToBeUpdatedCounter": target.getConfiguration().setWaitForProvisionCorrelationToBeUpdatedCounter(property(camelContext, int.class, value)); return true;
        case "waitforprovisioncorrelationtobeupdatedthreadsleepingtime":
        case "waitForProvisionCorrelationToBeUpdatedThreadSleepingTime": target.getConfiguration().setWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime(property(camelContext, long.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("acceptMessagesWhileStopping", boolean.class);
        answer.put("acknowledgementModeName", java.lang.String.class);
        answer.put("allowAdditionalHeaders", java.lang.String.class);
        answer.put("allowNullBody", boolean.class);
        answer.put("allowReplyManagerQuickStop", boolean.class);
        answer.put("allowSerializedHeaders", boolean.class);
        answer.put("alwaysCopyMessage", boolean.class);
        answer.put("artemisStreamingEnabled", boolean.class);
        answer.put("asyncConsumer", boolean.class);
        answer.put("asyncStartListener", boolean.class);
        answer.put("asyncStopListener", boolean.class);
        answer.put("autoStartup", boolean.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("cacheLevel", int.class);
        answer.put("cacheLevelName", java.lang.String.class);
        answer.put("clientId", java.lang.String.class);
        answer.put("concurrentConsumers", int.class);
        answer.put("connectionFactory", javax.jms.ConnectionFactory.class);
        answer.put("consumerType", org.apache.camel.component.jms.ConsumerType.class);
        answer.put("correlationProperty", java.lang.String.class);
        answer.put("defaultTaskExecutorType", org.apache.camel.component.jms.DefaultTaskExecutorType.class);
        answer.put("deliveryDelay", long.class);
        answer.put("deliveryMode", java.lang.Integer.class);
        answer.put("deliveryPersistent", boolean.class);
        answer.put("destinationResolver", org.springframework.jms.support.destination.DestinationResolver.class);
        answer.put("disableReplyTo", boolean.class);
        answer.put("disableTimeToLive", boolean.class);
        answer.put("durableSubscriptionName", java.lang.String.class);
        answer.put("eagerLoadingOfProperties", boolean.class);
        answer.put("eagerPoisonBody", java.lang.String.class);
        answer.put("errorHandler", org.springframework.util.ErrorHandler.class);
        answer.put("errorHandlerLogStackTrace", boolean.class);
        answer.put("errorHandlerLoggingLevel", org.apache.camel.LoggingLevel.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exceptionListener", javax.jms.ExceptionListener.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("explicitQosEnabled", java.lang.Boolean.class);
        answer.put("exposeListenerSession", boolean.class);
        answer.put("forceSendOriginalMessage", boolean.class);
        answer.put("formatDateHeadersToIso8601", boolean.class);
        answer.put("headerFilterStrategy", org.apache.camel.spi.HeaderFilterStrategy.class);
        answer.put("idleConsumerLimit", int.class);
        answer.put("idleTaskExecutionLimit", int.class);
        answer.put("includeAllJMSXProperties", boolean.class);
        answer.put("includeSentJMSMessageID", boolean.class);
        answer.put("jmsKeyFormatStrategy", org.apache.camel.component.jms.JmsKeyFormatStrategy.class);
        answer.put("jmsMessageType", org.apache.camel.component.jms.JmsMessageType.class);
        answer.put("lazyCreateTransactionManager", boolean.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("mapJmsMessage", boolean.class);
        answer.put("maxConcurrentConsumers", int.class);
        answer.put("maxMessagesPerTask", int.class);
        answer.put("messageConverter", org.springframework.jms.support.converter.MessageConverter.class);
        answer.put("messageCreatedStrategy", org.apache.camel.component.jms.MessageCreatedStrategy.class);
        answer.put("messageIdEnabled", boolean.class);
        answer.put("messageListenerContainerFactory", org.apache.camel.component.jms.MessageListenerContainerFactory.class);
        answer.put("messageTimestampEnabled", boolean.class);
        answer.put("password", java.lang.String.class);
        answer.put("preserveMessageQos", boolean.class);
        answer.put("priority", int.class);
        answer.put("pubSubNoLocal", boolean.class);
        answer.put("receiveTimeout", long.class);
        answer.put("recoveryInterval", long.class);
        answer.put("replyTo", java.lang.String.class);
        answer.put("replyToCacheLevelName", java.lang.String.class);
        answer.put("replyToConcurrentConsumers", int.class);
        answer.put("replyToDeliveryPersistent", boolean.class);
        answer.put("replyToDestinationSelectorName", java.lang.String.class);
        answer.put("replyToMaxConcurrentConsumers", int.class);
        answer.put("replyToOnTimeoutMaxConcurrentConsumers", int.class);
        answer.put("replyToOverride", java.lang.String.class);
        answer.put("replyToSameDestinationAllowed", boolean.class);
        answer.put("replyToType", org.apache.camel.component.jms.ReplyToType.class);
        answer.put("requestTimeout", long.class);
        answer.put("requestTimeoutCheckerInterval", long.class);
        answer.put("selector", java.lang.String.class);
        answer.put("streamMessageTypeEnabled", boolean.class);
        answer.put("subscriptionDurable", boolean.class);
        answer.put("subscriptionName", java.lang.String.class);
        answer.put("subscriptionShared", boolean.class);
        answer.put("synchronous", boolean.class);
        answer.put("taskExecutor", org.springframework.core.task.TaskExecutor.class);
        answer.put("testConnectionOnStartup", boolean.class);
        answer.put("timeToLive", long.class);
        answer.put("transacted", boolean.class);
        answer.put("transactionManager", org.springframework.transaction.PlatformTransactionManager.class);
        answer.put("transactionName", java.lang.String.class);
        answer.put("transactionTimeout", int.class);
        answer.put("transferException", boolean.class);
        answer.put("transferExchange", boolean.class);
        answer.put("useMessageIDAsCorrelationID", boolean.class);
        answer.put("username", java.lang.String.class);
        answer.put("waitForProvisionCorrelationToBeUpdatedCounter", int.class);
        answer.put("waitForProvisionCorrelationToBeUpdatedThreadSleepingTime", long.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        JmsEndpoint target = (JmsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acceptmessageswhilestopping":
        case "acceptMessagesWhileStopping": target.getConfiguration().isAcceptMessagesWhileStopping(); return true;
        case "acknowledgementmodename":
        case "acknowledgementModeName": target.getConfiguration().getAcknowledgementModeName(); return true;
        case "allowadditionalheaders":
        case "allowAdditionalHeaders": target.getConfiguration().getAllowAdditionalHeaders(); return true;
        case "allownullbody":
        case "allowNullBody": target.getConfiguration().isAllowNullBody(); return true;
        case "allowreplymanagerquickstop":
        case "allowReplyManagerQuickStop": target.getConfiguration().isAllowReplyManagerQuickStop(); return true;
        case "allowserializedheaders":
        case "allowSerializedHeaders": target.getConfiguration().isAllowSerializedHeaders(); return true;
        case "alwayscopymessage":
        case "alwaysCopyMessage": target.getConfiguration().isAlwaysCopyMessage(); return true;
        case "artemisstreamingenabled":
        case "artemisStreamingEnabled": target.getConfiguration().isArtemisStreamingEnabled(); return true;
        case "asyncconsumer":
        case "asyncConsumer": target.getConfiguration().isAsyncConsumer(); return true;
        case "asyncstartlistener":
        case "asyncStartListener": target.getConfiguration().isAsyncStartListener(); return true;
        case "asyncstoplistener":
        case "asyncStopListener": target.getConfiguration().isAsyncStopListener(); return true;
        case "autostartup":
        case "autoStartup": target.getConfiguration().isAutoStartup(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "cachelevel":
        case "cacheLevel": target.getConfiguration().getCacheLevel(); return true;
        case "cachelevelname":
        case "cacheLevelName": target.getConfiguration().getCacheLevelName(); return true;
        case "clientid":
        case "clientId": target.getConfiguration().getClientId(); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": target.getConfiguration().getConcurrentConsumers(); return true;
        case "connectionfactory":
        case "connectionFactory": target.getConfiguration().getConnectionFactory(); return true;
        case "consumertype":
        case "consumerType": target.getConfiguration().getConsumerType(); return true;
        case "correlationproperty":
        case "correlationProperty": target.getConfiguration().getCorrelationProperty(); return true;
        case "defaulttaskexecutortype":
        case "defaultTaskExecutorType": target.getConfiguration().getDefaultTaskExecutorType(); return true;
        case "deliverydelay":
        case "deliveryDelay": target.getConfiguration().getDeliveryDelay(); return true;
        case "deliverymode":
        case "deliveryMode": target.getConfiguration().getDeliveryMode(); return true;
        case "deliverypersistent":
        case "deliveryPersistent": target.getConfiguration().isDeliveryPersistent(); return true;
        case "destinationresolver":
        case "destinationResolver": target.getConfiguration().getDestinationResolver(); return true;
        case "disablereplyto":
        case "disableReplyTo": target.getConfiguration().isDisableReplyTo(); return true;
        case "disabletimetolive":
        case "disableTimeToLive": target.getConfiguration().isDisableTimeToLive(); return true;
        case "durablesubscriptionname":
        case "durableSubscriptionName": target.getConfiguration().getDurableSubscriptionName(); return true;
        case "eagerloadingofproperties":
        case "eagerLoadingOfProperties": target.getConfiguration().isEagerLoadingOfProperties(); return true;
        case "eagerpoisonbody":
        case "eagerPoisonBody": target.getConfiguration().getEagerPoisonBody(); return true;
        case "errorhandler":
        case "errorHandler": target.getConfiguration().getErrorHandler(); return true;
        case "errorhandlerlogstacktrace":
        case "errorHandlerLogStackTrace": target.getConfiguration().isErrorHandlerLogStackTrace(); return true;
        case "errorhandlerlogginglevel":
        case "errorHandlerLoggingLevel": target.getConfiguration().getErrorHandlerLoggingLevel(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exceptionlistener":
        case "exceptionListener": target.getConfiguration().getExceptionListener(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "explicitqosenabled":
        case "explicitQosEnabled": target.getConfiguration().getExplicitQosEnabled(); return true;
        case "exposelistenersession":
        case "exposeListenerSession": target.getConfiguration().isExposeListenerSession(); return true;
        case "forcesendoriginalmessage":
        case "forceSendOriginalMessage": target.getConfiguration().isForceSendOriginalMessage(); return true;
        case "formatdateheaderstoiso8601":
        case "formatDateHeadersToIso8601": target.getConfiguration().isFormatDateHeadersToIso8601(); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.getHeaderFilterStrategy(); return true;
        case "idleconsumerlimit":
        case "idleConsumerLimit": target.getConfiguration().getIdleConsumerLimit(); return true;
        case "idletaskexecutionlimit":
        case "idleTaskExecutionLimit": target.getConfiguration().getIdleTaskExecutionLimit(); return true;
        case "includealljmsxproperties":
        case "includeAllJMSXProperties": target.getConfiguration().isIncludeAllJMSXProperties(); return true;
        case "includesentjmsmessageid":
        case "includeSentJMSMessageID": target.getConfiguration().isIncludeSentJMSMessageID(); return true;
        case "jmskeyformatstrategy":
        case "jmsKeyFormatStrategy": target.getConfiguration().getJmsKeyFormatStrategy(); return true;
        case "jmsmessagetype":
        case "jmsMessageType": target.getConfiguration().getJmsMessageType(); return true;
        case "lazycreatetransactionmanager":
        case "lazyCreateTransactionManager": target.getConfiguration().isLazyCreateTransactionManager(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "mapjmsmessage":
        case "mapJmsMessage": target.getConfiguration().isMapJmsMessage(); return true;
        case "maxconcurrentconsumers":
        case "maxConcurrentConsumers": target.getConfiguration().getMaxConcurrentConsumers(); return true;
        case "maxmessagespertask":
        case "maxMessagesPerTask": target.getConfiguration().getMaxMessagesPerTask(); return true;
        case "messageconverter":
        case "messageConverter": target.getConfiguration().getMessageConverter(); return true;
        case "messagecreatedstrategy":
        case "messageCreatedStrategy": target.getConfiguration().getMessageCreatedStrategy(); return true;
        case "messageidenabled":
        case "messageIdEnabled": target.getConfiguration().isMessageIdEnabled(); return true;
        case "messagelistenercontainerfactory":
        case "messageListenerContainerFactory": target.getConfiguration().getMessageListenerContainerFactory(); return true;
        case "messagetimestampenabled":
        case "messageTimestampEnabled": target.getConfiguration().isMessageTimestampEnabled(); return true;
        case "password": target.getConfiguration().getPassword(); return true;
        case "preservemessageqos":
        case "preserveMessageQos": target.getConfiguration().isPreserveMessageQos(); return true;
        case "priority": target.getConfiguration().getPriority(); return true;
        case "pubsubnolocal":
        case "pubSubNoLocal": target.getConfiguration().isPubSubNoLocal(); return true;
        case "receivetimeout":
        case "receiveTimeout": target.getConfiguration().getReceiveTimeout(); return true;
        case "recoveryinterval":
        case "recoveryInterval": target.getConfiguration().getRecoveryInterval(); return true;
        case "replyto":
        case "replyTo": target.getConfiguration().getReplyTo(); return true;
        case "replytocachelevelname":
        case "replyToCacheLevelName": target.getConfiguration().getReplyToCacheLevelName(); return true;
        case "replytoconcurrentconsumers":
        case "replyToConcurrentConsumers": target.getConfiguration().getReplyToConcurrentConsumers(); return true;
        case "replytodeliverypersistent":
        case "replyToDeliveryPersistent": target.getConfiguration().isReplyToDeliveryPersistent(); return true;
        case "replytodestinationselectorname":
        case "replyToDestinationSelectorName": target.getConfiguration().getReplyToDestinationSelectorName(); return true;
        case "replytomaxconcurrentconsumers":
        case "replyToMaxConcurrentConsumers": target.getConfiguration().getReplyToMaxConcurrentConsumers(); return true;
        case "replytoontimeoutmaxconcurrentconsumers":
        case "replyToOnTimeoutMaxConcurrentConsumers": target.getConfiguration().getReplyToOnTimeoutMaxConcurrentConsumers(); return true;
        case "replytooverride":
        case "replyToOverride": target.getConfiguration().getReplyToOverride(); return true;
        case "replytosamedestinationallowed":
        case "replyToSameDestinationAllowed": target.getConfiguration().isReplyToSameDestinationAllowed(); return true;
        case "replytotype":
        case "replyToType": target.getConfiguration().getReplyToType(); return true;
        case "requesttimeout":
        case "requestTimeout": target.getConfiguration().getRequestTimeout(); return true;
        case "requesttimeoutcheckerinterval":
        case "requestTimeoutCheckerInterval": target.getConfiguration().getRequestTimeoutCheckerInterval(); return true;
        case "selector": target.getConfiguration().getSelector(); return true;
        case "streammessagetypeenabled":
        case "streamMessageTypeEnabled": target.getConfiguration().isStreamMessageTypeEnabled(); return true;
        case "subscriptiondurable":
        case "subscriptionDurable": target.getConfiguration().isSubscriptionDurable(); return true;
        case "subscriptionname":
        case "subscriptionName": target.getConfiguration().getSubscriptionName(); return true;
        case "subscriptionshared":
        case "subscriptionShared": target.getConfiguration().isSubscriptionShared(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "taskexecutor":
        case "taskExecutor": target.getConfiguration().getTaskExecutor(); return true;
        case "testconnectiononstartup":
        case "testConnectionOnStartup": target.getConfiguration().isTestConnectionOnStartup(); return true;
        case "timetolive":
        case "timeToLive": target.getConfiguration().getTimeToLive(); return true;
        case "transacted": target.getConfiguration().isTransacted(); return true;
        case "transactionmanager":
        case "transactionManager": target.getConfiguration().getTransactionManager(); return true;
        case "transactionname":
        case "transactionName": target.getConfiguration().getTransactionName(); return true;
        case "transactiontimeout":
        case "transactionTimeout": target.getConfiguration().getTransactionTimeout(); return true;
        case "transferexception":
        case "transferException": target.getConfiguration().isTransferException(); return true;
        case "transferexchange":
        case "transferExchange": target.getConfiguration().isTransferExchange(); return true;
        case "usemessageidascorrelationid":
        case "useMessageIDAsCorrelationID": target.getConfiguration().isUseMessageIDAsCorrelationID(); return true;
        case "username": target.getConfiguration().getUsername(); return true;
        case "waitforprovisioncorrelationtobeupdatedcounter":
        case "waitForProvisionCorrelationToBeUpdatedCounter": target.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedCounter(); return true;
        case "waitforprovisioncorrelationtobeupdatedthreadsleepingtime":
        case "waitForProvisionCorrelationToBeUpdatedThreadSleepingTime": target.getConfiguration().getWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime(); return true;
        default: return null;
        }
    }
}

