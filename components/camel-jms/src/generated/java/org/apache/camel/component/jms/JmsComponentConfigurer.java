/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jms;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JmsComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.jms.JmsConfiguration getOrCreateConfiguration(JmsComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.jms.JmsConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        JmsComponent target = (JmsComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acceptmessageswhilestopping":
        case "acceptMessagesWhileStopping": getOrCreateConfiguration(target).setAcceptMessagesWhileStopping(property(camelContext, boolean.class, value)); return true;
        case "acknowledgementmodename":
        case "acknowledgementModeName": getOrCreateConfiguration(target).setAcknowledgementModeName(property(camelContext, java.lang.String.class, value)); return true;
        case "allowadditionalheaders":
        case "allowAdditionalHeaders": getOrCreateConfiguration(target).setAllowAdditionalHeaders(property(camelContext, java.lang.String.class, value)); return true;
        case "allowautowiredconnectionfactory":
        case "allowAutoWiredConnectionFactory": target.setAllowAutoWiredConnectionFactory(property(camelContext, boolean.class, value)); return true;
        case "allowautowireddestinationresolver":
        case "allowAutoWiredDestinationResolver": target.setAllowAutoWiredDestinationResolver(property(camelContext, boolean.class, value)); return true;
        case "allownullbody":
        case "allowNullBody": getOrCreateConfiguration(target).setAllowNullBody(property(camelContext, boolean.class, value)); return true;
        case "allowreplymanagerquickstop":
        case "allowReplyManagerQuickStop": getOrCreateConfiguration(target).setAllowReplyManagerQuickStop(property(camelContext, boolean.class, value)); return true;
        case "allowserializedheaders":
        case "allowSerializedHeaders": getOrCreateConfiguration(target).setAllowSerializedHeaders(property(camelContext, boolean.class, value)); return true;
        case "alwayscopymessage":
        case "alwaysCopyMessage": getOrCreateConfiguration(target).setAlwaysCopyMessage(property(camelContext, boolean.class, value)); return true;
        case "artemisstreamingenabled":
        case "artemisStreamingEnabled": getOrCreateConfiguration(target).setArtemisStreamingEnabled(property(camelContext, boolean.class, value)); return true;
        case "asyncconsumer":
        case "asyncConsumer": getOrCreateConfiguration(target).setAsyncConsumer(property(camelContext, boolean.class, value)); return true;
        case "asyncstartlistener":
        case "asyncStartListener": getOrCreateConfiguration(target).setAsyncStartListener(property(camelContext, boolean.class, value)); return true;
        case "asyncstoplistener":
        case "asyncStopListener": getOrCreateConfiguration(target).setAsyncStopListener(property(camelContext, boolean.class, value)); return true;
        case "autostartup":
        case "autoStartup": getOrCreateConfiguration(target).setAutoStartup(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "cachelevel":
        case "cacheLevel": getOrCreateConfiguration(target).setCacheLevel(property(camelContext, int.class, value)); return true;
        case "cachelevelname":
        case "cacheLevelName": getOrCreateConfiguration(target).setCacheLevelName(property(camelContext, java.lang.String.class, value)); return true;
        case "clientid":
        case "clientId": getOrCreateConfiguration(target).setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": getOrCreateConfiguration(target).setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.jms.JmsConfiguration.class, value)); return true;
        case "connectionfactory":
        case "connectionFactory": getOrCreateConfiguration(target).setConnectionFactory(property(camelContext, javax.jms.ConnectionFactory.class, value)); return true;
        case "consumertype":
        case "consumerType": getOrCreateConfiguration(target).setConsumerType(property(camelContext, org.apache.camel.component.jms.ConsumerType.class, value)); return true;
        case "correlationproperty":
        case "correlationProperty": getOrCreateConfiguration(target).setCorrelationProperty(property(camelContext, java.lang.String.class, value)); return true;
        case "defaulttaskexecutortype":
        case "defaultTaskExecutorType": getOrCreateConfiguration(target).setDefaultTaskExecutorType(property(camelContext, org.apache.camel.component.jms.DefaultTaskExecutorType.class, value)); return true;
        case "deliverydelay":
        case "deliveryDelay": getOrCreateConfiguration(target).setDeliveryDelay(property(camelContext, long.class, value)); return true;
        case "deliverymode":
        case "deliveryMode": getOrCreateConfiguration(target).setDeliveryMode(property(camelContext, java.lang.Integer.class, value)); return true;
        case "deliverypersistent":
        case "deliveryPersistent": getOrCreateConfiguration(target).setDeliveryPersistent(property(camelContext, boolean.class, value)); return true;
        case "destinationresolver":
        case "destinationResolver": getOrCreateConfiguration(target).setDestinationResolver(property(camelContext, org.springframework.jms.support.destination.DestinationResolver.class, value)); return true;
        case "disablereplyto":
        case "disableReplyTo": getOrCreateConfiguration(target).setDisableReplyTo(property(camelContext, boolean.class, value)); return true;
        case "disabletimetolive":
        case "disableTimeToLive": getOrCreateConfiguration(target).setDisableTimeToLive(property(camelContext, boolean.class, value)); return true;
        case "durablesubscriptionname":
        case "durableSubscriptionName": getOrCreateConfiguration(target).setDurableSubscriptionName(property(camelContext, java.lang.String.class, value)); return true;
        case "eagerloadingofproperties":
        case "eagerLoadingOfProperties": getOrCreateConfiguration(target).setEagerLoadingOfProperties(property(camelContext, boolean.class, value)); return true;
        case "eagerpoisonbody":
        case "eagerPoisonBody": getOrCreateConfiguration(target).setEagerPoisonBody(property(camelContext, java.lang.String.class, value)); return true;
        case "errorhandler":
        case "errorHandler": getOrCreateConfiguration(target).setErrorHandler(property(camelContext, org.springframework.util.ErrorHandler.class, value)); return true;
        case "errorhandlerlogstacktrace":
        case "errorHandlerLogStackTrace": getOrCreateConfiguration(target).setErrorHandlerLogStackTrace(property(camelContext, boolean.class, value)); return true;
        case "errorhandlerlogginglevel":
        case "errorHandlerLoggingLevel": getOrCreateConfiguration(target).setErrorHandlerLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "exceptionlistener":
        case "exceptionListener": getOrCreateConfiguration(target).setExceptionListener(property(camelContext, javax.jms.ExceptionListener.class, value)); return true;
        case "explicitqosenabled":
        case "explicitQosEnabled": getOrCreateConfiguration(target).setExplicitQosEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "exposelistenersession":
        case "exposeListenerSession": getOrCreateConfiguration(target).setExposeListenerSession(property(camelContext, boolean.class, value)); return true;
        case "forcesendoriginalmessage":
        case "forceSendOriginalMessage": getOrCreateConfiguration(target).setForceSendOriginalMessage(property(camelContext, boolean.class, value)); return true;
        case "formatdateheaderstoiso8601":
        case "formatDateHeadersToIso8601": getOrCreateConfiguration(target).setFormatDateHeadersToIso8601(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "idleconsumerlimit":
        case "idleConsumerLimit": getOrCreateConfiguration(target).setIdleConsumerLimit(property(camelContext, int.class, value)); return true;
        case "idletaskexecutionlimit":
        case "idleTaskExecutionLimit": getOrCreateConfiguration(target).setIdleTaskExecutionLimit(property(camelContext, int.class, value)); return true;
        case "includealljmsxproperties":
        case "includeAllJMSXProperties": getOrCreateConfiguration(target).setIncludeAllJMSXProperties(property(camelContext, boolean.class, value)); return true;
        case "includesentjmsmessageid":
        case "includeSentJMSMessageID": getOrCreateConfiguration(target).setIncludeSentJMSMessageID(property(camelContext, boolean.class, value)); return true;
        case "jmskeyformatstrategy":
        case "jmsKeyFormatStrategy": getOrCreateConfiguration(target).setJmsKeyFormatStrategy(property(camelContext, org.apache.camel.component.jms.JmsKeyFormatStrategy.class, value)); return true;
        case "jmsmessagetype":
        case "jmsMessageType": getOrCreateConfiguration(target).setJmsMessageType(property(camelContext, org.apache.camel.component.jms.JmsMessageType.class, value)); return true;
        case "lazycreatetransactionmanager":
        case "lazyCreateTransactionManager": getOrCreateConfiguration(target).setLazyCreateTransactionManager(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "mapjmsmessage":
        case "mapJmsMessage": getOrCreateConfiguration(target).setMapJmsMessage(property(camelContext, boolean.class, value)); return true;
        case "maxconcurrentconsumers":
        case "maxConcurrentConsumers": getOrCreateConfiguration(target).setMaxConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "maxmessagespertask":
        case "maxMessagesPerTask": getOrCreateConfiguration(target).setMaxMessagesPerTask(property(camelContext, int.class, value)); return true;
        case "messageconverter":
        case "messageConverter": getOrCreateConfiguration(target).setMessageConverter(property(camelContext, org.springframework.jms.support.converter.MessageConverter.class, value)); return true;
        case "messagecreatedstrategy":
        case "messageCreatedStrategy": getOrCreateConfiguration(target).setMessageCreatedStrategy(property(camelContext, org.apache.camel.component.jms.MessageCreatedStrategy.class, value)); return true;
        case "messageidenabled":
        case "messageIdEnabled": getOrCreateConfiguration(target).setMessageIdEnabled(property(camelContext, boolean.class, value)); return true;
        case "messagelistenercontainerfactory":
        case "messageListenerContainerFactory": getOrCreateConfiguration(target).setMessageListenerContainerFactory(property(camelContext, org.apache.camel.component.jms.MessageListenerContainerFactory.class, value)); return true;
        case "messagetimestampenabled":
        case "messageTimestampEnabled": getOrCreateConfiguration(target).setMessageTimestampEnabled(property(camelContext, boolean.class, value)); return true;
        case "password": getOrCreateConfiguration(target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "preservemessageqos":
        case "preserveMessageQos": getOrCreateConfiguration(target).setPreserveMessageQos(property(camelContext, boolean.class, value)); return true;
        case "priority": getOrCreateConfiguration(target).setPriority(property(camelContext, int.class, value)); return true;
        case "pubsubnolocal":
        case "pubSubNoLocal": getOrCreateConfiguration(target).setPubSubNoLocal(property(camelContext, boolean.class, value)); return true;
        case "queuebrowsestrategy":
        case "queueBrowseStrategy": target.setQueueBrowseStrategy(property(camelContext, org.apache.camel.component.jms.QueueBrowseStrategy.class, value)); return true;
        case "receivetimeout":
        case "receiveTimeout": getOrCreateConfiguration(target).setReceiveTimeout(property(camelContext, long.class, value)); return true;
        case "recoveryinterval":
        case "recoveryInterval": getOrCreateConfiguration(target).setRecoveryInterval(property(camelContext, long.class, value)); return true;
        case "replyto":
        case "replyTo": getOrCreateConfiguration(target).setReplyTo(property(camelContext, java.lang.String.class, value)); return true;
        case "replytocachelevelname":
        case "replyToCacheLevelName": getOrCreateConfiguration(target).setReplyToCacheLevelName(property(camelContext, java.lang.String.class, value)); return true;
        case "replytoconcurrentconsumers":
        case "replyToConcurrentConsumers": getOrCreateConfiguration(target).setReplyToConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "replytodeliverypersistent":
        case "replyToDeliveryPersistent": getOrCreateConfiguration(target).setReplyToDeliveryPersistent(property(camelContext, boolean.class, value)); return true;
        case "replytodestinationselectorname":
        case "replyToDestinationSelectorName": getOrCreateConfiguration(target).setReplyToDestinationSelectorName(property(camelContext, java.lang.String.class, value)); return true;
        case "replytomaxconcurrentconsumers":
        case "replyToMaxConcurrentConsumers": getOrCreateConfiguration(target).setReplyToMaxConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "replytoontimeoutmaxconcurrentconsumers":
        case "replyToOnTimeoutMaxConcurrentConsumers": getOrCreateConfiguration(target).setReplyToOnTimeoutMaxConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "replytooverride":
        case "replyToOverride": getOrCreateConfiguration(target).setReplyToOverride(property(camelContext, java.lang.String.class, value)); return true;
        case "replytosamedestinationallowed":
        case "replyToSameDestinationAllowed": getOrCreateConfiguration(target).setReplyToSameDestinationAllowed(property(camelContext, boolean.class, value)); return true;
        case "replytotype":
        case "replyToType": getOrCreateConfiguration(target).setReplyToType(property(camelContext, org.apache.camel.component.jms.ReplyToType.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": getOrCreateConfiguration(target).setRequestTimeout(property(camelContext, long.class, value)); return true;
        case "requesttimeoutcheckerinterval":
        case "requestTimeoutCheckerInterval": getOrCreateConfiguration(target).setRequestTimeoutCheckerInterval(property(camelContext, long.class, value)); return true;
        case "selector": getOrCreateConfiguration(target).setSelector(property(camelContext, java.lang.String.class, value)); return true;
        case "streammessagetypeenabled":
        case "streamMessageTypeEnabled": getOrCreateConfiguration(target).setStreamMessageTypeEnabled(property(camelContext, boolean.class, value)); return true;
        case "subscriptiondurable":
        case "subscriptionDurable": getOrCreateConfiguration(target).setSubscriptionDurable(property(camelContext, boolean.class, value)); return true;
        case "subscriptionname":
        case "subscriptionName": getOrCreateConfiguration(target).setSubscriptionName(property(camelContext, java.lang.String.class, value)); return true;
        case "subscriptionshared":
        case "subscriptionShared": getOrCreateConfiguration(target).setSubscriptionShared(property(camelContext, boolean.class, value)); return true;
        case "taskexecutor":
        case "taskExecutor": getOrCreateConfiguration(target).setTaskExecutor(property(camelContext, org.springframework.core.task.TaskExecutor.class, value)); return true;
        case "testconnectiononstartup":
        case "testConnectionOnStartup": getOrCreateConfiguration(target).setTestConnectionOnStartup(property(camelContext, boolean.class, value)); return true;
        case "timetolive":
        case "timeToLive": getOrCreateConfiguration(target).setTimeToLive(property(camelContext, long.class, value)); return true;
        case "transacted": getOrCreateConfiguration(target).setTransacted(property(camelContext, boolean.class, value)); return true;
        case "transactionmanager":
        case "transactionManager": getOrCreateConfiguration(target).setTransactionManager(property(camelContext, org.springframework.transaction.PlatformTransactionManager.class, value)); return true;
        case "transactionname":
        case "transactionName": getOrCreateConfiguration(target).setTransactionName(property(camelContext, java.lang.String.class, value)); return true;
        case "transactiontimeout":
        case "transactionTimeout": getOrCreateConfiguration(target).setTransactionTimeout(property(camelContext, int.class, value)); return true;
        case "transferexception":
        case "transferException": getOrCreateConfiguration(target).setTransferException(property(camelContext, boolean.class, value)); return true;
        case "transferexchange":
        case "transferExchange": getOrCreateConfiguration(target).setTransferExchange(property(camelContext, boolean.class, value)); return true;
        case "usemessageidascorrelationid":
        case "useMessageIDAsCorrelationID": getOrCreateConfiguration(target).setUseMessageIDAsCorrelationID(property(camelContext, boolean.class, value)); return true;
        case "username": getOrCreateConfiguration(target).setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "waitforprovisioncorrelationtobeupdatedcounter":
        case "waitForProvisionCorrelationToBeUpdatedCounter": getOrCreateConfiguration(target).setWaitForProvisionCorrelationToBeUpdatedCounter(property(camelContext, int.class, value)); return true;
        case "waitforprovisioncorrelationtobeupdatedthreadsleepingtime":
        case "waitForProvisionCorrelationToBeUpdatedThreadSleepingTime": getOrCreateConfiguration(target).setWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime(property(camelContext, long.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("acceptMessagesWhileStopping", boolean.class);
        answer.put("acknowledgementModeName", java.lang.String.class);
        answer.put("allowAdditionalHeaders", java.lang.String.class);
        answer.put("allowAutoWiredConnectionFactory", boolean.class);
        answer.put("allowAutoWiredDestinationResolver", boolean.class);
        answer.put("allowNullBody", boolean.class);
        answer.put("allowReplyManagerQuickStop", boolean.class);
        answer.put("allowSerializedHeaders", boolean.class);
        answer.put("alwaysCopyMessage", boolean.class);
        answer.put("artemisStreamingEnabled", boolean.class);
        answer.put("asyncConsumer", boolean.class);
        answer.put("asyncStartListener", boolean.class);
        answer.put("asyncStopListener", boolean.class);
        answer.put("autoStartup", boolean.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("cacheLevel", int.class);
        answer.put("cacheLevelName", java.lang.String.class);
        answer.put("clientId", java.lang.String.class);
        answer.put("concurrentConsumers", int.class);
        answer.put("configuration", org.apache.camel.component.jms.JmsConfiguration.class);
        answer.put("connectionFactory", javax.jms.ConnectionFactory.class);
        answer.put("consumerType", org.apache.camel.component.jms.ConsumerType.class);
        answer.put("correlationProperty", java.lang.String.class);
        answer.put("defaultTaskExecutorType", org.apache.camel.component.jms.DefaultTaskExecutorType.class);
        answer.put("deliveryDelay", long.class);
        answer.put("deliveryMode", java.lang.Integer.class);
        answer.put("deliveryPersistent", boolean.class);
        answer.put("destinationResolver", org.springframework.jms.support.destination.DestinationResolver.class);
        answer.put("disableReplyTo", boolean.class);
        answer.put("disableTimeToLive", boolean.class);
        answer.put("durableSubscriptionName", java.lang.String.class);
        answer.put("eagerLoadingOfProperties", boolean.class);
        answer.put("eagerPoisonBody", java.lang.String.class);
        answer.put("errorHandler", org.springframework.util.ErrorHandler.class);
        answer.put("errorHandlerLogStackTrace", boolean.class);
        answer.put("errorHandlerLoggingLevel", org.apache.camel.LoggingLevel.class);
        answer.put("exceptionListener", javax.jms.ExceptionListener.class);
        answer.put("explicitQosEnabled", java.lang.Boolean.class);
        answer.put("exposeListenerSession", boolean.class);
        answer.put("forceSendOriginalMessage", boolean.class);
        answer.put("formatDateHeadersToIso8601", boolean.class);
        answer.put("headerFilterStrategy", org.apache.camel.spi.HeaderFilterStrategy.class);
        answer.put("idleConsumerLimit", int.class);
        answer.put("idleTaskExecutionLimit", int.class);
        answer.put("includeAllJMSXProperties", boolean.class);
        answer.put("includeSentJMSMessageID", boolean.class);
        answer.put("jmsKeyFormatStrategy", org.apache.camel.component.jms.JmsKeyFormatStrategy.class);
        answer.put("jmsMessageType", org.apache.camel.component.jms.JmsMessageType.class);
        answer.put("lazyCreateTransactionManager", boolean.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("mapJmsMessage", boolean.class);
        answer.put("maxConcurrentConsumers", int.class);
        answer.put("maxMessagesPerTask", int.class);
        answer.put("messageConverter", org.springframework.jms.support.converter.MessageConverter.class);
        answer.put("messageCreatedStrategy", org.apache.camel.component.jms.MessageCreatedStrategy.class);
        answer.put("messageIdEnabled", boolean.class);
        answer.put("messageListenerContainerFactory", org.apache.camel.component.jms.MessageListenerContainerFactory.class);
        answer.put("messageTimestampEnabled", boolean.class);
        answer.put("password", java.lang.String.class);
        answer.put("preserveMessageQos", boolean.class);
        answer.put("priority", int.class);
        answer.put("pubSubNoLocal", boolean.class);
        answer.put("queueBrowseStrategy", org.apache.camel.component.jms.QueueBrowseStrategy.class);
        answer.put("receiveTimeout", long.class);
        answer.put("recoveryInterval", long.class);
        answer.put("replyTo", java.lang.String.class);
        answer.put("replyToCacheLevelName", java.lang.String.class);
        answer.put("replyToConcurrentConsumers", int.class);
        answer.put("replyToDeliveryPersistent", boolean.class);
        answer.put("replyToDestinationSelectorName", java.lang.String.class);
        answer.put("replyToMaxConcurrentConsumers", int.class);
        answer.put("replyToOnTimeoutMaxConcurrentConsumers", int.class);
        answer.put("replyToOverride", java.lang.String.class);
        answer.put("replyToSameDestinationAllowed", boolean.class);
        answer.put("replyToType", org.apache.camel.component.jms.ReplyToType.class);
        answer.put("requestTimeout", long.class);
        answer.put("requestTimeoutCheckerInterval", long.class);
        answer.put("selector", java.lang.String.class);
        answer.put("streamMessageTypeEnabled", boolean.class);
        answer.put("subscriptionDurable", boolean.class);
        answer.put("subscriptionName", java.lang.String.class);
        answer.put("subscriptionShared", boolean.class);
        answer.put("taskExecutor", org.springframework.core.task.TaskExecutor.class);
        answer.put("testConnectionOnStartup", boolean.class);
        answer.put("timeToLive", long.class);
        answer.put("transacted", boolean.class);
        answer.put("transactionManager", org.springframework.transaction.PlatformTransactionManager.class);
        answer.put("transactionName", java.lang.String.class);
        answer.put("transactionTimeout", int.class);
        answer.put("transferException", boolean.class);
        answer.put("transferExchange", boolean.class);
        answer.put("useMessageIDAsCorrelationID", boolean.class);
        answer.put("username", java.lang.String.class);
        answer.put("waitForProvisionCorrelationToBeUpdatedCounter", int.class);
        answer.put("waitForProvisionCorrelationToBeUpdatedThreadSleepingTime", long.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        JmsComponent target = (JmsComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acceptmessageswhilestopping":
        case "acceptMessagesWhileStopping": getOrCreateConfiguration(target).isAcceptMessagesWhileStopping(); return true;
        case "acknowledgementmodename":
        case "acknowledgementModeName": getOrCreateConfiguration(target).getAcknowledgementModeName(); return true;
        case "allowadditionalheaders":
        case "allowAdditionalHeaders": getOrCreateConfiguration(target).getAllowAdditionalHeaders(); return true;
        case "allowautowiredconnectionfactory":
        case "allowAutoWiredConnectionFactory": target.isAllowAutoWiredConnectionFactory(); return true;
        case "allowautowireddestinationresolver":
        case "allowAutoWiredDestinationResolver": target.isAllowAutoWiredDestinationResolver(); return true;
        case "allownullbody":
        case "allowNullBody": getOrCreateConfiguration(target).isAllowNullBody(); return true;
        case "allowreplymanagerquickstop":
        case "allowReplyManagerQuickStop": getOrCreateConfiguration(target).isAllowReplyManagerQuickStop(); return true;
        case "allowserializedheaders":
        case "allowSerializedHeaders": getOrCreateConfiguration(target).isAllowSerializedHeaders(); return true;
        case "alwayscopymessage":
        case "alwaysCopyMessage": getOrCreateConfiguration(target).isAlwaysCopyMessage(); return true;
        case "artemisstreamingenabled":
        case "artemisStreamingEnabled": getOrCreateConfiguration(target).isArtemisStreamingEnabled(); return true;
        case "asyncconsumer":
        case "asyncConsumer": getOrCreateConfiguration(target).isAsyncConsumer(); return true;
        case "asyncstartlistener":
        case "asyncStartListener": getOrCreateConfiguration(target).isAsyncStartListener(); return true;
        case "asyncstoplistener":
        case "asyncStopListener": getOrCreateConfiguration(target).isAsyncStopListener(); return true;
        case "autostartup":
        case "autoStartup": getOrCreateConfiguration(target).isAutoStartup(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "cachelevel":
        case "cacheLevel": getOrCreateConfiguration(target).getCacheLevel(); return true;
        case "cachelevelname":
        case "cacheLevelName": getOrCreateConfiguration(target).getCacheLevelName(); return true;
        case "clientid":
        case "clientId": getOrCreateConfiguration(target).getClientId(); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": getOrCreateConfiguration(target).getConcurrentConsumers(); return true;
        case "configuration": target.getConfiguration(); return true;
        case "connectionfactory":
        case "connectionFactory": getOrCreateConfiguration(target).getConnectionFactory(); return true;
        case "consumertype":
        case "consumerType": getOrCreateConfiguration(target).getConsumerType(); return true;
        case "correlationproperty":
        case "correlationProperty": getOrCreateConfiguration(target).getCorrelationProperty(); return true;
        case "defaulttaskexecutortype":
        case "defaultTaskExecutorType": getOrCreateConfiguration(target).getDefaultTaskExecutorType(); return true;
        case "deliverydelay":
        case "deliveryDelay": getOrCreateConfiguration(target).getDeliveryDelay(); return true;
        case "deliverymode":
        case "deliveryMode": getOrCreateConfiguration(target).getDeliveryMode(); return true;
        case "deliverypersistent":
        case "deliveryPersistent": getOrCreateConfiguration(target).isDeliveryPersistent(); return true;
        case "destinationresolver":
        case "destinationResolver": getOrCreateConfiguration(target).getDestinationResolver(); return true;
        case "disablereplyto":
        case "disableReplyTo": getOrCreateConfiguration(target).isDisableReplyTo(); return true;
        case "disabletimetolive":
        case "disableTimeToLive": getOrCreateConfiguration(target).isDisableTimeToLive(); return true;
        case "durablesubscriptionname":
        case "durableSubscriptionName": getOrCreateConfiguration(target).getDurableSubscriptionName(); return true;
        case "eagerloadingofproperties":
        case "eagerLoadingOfProperties": getOrCreateConfiguration(target).isEagerLoadingOfProperties(); return true;
        case "eagerpoisonbody":
        case "eagerPoisonBody": getOrCreateConfiguration(target).getEagerPoisonBody(); return true;
        case "errorhandler":
        case "errorHandler": getOrCreateConfiguration(target).getErrorHandler(); return true;
        case "errorhandlerlogstacktrace":
        case "errorHandlerLogStackTrace": getOrCreateConfiguration(target).isErrorHandlerLogStackTrace(); return true;
        case "errorhandlerlogginglevel":
        case "errorHandlerLoggingLevel": getOrCreateConfiguration(target).getErrorHandlerLoggingLevel(); return true;
        case "exceptionlistener":
        case "exceptionListener": getOrCreateConfiguration(target).getExceptionListener(); return true;
        case "explicitqosenabled":
        case "explicitQosEnabled": getOrCreateConfiguration(target).getExplicitQosEnabled(); return true;
        case "exposelistenersession":
        case "exposeListenerSession": getOrCreateConfiguration(target).isExposeListenerSession(); return true;
        case "forcesendoriginalmessage":
        case "forceSendOriginalMessage": getOrCreateConfiguration(target).isForceSendOriginalMessage(); return true;
        case "formatdateheaderstoiso8601":
        case "formatDateHeadersToIso8601": getOrCreateConfiguration(target).isFormatDateHeadersToIso8601(); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.getHeaderFilterStrategy(); return true;
        case "idleconsumerlimit":
        case "idleConsumerLimit": getOrCreateConfiguration(target).getIdleConsumerLimit(); return true;
        case "idletaskexecutionlimit":
        case "idleTaskExecutionLimit": getOrCreateConfiguration(target).getIdleTaskExecutionLimit(); return true;
        case "includealljmsxproperties":
        case "includeAllJMSXProperties": getOrCreateConfiguration(target).isIncludeAllJMSXProperties(); return true;
        case "includesentjmsmessageid":
        case "includeSentJMSMessageID": getOrCreateConfiguration(target).isIncludeSentJMSMessageID(); return true;
        case "jmskeyformatstrategy":
        case "jmsKeyFormatStrategy": getOrCreateConfiguration(target).getJmsKeyFormatStrategy(); return true;
        case "jmsmessagetype":
        case "jmsMessageType": getOrCreateConfiguration(target).getJmsMessageType(); return true;
        case "lazycreatetransactionmanager":
        case "lazyCreateTransactionManager": getOrCreateConfiguration(target).isLazyCreateTransactionManager(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "mapjmsmessage":
        case "mapJmsMessage": getOrCreateConfiguration(target).isMapJmsMessage(); return true;
        case "maxconcurrentconsumers":
        case "maxConcurrentConsumers": getOrCreateConfiguration(target).getMaxConcurrentConsumers(); return true;
        case "maxmessagespertask":
        case "maxMessagesPerTask": getOrCreateConfiguration(target).getMaxMessagesPerTask(); return true;
        case "messageconverter":
        case "messageConverter": getOrCreateConfiguration(target).getMessageConverter(); return true;
        case "messagecreatedstrategy":
        case "messageCreatedStrategy": getOrCreateConfiguration(target).getMessageCreatedStrategy(); return true;
        case "messageidenabled":
        case "messageIdEnabled": getOrCreateConfiguration(target).isMessageIdEnabled(); return true;
        case "messagelistenercontainerfactory":
        case "messageListenerContainerFactory": getOrCreateConfiguration(target).getMessageListenerContainerFactory(); return true;
        case "messagetimestampenabled":
        case "messageTimestampEnabled": getOrCreateConfiguration(target).isMessageTimestampEnabled(); return true;
        case "password": getOrCreateConfiguration(target).getPassword(); return true;
        case "preservemessageqos":
        case "preserveMessageQos": getOrCreateConfiguration(target).isPreserveMessageQos(); return true;
        case "priority": getOrCreateConfiguration(target).getPriority(); return true;
        case "pubsubnolocal":
        case "pubSubNoLocal": getOrCreateConfiguration(target).isPubSubNoLocal(); return true;
        case "queuebrowsestrategy":
        case "queueBrowseStrategy": target.getQueueBrowseStrategy(); return true;
        case "receivetimeout":
        case "receiveTimeout": getOrCreateConfiguration(target).getReceiveTimeout(); return true;
        case "recoveryinterval":
        case "recoveryInterval": getOrCreateConfiguration(target).getRecoveryInterval(); return true;
        case "replyto":
        case "replyTo": getOrCreateConfiguration(target).getReplyTo(); return true;
        case "replytocachelevelname":
        case "replyToCacheLevelName": getOrCreateConfiguration(target).getReplyToCacheLevelName(); return true;
        case "replytoconcurrentconsumers":
        case "replyToConcurrentConsumers": getOrCreateConfiguration(target).getReplyToConcurrentConsumers(); return true;
        case "replytodeliverypersistent":
        case "replyToDeliveryPersistent": getOrCreateConfiguration(target).isReplyToDeliveryPersistent(); return true;
        case "replytodestinationselectorname":
        case "replyToDestinationSelectorName": getOrCreateConfiguration(target).getReplyToDestinationSelectorName(); return true;
        case "replytomaxconcurrentconsumers":
        case "replyToMaxConcurrentConsumers": getOrCreateConfiguration(target).getReplyToMaxConcurrentConsumers(); return true;
        case "replytoontimeoutmaxconcurrentconsumers":
        case "replyToOnTimeoutMaxConcurrentConsumers": getOrCreateConfiguration(target).getReplyToOnTimeoutMaxConcurrentConsumers(); return true;
        case "replytooverride":
        case "replyToOverride": getOrCreateConfiguration(target).getReplyToOverride(); return true;
        case "replytosamedestinationallowed":
        case "replyToSameDestinationAllowed": getOrCreateConfiguration(target).isReplyToSameDestinationAllowed(); return true;
        case "replytotype":
        case "replyToType": getOrCreateConfiguration(target).getReplyToType(); return true;
        case "requesttimeout":
        case "requestTimeout": getOrCreateConfiguration(target).getRequestTimeout(); return true;
        case "requesttimeoutcheckerinterval":
        case "requestTimeoutCheckerInterval": getOrCreateConfiguration(target).getRequestTimeoutCheckerInterval(); return true;
        case "selector": getOrCreateConfiguration(target).getSelector(); return true;
        case "streammessagetypeenabled":
        case "streamMessageTypeEnabled": getOrCreateConfiguration(target).isStreamMessageTypeEnabled(); return true;
        case "subscriptiondurable":
        case "subscriptionDurable": getOrCreateConfiguration(target).isSubscriptionDurable(); return true;
        case "subscriptionname":
        case "subscriptionName": getOrCreateConfiguration(target).getSubscriptionName(); return true;
        case "subscriptionshared":
        case "subscriptionShared": getOrCreateConfiguration(target).isSubscriptionShared(); return true;
        case "taskexecutor":
        case "taskExecutor": getOrCreateConfiguration(target).getTaskExecutor(); return true;
        case "testconnectiononstartup":
        case "testConnectionOnStartup": getOrCreateConfiguration(target).isTestConnectionOnStartup(); return true;
        case "timetolive":
        case "timeToLive": getOrCreateConfiguration(target).getTimeToLive(); return true;
        case "transacted": getOrCreateConfiguration(target).isTransacted(); return true;
        case "transactionmanager":
        case "transactionManager": getOrCreateConfiguration(target).getTransactionManager(); return true;
        case "transactionname":
        case "transactionName": getOrCreateConfiguration(target).getTransactionName(); return true;
        case "transactiontimeout":
        case "transactionTimeout": getOrCreateConfiguration(target).getTransactionTimeout(); return true;
        case "transferexception":
        case "transferException": getOrCreateConfiguration(target).isTransferException(); return true;
        case "transferexchange":
        case "transferExchange": getOrCreateConfiguration(target).isTransferExchange(); return true;
        case "usemessageidascorrelationid":
        case "useMessageIDAsCorrelationID": getOrCreateConfiguration(target).isUseMessageIDAsCorrelationID(); return true;
        case "username": getOrCreateConfiguration(target).getUsername(); return true;
        case "waitforprovisioncorrelationtobeupdatedcounter":
        case "waitForProvisionCorrelationToBeUpdatedCounter": getOrCreateConfiguration(target).getWaitForProvisionCorrelationToBeUpdatedCounter(); return true;
        case "waitforprovisioncorrelationtobeupdatedthreadsleepingtime":
        case "waitForProvisionCorrelationToBeUpdatedThreadSleepingTime": getOrCreateConfiguration(target).getWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime(); return true;
        default: return null;
        }
    }
}

