/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.facebook;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class FacebookEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        FacebookEndpoint target = (FacebookEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "achievementurl":
        case "achievementURL": target.getConfiguration().setAchievementURL(property(camelContext, java.net.URL.class, value)); return true;
        case "albumid":
        case "albumId": target.getConfiguration().setAlbumId(property(camelContext, java.lang.String.class, value)); return true;
        case "albumupdate":
        case "albumUpdate": target.getConfiguration().setAlbumUpdate(property(camelContext, facebook4j.AlbumUpdate.class, value)); return true;
        case "appid":
        case "appId": target.getConfiguration().setAppId(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "center": target.getConfiguration().setCenter(property(camelContext, facebook4j.GeoLocation.class, value)); return true;
        case "checkinid":
        case "checkinId": target.getConfiguration().setCheckinId(property(camelContext, java.lang.String.class, value)); return true;
        case "checkinupdate":
        case "checkinUpdate": target.getConfiguration().setCheckinUpdate(property(camelContext, facebook4j.CheckinUpdate.class, value)); return true;
        case "clienturl":
        case "clientURL": target.getConfiguration().setClientURL(property(camelContext, java.lang.String.class, value)); return true;
        case "clientversion":
        case "clientVersion": target.getConfiguration().setClientVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "commentid":
        case "commentId": target.getConfiguration().setCommentId(property(camelContext, java.lang.String.class, value)); return true;
        case "commentupdate":
        case "commentUpdate": target.getConfiguration().setCommentUpdate(property(camelContext, facebook4j.CommentUpdate.class, value)); return true;
        case "debugenabled":
        case "debugEnabled": target.getConfiguration().setDebugEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "description": target.getConfiguration().setDescription(property(camelContext, java.lang.String.class, value)); return true;
        case "distance": target.getConfiguration().setDistance(property(camelContext, java.lang.Integer.class, value)); return true;
        case "domainid":
        case "domainId": target.getConfiguration().setDomainId(property(camelContext, java.lang.String.class, value)); return true;
        case "domainname":
        case "domainName": target.getConfiguration().setDomainName(property(camelContext, java.lang.String.class, value)); return true;
        case "domainnames":
        case "domainNames": target.getConfiguration().setDomainNames(property(camelContext, java.util.List.class, value)); return true;
        case "eventid":
        case "eventId": target.getConfiguration().setEventId(property(camelContext, java.lang.String.class, value)); return true;
        case "eventupdate":
        case "eventUpdate": target.getConfiguration().setEventUpdate(property(camelContext, facebook4j.EventUpdate.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "friendid":
        case "friendId": target.getConfiguration().setFriendId(property(camelContext, java.lang.String.class, value)); return true;
        case "frienduserid":
        case "friendUserId": target.getConfiguration().setFriendUserId(property(camelContext, java.lang.String.class, value)); return true;
        case "friendlistid":
        case "friendlistId": target.getConfiguration().setFriendlistId(property(camelContext, java.lang.String.class, value)); return true;
        case "friendlistname":
        case "friendlistName": target.getConfiguration().setFriendlistName(property(camelContext, java.lang.String.class, value)); return true;
        case "groupid":
        case "groupId": target.getConfiguration().setGroupId(property(camelContext, java.lang.String.class, value)); return true;
        case "gzipenabled":
        case "gzipEnabled": target.getConfiguration().setGzipEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "httpconnectiontimeout":
        case "httpConnectionTimeout": target.getConfiguration().setHttpConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpdefaultmaxperroute":
        case "httpDefaultMaxPerRoute": target.getConfiguration().setHttpDefaultMaxPerRoute(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpmaxtotalconnections":
        case "httpMaxTotalConnections": target.getConfiguration().setHttpMaxTotalConnections(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpproxyhost":
        case "httpProxyHost": target.getConfiguration().setHttpProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxypassword":
        case "httpProxyPassword": target.getConfiguration().setHttpProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxyport":
        case "httpProxyPort": target.getConfiguration().setHttpProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpproxyuser":
        case "httpProxyUser": target.getConfiguration().setHttpProxyUser(property(camelContext, java.lang.String.class, value)); return true;
        case "httpreadtimeout":
        case "httpReadTimeout": target.getConfiguration().setHttpReadTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpretrycount":
        case "httpRetryCount": target.getConfiguration().setHttpRetryCount(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpretryintervalseconds":
        case "httpRetryIntervalSeconds": target.getConfiguration().setHttpRetryIntervalSeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpstreamingreadtimeout":
        case "httpStreamingReadTimeout": target.getConfiguration().setHttpStreamingReadTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "ids": target.getConfiguration().setIds(property(camelContext, java.util.List.class, value)); return true;
        case "inbody":
        case "inBody": target.setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "includeread":
        case "includeRead": target.getConfiguration().setIncludeRead(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "ishidden":
        case "isHidden": target.getConfiguration().setIsHidden(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "jsonstoreenabled":
        case "jsonStoreEnabled": target.getConfiguration().setJsonStoreEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "link": target.getConfiguration().setLink(property(camelContext, java.net.URL.class, value)); return true;
        case "linkid":
        case "linkId": target.getConfiguration().setLinkId(property(camelContext, java.lang.String.class, value)); return true;
        case "locale": target.getConfiguration().setLocale(property(camelContext, java.util.Locale.class, value)); return true;
        case "mbeanenabled":
        case "mbeanEnabled": target.getConfiguration().setMbeanEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "message": target.getConfiguration().setMessage(property(camelContext, java.lang.String.class, value)); return true;
        case "messageid":
        case "messageId": target.getConfiguration().setMessageId(property(camelContext, java.lang.String.class, value)); return true;
        case "metric": target.getConfiguration().setMetric(property(camelContext, java.lang.String.class, value)); return true;
        case "milestoneid":
        case "milestoneId": target.getConfiguration().setMilestoneId(property(camelContext, java.lang.String.class, value)); return true;
        case "name": target.getConfiguration().setName(property(camelContext, java.lang.String.class, value)); return true;
        case "noteid":
        case "noteId": target.getConfiguration().setNoteId(property(camelContext, java.lang.String.class, value)); return true;
        case "notificationid":
        case "notificationId": target.getConfiguration().setNotificationId(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthaccesstoken":
        case "oAuthAccessToken": target.getConfiguration().setOAuthAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthaccesstokenurl":
        case "oAuthAccessTokenURL": target.getConfiguration().setOAuthAccessTokenURL(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthappid":
        case "oAuthAppId": target.getConfiguration().setOAuthAppId(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthappsecret":
        case "oAuthAppSecret": target.getConfiguration().setOAuthAppSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthauthorizationurl":
        case "oAuthAuthorizationURL": target.getConfiguration().setOAuthAuthorizationURL(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthpermissions":
        case "oAuthPermissions": target.getConfiguration().setOAuthPermissions(property(camelContext, java.lang.String.class, value)); return true;
        case "objectid":
        case "objectId": target.getConfiguration().setObjectId(property(camelContext, java.lang.String.class, value)); return true;
        case "offerid":
        case "offerId": target.getConfiguration().setOfferId(property(camelContext, java.lang.String.class, value)); return true;
        case "optiondescription":
        case "optionDescription": target.getConfiguration().setOptionDescription(property(camelContext, java.lang.String.class, value)); return true;
        case "pageid":
        case "pageId": target.getConfiguration().setPageId(property(camelContext, java.lang.String.class, value)); return true;
        case "permissionname":
        case "permissionName": target.getConfiguration().setPermissionName(property(camelContext, java.lang.String.class, value)); return true;
        case "permissions": target.getConfiguration().setPermissions(property(camelContext, java.lang.String.class, value)); return true;
        case "photoid":
        case "photoId": target.getConfiguration().setPhotoId(property(camelContext, java.lang.String.class, value)); return true;
        case "pictureid":
        case "pictureId": target.getConfiguration().setPictureId(property(camelContext, java.lang.Integer.class, value)); return true;
        case "pictureid2":
        case "pictureId2": target.getConfiguration().setPictureId2(property(camelContext, java.lang.Integer.class, value)); return true;
        case "picturesize":
        case "pictureSize": target.getConfiguration().setPictureSize(property(camelContext, facebook4j.PictureSize.class, value)); return true;
        case "placeid":
        case "placeId": target.getConfiguration().setPlaceId(property(camelContext, java.lang.String.class, value)); return true;
        case "postid":
        case "postId": target.getConfiguration().setPostId(property(camelContext, java.lang.String.class, value)); return true;
        case "postupdate":
        case "postUpdate": target.getConfiguration().setPostUpdate(property(camelContext, facebook4j.PostUpdate.class, value)); return true;
        case "prettydebugenabled":
        case "prettyDebugEnabled": target.getConfiguration().setPrettyDebugEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "queries": target.getConfiguration().setQueries(property(camelContext, java.util.Map.class, value)); return true;
        case "query": target.getConfiguration().setQuery(property(camelContext, java.lang.String.class, value)); return true;
        case "questionid":
        case "questionId": target.getConfiguration().setQuestionId(property(camelContext, java.lang.String.class, value)); return true;
        case "reading": target.getConfiguration().setReading(property(camelContext, facebook4j.Reading.class, value)); return true;
        case "readingoptions":
        case "readingOptions": target.getConfiguration().setReadingOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "restbaseurl":
        case "restBaseURL": target.getConfiguration().setRestBaseURL(property(camelContext, java.lang.String.class, value)); return true;
        case "scorevalue":
        case "scoreValue": target.getConfiguration().setScoreValue(property(camelContext, java.lang.Integer.class, value)); return true;
        case "size": target.getConfiguration().setSize(property(camelContext, facebook4j.PictureSize.class, value)); return true;
        case "source": target.getConfiguration().setSource(property(camelContext, facebook4j.Media.class, value)); return true;
        case "subject": target.getConfiguration().setSubject(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "tabid":
        case "tabId": target.getConfiguration().setTabId(property(camelContext, java.lang.String.class, value)); return true;
        case "tagupdate":
        case "tagUpdate": target.getConfiguration().setTagUpdate(property(camelContext, facebook4j.TagUpdate.class, value)); return true;
        case "testuser1":
        case "testUser1": target.getConfiguration().setTestUser1(property(camelContext, facebook4j.TestUser.class, value)); return true;
        case "testuser2":
        case "testUser2": target.getConfiguration().setTestUser2(property(camelContext, facebook4j.TestUser.class, value)); return true;
        case "testuserid":
        case "testUserId": target.getConfiguration().setTestUserId(property(camelContext, java.lang.String.class, value)); return true;
        case "title": target.getConfiguration().setTitle(property(camelContext, java.lang.String.class, value)); return true;
        case "touserid":
        case "toUserId": target.getConfiguration().setToUserId(property(camelContext, java.lang.String.class, value)); return true;
        case "touserids":
        case "toUserIds": target.getConfiguration().setToUserIds(property(camelContext, java.util.List.class, value)); return true;
        case "usessl":
        case "useSSL": target.getConfiguration().setUseSSL(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "userid":
        case "userId": target.getConfiguration().setUserId(property(camelContext, java.lang.String.class, value)); return true;
        case "userid1":
        case "userId1": target.getConfiguration().setUserId1(property(camelContext, java.lang.String.class, value)); return true;
        case "userid2":
        case "userId2": target.getConfiguration().setUserId2(property(camelContext, java.lang.String.class, value)); return true;
        case "userids":
        case "userIds": target.getConfiguration().setUserIds(property(camelContext, java.util.List.class, value)); return true;
        case "userlocale":
        case "userLocale": target.getConfiguration().setUserLocale(property(camelContext, java.lang.String.class, value)); return true;
        case "videobaseurl":
        case "videoBaseURL": target.getConfiguration().setVideoBaseURL(property(camelContext, java.lang.String.class, value)); return true;
        case "videoid":
        case "videoId": target.getConfiguration().setVideoId(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("achievementURL", java.net.URL.class);
        answer.put("albumId", java.lang.String.class);
        answer.put("albumUpdate", facebook4j.AlbumUpdate.class);
        answer.put("appId", java.lang.String.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("center", facebook4j.GeoLocation.class);
        answer.put("checkinId", java.lang.String.class);
        answer.put("checkinUpdate", facebook4j.CheckinUpdate.class);
        answer.put("clientURL", java.lang.String.class);
        answer.put("clientVersion", java.lang.String.class);
        answer.put("commentId", java.lang.String.class);
        answer.put("commentUpdate", facebook4j.CommentUpdate.class);
        answer.put("debugEnabled", java.lang.Boolean.class);
        answer.put("description", java.lang.String.class);
        answer.put("distance", java.lang.Integer.class);
        answer.put("domainId", java.lang.String.class);
        answer.put("domainName", java.lang.String.class);
        answer.put("domainNames", java.util.List.class);
        answer.put("eventId", java.lang.String.class);
        answer.put("eventUpdate", facebook4j.EventUpdate.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("friendId", java.lang.String.class);
        answer.put("friendUserId", java.lang.String.class);
        answer.put("friendlistId", java.lang.String.class);
        answer.put("friendlistName", java.lang.String.class);
        answer.put("groupId", java.lang.String.class);
        answer.put("gzipEnabled", java.lang.Boolean.class);
        answer.put("httpConnectionTimeout", java.lang.Integer.class);
        answer.put("httpDefaultMaxPerRoute", java.lang.Integer.class);
        answer.put("httpMaxTotalConnections", java.lang.Integer.class);
        answer.put("httpProxyHost", java.lang.String.class);
        answer.put("httpProxyPassword", java.lang.String.class);
        answer.put("httpProxyPort", java.lang.Integer.class);
        answer.put("httpProxyUser", java.lang.String.class);
        answer.put("httpReadTimeout", java.lang.Integer.class);
        answer.put("httpRetryCount", java.lang.Integer.class);
        answer.put("httpRetryIntervalSeconds", java.lang.Integer.class);
        answer.put("httpStreamingReadTimeout", java.lang.Integer.class);
        answer.put("ids", java.util.List.class);
        answer.put("inBody", java.lang.String.class);
        answer.put("includeRead", java.lang.Boolean.class);
        answer.put("isHidden", java.lang.Boolean.class);
        answer.put("jsonStoreEnabled", java.lang.Boolean.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("link", java.net.URL.class);
        answer.put("linkId", java.lang.String.class);
        answer.put("locale", java.util.Locale.class);
        answer.put("mbeanEnabled", java.lang.Boolean.class);
        answer.put("message", java.lang.String.class);
        answer.put("messageId", java.lang.String.class);
        answer.put("metric", java.lang.String.class);
        answer.put("milestoneId", java.lang.String.class);
        answer.put("name", java.lang.String.class);
        answer.put("noteId", java.lang.String.class);
        answer.put("notificationId", java.lang.String.class);
        answer.put("oAuthAccessToken", java.lang.String.class);
        answer.put("oAuthAccessTokenURL", java.lang.String.class);
        answer.put("oAuthAppId", java.lang.String.class);
        answer.put("oAuthAppSecret", java.lang.String.class);
        answer.put("oAuthAuthorizationURL", java.lang.String.class);
        answer.put("oAuthPermissions", java.lang.String.class);
        answer.put("objectId", java.lang.String.class);
        answer.put("offerId", java.lang.String.class);
        answer.put("optionDescription", java.lang.String.class);
        answer.put("pageId", java.lang.String.class);
        answer.put("permissionName", java.lang.String.class);
        answer.put("permissions", java.lang.String.class);
        answer.put("photoId", java.lang.String.class);
        answer.put("pictureId", java.lang.Integer.class);
        answer.put("pictureId2", java.lang.Integer.class);
        answer.put("pictureSize", facebook4j.PictureSize.class);
        answer.put("placeId", java.lang.String.class);
        answer.put("postId", java.lang.String.class);
        answer.put("postUpdate", facebook4j.PostUpdate.class);
        answer.put("prettyDebugEnabled", java.lang.Boolean.class);
        answer.put("queries", java.util.Map.class);
        answer.put("query", java.lang.String.class);
        answer.put("questionId", java.lang.String.class);
        answer.put("reading", facebook4j.Reading.class);
        answer.put("readingOptions", java.util.Map.class);
        answer.put("restBaseURL", java.lang.String.class);
        answer.put("scoreValue", java.lang.Integer.class);
        answer.put("size", facebook4j.PictureSize.class);
        answer.put("source", facebook4j.Media.class);
        answer.put("subject", java.lang.String.class);
        answer.put("synchronous", boolean.class);
        answer.put("tabId", java.lang.String.class);
        answer.put("tagUpdate", facebook4j.TagUpdate.class);
        answer.put("testUser1", facebook4j.TestUser.class);
        answer.put("testUser2", facebook4j.TestUser.class);
        answer.put("testUserId", java.lang.String.class);
        answer.put("title", java.lang.String.class);
        answer.put("toUserId", java.lang.String.class);
        answer.put("toUserIds", java.util.List.class);
        answer.put("useSSL", java.lang.Boolean.class);
        answer.put("userId", java.lang.String.class);
        answer.put("userId1", java.lang.String.class);
        answer.put("userId2", java.lang.String.class);
        answer.put("userIds", java.util.List.class);
        answer.put("userLocale", java.lang.String.class);
        answer.put("videoBaseURL", java.lang.String.class);
        answer.put("videoId", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        FacebookEndpoint target = (FacebookEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "achievementurl":
        case "achievementURL": target.getConfiguration().getAchievementURL(); return true;
        case "albumid":
        case "albumId": target.getConfiguration().getAlbumId(); return true;
        case "albumupdate":
        case "albumUpdate": target.getConfiguration().getAlbumUpdate(); return true;
        case "appid":
        case "appId": target.getConfiguration().getAppId(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "center": target.getConfiguration().getCenter(); return true;
        case "checkinid":
        case "checkinId": target.getConfiguration().getCheckinId(); return true;
        case "checkinupdate":
        case "checkinUpdate": target.getConfiguration().getCheckinUpdate(); return true;
        case "clienturl":
        case "clientURL": target.getConfiguration().getClientURL(); return true;
        case "clientversion":
        case "clientVersion": target.getConfiguration().getClientVersion(); return true;
        case "commentid":
        case "commentId": target.getConfiguration().getCommentId(); return true;
        case "commentupdate":
        case "commentUpdate": target.getConfiguration().getCommentUpdate(); return true;
        case "debugenabled":
        case "debugEnabled": target.getConfiguration().getDebugEnabled(); return true;
        case "description": target.getConfiguration().getDescription(); return true;
        case "distance": target.getConfiguration().getDistance(); return true;
        case "domainid":
        case "domainId": target.getConfiguration().getDomainId(); return true;
        case "domainname":
        case "domainName": target.getConfiguration().getDomainName(); return true;
        case "domainnames":
        case "domainNames": target.getConfiguration().getDomainNames(); return true;
        case "eventid":
        case "eventId": target.getConfiguration().getEventId(); return true;
        case "eventupdate":
        case "eventUpdate": target.getConfiguration().getEventUpdate(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "friendid":
        case "friendId": target.getConfiguration().getFriendId(); return true;
        case "frienduserid":
        case "friendUserId": target.getConfiguration().getFriendUserId(); return true;
        case "friendlistid":
        case "friendlistId": target.getConfiguration().getFriendlistId(); return true;
        case "friendlistname":
        case "friendlistName": target.getConfiguration().getFriendlistName(); return true;
        case "groupid":
        case "groupId": target.getConfiguration().getGroupId(); return true;
        case "gzipenabled":
        case "gzipEnabled": target.getConfiguration().getGzipEnabled(); return true;
        case "httpconnectiontimeout":
        case "httpConnectionTimeout": target.getConfiguration().getHttpConnectionTimeout(); return true;
        case "httpdefaultmaxperroute":
        case "httpDefaultMaxPerRoute": target.getConfiguration().getHttpDefaultMaxPerRoute(); return true;
        case "httpmaxtotalconnections":
        case "httpMaxTotalConnections": target.getConfiguration().getHttpMaxTotalConnections(); return true;
        case "httpproxyhost":
        case "httpProxyHost": target.getConfiguration().getHttpProxyHost(); return true;
        case "httpproxypassword":
        case "httpProxyPassword": target.getConfiguration().getHttpProxyPassword(); return true;
        case "httpproxyport":
        case "httpProxyPort": target.getConfiguration().getHttpProxyPort(); return true;
        case "httpproxyuser":
        case "httpProxyUser": target.getConfiguration().getHttpProxyUser(); return true;
        case "httpreadtimeout":
        case "httpReadTimeout": target.getConfiguration().getHttpReadTimeout(); return true;
        case "httpretrycount":
        case "httpRetryCount": target.getConfiguration().getHttpRetryCount(); return true;
        case "httpretryintervalseconds":
        case "httpRetryIntervalSeconds": target.getConfiguration().getHttpRetryIntervalSeconds(); return true;
        case "httpstreamingreadtimeout":
        case "httpStreamingReadTimeout": target.getConfiguration().getHttpStreamingReadTimeout(); return true;
        case "ids": target.getConfiguration().getIds(); return true;
        case "inbody":
        case "inBody": target.getInBody(); return true;
        case "includeread":
        case "includeRead": target.getConfiguration().getIncludeRead(); return true;
        case "ishidden":
        case "isHidden": target.getConfiguration().getIsHidden(); return true;
        case "jsonstoreenabled":
        case "jsonStoreEnabled": target.getConfiguration().getJsonStoreEnabled(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "link": target.getConfiguration().getLink(); return true;
        case "linkid":
        case "linkId": target.getConfiguration().getLinkId(); return true;
        case "locale": target.getConfiguration().getLocale(); return true;
        case "mbeanenabled":
        case "mbeanEnabled": target.getConfiguration().getMbeanEnabled(); return true;
        case "message": target.getConfiguration().getMessage(); return true;
        case "messageid":
        case "messageId": target.getConfiguration().getMessageId(); return true;
        case "metric": target.getConfiguration().getMetric(); return true;
        case "milestoneid":
        case "milestoneId": target.getConfiguration().getMilestoneId(); return true;
        case "name": target.getConfiguration().getName(); return true;
        case "noteid":
        case "noteId": target.getConfiguration().getNoteId(); return true;
        case "notificationid":
        case "notificationId": target.getConfiguration().getNotificationId(); return true;
        case "oauthaccesstoken":
        case "oAuthAccessToken": target.getConfiguration().getOAuthAccessToken(); return true;
        case "oauthaccesstokenurl":
        case "oAuthAccessTokenURL": target.getConfiguration().getOAuthAccessTokenURL(); return true;
        case "oauthappid":
        case "oAuthAppId": target.getConfiguration().getOAuthAppId(); return true;
        case "oauthappsecret":
        case "oAuthAppSecret": target.getConfiguration().getOAuthAppSecret(); return true;
        case "oauthauthorizationurl":
        case "oAuthAuthorizationURL": target.getConfiguration().getOAuthAuthorizationURL(); return true;
        case "oauthpermissions":
        case "oAuthPermissions": target.getConfiguration().getOAuthPermissions(); return true;
        case "objectid":
        case "objectId": target.getConfiguration().getObjectId(); return true;
        case "offerid":
        case "offerId": target.getConfiguration().getOfferId(); return true;
        case "optiondescription":
        case "optionDescription": target.getConfiguration().getOptionDescription(); return true;
        case "pageid":
        case "pageId": target.getConfiguration().getPageId(); return true;
        case "permissionname":
        case "permissionName": target.getConfiguration().getPermissionName(); return true;
        case "permissions": target.getConfiguration().getPermissions(); return true;
        case "photoid":
        case "photoId": target.getConfiguration().getPhotoId(); return true;
        case "pictureid":
        case "pictureId": target.getConfiguration().getPictureId(); return true;
        case "pictureid2":
        case "pictureId2": target.getConfiguration().getPictureId2(); return true;
        case "picturesize":
        case "pictureSize": target.getConfiguration().getPictureSize(); return true;
        case "placeid":
        case "placeId": target.getConfiguration().getPlaceId(); return true;
        case "postid":
        case "postId": target.getConfiguration().getPostId(); return true;
        case "postupdate":
        case "postUpdate": target.getConfiguration().getPostUpdate(); return true;
        case "prettydebugenabled":
        case "prettyDebugEnabled": target.getConfiguration().getPrettyDebugEnabled(); return true;
        case "queries": target.getConfiguration().getQueries(); return true;
        case "query": target.getConfiguration().getQuery(); return true;
        case "questionid":
        case "questionId": target.getConfiguration().getQuestionId(); return true;
        case "reading": target.getConfiguration().getReading(); return true;
        case "readingoptions":
        case "readingOptions": target.getConfiguration().getReadingOptions(); return true;
        case "restbaseurl":
        case "restBaseURL": target.getConfiguration().getRestBaseURL(); return true;
        case "scorevalue":
        case "scoreValue": target.getConfiguration().getScoreValue(); return true;
        case "size": target.getConfiguration().getSize(); return true;
        case "source": target.getConfiguration().getSource(); return true;
        case "subject": target.getConfiguration().getSubject(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "tabid":
        case "tabId": target.getConfiguration().getTabId(); return true;
        case "tagupdate":
        case "tagUpdate": target.getConfiguration().getTagUpdate(); return true;
        case "testuser1":
        case "testUser1": target.getConfiguration().getTestUser1(); return true;
        case "testuser2":
        case "testUser2": target.getConfiguration().getTestUser2(); return true;
        case "testuserid":
        case "testUserId": target.getConfiguration().getTestUserId(); return true;
        case "title": target.getConfiguration().getTitle(); return true;
        case "touserid":
        case "toUserId": target.getConfiguration().getToUserId(); return true;
        case "touserids":
        case "toUserIds": target.getConfiguration().getToUserIds(); return true;
        case "usessl":
        case "useSSL": target.getConfiguration().getUseSSL(); return true;
        case "userid":
        case "userId": target.getConfiguration().getUserId(); return true;
        case "userid1":
        case "userId1": target.getConfiguration().getUserId1(); return true;
        case "userid2":
        case "userId2": target.getConfiguration().getUserId2(); return true;
        case "userids":
        case "userIds": target.getConfiguration().getUserIds(); return true;
        case "userlocale":
        case "userLocale": target.getConfiguration().getUserLocale(); return true;
        case "videobaseurl":
        case "videoBaseURL": target.getConfiguration().getVideoBaseURL(); return true;
        case "videoid":
        case "videoId": target.getConfiguration().getVideoId(); return true;
        default: return null;
        }
    }
}

