/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.facebook;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class FacebookEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":methodName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "achievementURL", "albumId", "albumUpdate", "appId", "bridgeErrorHandler", "center", "checkinId",
            "checkinUpdate", "clientURL", "clientVersion", "commentId", "commentUpdate", "debugEnabled", "description",
            "distance", "domainId", "domainName", "domainNames", "eventId", "eventUpdate", "exceptionHandler",
            "exchangePattern", "friendId", "friendUserId", "friendlistId", "friendlistName", "groupId", "gzipEnabled",
            "httpConnectionTimeout", "httpDefaultMaxPerRoute", "httpMaxTotalConnections", "httpProxyHost",
            "httpProxyPassword", "httpProxyPort", "httpProxyUser", "httpReadTimeout", "httpRetryCount",
            "httpRetryIntervalSeconds", "httpStreamingReadTimeout", "ids", "inBody", "includeRead", "isHidden",
            "jsonStoreEnabled", "lazyStartProducer", "link", "linkId", "locale", "mbeanEnabled", "message", "messageId",
            "methodName", "metric", "milestoneId", "name", "noteId", "notificationId", "oAuthAccessToken",
            "oAuthAccessTokenURL", "oAuthAppId", "oAuthAppSecret", "oAuthAuthorizationURL", "oAuthPermissions", "objectId",
            "offerId", "optionDescription", "pageId", "permissionName", "permissions", "photoId", "pictureId",
            "pictureId2", "pictureSize", "placeId", "postId", "postUpdate", "prettyDebugEnabled", "queries", "query",
            "questionId", "reading", "readingOptions", "restBaseURL", "scoreValue", "size", "source", "subject", "tabId",
            "tagUpdate", "testUser1", "testUser2", "testUserId", "title", "toUserId", "toUserIds", "useSSL", "userId",
            "userId1", "userId2", "userIds", "userLocale", "videoBaseURL", "videoId");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "oAuthAccessToken", "oAuthAppId", "oAuthAppSecret");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "reading.");

    @Override
    public boolean isEnabled(String scheme) {
        return "facebook".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

