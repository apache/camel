/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.facebook;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class FacebookEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":methodName";

    private static final Set<String> PROPERTY_NAMES;
    private static final Set<String> SECRET_PROPERTY_NAMES;
    static {
        Set<String> props = new HashSet<>(104);
        props.add("httpMaxTotalConnections");
        props.add("tabId");
        props.add("synchronous");
        props.add("httpProxyHost");
        props.add("placeId");
        props.add("videoId");
        props.add("oAuthAppId");
        props.add("permissions");
        props.add("scoreValue");
        props.add("clientURL");
        props.add("postUpdate");
        props.add("oAuthAuthorizationURL");
        props.add("testUserId");
        props.add("httpRetryIntervalSeconds");
        props.add("oAuthAppSecret");
        props.add("pictureId2");
        props.add("useSSL");
        props.add("albumUpdate");
        props.add("size");
        props.add("commentId");
        props.add("offerId");
        props.add("pictureSize");
        props.add("includeRead");
        props.add("inBody");
        props.add("httpProxyUser");
        props.add("jsonStoreEnabled");
        props.add("questionId");
        props.add("milestoneId");
        props.add("testUser2");
        props.add("testUser1");
        props.add("pictureId");
        props.add("tagUpdate");
        props.add("gzipEnabled");
        props.add("photoId");
        props.add("httpStreamingReadTimeout");
        props.add("achievementURL");
        props.add("queries");
        props.add("userId");
        props.add("httpProxyPassword");
        props.add("friendId");
        props.add("metric");
        props.add("friendUserId");
        props.add("httpReadTimeout");
        props.add("videoBaseURL");
        props.add("httpDefaultMaxPerRoute");
        props.add("subject");
        props.add("groupId");
        props.add("readingOptions");
        props.add("prettyDebugEnabled");
        props.add("debugEnabled");
        props.add("source");
        props.add("clientVersion");
        props.add("eventUpdate");
        props.add("userId1");
        props.add("bridgeErrorHandler");
        props.add("oAuthPermissions");
        props.add("checkinUpdate");
        props.add("httpRetryCount");
        props.add("restBaseURL");
        props.add("userId2");
        props.add("appId");
        props.add("notificationId");
        props.add("eventId");
        props.add("oAuthAccessToken");
        props.add("userLocale");
        props.add("query");
        props.add("messageId");
        props.add("noteId");
        props.add("postId");
        props.add("pageId");
        props.add("oAuthAccessTokenURL");
        props.add("friendlistName");
        props.add("domainId");
        props.add("lazyStartProducer");
        props.add("domainName");
        props.add("name");
        props.add("httpConnectionTimeout");
        props.add("ids");
        props.add("exceptionHandler");
        props.add("permissionName");
        props.add("distance");
        props.add("mbeanEnabled");
        props.add("link");
        props.add("albumId");
        props.add("description");
        props.add("locale");
        props.add("title");
        props.add("toUserId");
        props.add("friendlistId");
        props.add("userIds");
        props.add("commentUpdate");
        props.add("domainNames");
        props.add("objectId");
        props.add("checkinId");
        props.add("toUserIds");
        props.add("center");
        props.add("optionDescription");
        props.add("exchangePattern");
        props.add("methodName");
        props.add("reading");
        props.add("httpProxyPort");
        props.add("message");
        props.add("isHidden");
        props.add("linkId");
        PROPERTY_NAMES = Collections.unmodifiableSet(props);
        Set<String> secretProps = new HashSet<>(3);
        secretProps.add("oAuthAppId");
        secretProps.add("oAuthAccessToken");
        secretProps.add("oAuthAppSecret");
        SECRET_PROPERTY_NAMES = Collections.unmodifiableSet(secretProps);
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "facebook".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

