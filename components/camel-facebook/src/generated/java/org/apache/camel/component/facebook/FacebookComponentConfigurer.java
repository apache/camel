/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.facebook;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class FacebookComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.facebook.config.FacebookConfiguration getOrCreateConfiguration(FacebookComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.facebook.config.FacebookConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        FacebookComponent target = (FacebookComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "clienturl":
        case "clientURL": getOrCreateConfiguration(target).setClientURL(property(camelContext, java.lang.String.class, value)); return true;
        case "clientversion":
        case "clientVersion": getOrCreateConfiguration(target).setClientVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.facebook.config.FacebookConfiguration.class, value)); return true;
        case "debugenabled":
        case "debugEnabled": getOrCreateConfiguration(target).setDebugEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "gzipenabled":
        case "gzipEnabled": getOrCreateConfiguration(target).setGzipEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "httpconnectiontimeout":
        case "httpConnectionTimeout": getOrCreateConfiguration(target).setHttpConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpdefaultmaxperroute":
        case "httpDefaultMaxPerRoute": getOrCreateConfiguration(target).setHttpDefaultMaxPerRoute(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpmaxtotalconnections":
        case "httpMaxTotalConnections": getOrCreateConfiguration(target).setHttpMaxTotalConnections(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpproxyhost":
        case "httpProxyHost": getOrCreateConfiguration(target).setHttpProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxypassword":
        case "httpProxyPassword": getOrCreateConfiguration(target).setHttpProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxyport":
        case "httpProxyPort": getOrCreateConfiguration(target).setHttpProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpproxyuser":
        case "httpProxyUser": getOrCreateConfiguration(target).setHttpProxyUser(property(camelContext, java.lang.String.class, value)); return true;
        case "httpreadtimeout":
        case "httpReadTimeout": getOrCreateConfiguration(target).setHttpReadTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpretrycount":
        case "httpRetryCount": getOrCreateConfiguration(target).setHttpRetryCount(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpretryintervalseconds":
        case "httpRetryIntervalSeconds": getOrCreateConfiguration(target).setHttpRetryIntervalSeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpstreamingreadtimeout":
        case "httpStreamingReadTimeout": getOrCreateConfiguration(target).setHttpStreamingReadTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "jsonstoreenabled":
        case "jsonStoreEnabled": getOrCreateConfiguration(target).setJsonStoreEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "mbeanenabled":
        case "mbeanEnabled": getOrCreateConfiguration(target).setMbeanEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "oauthaccesstoken":
        case "oAuthAccessToken": getOrCreateConfiguration(target).setOAuthAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthaccesstokenurl":
        case "oAuthAccessTokenURL": getOrCreateConfiguration(target).setOAuthAccessTokenURL(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthappid":
        case "oAuthAppId": getOrCreateConfiguration(target).setOAuthAppId(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthappsecret":
        case "oAuthAppSecret": getOrCreateConfiguration(target).setOAuthAppSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthauthorizationurl":
        case "oAuthAuthorizationURL": getOrCreateConfiguration(target).setOAuthAuthorizationURL(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthpermissions":
        case "oAuthPermissions": getOrCreateConfiguration(target).setOAuthPermissions(property(camelContext, java.lang.String.class, value)); return true;
        case "prettydebugenabled":
        case "prettyDebugEnabled": getOrCreateConfiguration(target).setPrettyDebugEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "restbaseurl":
        case "restBaseURL": getOrCreateConfiguration(target).setRestBaseURL(property(camelContext, java.lang.String.class, value)); return true;
        case "usessl":
        case "useSSL": getOrCreateConfiguration(target).setUseSSL(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "videobaseurl":
        case "videoBaseURL": getOrCreateConfiguration(target).setVideoBaseURL(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("clientURL", java.lang.String.class);
        answer.put("clientVersion", java.lang.String.class);
        answer.put("configuration", org.apache.camel.component.facebook.config.FacebookConfiguration.class);
        answer.put("debugEnabled", java.lang.Boolean.class);
        answer.put("gzipEnabled", java.lang.Boolean.class);
        answer.put("httpConnectionTimeout", java.lang.Integer.class);
        answer.put("httpDefaultMaxPerRoute", java.lang.Integer.class);
        answer.put("httpMaxTotalConnections", java.lang.Integer.class);
        answer.put("httpProxyHost", java.lang.String.class);
        answer.put("httpProxyPassword", java.lang.String.class);
        answer.put("httpProxyPort", java.lang.Integer.class);
        answer.put("httpProxyUser", java.lang.String.class);
        answer.put("httpReadTimeout", java.lang.Integer.class);
        answer.put("httpRetryCount", java.lang.Integer.class);
        answer.put("httpRetryIntervalSeconds", java.lang.Integer.class);
        answer.put("httpStreamingReadTimeout", java.lang.Integer.class);
        answer.put("jsonStoreEnabled", java.lang.Boolean.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("mbeanEnabled", java.lang.Boolean.class);
        answer.put("oAuthAccessToken", java.lang.String.class);
        answer.put("oAuthAccessTokenURL", java.lang.String.class);
        answer.put("oAuthAppId", java.lang.String.class);
        answer.put("oAuthAppSecret", java.lang.String.class);
        answer.put("oAuthAuthorizationURL", java.lang.String.class);
        answer.put("oAuthPermissions", java.lang.String.class);
        answer.put("prettyDebugEnabled", java.lang.Boolean.class);
        answer.put("restBaseURL", java.lang.String.class);
        answer.put("useSSL", java.lang.Boolean.class);
        answer.put("videoBaseURL", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        FacebookComponent target = (FacebookComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "clienturl":
        case "clientURL": getOrCreateConfiguration(target).getClientURL(); return true;
        case "clientversion":
        case "clientVersion": getOrCreateConfiguration(target).getClientVersion(); return true;
        case "configuration": target.getConfiguration(); return true;
        case "debugenabled":
        case "debugEnabled": getOrCreateConfiguration(target).getDebugEnabled(); return true;
        case "gzipenabled":
        case "gzipEnabled": getOrCreateConfiguration(target).getGzipEnabled(); return true;
        case "httpconnectiontimeout":
        case "httpConnectionTimeout": getOrCreateConfiguration(target).getHttpConnectionTimeout(); return true;
        case "httpdefaultmaxperroute":
        case "httpDefaultMaxPerRoute": getOrCreateConfiguration(target).getHttpDefaultMaxPerRoute(); return true;
        case "httpmaxtotalconnections":
        case "httpMaxTotalConnections": getOrCreateConfiguration(target).getHttpMaxTotalConnections(); return true;
        case "httpproxyhost":
        case "httpProxyHost": getOrCreateConfiguration(target).getHttpProxyHost(); return true;
        case "httpproxypassword":
        case "httpProxyPassword": getOrCreateConfiguration(target).getHttpProxyPassword(); return true;
        case "httpproxyport":
        case "httpProxyPort": getOrCreateConfiguration(target).getHttpProxyPort(); return true;
        case "httpproxyuser":
        case "httpProxyUser": getOrCreateConfiguration(target).getHttpProxyUser(); return true;
        case "httpreadtimeout":
        case "httpReadTimeout": getOrCreateConfiguration(target).getHttpReadTimeout(); return true;
        case "httpretrycount":
        case "httpRetryCount": getOrCreateConfiguration(target).getHttpRetryCount(); return true;
        case "httpretryintervalseconds":
        case "httpRetryIntervalSeconds": getOrCreateConfiguration(target).getHttpRetryIntervalSeconds(); return true;
        case "httpstreamingreadtimeout":
        case "httpStreamingReadTimeout": getOrCreateConfiguration(target).getHttpStreamingReadTimeout(); return true;
        case "jsonstoreenabled":
        case "jsonStoreEnabled": getOrCreateConfiguration(target).getJsonStoreEnabled(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "mbeanenabled":
        case "mbeanEnabled": getOrCreateConfiguration(target).getMbeanEnabled(); return true;
        case "oauthaccesstoken":
        case "oAuthAccessToken": getOrCreateConfiguration(target).getOAuthAccessToken(); return true;
        case "oauthaccesstokenurl":
        case "oAuthAccessTokenURL": getOrCreateConfiguration(target).getOAuthAccessTokenURL(); return true;
        case "oauthappid":
        case "oAuthAppId": getOrCreateConfiguration(target).getOAuthAppId(); return true;
        case "oauthappsecret":
        case "oAuthAppSecret": getOrCreateConfiguration(target).getOAuthAppSecret(); return true;
        case "oauthauthorizationurl":
        case "oAuthAuthorizationURL": getOrCreateConfiguration(target).getOAuthAuthorizationURL(); return true;
        case "oauthpermissions":
        case "oAuthPermissions": getOrCreateConfiguration(target).getOAuthPermissions(); return true;
        case "prettydebugenabled":
        case "prettyDebugEnabled": getOrCreateConfiguration(target).getPrettyDebugEnabled(); return true;
        case "restbaseurl":
        case "restBaseURL": getOrCreateConfiguration(target).getRestBaseURL(); return true;
        case "usessl":
        case "useSSL": getOrCreateConfiguration(target).getUseSSL(); return true;
        case "videobaseurl":
        case "videoBaseURL": getOrCreateConfiguration(target).getVideoBaseURL(); return true;
        default: return null;
        }
    }
}

