/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.solr;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class SolrEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        SolrEndpoint target = (SolrEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "async": target.getConfiguration().setAsync(property(camelContext, boolean.class, value)); return true;
        case "autocommit":
        case "autoCommit": target.getConfiguration().setAutoCommit(property(camelContext, boolean.class, value)); return true;
        case "certificatepath":
        case "certificatePath": target.getConfiguration().setCertificatePath(property(camelContext, java.lang.String.class, value)); return true;
        case "collection": target.getConfiguration().setCollection(property(camelContext, java.lang.String.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.getConfiguration().setConnectionTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        case "deletebyquery":
        case "deleteByQuery": target.getConfiguration().setDeleteByQuery(property(camelContext, boolean.class, value)); return true;
        case "enablessl":
        case "enableSSL": target.getConfiguration().setEnableSSL(property(camelContext, boolean.class, value)); return true;
        case "from": target.getConfiguration().setFrom(property(camelContext, java.lang.Integer.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "operation": target.getConfiguration().setOperation(property(camelContext, org.apache.camel.component.solr.SolrOperation.class, value)); return true;
        case "password": target.getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "requesthandler":
        case "requestHandler": target.getConfiguration().setRequestHandler(property(camelContext, java.lang.String.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.getConfiguration().setRequestTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        case "size": target.getConfiguration().setSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "solrclient":
        case "solrClient": target.getConfiguration().setSolrClient(property(camelContext, org.apache.solr.client.solrj.SolrClient.class, value)); return true;
        case "username": target.getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "async": return boolean.class;
        case "autocommit":
        case "autoCommit": return boolean.class;
        case "certificatepath":
        case "certificatePath": return java.lang.String.class;
        case "collection": return java.lang.String.class;
        case "connectiontimeout":
        case "connectionTimeout": return java.lang.Long.class;
        case "deletebyquery":
        case "deleteByQuery": return boolean.class;
        case "enablessl":
        case "enableSSL": return boolean.class;
        case "from": return java.lang.Integer.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "operation": return org.apache.camel.component.solr.SolrOperation.class;
        case "password": return java.lang.String.class;
        case "requesthandler":
        case "requestHandler": return java.lang.String.class;
        case "requesttimeout":
        case "requestTimeout": return java.lang.Long.class;
        case "size": return java.lang.Integer.class;
        case "solrclient":
        case "solrClient": return org.apache.solr.client.solrj.SolrClient.class;
        case "username": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        SolrEndpoint target = (SolrEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "async": return target.getConfiguration().isAsync();
        case "autocommit":
        case "autoCommit": return target.getConfiguration().isAutoCommit();
        case "certificatepath":
        case "certificatePath": return target.getConfiguration().getCertificatePath();
        case "collection": return target.getConfiguration().getCollection();
        case "connectiontimeout":
        case "connectionTimeout": return target.getConfiguration().getConnectionTimeout();
        case "deletebyquery":
        case "deleteByQuery": return target.getConfiguration().isDeleteByQuery();
        case "enablessl":
        case "enableSSL": return target.getConfiguration().isEnableSSL();
        case "from": return target.getConfiguration().getFrom();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "operation": return target.getConfiguration().getOperation();
        case "password": return target.getConfiguration().getPassword();
        case "requesthandler":
        case "requestHandler": return target.getConfiguration().getRequestHandler();
        case "requesttimeout":
        case "requestTimeout": return target.getConfiguration().getRequestTimeout();
        case "size": return target.getConfiguration().getSize();
        case "solrclient":
        case "solrClient": return target.getConfiguration().getSolrClient();
        case "username": return target.getConfiguration().getUsername();
        default: return null;
        }
    }
}

