/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.solr;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SolrEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "allowCompression": ((SolrEndpoint) target).setAllowCompression(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "connectionTimeout": ((SolrEndpoint) target).setConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "defaultMaxConnectionsPerHost": ((SolrEndpoint) target).setDefaultMaxConnectionsPerHost(property(camelContext, java.lang.Integer.class, value)); return true;
        case "followRedirects": ((SolrEndpoint) target).setFollowRedirects(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "lazyStartProducer": ((SolrEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxRetries": ((SolrEndpoint) target).setMaxRetries(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxTotalConnections": ((SolrEndpoint) target).setMaxTotalConnections(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requestHandler": ((SolrEndpoint) target).setRequestHandler(property(camelContext, java.lang.String.class, value)); return true;
        case "soTimeout": ((SolrEndpoint) target).setSoTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "streamingQueueSize": ((SolrEndpoint) target).setStreamingQueueSize(property(camelContext, int.class, value)); return true;
        case "streamingThreadCount": ((SolrEndpoint) target).setStreamingThreadCount(property(camelContext, int.class, value)); return true;
        case "basicPropertyBinding": ((SolrEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((SolrEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "password": ((SolrEndpoint) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((SolrEndpoint) target).setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "collection": ((SolrEndpoint) target).setCollection(property(camelContext, java.lang.String.class, value)); return true;
        case "zkHost": ((SolrEndpoint) target).setZkHost(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "allowcompression": ((SolrEndpoint) target).setAllowCompression(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "connectiontimeout": ((SolrEndpoint) target).setConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "defaultmaxconnectionsperhost": ((SolrEndpoint) target).setDefaultMaxConnectionsPerHost(property(camelContext, java.lang.Integer.class, value)); return true;
        case "followredirects": ((SolrEndpoint) target).setFollowRedirects(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "lazystartproducer": ((SolrEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxretries": ((SolrEndpoint) target).setMaxRetries(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxtotalconnections": ((SolrEndpoint) target).setMaxTotalConnections(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requesthandler": ((SolrEndpoint) target).setRequestHandler(property(camelContext, java.lang.String.class, value)); return true;
        case "sotimeout": ((SolrEndpoint) target).setSoTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "streamingqueuesize": ((SolrEndpoint) target).setStreamingQueueSize(property(camelContext, int.class, value)); return true;
        case "streamingthreadcount": ((SolrEndpoint) target).setStreamingThreadCount(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding": ((SolrEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((SolrEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "password": ((SolrEndpoint) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((SolrEndpoint) target).setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "collection": ((SolrEndpoint) target).setCollection(property(camelContext, java.lang.String.class, value)); return true;
        case "zkhost": ((SolrEndpoint) target).setZkHost(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

