/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.solr;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SolrEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        SolrEndpoint target = (SolrEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowcompression":
        case "allowCompression": target.setAllowCompression(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "collection": target.setCollection(property(camelContext, java.lang.String.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.setConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "defaultmaxconnectionsperhost":
        case "defaultMaxConnectionsPerHost": target.setDefaultMaxConnectionsPerHost(property(camelContext, java.lang.Integer.class, value)); return true;
        case "followredirects":
        case "followRedirects": target.setFollowRedirects(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxretries":
        case "maxRetries": target.setMaxRetries(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxtotalconnections":
        case "maxTotalConnections": target.setMaxTotalConnections(property(camelContext, java.lang.Integer.class, value)); return true;
        case "password": target.setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "requesthandler":
        case "requestHandler": target.setRequestHandler(property(camelContext, java.lang.String.class, value)); return true;
        case "sotimeout":
        case "soTimeout": target.setSoTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "streamingqueuesize":
        case "streamingQueueSize": target.setStreamingQueueSize(property(camelContext, int.class, value)); return true;
        case "streamingthreadcount":
        case "streamingThreadCount": target.setStreamingThreadCount(property(camelContext, int.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "username": target.setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "zkhost":
        case "zkHost": target.setZkHost(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

}

