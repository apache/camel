/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.solr;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SolrEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        SolrEndpoint target = (SolrEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowcompression":
        case "allowCompression": target.getSolrConfiguration().setAllowCompression(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "autocommit":
        case "autoCommit": target.getSolrConfiguration().setAutoCommit(property(camelContext, boolean.class, value)); return true;
        case "collection": target.getSolrConfiguration().setCollection(property(camelContext, java.lang.String.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.getSolrConfiguration().setConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "defaultmaxconnectionsperhost":
        case "defaultMaxConnectionsPerHost": target.getSolrConfiguration().setDefaultMaxConnectionsPerHost(property(camelContext, java.lang.Integer.class, value)); return true;
        case "followredirects":
        case "followRedirects": target.getSolrConfiguration().setFollowRedirects(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "httpclient":
        case "httpClient": target.getSolrConfiguration().setHttpClient(property(camelContext, org.apache.http.client.HttpClient.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxretries":
        case "maxRetries": target.getSolrConfiguration().setMaxRetries(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxtotalconnections":
        case "maxTotalConnections": target.getSolrConfiguration().setMaxTotalConnections(property(camelContext, java.lang.Integer.class, value)); return true;
        case "password": target.getSolrConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "requesthandler":
        case "requestHandler": target.getSolrConfiguration().setRequestHandler(property(camelContext, java.lang.String.class, value)); return true;
        case "sotimeout":
        case "soTimeout": target.getSolrConfiguration().setSoTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "solrclient":
        case "solrClient": target.getSolrConfiguration().setSolrClient(property(camelContext, org.apache.solr.client.solrj.SolrClient.class, value)); return true;
        case "streamingqueuesize":
        case "streamingQueueSize": target.getSolrConfiguration().setStreamingQueueSize(property(camelContext, int.class, value)); return true;
        case "streamingthreadcount":
        case "streamingThreadCount": target.getSolrConfiguration().setStreamingThreadCount(property(camelContext, int.class, value)); return true;
        case "username": target.getSolrConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "zkchroot":
        case "zkChroot": target.getSolrConfiguration().setZkChroot(property(camelContext, java.lang.String.class, value)); return true;
        case "zkhost":
        case "zkHost": target.getSolrConfiguration().setZkHost(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowcompression":
        case "allowCompression": return java.lang.Boolean.class;
        case "autocommit":
        case "autoCommit": return boolean.class;
        case "collection": return java.lang.String.class;
        case "connectiontimeout":
        case "connectionTimeout": return java.lang.Integer.class;
        case "defaultmaxconnectionsperhost":
        case "defaultMaxConnectionsPerHost": return java.lang.Integer.class;
        case "followredirects":
        case "followRedirects": return java.lang.Boolean.class;
        case "httpclient":
        case "httpClient": return org.apache.http.client.HttpClient.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxretries":
        case "maxRetries": return java.lang.Integer.class;
        case "maxtotalconnections":
        case "maxTotalConnections": return java.lang.Integer.class;
        case "password": return java.lang.String.class;
        case "requesthandler":
        case "requestHandler": return java.lang.String.class;
        case "sotimeout":
        case "soTimeout": return java.lang.Integer.class;
        case "solrclient":
        case "solrClient": return org.apache.solr.client.solrj.SolrClient.class;
        case "streamingqueuesize":
        case "streamingQueueSize": return int.class;
        case "streamingthreadcount":
        case "streamingThreadCount": return int.class;
        case "username": return java.lang.String.class;
        case "zkchroot":
        case "zkChroot": return java.lang.String.class;
        case "zkhost":
        case "zkHost": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        SolrEndpoint target = (SolrEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowcompression":
        case "allowCompression": return target.getSolrConfiguration().getAllowCompression();
        case "autocommit":
        case "autoCommit": return target.getSolrConfiguration().isAutoCommit();
        case "collection": return target.getSolrConfiguration().getCollection();
        case "connectiontimeout":
        case "connectionTimeout": return target.getSolrConfiguration().getConnectionTimeout();
        case "defaultmaxconnectionsperhost":
        case "defaultMaxConnectionsPerHost": return target.getSolrConfiguration().getDefaultMaxConnectionsPerHost();
        case "followredirects":
        case "followRedirects": return target.getSolrConfiguration().getFollowRedirects();
        case "httpclient":
        case "httpClient": return target.getSolrConfiguration().getHttpClient();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxretries":
        case "maxRetries": return target.getSolrConfiguration().getMaxRetries();
        case "maxtotalconnections":
        case "maxTotalConnections": return target.getSolrConfiguration().getMaxTotalConnections();
        case "password": return target.getSolrConfiguration().getPassword();
        case "requesthandler":
        case "requestHandler": return target.getSolrConfiguration().getRequestHandler();
        case "sotimeout":
        case "soTimeout": return target.getSolrConfiguration().getSoTimeout();
        case "solrclient":
        case "solrClient": return target.getSolrConfiguration().getSolrClient();
        case "streamingqueuesize":
        case "streamingQueueSize": return target.getSolrConfiguration().getStreamingQueueSize();
        case "streamingthreadcount":
        case "streamingThreadCount": return target.getSolrConfiguration().getStreamingThreadCount();
        case "username": return target.getSolrConfiguration().getUsername();
        case "zkchroot":
        case "zkChroot": return target.getSolrConfiguration().getZkChroot();
        case "zkhost":
        case "zkHost": return target.getSolrConfiguration().getZkHost();
        default: return null;
        }
    }
}

