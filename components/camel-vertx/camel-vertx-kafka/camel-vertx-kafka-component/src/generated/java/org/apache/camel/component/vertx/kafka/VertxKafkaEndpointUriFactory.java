/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.vertx.kafka;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class VertxKafkaEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":topic";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "acks", "additionalProperties", "allowAutoCreateTopics", "allowManualCommit", "autoCommitIntervalMs",
            "autoOffsetReset", "batchSize", "bootstrapServers", "bridgeErrorHandler", "bufferMemory", "checkCrcs",
            "clientDnsLookup", "clientId", "clientRack", "compressionType", "connectionsMaxIdleMs", "defaultApiTimeoutMs",
            "deliveryTimeoutMs", "enableAutoCommit", "enableIdempotence", "exceptionHandler", "exchangePattern",
            "excludeInternalTopics", "fetchMaxBytes", "fetchMaxWaitMs", "fetchMinBytes", "groupId", "groupInstanceId",
            "headerFilterStrategy", "heartbeatIntervalMs", "interceptorClasses", "isolationLevel", "keyDeserializer",
            "keySerializer", "lazyStartProducer", "lingerMs", "maxBlockMs", "maxInFlightRequestsPerConnection",
            "maxPartitionFetchBytes", "maxPollIntervalMs", "maxPollRecords", "maxRequestSize", "metadataMaxAgeMs",
            "metadataMaxIdleMs", "metricReporters", "metricsNumSamples", "metricsRecordingLevel", "metricsSampleWindowMs",
            "partitionAssignmentStrategy", "partitionId", "partitionerClass", "receiveBufferBytes",
            "reconnectBackoffMaxMs", "reconnectBackoffMs", "requestTimeoutMs", "retries", "retryBackoffMs",
            "saslClientCallbackHandlerClass", "saslJaasConfig", "saslKerberosKinitCmd", "saslKerberosMinTimeBeforeRelogin",
            "saslKerberosServiceName", "saslKerberosTicketRenewJitter", "saslKerberosTicketRenewWindowFactor",
            "saslLoginCallbackHandlerClass", "saslLoginClass", "saslLoginRefreshBufferSeconds",
            "saslLoginRefreshMinPeriodSeconds", "saslLoginRefreshWindowFactor", "saslLoginRefreshWindowJitter",
            "saslMechanism", "securityProtocol", "securityProviders", "seekToOffset", "seekToPosition", "sendBufferBytes",
            "sessionTimeoutMs", "socketConnectionSetupTimeoutMaxMs", "socketConnectionSetupTimeoutMs", "sslCipherSuites",
            "sslEnabledProtocols", "sslEndpointIdentificationAlgorithm", "sslEngineFactoryClass", "sslKeyPassword",
            "sslKeymanagerAlgorithm", "sslKeystoreCertificateChain", "sslKeystoreKey", "sslKeystoreLocation",
            "sslKeystorePassword", "sslKeystoreType", "sslProtocol", "sslProvider", "sslSecureRandomImplementation",
            "sslTrustmanagerAlgorithm", "sslTruststoreCertificates", "sslTruststoreLocation", "sslTruststorePassword",
            "sslTruststoreType", "topic", "transactionTimeoutMs", "transactionalId", "valueDeserializer",
            "valueSerializer");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of();
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "additionalProperties.");

    @Override
    public boolean isEnabled(String scheme) {
        return "vertx-kafka".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "topic", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

