/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.vertx.websocket;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class VertxWebsocketEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        VertxWebsocketEndpoint target = (VertxWebsocketEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "alloworiginheader":
        case "allowOriginHeader": target.getConfiguration().setAllowOriginHeader(property(camelContext, boolean.class, value)); return true;
        case "allowedoriginpattern":
        case "allowedOriginPattern": target.getConfiguration().setAllowedOriginPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "clientoptions":
        case "clientOptions": target.getConfiguration().setClientOptions(property(camelContext, io.vertx.core.http.HttpClientOptions.class, value)); return true;
        case "clientsubprotocols":
        case "clientSubProtocols": target.getConfiguration().setClientSubProtocols(property(camelContext, java.lang.String.class, value)); return true;
        case "consumeasclient":
        case "consumeAsClient": target.getConfiguration().setConsumeAsClient(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "firewebsocketconnectionevents":
        case "fireWebSocketConnectionEvents": target.getConfiguration().setFireWebSocketConnectionEvents(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxreconnectattempts":
        case "maxReconnectAttempts": target.getConfiguration().setMaxReconnectAttempts(property(camelContext, int.class, value)); return true;
        case "originheaderurl":
        case "originHeaderUrl": target.getConfiguration().setOriginHeaderUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "reconnectinitialdelay":
        case "reconnectInitialDelay": target.getConfiguration().setReconnectInitialDelay(property(camelContext, int.class, value)); return true;
        case "reconnectinterval":
        case "reconnectInterval": target.getConfiguration().setReconnectInterval(property(camelContext, int.class, value)); return true;
        case "router": target.getConfiguration().setRouter(property(camelContext, io.vertx.ext.web.Router.class, value)); return true;
        case "sendtoall":
        case "sendToAll": target.getConfiguration().setSendToAll(property(camelContext, boolean.class, value)); return true;
        case "serveroptions":
        case "serverOptions": target.getConfiguration().setServerOptions(property(camelContext, io.vertx.core.http.HttpServerOptions.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "alloworiginheader":
        case "allowOriginHeader": return boolean.class;
        case "allowedoriginpattern":
        case "allowedOriginPattern": return java.lang.String.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "clientoptions":
        case "clientOptions": return io.vertx.core.http.HttpClientOptions.class;
        case "clientsubprotocols":
        case "clientSubProtocols": return java.lang.String.class;
        case "consumeasclient":
        case "consumeAsClient": return boolean.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "firewebsocketconnectionevents":
        case "fireWebSocketConnectionEvents": return boolean.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxreconnectattempts":
        case "maxReconnectAttempts": return int.class;
        case "originheaderurl":
        case "originHeaderUrl": return java.lang.String.class;
        case "reconnectinitialdelay":
        case "reconnectInitialDelay": return int.class;
        case "reconnectinterval":
        case "reconnectInterval": return int.class;
        case "router": return io.vertx.ext.web.Router.class;
        case "sendtoall":
        case "sendToAll": return boolean.class;
        case "serveroptions":
        case "serverOptions": return io.vertx.core.http.HttpServerOptions.class;
        case "sslcontextparameters":
        case "sslContextParameters": return org.apache.camel.support.jsse.SSLContextParameters.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        VertxWebsocketEndpoint target = (VertxWebsocketEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "alloworiginheader":
        case "allowOriginHeader": return target.getConfiguration().isAllowOriginHeader();
        case "allowedoriginpattern":
        case "allowedOriginPattern": return target.getConfiguration().getAllowedOriginPattern();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "clientoptions":
        case "clientOptions": return target.getConfiguration().getClientOptions();
        case "clientsubprotocols":
        case "clientSubProtocols": return target.getConfiguration().getClientSubProtocols();
        case "consumeasclient":
        case "consumeAsClient": return target.getConfiguration().isConsumeAsClient();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "firewebsocketconnectionevents":
        case "fireWebSocketConnectionEvents": return target.getConfiguration().isFireWebSocketConnectionEvents();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxreconnectattempts":
        case "maxReconnectAttempts": return target.getConfiguration().getMaxReconnectAttempts();
        case "originheaderurl":
        case "originHeaderUrl": return target.getConfiguration().getOriginHeaderUrl();
        case "reconnectinitialdelay":
        case "reconnectInitialDelay": return target.getConfiguration().getReconnectInitialDelay();
        case "reconnectinterval":
        case "reconnectInterval": return target.getConfiguration().getReconnectInterval();
        case "router": return target.getConfiguration().getRouter();
        case "sendtoall":
        case "sendToAll": return target.getConfiguration().isSendToAll();
        case "serveroptions":
        case "serverOptions": return target.getConfiguration().getServerOptions();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getConfiguration().getSslContextParameters();
        default: return null;
        }
    }
}

