/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.milo.browse;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class MiloBrowseEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        MiloBrowseEndpoint target = (MiloBrowseEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowedsecuritypolicies":
        case "allowedSecurityPolicies": target.getConfiguration().setAllowedSecurityPolicies(property(camelContext, java.lang.String.class, value)); return true;
        case "applicationname":
        case "applicationName": target.getConfiguration().setApplicationName(property(camelContext, java.lang.String.class, value)); return true;
        case "applicationuri":
        case "applicationUri": target.getConfiguration().setApplicationUri(property(camelContext, java.lang.String.class, value)); return true;
        case "channellifetime":
        case "channelLifetime": target.getConfiguration().setChannelLifetime(property(camelContext, java.lang.Long.class, value)); return true;
        case "clientid":
        case "clientId": target.getConfiguration().setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "depth": target.setDepth(property(camelContext, int.class, value)); return true;
        case "direction": target.setDirection(property(camelContext, org.eclipse.milo.opcua.stack.core.types.enumerated.BrowseDirection.class, value)); return true;
        case "discoveryendpointsuffix":
        case "discoveryEndpointSuffix": target.getConfiguration().setDiscoveryEndpointSuffix(property(camelContext, java.lang.String.class, value)); return true;
        case "discoveryendpointuri":
        case "discoveryEndpointUri": target.getConfiguration().setDiscoveryEndpointUri(property(camelContext, java.lang.String.class, value)); return true;
        case "filter": target.setFilter(property(camelContext, java.lang.String.class, value)); return true;
        case "includesubtypes":
        case "includeSubTypes": target.setIncludeSubTypes(property(camelContext, boolean.class, value)); return true;
        case "keyalias":
        case "keyAlias": target.getConfiguration().setKeyAlias(property(camelContext, java.lang.String.class, value)); return true;
        case "keypassword":
        case "keyPassword": target.getConfiguration().setKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "keystorepassword":
        case "keyStorePassword": target.getConfiguration().setKeyStorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "keystoretype":
        case "keyStoreType": target.getConfiguration().setKeyStoreType(property(camelContext, java.lang.String.class, value)); return true;
        case "keystoreurl":
        case "keyStoreUrl": target.getConfiguration().setKeyStoreUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxnodeidsperrequest":
        case "maxNodeIdsPerRequest": target.setMaxNodeIdsPerRequest(property(camelContext, int.class, value)); return true;
        case "maxpendingpublishrequests":
        case "maxPendingPublishRequests": target.getConfiguration().setMaxPendingPublishRequests(property(camelContext, java.lang.Long.class, value)); return true;
        case "maxresponsemessagesize":
        case "maxResponseMessageSize": target.getConfiguration().setMaxResponseMessageSize(property(camelContext, java.lang.Long.class, value)); return true;
        case "node": target.setNode(property(camelContext, java.lang.String.class, value)); return true;
        case "nodeclasses":
        case "nodeClasses": target.setNodeClasses(property(camelContext, java.lang.String.class, value)); return true;
        case "overridehost":
        case "overrideHost": target.getConfiguration().setOverrideHost(property(camelContext, boolean.class, value)); return true;
        case "producturi":
        case "productUri": target.getConfiguration().setProductUri(property(camelContext, java.lang.String.class, value)); return true;
        case "recursive": target.setRecursive(property(camelContext, boolean.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.getConfiguration().setRequestTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        case "requestedpublishinginterval":
        case "requestedPublishingInterval": target.getConfiguration().setRequestedPublishingInterval(property(camelContext, java.lang.Double.class, value)); return true;
        case "sessionname":
        case "sessionName": target.getConfiguration().setSessionName(property(camelContext, java.lang.String.class, value)); return true;
        case "sessiontimeout":
        case "sessionTimeout": target.getConfiguration().setSessionTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowedsecuritypolicies":
        case "allowedSecurityPolicies": return java.lang.String.class;
        case "applicationname":
        case "applicationName": return java.lang.String.class;
        case "applicationuri":
        case "applicationUri": return java.lang.String.class;
        case "channellifetime":
        case "channelLifetime": return java.lang.Long.class;
        case "clientid":
        case "clientId": return java.lang.String.class;
        case "depth": return int.class;
        case "direction": return org.eclipse.milo.opcua.stack.core.types.enumerated.BrowseDirection.class;
        case "discoveryendpointsuffix":
        case "discoveryEndpointSuffix": return java.lang.String.class;
        case "discoveryendpointuri":
        case "discoveryEndpointUri": return java.lang.String.class;
        case "filter": return java.lang.String.class;
        case "includesubtypes":
        case "includeSubTypes": return boolean.class;
        case "keyalias":
        case "keyAlias": return java.lang.String.class;
        case "keypassword":
        case "keyPassword": return java.lang.String.class;
        case "keystorepassword":
        case "keyStorePassword": return java.lang.String.class;
        case "keystoretype":
        case "keyStoreType": return java.lang.String.class;
        case "keystoreurl":
        case "keyStoreUrl": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxnodeidsperrequest":
        case "maxNodeIdsPerRequest": return int.class;
        case "maxpendingpublishrequests":
        case "maxPendingPublishRequests": return java.lang.Long.class;
        case "maxresponsemessagesize":
        case "maxResponseMessageSize": return java.lang.Long.class;
        case "node": return java.lang.String.class;
        case "nodeclasses":
        case "nodeClasses": return java.lang.String.class;
        case "overridehost":
        case "overrideHost": return boolean.class;
        case "producturi":
        case "productUri": return java.lang.String.class;
        case "recursive": return boolean.class;
        case "requesttimeout":
        case "requestTimeout": return java.lang.Long.class;
        case "requestedpublishinginterval":
        case "requestedPublishingInterval": return java.lang.Double.class;
        case "sessionname":
        case "sessionName": return java.lang.String.class;
        case "sessiontimeout":
        case "sessionTimeout": return java.lang.Long.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        MiloBrowseEndpoint target = (MiloBrowseEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowedsecuritypolicies":
        case "allowedSecurityPolicies": return target.getConfiguration().getAllowedSecurityPolicies();
        case "applicationname":
        case "applicationName": return target.getConfiguration().getApplicationName();
        case "applicationuri":
        case "applicationUri": return target.getConfiguration().getApplicationUri();
        case "channellifetime":
        case "channelLifetime": return target.getConfiguration().getChannelLifetime();
        case "clientid":
        case "clientId": return target.getConfiguration().getClientId();
        case "depth": return target.getDepth();
        case "direction": return target.getDirection();
        case "discoveryendpointsuffix":
        case "discoveryEndpointSuffix": return target.getConfiguration().getDiscoveryEndpointSuffix();
        case "discoveryendpointuri":
        case "discoveryEndpointUri": return target.getConfiguration().getDiscoveryEndpointUri();
        case "filter": return target.getFilter();
        case "includesubtypes":
        case "includeSubTypes": return target.isIncludeSubTypes();
        case "keyalias":
        case "keyAlias": return target.getConfiguration().getKeyAlias();
        case "keypassword":
        case "keyPassword": return target.getConfiguration().getKeyPassword();
        case "keystorepassword":
        case "keyStorePassword": return target.getConfiguration().getKeyStorePassword();
        case "keystoretype":
        case "keyStoreType": return target.getConfiguration().getKeyStoreType();
        case "keystoreurl":
        case "keyStoreUrl": return target.getConfiguration().getKeyStoreUrl();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxnodeidsperrequest":
        case "maxNodeIdsPerRequest": return target.getMaxNodeIdsPerRequest();
        case "maxpendingpublishrequests":
        case "maxPendingPublishRequests": return target.getConfiguration().getMaxPendingPublishRequests();
        case "maxresponsemessagesize":
        case "maxResponseMessageSize": return target.getConfiguration().getMaxResponseMessageSize();
        case "node": return target.getNode();
        case "nodeclasses":
        case "nodeClasses": return target.getNodeClasses();
        case "overridehost":
        case "overrideHost": return target.getConfiguration().isOverrideHost();
        case "producturi":
        case "productUri": return target.getConfiguration().getProductUri();
        case "recursive": return target.isRecursive();
        case "requesttimeout":
        case "requestTimeout": return target.getConfiguration().getRequestTimeout();
        case "requestedpublishinginterval":
        case "requestedPublishingInterval": return target.getConfiguration().getRequestedPublishingInterval();
        case "sessionname":
        case "sessionName": return target.getConfiguration().getSessionName();
        case "sessiontimeout":
        case "sessionTimeout": return target.getConfiguration().getSessionTimeout();
        default: return null;
        }
    }
}

