{
  "component": {
    "kind": "component",
    "name": "jmx",
    "title": "JMX",
    "description": "Receive JMX notifications.",
    "deprecated": false,
    "firstVersion": "2.6.0",
    "label": "monitoring",
    "javaType": "org.apache.camel.component.jmx.JMXComponent",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-jmx",
    "version": "3.7.0-SNAPSHOT",
    "scheme": "jmx",
    "extendsScheme": "",
    "syntax": "jmx:serverURL",
    "async": false,
    "api": false,
    "consumerOnly": true,
    "producerOnly": false,
    "lenientProperties": false
  },
  "componentProperties": {
    "bridgeErrorHandler": { "kind": "property", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "autowiredEnabled": { "kind": "property", "displayName": "Autowired Enabled", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc." }
  },
  "properties": {
    "serverURL": { "kind": "path", "displayName": "Server URL", "group": "consumer", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Server url comes from the remaining endpoint. Use platform to connect to local JVM." },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "format": { "kind": "parameter", "displayName": "Format", "group": "consumer", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "enum": [ "xml", "raw" ], "deprecated": false, "autowired": false, "secret": false, "defaultValue": "xml", "description": "Format for the message body. Either xml or raw. If xml, the notification is serialized to xml. If raw, then the raw java object is set as the body." },
    "granularityPeriod": { "kind": "parameter", "displayName": "Granularity Period", "group": "consumer", "label": "", "required": false, "type": "duration", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "10000", "description": "The frequency to poll the bean to check the monitor (monitor types only)." },
    "monitorType": { "kind": "parameter", "displayName": "Monitor Type", "group": "consumer", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "enum": [ "counter", "gauge", "string" ], "deprecated": false, "autowired": false, "secret": false, "description": "The type of monitor to create. One of string, gauge, counter (monitor types only)." },
    "objectDomain": { "kind": "parameter", "displayName": "Object Domain", "group": "consumer", "label": "", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The domain for the mbean you're connecting to" },
    "objectName": { "kind": "parameter", "displayName": "Object Name", "group": "consumer", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "The name key for the mbean you're connecting to. This value is mutually exclusive with the object properties that get passed." },
    "observedAttribute": { "kind": "parameter", "displayName": "Observed Attribute", "group": "consumer", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "The attribute to observe for the monitor bean or consumer." },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "autowired": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut", "InOptionalOut" ], "deprecated": false, "autowired": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "executorService": { "kind": "parameter", "displayName": "Executor Service", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "java.util.concurrent.ExecutorService", "deprecated": false, "autowired": false, "secret": false, "description": "To use a custom shared thread pool for the consumers. By default each consume has their own thread-pool to process and route notifications." },
    "handback": { "kind": "parameter", "displayName": "Handback", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "java.lang.Object", "deprecated": false, "autowired": false, "secret": false, "description": "Value to handback to the listener when a notification is received. This value will be put in the message header with the key jmx.handback" },
    "notificationFilter": { "kind": "parameter", "displayName": "Notification Filter", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "javax.management.NotificationFilter", "deprecated": false, "autowired": false, "secret": false, "description": "Reference to a bean that implements the NotificationFilter." },
    "objectProperties": { "kind": "parameter", "displayName": "Object Properties", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "java.util.Map<java.lang.String, java.lang.String>", "prefix": "key.", "multiValue": true, "deprecated": false, "autowired": false, "secret": false, "description": "Properties for the object name. These values will be used if the objectName param is not set" },
    "reconnectDelay": { "kind": "parameter", "displayName": "Reconnect Delay", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 10, "description": "The number of seconds to wait before attempting to retry establishment of the initial connection or attempt to reconnect a lost connection" },
    "reconnectOnConnectionFailure": { "kind": "parameter", "displayName": "Reconnect On Connection Failure", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "If true the consumer will attempt to reconnect to the JMX server when any connection failure occurs. The consumer will attempt to re-establish the JMX connection every 'x' seconds until the connection is made-- where 'x' is the configured reconnectionDelay" },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." },
    "testConnectionOnStartup": { "kind": "parameter", "displayName": "Test Connection On Startup", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "If true the consumer will throw an exception if unable to establish the JMX connection upon startup. If false, the consumer will attempt to establish the JMX connection every 'x' seconds until the connection is made -- where 'x' is the configured reconnectionDelay" },
    "initThreshold": { "kind": "parameter", "displayName": "Init Threshold", "group": "counter", "label": "counter", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "description": "Initial threshold for the monitor. The value must exceed this before notifications are fired (counter monitor only)." },
    "modulus": { "kind": "parameter", "displayName": "Modulus", "group": "counter", "label": "counter", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "description": "The value at which the counter is reset to zero (counter monitor only)." },
    "offset": { "kind": "parameter", "displayName": "Offset", "group": "counter", "label": "counter", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "description": "The amount to increment the threshold after it's been exceeded (counter monitor only)." },
    "differenceMode": { "kind": "parameter", "displayName": "Difference Mode", "group": "gauge", "label": "counter,gauge", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "If true, then the value reported in the notification is the difference from the threshold as opposed to the value itself (counter and gauge monitor only)." },
    "notifyHigh": { "kind": "parameter", "displayName": "Notify High", "group": "gauge", "label": "gauge", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "If true, the gauge will fire a notification when the high threshold is exceeded (gauge monitor only)." },
    "notifyLow": { "kind": "parameter", "displayName": "Notify Low", "group": "gauge", "label": "gauge", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "If true, the gauge will fire a notification when the low threshold is exceeded (gauge monitor only)." },
    "thresholdHigh": { "kind": "parameter", "displayName": "Threshold High", "group": "gauge", "label": "gauge", "required": false, "type": "number", "javaType": "java.lang.Double", "deprecated": false, "autowired": false, "secret": false, "description": "Value for the gauge's high threshold (gauge monitor only)." },
    "thresholdLow": { "kind": "parameter", "displayName": "Threshold Low", "group": "gauge", "label": "gauge", "required": false, "type": "number", "javaType": "java.lang.Double", "deprecated": false, "autowired": false, "secret": false, "description": "Value for the gauge's low threshold (gauge monitor only)." },
    "password": { "kind": "parameter", "displayName": "Password", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": true, "description": "Credentials for making a remote connection" },
    "user": { "kind": "parameter", "displayName": "User", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": true, "description": "Credentials for making a remote connection" },
    "notifyDiffer": { "kind": "parameter", "displayName": "Notify Differ", "group": "string", "label": "consumer,string", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "If true, will fire a notification when the string attribute differs from the string to compare (string monitor or consumer). By default the consumer will notify match if observed attribute and string to compare has been configured." },
    "notifyMatch": { "kind": "parameter", "displayName": "Notify Match", "group": "string", "label": "consumer,string", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "If true, will fire a notification when the string attribute matches the string to compare (string monitor or consumer). By default the consumer will notify match if observed attribute and string to compare has been configured." },
    "stringToCompare": { "kind": "parameter", "displayName": "String To Compare", "group": "string", "label": "consumer,string", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Value for attribute to compare (string monitor or consumer). By default the consumer will notify match if observed attribute and string to compare has been configured." }
  }
}
