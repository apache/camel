/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jmx;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JMXEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "bridgeErrorHandler": ((JMXEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "format": ((JMXEndpoint) target).setFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "granularityPeriod": ((JMXEndpoint) target).setGranularityPeriod(property(camelContext, long.class, value)); return true;
        case "monitorType": ((JMXEndpoint) target).setMonitorType(property(camelContext, java.lang.String.class, value)); return true;
        case "objectDomain": ((JMXEndpoint) target).setObjectDomain(property(camelContext, java.lang.String.class, value)); return true;
        case "objectName": ((JMXEndpoint) target).setObjectName(property(camelContext, java.lang.String.class, value)); return true;
        case "observedAttribute": ((JMXEndpoint) target).setObservedAttribute(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionHandler": ((JMXEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((JMXEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "basicPropertyBinding": ((JMXEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "executorService": ((JMXEndpoint) target).setExecutorService(property(camelContext, java.util.concurrent.ExecutorService.class, value)); return true;
        case "handback": ((JMXEndpoint) target).setHandback(property(camelContext, java.lang.Object.class, value)); return true;
        case "notificationFilter": ((JMXEndpoint) target).setNotificationFilter(property(camelContext, javax.management.NotificationFilter.class, value)); return true;
        case "objectProperties": ((JMXEndpoint) target).setObjectProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "reconnectDelay": ((JMXEndpoint) target).setReconnectDelay(property(camelContext, int.class, value)); return true;
        case "reconnectOnConnectionFailure": ((JMXEndpoint) target).setReconnectOnConnectionFailure(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((JMXEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "testConnectionOnStartup": ((JMXEndpoint) target).setTestConnectionOnStartup(property(camelContext, boolean.class, value)); return true;
        case "notifyDiffer": ((JMXEndpoint) target).setNotifyDiffer(property(camelContext, boolean.class, value)); return true;
        case "notifyMatch": ((JMXEndpoint) target).setNotifyMatch(property(camelContext, boolean.class, value)); return true;
        case "stringToCompare": ((JMXEndpoint) target).setStringToCompare(property(camelContext, java.lang.String.class, value)); return true;
        case "initThreshold": ((JMXEndpoint) target).setInitThreshold(property(camelContext, int.class, value)); return true;
        case "modulus": ((JMXEndpoint) target).setModulus(property(camelContext, int.class, value)); return true;
        case "offset": ((JMXEndpoint) target).setOffset(property(camelContext, int.class, value)); return true;
        case "differenceMode": ((JMXEndpoint) target).setDifferenceMode(property(camelContext, boolean.class, value)); return true;
        case "notifyHigh": ((JMXEndpoint) target).setNotifyHigh(property(camelContext, boolean.class, value)); return true;
        case "notifyLow": ((JMXEndpoint) target).setNotifyLow(property(camelContext, boolean.class, value)); return true;
        case "thresholdHigh": ((JMXEndpoint) target).setThresholdHigh(property(camelContext, java.lang.Double.class, value)); return true;
        case "thresholdLow": ((JMXEndpoint) target).setThresholdLow(property(camelContext, java.lang.Double.class, value)); return true;
        case "password": ((JMXEndpoint) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "user": ((JMXEndpoint) target).setUser(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "bridgeerrorhandler": ((JMXEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "format": ((JMXEndpoint) target).setFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "granularityperiod": ((JMXEndpoint) target).setGranularityPeriod(property(camelContext, long.class, value)); return true;
        case "monitortype": ((JMXEndpoint) target).setMonitorType(property(camelContext, java.lang.String.class, value)); return true;
        case "objectdomain": ((JMXEndpoint) target).setObjectDomain(property(camelContext, java.lang.String.class, value)); return true;
        case "objectname": ((JMXEndpoint) target).setObjectName(property(camelContext, java.lang.String.class, value)); return true;
        case "observedattribute": ((JMXEndpoint) target).setObservedAttribute(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler": ((JMXEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((JMXEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "basicpropertybinding": ((JMXEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "executorservice": ((JMXEndpoint) target).setExecutorService(property(camelContext, java.util.concurrent.ExecutorService.class, value)); return true;
        case "handback": ((JMXEndpoint) target).setHandback(property(camelContext, java.lang.Object.class, value)); return true;
        case "notificationfilter": ((JMXEndpoint) target).setNotificationFilter(property(camelContext, javax.management.NotificationFilter.class, value)); return true;
        case "objectproperties": ((JMXEndpoint) target).setObjectProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "reconnectdelay": ((JMXEndpoint) target).setReconnectDelay(property(camelContext, int.class, value)); return true;
        case "reconnectonconnectionfailure": ((JMXEndpoint) target).setReconnectOnConnectionFailure(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((JMXEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "testconnectiononstartup": ((JMXEndpoint) target).setTestConnectionOnStartup(property(camelContext, boolean.class, value)); return true;
        case "notifydiffer": ((JMXEndpoint) target).setNotifyDiffer(property(camelContext, boolean.class, value)); return true;
        case "notifymatch": ((JMXEndpoint) target).setNotifyMatch(property(camelContext, boolean.class, value)); return true;
        case "stringtocompare": ((JMXEndpoint) target).setStringToCompare(property(camelContext, java.lang.String.class, value)); return true;
        case "initthreshold": ((JMXEndpoint) target).setInitThreshold(property(camelContext, int.class, value)); return true;
        case "modulus": ((JMXEndpoint) target).setModulus(property(camelContext, int.class, value)); return true;
        case "offset": ((JMXEndpoint) target).setOffset(property(camelContext, int.class, value)); return true;
        case "differencemode": ((JMXEndpoint) target).setDifferenceMode(property(camelContext, boolean.class, value)); return true;
        case "notifyhigh": ((JMXEndpoint) target).setNotifyHigh(property(camelContext, boolean.class, value)); return true;
        case "notifylow": ((JMXEndpoint) target).setNotifyLow(property(camelContext, boolean.class, value)); return true;
        case "thresholdhigh": ((JMXEndpoint) target).setThresholdHigh(property(camelContext, java.lang.Double.class, value)); return true;
        case "thresholdlow": ((JMXEndpoint) target).setThresholdLow(property(camelContext, java.lang.Double.class, value)); return true;
        case "password": ((JMXEndpoint) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "user": ((JMXEndpoint) target).setUser(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

