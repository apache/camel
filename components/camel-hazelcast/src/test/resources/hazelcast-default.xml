<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-config-3.7.xsd"
					 xmlns="http://www.hazelcast.com/schema/config"
					 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<group>
		<name>dev</name>
		<password>dev-pass</password>
	</group>
	
	<!-- Disable the version check -->
	<properties>
	  <property name="hazelcast.phone.home.enabled">false</property>
		<property name="hazelcast.logging.type">slf4j</property>
	</properties>

	<network>
		<port auto-increment="true">5701</port>
		<join>
			<multicast enabled="false">
				<multicast-group>224.2.2.3</multicast-group>
				<multicast-port>54327</multicast-port>
			</multicast>
			<tcp-ip enabled="true">
				<interface>127.0.0.1</interface>
			</tcp-ip>
		</join>
		<interfaces enabled="false">
			<interface>10.10.1.*</interface>
		</interfaces>
		<symmetric-encryption enabled="false">
			<!--
				encryption algorithm such as DES/ECB/PKCS5Padding, PBEWithMD5AndDES,
				AES/CBC/PKCS5Padding, Blowfish, DESede
			-->
			<algorithm>PBEWithMD5AndDES</algorithm>
			<!-- salt value to use when generating the secret key -->
			<salt>thesalt</salt>
			<!-- pass phrase to use when generating the secret key -->
			<password>thepass</password>
			<!-- iteration count to use when generating the secret key -->
			<iteration-count>19</iteration-count>
		</symmetric-encryption>
	</network>

	<executor-service>
		<pool-size>64</pool-size>
	</executor-service>

	<queue name="default">
		<!--
			Maximum size of the queue. When a JVM's local queue size reaches the
			maximum, all put/offer operations will get blocked until the queue
			size of the JVM goes down below the maximum. Any integer between 0
			and Integer.MAX_VALUE. 0 means Integer.MAX_VALUE. Default is 0.
		-->
		<max-size>0</max-size>
	</queue>

	<map name="default">
		<!--
			Number of backups. If 1 is set as the backup-count for example, then
			all entries of the map will be copied to another JVM for fail-safety.
			Valid numbers are 0 (no backup), 1, 2, 3.
		-->
		<backup-count>1</backup-count>
		<!--
			Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU
			(Least Frequently Used). NONE is the default.
		-->
		<eviction-policy>LRU</eviction-policy>
		<!--
			Maximum size of the map. When max size is reached, map is evicted
			based on the policy defined. Any integer between 0 and
			Integer.MAX_VALUE. 0 means Integer.MAX_VALUE. Default is 0.
		-->
		<max-size>5</max-size>
		<!--
			When max. size is reached, specified percentage of the map will be
			evicted. Any integer between 0 and 100. If 25 is set for example, 25%
			of the entries will get evicted.
		-->
		<!--  DEPRECATED SINCE: 3.7.0 <eviction-percentage>100</eviction-percentage-->

		<!--
			While recovering from split-brain (network partitioning), map entries
			in the small cluster will merge into the bigger cluster based on the
			policy set here. When an entry merge into the cluster, there might an
			existing entry with the same key already. Values of these entries
			might be different for that same key. Which value should be set for
			the key? Conflict is resolved by the policy set here. Default policy
			is hz.ADD_NEW_ENTRY There are built-in merge policies such as
			hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY ; entry will be
			added if the merging entry's key doesn't exist in the cluster.
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ;
			entry with the latest update wins.
		-->
		<merge-policy>DiscardMergePolicy</merge-policy>
	</map>

</hazelcast>
