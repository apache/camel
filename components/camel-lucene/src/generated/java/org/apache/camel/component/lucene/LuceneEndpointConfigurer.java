/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.lucene;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class LuceneEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        LuceneEndpoint target = (LuceneEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "analyzer": target.getConfig().setAnalyzer(property(camelContext, org.apache.lucene.analysis.Analyzer.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "indexdir":
        case "indexDir": target.getConfig().setIndexDir(property(camelContext, java.io.File.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxhits":
        case "maxHits": target.getConfig().setMaxHits(property(camelContext, int.class, value)); return true;
        case "srcdir":
        case "srcDir": target.getConfig().setSrcDir(property(camelContext, java.io.File.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("analyzer", org.apache.lucene.analysis.Analyzer.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("indexDir", java.io.File.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("maxHits", int.class);
        answer.put("srcDir", java.io.File.class);
        answer.put("synchronous", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        LuceneEndpoint target = (LuceneEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "analyzer": return target.getConfig().getAnalyzer();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "indexdir":
        case "indexDir": return target.getConfig().getIndexDir();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxhits":
        case "maxHits": return target.getConfig().getMaxHits();
        case "srcdir":
        case "srcDir": return target.getConfig().getSrcDir();
        case "synchronous": return target.isSynchronous();
        default: return null;
        }
    }
}

