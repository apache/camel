/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.aws.s3;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class S3ComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.aws.s3.S3Configuration getOrCreateConfiguration(S3Component target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.aws.s3.S3Configuration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        S3Component target = (S3Component) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acceleratemodeenabled":
        case "accelerateModeEnabled": getOrCreateConfiguration(target).setAccelerateModeEnabled(property(camelContext, boolean.class, value)); return true;
        case "accesskey":
        case "accessKey": getOrCreateConfiguration(target).setAccessKey(property(camelContext, java.lang.String.class, value)); return true;
        case "amazons3client":
        case "amazonS3Client": getOrCreateConfiguration(target).setAmazonS3Client(property(camelContext, com.amazonaws.services.s3.AmazonS3.class, value)); return true;
        case "autocreatebucket":
        case "autoCreateBucket": getOrCreateConfiguration(target).setAutoCreateBucket(property(camelContext, boolean.class, value)); return true;
        case "autoclosebody":
        case "autocloseBody": getOrCreateConfiguration(target).setAutocloseBody(property(camelContext, boolean.class, value)); return true;
        case "awskmskeyid":
        case "awsKMSKeyId": getOrCreateConfiguration(target).setAwsKMSKeyId(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "chunkedencodingdisabled":
        case "chunkedEncodingDisabled": getOrCreateConfiguration(target).setChunkedEncodingDisabled(property(camelContext, boolean.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.aws.s3.S3Configuration.class, value)); return true;
        case "deleteafterread":
        case "deleteAfterRead": getOrCreateConfiguration(target).setDeleteAfterRead(property(camelContext, boolean.class, value)); return true;
        case "deleteafterwrite":
        case "deleteAfterWrite": getOrCreateConfiguration(target).setDeleteAfterWrite(property(camelContext, boolean.class, value)); return true;
        case "delimiter": getOrCreateConfiguration(target).setDelimiter(property(camelContext, java.lang.String.class, value)); return true;
        case "dualstackenabled":
        case "dualstackEnabled": getOrCreateConfiguration(target).setDualstackEnabled(property(camelContext, boolean.class, value)); return true;
        case "encryptionmaterials":
        case "encryptionMaterials": getOrCreateConfiguration(target).setEncryptionMaterials(property(camelContext, com.amazonaws.services.s3.model.EncryptionMaterials.class, value)); return true;
        case "endpointconfiguration":
        case "endpointConfiguration": getOrCreateConfiguration(target).setEndpointConfiguration(property(camelContext, com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration.class, value)); return true;
        case "filename":
        case "fileName": getOrCreateConfiguration(target).setFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "forceglobalbucketaccessenabled":
        case "forceGlobalBucketAccessEnabled": getOrCreateConfiguration(target).setForceGlobalBucketAccessEnabled(property(camelContext, boolean.class, value)); return true;
        case "includebody":
        case "includeBody": getOrCreateConfiguration(target).setIncludeBody(property(camelContext, boolean.class, value)); return true;
        case "keyname":
        case "keyName": getOrCreateConfiguration(target).setKeyName(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "multipartupload":
        case "multiPartUpload": getOrCreateConfiguration(target).setMultiPartUpload(property(camelContext, boolean.class, value)); return true;
        case "operation": getOrCreateConfiguration(target).setOperation(property(camelContext, org.apache.camel.component.aws.s3.S3Operations.class, value)); return true;
        case "partsize":
        case "partSize": getOrCreateConfiguration(target).setPartSize(property(camelContext, long.class, value)); return true;
        case "pathstyleaccess":
        case "pathStyleAccess": getOrCreateConfiguration(target).setPathStyleAccess(property(camelContext, boolean.class, value)); return true;
        case "payloadsigningenabled":
        case "payloadSigningEnabled": getOrCreateConfiguration(target).setPayloadSigningEnabled(property(camelContext, boolean.class, value)); return true;
        case "policy": getOrCreateConfiguration(target).setPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "prefix": getOrCreateConfiguration(target).setPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyhost":
        case "proxyHost": getOrCreateConfiguration(target).setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport":
        case "proxyPort": getOrCreateConfiguration(target).setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyprotocol":
        case "proxyProtocol": getOrCreateConfiguration(target).setProxyProtocol(property(camelContext, com.amazonaws.Protocol.class, value)); return true;
        case "region": getOrCreateConfiguration(target).setRegion(property(camelContext, java.lang.String.class, value)); return true;
        case "secretkey":
        case "secretKey": getOrCreateConfiguration(target).setSecretKey(property(camelContext, java.lang.String.class, value)); return true;
        case "serversideencryption":
        case "serverSideEncryption": getOrCreateConfiguration(target).setServerSideEncryption(property(camelContext, java.lang.String.class, value)); return true;
        case "storageclass":
        case "storageClass": getOrCreateConfiguration(target).setStorageClass(property(camelContext, java.lang.String.class, value)); return true;
        case "useawskms":
        case "useAwsKMS": getOrCreateConfiguration(target).setUseAwsKMS(property(camelContext, boolean.class, value)); return true;
        case "useencryption":
        case "useEncryption": getOrCreateConfiguration(target).setUseEncryption(property(camelContext, boolean.class, value)); return true;
        case "useiamcredentials":
        case "useIAMCredentials": getOrCreateConfiguration(target).setUseIAMCredentials(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("accelerateModeEnabled", boolean.class);
        answer.put("accessKey", java.lang.String.class);
        answer.put("amazonS3Client", com.amazonaws.services.s3.AmazonS3.class);
        answer.put("autoCreateBucket", boolean.class);
        answer.put("autocloseBody", boolean.class);
        answer.put("awsKMSKeyId", java.lang.String.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("chunkedEncodingDisabled", boolean.class);
        answer.put("configuration", org.apache.camel.component.aws.s3.S3Configuration.class);
        answer.put("deleteAfterRead", boolean.class);
        answer.put("deleteAfterWrite", boolean.class);
        answer.put("delimiter", java.lang.String.class);
        answer.put("dualstackEnabled", boolean.class);
        answer.put("encryptionMaterials", com.amazonaws.services.s3.model.EncryptionMaterials.class);
        answer.put("endpointConfiguration", com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration.class);
        answer.put("fileName", java.lang.String.class);
        answer.put("forceGlobalBucketAccessEnabled", boolean.class);
        answer.put("includeBody", boolean.class);
        answer.put("keyName", java.lang.String.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("multiPartUpload", boolean.class);
        answer.put("operation", org.apache.camel.component.aws.s3.S3Operations.class);
        answer.put("partSize", long.class);
        answer.put("pathStyleAccess", boolean.class);
        answer.put("payloadSigningEnabled", boolean.class);
        answer.put("policy", java.lang.String.class);
        answer.put("prefix", java.lang.String.class);
        answer.put("proxyHost", java.lang.String.class);
        answer.put("proxyPort", java.lang.Integer.class);
        answer.put("proxyProtocol", com.amazonaws.Protocol.class);
        answer.put("region", java.lang.String.class);
        answer.put("secretKey", java.lang.String.class);
        answer.put("serverSideEncryption", java.lang.String.class);
        answer.put("storageClass", java.lang.String.class);
        answer.put("useAwsKMS", boolean.class);
        answer.put("useEncryption", boolean.class);
        answer.put("useIAMCredentials", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        S3Component target = (S3Component) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acceleratemodeenabled":
        case "accelerateModeEnabled": getOrCreateConfiguration(target).isAccelerateModeEnabled(); return true;
        case "accesskey":
        case "accessKey": getOrCreateConfiguration(target).getAccessKey(); return true;
        case "amazons3client":
        case "amazonS3Client": getOrCreateConfiguration(target).getAmazonS3Client(); return true;
        case "autocreatebucket":
        case "autoCreateBucket": getOrCreateConfiguration(target).isAutoCreateBucket(); return true;
        case "autoclosebody":
        case "autocloseBody": getOrCreateConfiguration(target).isAutocloseBody(); return true;
        case "awskmskeyid":
        case "awsKMSKeyId": getOrCreateConfiguration(target).getAwsKMSKeyId(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "chunkedencodingdisabled":
        case "chunkedEncodingDisabled": getOrCreateConfiguration(target).isChunkedEncodingDisabled(); return true;
        case "configuration": target.getConfiguration(); return true;
        case "deleteafterread":
        case "deleteAfterRead": getOrCreateConfiguration(target).isDeleteAfterRead(); return true;
        case "deleteafterwrite":
        case "deleteAfterWrite": getOrCreateConfiguration(target).isDeleteAfterWrite(); return true;
        case "delimiter": getOrCreateConfiguration(target).getDelimiter(); return true;
        case "dualstackenabled":
        case "dualstackEnabled": getOrCreateConfiguration(target).isDualstackEnabled(); return true;
        case "encryptionmaterials":
        case "encryptionMaterials": getOrCreateConfiguration(target).getEncryptionMaterials(); return true;
        case "endpointconfiguration":
        case "endpointConfiguration": getOrCreateConfiguration(target).getEndpointConfiguration(); return true;
        case "filename":
        case "fileName": getOrCreateConfiguration(target).getFileName(); return true;
        case "forceglobalbucketaccessenabled":
        case "forceGlobalBucketAccessEnabled": getOrCreateConfiguration(target).isForceGlobalBucketAccessEnabled(); return true;
        case "includebody":
        case "includeBody": getOrCreateConfiguration(target).isIncludeBody(); return true;
        case "keyname":
        case "keyName": getOrCreateConfiguration(target).getKeyName(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "multipartupload":
        case "multiPartUpload": getOrCreateConfiguration(target).isMultiPartUpload(); return true;
        case "operation": getOrCreateConfiguration(target).getOperation(); return true;
        case "partsize":
        case "partSize": getOrCreateConfiguration(target).getPartSize(); return true;
        case "pathstyleaccess":
        case "pathStyleAccess": getOrCreateConfiguration(target).isPathStyleAccess(); return true;
        case "payloadsigningenabled":
        case "payloadSigningEnabled": getOrCreateConfiguration(target).isPayloadSigningEnabled(); return true;
        case "policy": getOrCreateConfiguration(target).getPolicy(); return true;
        case "prefix": getOrCreateConfiguration(target).getPrefix(); return true;
        case "proxyhost":
        case "proxyHost": getOrCreateConfiguration(target).getProxyHost(); return true;
        case "proxyport":
        case "proxyPort": getOrCreateConfiguration(target).getProxyPort(); return true;
        case "proxyprotocol":
        case "proxyProtocol": getOrCreateConfiguration(target).getProxyProtocol(); return true;
        case "region": getOrCreateConfiguration(target).getRegion(); return true;
        case "secretkey":
        case "secretKey": getOrCreateConfiguration(target).getSecretKey(); return true;
        case "serversideencryption":
        case "serverSideEncryption": getOrCreateConfiguration(target).getServerSideEncryption(); return true;
        case "storageclass":
        case "storageClass": getOrCreateConfiguration(target).getStorageClass(); return true;
        case "useawskms":
        case "useAwsKMS": getOrCreateConfiguration(target).isUseAwsKMS(); return true;
        case "useencryption":
        case "useEncryption": getOrCreateConfiguration(target).isUseEncryption(); return true;
        case "useiamcredentials":
        case "useIAMCredentials": getOrCreateConfiguration(target).isUseIAMCredentials(); return true;
        default: return null;
        }
    }
}

