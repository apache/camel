/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.nats;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class NatsEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        NatsEndpoint target = (NatsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "connection": target.getConfiguration().setConnection(property(camelContext, io.nats.client.Connection.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.getConfiguration().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "flushconnection":
        case "flushConnection": target.getConfiguration().setFlushConnection(property(camelContext, boolean.class, value)); return true;
        case "flushtimeout":
        case "flushTimeout": target.getConfiguration().setFlushTimeout(property(camelContext, int.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxmessages":
        case "maxMessages": target.getConfiguration().setMaxMessages(property(camelContext, java.lang.String.class, value)); return true;
        case "maxpingsout":
        case "maxPingsOut": target.getConfiguration().setMaxPingsOut(property(camelContext, int.class, value)); return true;
        case "maxreconnectattempts":
        case "maxReconnectAttempts": target.getConfiguration().setMaxReconnectAttempts(property(camelContext, int.class, value)); return true;
        case "noecho":
        case "noEcho": target.getConfiguration().setNoEcho(property(camelContext, boolean.class, value)); return true;
        case "norandomizeservers":
        case "noRandomizeServers": target.getConfiguration().setNoRandomizeServers(property(camelContext, boolean.class, value)); return true;
        case "pedantic": target.getConfiguration().setPedantic(property(camelContext, boolean.class, value)); return true;
        case "pinginterval":
        case "pingInterval": target.getConfiguration().setPingInterval(property(camelContext, int.class, value)); return true;
        case "poolsize":
        case "poolSize": target.getConfiguration().setPoolSize(property(camelContext, int.class, value)); return true;
        case "queuename":
        case "queueName": target.getConfiguration().setQueueName(property(camelContext, java.lang.String.class, value)); return true;
        case "reconnect": target.getConfiguration().setReconnect(property(camelContext, boolean.class, value)); return true;
        case "reconnecttimewait":
        case "reconnectTimeWait": target.getConfiguration().setReconnectTimeWait(property(camelContext, int.class, value)); return true;
        case "replysubject":
        case "replySubject": target.getConfiguration().setReplySubject(property(camelContext, java.lang.String.class, value)); return true;
        case "replytodisabled":
        case "replyToDisabled": target.getConfiguration().setReplyToDisabled(property(camelContext, boolean.class, value)); return true;
        case "requestcleanupinterval":
        case "requestCleanupInterval": target.getConfiguration().setRequestCleanupInterval(property(camelContext, int.class, value)); return true;
        case "secure": target.getConfiguration().setSecure(property(camelContext, boolean.class, value)); return true;
        case "servers": target.getConfiguration().setServers(property(camelContext, java.lang.String.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "verbose": target.getConfiguration().setVerbose(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

}

