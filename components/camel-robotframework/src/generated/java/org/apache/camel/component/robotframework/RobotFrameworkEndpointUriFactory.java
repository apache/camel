/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.robotframework;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class RobotFrameworkEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":resourceUri";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "allowContextMapAll", "allowTemplateFromHeader", "argumentFile", "backoffErrorThreshold",
            "backoffIdleThreshold", "backoffMultiplier", "bridgeErrorHandler", "combinedTagStats", "contentCache",
            "criticalTags", "debugFile", "delay", "document", "dryrun", "exceptionHandler", "exchangePattern", "excludes",
            "exitOnFailure", "greedy", "includes", "initialDelay", "lazyStartProducer", "listener", "listeners", "log",
            "logLevel", "logTitle", "metadata", "monitorColors", "monitorWidth", "name", "noStatusReturnCode",
            "nonCriticalTags", "output", "outputDirectory", "pollStrategy", "randomize", "repeatCount", "report",
            "reportBackground", "reportTitle", "resourceUri", "runEmptySuite", "runFailed", "runLoggingLevel", "runMode",
            "scheduledExecutorService", "scheduler", "schedulerProperties", "sendEmptyMessageWhenIdle",
            "skipTeardownOnExit", "splitOutputs", "startScheduler", "suiteStatLevel", "suites", "summaryTitle", "tagDocs",
            "tagStatExcludes", "tagStatIncludes", "tagStatLinks", "tags", "tests", "timeUnit", "timestampOutputs",
            "useFixedDelay", "variableFiles", "variables", "warnOnSkippedFiles", "xunitFile");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of();
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "scheduler.");

    @Override
    public boolean isEnabled(String scheme) {
        return "robotframework".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "resourceUri", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

