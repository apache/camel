/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.debezium;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DebeziumMySqlEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DebeziumMySqlEndpoint target = (DebeziumMySqlEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "additionalproperties":
        case "additionalProperties": target.getConfiguration().setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bigintunsignedhandlingmode":
        case "bigintUnsignedHandlingMode": target.getConfiguration().setBigintUnsignedHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "binlogbuffersize":
        case "binlogBufferSize": target.getConfiguration().setBinlogBufferSize(property(camelContext, int.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "columnblacklist":
        case "columnBlacklist": target.getConfiguration().setColumnBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "connectkeepalive":
        case "connectKeepAlive": target.getConfiguration().setConnectKeepAlive(property(camelContext, boolean.class, value)); return true;
        case "connectkeepaliveintervalms":
        case "connectKeepAliveIntervalMs": target.getConfiguration().setConnectKeepAliveIntervalMs(property(camelContext, long.class, value)); return true;
        case "connecttimeoutms":
        case "connectTimeoutMs": target.getConfiguration().setConnectTimeoutMs(property(camelContext, int.class, value)); return true;
        case "databaseblacklist":
        case "databaseBlacklist": target.getConfiguration().setDatabaseBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistory":
        case "databaseHistory": target.getConfiguration().setDatabaseHistory(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistoryfilefilename":
        case "databaseHistoryFileFilename": target.getConfiguration().setDatabaseHistoryFileFilename(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistorykafkabootstrapservers":
        case "databaseHistoryKafkaBootstrapServers": target.getConfiguration().setDatabaseHistoryKafkaBootstrapServers(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistorykafkarecoveryattempts":
        case "databaseHistoryKafkaRecoveryAttempts": target.getConfiguration().setDatabaseHistoryKafkaRecoveryAttempts(property(camelContext, int.class, value)); return true;
        case "databasehistorykafkarecoverypollintervalms":
        case "databaseHistoryKafkaRecoveryPollIntervalMs": target.getConfiguration().setDatabaseHistoryKafkaRecoveryPollIntervalMs(property(camelContext, int.class, value)); return true;
        case "databasehistorykafkatopic":
        case "databaseHistoryKafkaTopic": target.getConfiguration().setDatabaseHistoryKafkaTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistoryskipunparseableddl":
        case "databaseHistorySkipUnparseableDdl": target.getConfiguration().setDatabaseHistorySkipUnparseableDdl(property(camelContext, boolean.class, value)); return true;
        case "databasehistorystoreonlymonitoredtablesddl":
        case "databaseHistoryStoreOnlyMonitoredTablesDdl": target.getConfiguration().setDatabaseHistoryStoreOnlyMonitoredTablesDdl(property(camelContext, boolean.class, value)); return true;
        case "databasehostname":
        case "databaseHostname": target.getConfiguration().setDatabaseHostname(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseinitialstatements":
        case "databaseInitialStatements": target.getConfiguration().setDatabaseInitialStatements(property(camelContext, java.lang.String.class, value)); return true;
        case "databasejdbcdriver":
        case "databaseJdbcDriver": target.getConfiguration().setDatabaseJdbcDriver(property(camelContext, java.lang.String.class, value)); return true;
        case "databasepassword":
        case "databasePassword": target.getConfiguration().setDatabasePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseport":
        case "databasePort": target.getConfiguration().setDatabasePort(property(camelContext, int.class, value)); return true;
        case "databaseserverid":
        case "databaseServerId": target.getConfiguration().setDatabaseServerId(property(camelContext, long.class, value)); return true;
        case "databaseserveridoffset":
        case "databaseServerIdOffset": target.getConfiguration().setDatabaseServerIdOffset(property(camelContext, long.class, value)); return true;
        case "databaseservername":
        case "databaseServerName": target.getConfiguration().setDatabaseServerName(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslkeystore":
        case "databaseSslKeystore": target.getConfiguration().setDatabaseSslKeystore(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslkeystorepassword":
        case "databaseSslKeystorePassword": target.getConfiguration().setDatabaseSslKeystorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslmode":
        case "databaseSslMode": target.getConfiguration().setDatabaseSslMode(property(camelContext, java.lang.String.class, value)); return true;
        case "databasessltruststore":
        case "databaseSslTruststore": target.getConfiguration().setDatabaseSslTruststore(property(camelContext, java.lang.String.class, value)); return true;
        case "databasessltruststorepassword":
        case "databaseSslTruststorePassword": target.getConfiguration().setDatabaseSslTruststorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseuser":
        case "databaseUser": target.getConfiguration().setDatabaseUser(property(camelContext, java.lang.String.class, value)); return true;
        case "databasewhitelist":
        case "databaseWhitelist": target.getConfiguration().setDatabaseWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "decimalhandlingmode":
        case "decimalHandlingMode": target.getConfiguration().setDecimalHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "enabletimeadjuster":
        case "enableTimeAdjuster": target.getConfiguration().setEnableTimeAdjuster(property(camelContext, boolean.class, value)); return true;
        case "eventdeserializationfailurehandlingmode":
        case "eventDeserializationFailureHandlingMode": target.getConfiguration().setEventDeserializationFailureHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "gtidnewchannelposition":
        case "gtidNewChannelPosition": target.getConfiguration().setGtidNewChannelPosition(property(camelContext, java.lang.String.class, value)); return true;
        case "gtidsourceexcludes":
        case "gtidSourceExcludes": target.getConfiguration().setGtidSourceExcludes(property(camelContext, java.lang.String.class, value)); return true;
        case "gtidsourcefilterdmlevents":
        case "gtidSourceFilterDmlEvents": target.getConfiguration().setGtidSourceFilterDmlEvents(property(camelContext, boolean.class, value)); return true;
        case "gtidsourceincludes":
        case "gtidSourceIncludes": target.getConfiguration().setGtidSourceIncludes(property(camelContext, java.lang.String.class, value)); return true;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": target.getConfiguration().setHeartbeatIntervalMs(property(camelContext, int.class, value)); return true;
        case "heartbeattopicsprefix":
        case "heartbeatTopicsPrefix": target.getConfiguration().setHeartbeatTopicsPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "includequery":
        case "includeQuery": target.getConfiguration().setIncludeQuery(property(camelContext, boolean.class, value)); return true;
        case "includeschemachanges":
        case "includeSchemaChanges": target.getConfiguration().setIncludeSchemaChanges(property(camelContext, boolean.class, value)); return true;
        case "inconsistentschemahandlingmode":
        case "inconsistentSchemaHandlingMode": target.getConfiguration().setInconsistentSchemaHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "internalkeyconverter":
        case "internalKeyConverter": target.getConfiguration().setInternalKeyConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "internalvalueconverter":
        case "internalValueConverter": target.getConfiguration().setInternalValueConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "maxbatchsize":
        case "maxBatchSize": target.getConfiguration().setMaxBatchSize(property(camelContext, int.class, value)); return true;
        case "maxqueuesize":
        case "maxQueueSize": target.getConfiguration().setMaxQueueSize(property(camelContext, int.class, value)); return true;
        case "messagekeycolumns":
        case "messageKeyColumns": target.getConfiguration().setMessageKeyColumns(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommitpolicy":
        case "offsetCommitPolicy": target.getConfiguration().setOffsetCommitPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommittimeoutms":
        case "offsetCommitTimeoutMs": target.getConfiguration().setOffsetCommitTimeoutMs(property(camelContext, long.class, value)); return true;
        case "offsetflushintervalms":
        case "offsetFlushIntervalMs": target.getConfiguration().setOffsetFlushIntervalMs(property(camelContext, long.class, value)); return true;
        case "offsetstorage":
        case "offsetStorage": target.getConfiguration().setOffsetStorage(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragefilename":
        case "offsetStorageFileName": target.getConfiguration().setOffsetStorageFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragepartitions":
        case "offsetStoragePartitions": target.getConfiguration().setOffsetStoragePartitions(property(camelContext, int.class, value)); return true;
        case "offsetstoragereplicationfactor":
        case "offsetStorageReplicationFactor": target.getConfiguration().setOffsetStorageReplicationFactor(property(camelContext, int.class, value)); return true;
        case "offsetstoragetopic":
        case "offsetStorageTopic": target.getConfiguration().setOffsetStorageTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "pollintervalms":
        case "pollIntervalMs": target.getConfiguration().setPollIntervalMs(property(camelContext, long.class, value)); return true;
        case "snapshotdelayms":
        case "snapshotDelayMs": target.getConfiguration().setSnapshotDelayMs(property(camelContext, long.class, value)); return true;
        case "snapshotfetchsize":
        case "snapshotFetchSize": target.getConfiguration().setSnapshotFetchSize(property(camelContext, int.class, value)); return true;
        case "snapshotlockingmode":
        case "snapshotLockingMode": target.getConfiguration().setSnapshotLockingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "snapshotmode":
        case "snapshotMode": target.getConfiguration().setSnapshotMode(property(camelContext, java.lang.String.class, value)); return true;
        case "snapshotnewtables":
        case "snapshotNewTables": target.getConfiguration().setSnapshotNewTables(property(camelContext, java.lang.String.class, value)); return true;
        case "snapshotselectstatementoverrides":
        case "snapshotSelectStatementOverrides": target.getConfiguration().setSnapshotSelectStatementOverrides(property(camelContext, java.lang.String.class, value)); return true;
        case "sourcestructversion":
        case "sourceStructVersion": target.getConfiguration().setSourceStructVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "tableblacklist":
        case "tableBlacklist": target.getConfiguration().setTableBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "tableignorebuiltin":
        case "tableIgnoreBuiltin": target.getConfiguration().setTableIgnoreBuiltin(property(camelContext, boolean.class, value)); return true;
        case "tablewhitelist":
        case "tableWhitelist": target.getConfiguration().setTableWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "timeprecisionmode":
        case "timePrecisionMode": target.getConfiguration().setTimePrecisionMode(property(camelContext, java.lang.String.class, value)); return true;
        case "tombstonesondelete":
        case "tombstonesOnDelete": target.getConfiguration().setTombstonesOnDelete(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("additionalProperties", java.util.Map.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bigintUnsignedHandlingMode", java.lang.String.class);
        answer.put("binlogBufferSize", int.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("columnBlacklist", java.lang.String.class);
        answer.put("connectKeepAlive", boolean.class);
        answer.put("connectKeepAliveIntervalMs", long.class);
        answer.put("connectTimeoutMs", int.class);
        answer.put("databaseBlacklist", java.lang.String.class);
        answer.put("databaseHistory", java.lang.String.class);
        answer.put("databaseHistoryFileFilename", java.lang.String.class);
        answer.put("databaseHistoryKafkaBootstrapServers", java.lang.String.class);
        answer.put("databaseHistoryKafkaRecoveryAttempts", int.class);
        answer.put("databaseHistoryKafkaRecoveryPollIntervalMs", int.class);
        answer.put("databaseHistoryKafkaTopic", java.lang.String.class);
        answer.put("databaseHistorySkipUnparseableDdl", boolean.class);
        answer.put("databaseHistoryStoreOnlyMonitoredTablesDdl", boolean.class);
        answer.put("databaseHostname", java.lang.String.class);
        answer.put("databaseInitialStatements", java.lang.String.class);
        answer.put("databaseJdbcDriver", java.lang.String.class);
        answer.put("databasePassword", java.lang.String.class);
        answer.put("databasePort", int.class);
        answer.put("databaseServerId", long.class);
        answer.put("databaseServerIdOffset", long.class);
        answer.put("databaseServerName", java.lang.String.class);
        answer.put("databaseSslKeystore", java.lang.String.class);
        answer.put("databaseSslKeystorePassword", java.lang.String.class);
        answer.put("databaseSslMode", java.lang.String.class);
        answer.put("databaseSslTruststore", java.lang.String.class);
        answer.put("databaseSslTruststorePassword", java.lang.String.class);
        answer.put("databaseUser", java.lang.String.class);
        answer.put("databaseWhitelist", java.lang.String.class);
        answer.put("decimalHandlingMode", java.lang.String.class);
        answer.put("enableTimeAdjuster", boolean.class);
        answer.put("eventDeserializationFailureHandlingMode", java.lang.String.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("gtidNewChannelPosition", java.lang.String.class);
        answer.put("gtidSourceExcludes", java.lang.String.class);
        answer.put("gtidSourceFilterDmlEvents", boolean.class);
        answer.put("gtidSourceIncludes", java.lang.String.class);
        answer.put("heartbeatIntervalMs", int.class);
        answer.put("heartbeatTopicsPrefix", java.lang.String.class);
        answer.put("includeQuery", boolean.class);
        answer.put("includeSchemaChanges", boolean.class);
        answer.put("inconsistentSchemaHandlingMode", java.lang.String.class);
        answer.put("internalKeyConverter", java.lang.String.class);
        answer.put("internalValueConverter", java.lang.String.class);
        answer.put("maxBatchSize", int.class);
        answer.put("maxQueueSize", int.class);
        answer.put("messageKeyColumns", java.lang.String.class);
        answer.put("offsetCommitPolicy", java.lang.String.class);
        answer.put("offsetCommitTimeoutMs", long.class);
        answer.put("offsetFlushIntervalMs", long.class);
        answer.put("offsetStorage", java.lang.String.class);
        answer.put("offsetStorageFileName", java.lang.String.class);
        answer.put("offsetStoragePartitions", int.class);
        answer.put("offsetStorageReplicationFactor", int.class);
        answer.put("offsetStorageTopic", java.lang.String.class);
        answer.put("pollIntervalMs", long.class);
        answer.put("snapshotDelayMs", long.class);
        answer.put("snapshotFetchSize", int.class);
        answer.put("snapshotLockingMode", java.lang.String.class);
        answer.put("snapshotMode", java.lang.String.class);
        answer.put("snapshotNewTables", java.lang.String.class);
        answer.put("snapshotSelectStatementOverrides", java.lang.String.class);
        answer.put("sourceStructVersion", java.lang.String.class);
        answer.put("synchronous", boolean.class);
        answer.put("tableBlacklist", java.lang.String.class);
        answer.put("tableIgnoreBuiltin", boolean.class);
        answer.put("tableWhitelist", java.lang.String.class);
        answer.put("timePrecisionMode", java.lang.String.class);
        answer.put("tombstonesOnDelete", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DebeziumMySqlEndpoint target = (DebeziumMySqlEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "additionalproperties":
        case "additionalProperties": target.getConfiguration().getAdditionalProperties(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bigintunsignedhandlingmode":
        case "bigintUnsignedHandlingMode": target.getConfiguration().getBigintUnsignedHandlingMode(); return true;
        case "binlogbuffersize":
        case "binlogBufferSize": target.getConfiguration().getBinlogBufferSize(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "columnblacklist":
        case "columnBlacklist": target.getConfiguration().getColumnBlacklist(); return true;
        case "connectkeepalive":
        case "connectKeepAlive": target.getConfiguration().isConnectKeepAlive(); return true;
        case "connectkeepaliveintervalms":
        case "connectKeepAliveIntervalMs": target.getConfiguration().getConnectKeepAliveIntervalMs(); return true;
        case "connecttimeoutms":
        case "connectTimeoutMs": target.getConfiguration().getConnectTimeoutMs(); return true;
        case "databaseblacklist":
        case "databaseBlacklist": target.getConfiguration().getDatabaseBlacklist(); return true;
        case "databasehistory":
        case "databaseHistory": target.getConfiguration().getDatabaseHistory(); return true;
        case "databasehistoryfilefilename":
        case "databaseHistoryFileFilename": target.getConfiguration().getDatabaseHistoryFileFilename(); return true;
        case "databasehistorykafkabootstrapservers":
        case "databaseHistoryKafkaBootstrapServers": target.getConfiguration().getDatabaseHistoryKafkaBootstrapServers(); return true;
        case "databasehistorykafkarecoveryattempts":
        case "databaseHistoryKafkaRecoveryAttempts": target.getConfiguration().getDatabaseHistoryKafkaRecoveryAttempts(); return true;
        case "databasehistorykafkarecoverypollintervalms":
        case "databaseHistoryKafkaRecoveryPollIntervalMs": target.getConfiguration().getDatabaseHistoryKafkaRecoveryPollIntervalMs(); return true;
        case "databasehistorykafkatopic":
        case "databaseHistoryKafkaTopic": target.getConfiguration().getDatabaseHistoryKafkaTopic(); return true;
        case "databasehistoryskipunparseableddl":
        case "databaseHistorySkipUnparseableDdl": target.getConfiguration().isDatabaseHistorySkipUnparseableDdl(); return true;
        case "databasehistorystoreonlymonitoredtablesddl":
        case "databaseHistoryStoreOnlyMonitoredTablesDdl": target.getConfiguration().isDatabaseHistoryStoreOnlyMonitoredTablesDdl(); return true;
        case "databasehostname":
        case "databaseHostname": target.getConfiguration().getDatabaseHostname(); return true;
        case "databaseinitialstatements":
        case "databaseInitialStatements": target.getConfiguration().getDatabaseInitialStatements(); return true;
        case "databasejdbcdriver":
        case "databaseJdbcDriver": target.getConfiguration().getDatabaseJdbcDriver(); return true;
        case "databasepassword":
        case "databasePassword": target.getConfiguration().getDatabasePassword(); return true;
        case "databaseport":
        case "databasePort": target.getConfiguration().getDatabasePort(); return true;
        case "databaseserverid":
        case "databaseServerId": target.getConfiguration().getDatabaseServerId(); return true;
        case "databaseserveridoffset":
        case "databaseServerIdOffset": target.getConfiguration().getDatabaseServerIdOffset(); return true;
        case "databaseservername":
        case "databaseServerName": target.getConfiguration().getDatabaseServerName(); return true;
        case "databasesslkeystore":
        case "databaseSslKeystore": target.getConfiguration().getDatabaseSslKeystore(); return true;
        case "databasesslkeystorepassword":
        case "databaseSslKeystorePassword": target.getConfiguration().getDatabaseSslKeystorePassword(); return true;
        case "databasesslmode":
        case "databaseSslMode": target.getConfiguration().getDatabaseSslMode(); return true;
        case "databasessltruststore":
        case "databaseSslTruststore": target.getConfiguration().getDatabaseSslTruststore(); return true;
        case "databasessltruststorepassword":
        case "databaseSslTruststorePassword": target.getConfiguration().getDatabaseSslTruststorePassword(); return true;
        case "databaseuser":
        case "databaseUser": target.getConfiguration().getDatabaseUser(); return true;
        case "databasewhitelist":
        case "databaseWhitelist": target.getConfiguration().getDatabaseWhitelist(); return true;
        case "decimalhandlingmode":
        case "decimalHandlingMode": target.getConfiguration().getDecimalHandlingMode(); return true;
        case "enabletimeadjuster":
        case "enableTimeAdjuster": target.getConfiguration().isEnableTimeAdjuster(); return true;
        case "eventdeserializationfailurehandlingmode":
        case "eventDeserializationFailureHandlingMode": target.getConfiguration().getEventDeserializationFailureHandlingMode(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "gtidnewchannelposition":
        case "gtidNewChannelPosition": target.getConfiguration().getGtidNewChannelPosition(); return true;
        case "gtidsourceexcludes":
        case "gtidSourceExcludes": target.getConfiguration().getGtidSourceExcludes(); return true;
        case "gtidsourcefilterdmlevents":
        case "gtidSourceFilterDmlEvents": target.getConfiguration().isGtidSourceFilterDmlEvents(); return true;
        case "gtidsourceincludes":
        case "gtidSourceIncludes": target.getConfiguration().getGtidSourceIncludes(); return true;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": target.getConfiguration().getHeartbeatIntervalMs(); return true;
        case "heartbeattopicsprefix":
        case "heartbeatTopicsPrefix": target.getConfiguration().getHeartbeatTopicsPrefix(); return true;
        case "includequery":
        case "includeQuery": target.getConfiguration().isIncludeQuery(); return true;
        case "includeschemachanges":
        case "includeSchemaChanges": target.getConfiguration().isIncludeSchemaChanges(); return true;
        case "inconsistentschemahandlingmode":
        case "inconsistentSchemaHandlingMode": target.getConfiguration().getInconsistentSchemaHandlingMode(); return true;
        case "internalkeyconverter":
        case "internalKeyConverter": target.getConfiguration().getInternalKeyConverter(); return true;
        case "internalvalueconverter":
        case "internalValueConverter": target.getConfiguration().getInternalValueConverter(); return true;
        case "maxbatchsize":
        case "maxBatchSize": target.getConfiguration().getMaxBatchSize(); return true;
        case "maxqueuesize":
        case "maxQueueSize": target.getConfiguration().getMaxQueueSize(); return true;
        case "messagekeycolumns":
        case "messageKeyColumns": target.getConfiguration().getMessageKeyColumns(); return true;
        case "offsetcommitpolicy":
        case "offsetCommitPolicy": target.getConfiguration().getOffsetCommitPolicy(); return true;
        case "offsetcommittimeoutms":
        case "offsetCommitTimeoutMs": target.getConfiguration().getOffsetCommitTimeoutMs(); return true;
        case "offsetflushintervalms":
        case "offsetFlushIntervalMs": target.getConfiguration().getOffsetFlushIntervalMs(); return true;
        case "offsetstorage":
        case "offsetStorage": target.getConfiguration().getOffsetStorage(); return true;
        case "offsetstoragefilename":
        case "offsetStorageFileName": target.getConfiguration().getOffsetStorageFileName(); return true;
        case "offsetstoragepartitions":
        case "offsetStoragePartitions": target.getConfiguration().getOffsetStoragePartitions(); return true;
        case "offsetstoragereplicationfactor":
        case "offsetStorageReplicationFactor": target.getConfiguration().getOffsetStorageReplicationFactor(); return true;
        case "offsetstoragetopic":
        case "offsetStorageTopic": target.getConfiguration().getOffsetStorageTopic(); return true;
        case "pollintervalms":
        case "pollIntervalMs": target.getConfiguration().getPollIntervalMs(); return true;
        case "snapshotdelayms":
        case "snapshotDelayMs": target.getConfiguration().getSnapshotDelayMs(); return true;
        case "snapshotfetchsize":
        case "snapshotFetchSize": target.getConfiguration().getSnapshotFetchSize(); return true;
        case "snapshotlockingmode":
        case "snapshotLockingMode": target.getConfiguration().getSnapshotLockingMode(); return true;
        case "snapshotmode":
        case "snapshotMode": target.getConfiguration().getSnapshotMode(); return true;
        case "snapshotnewtables":
        case "snapshotNewTables": target.getConfiguration().getSnapshotNewTables(); return true;
        case "snapshotselectstatementoverrides":
        case "snapshotSelectStatementOverrides": target.getConfiguration().getSnapshotSelectStatementOverrides(); return true;
        case "sourcestructversion":
        case "sourceStructVersion": target.getConfiguration().getSourceStructVersion(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "tableblacklist":
        case "tableBlacklist": target.getConfiguration().getTableBlacklist(); return true;
        case "tableignorebuiltin":
        case "tableIgnoreBuiltin": target.getConfiguration().isTableIgnoreBuiltin(); return true;
        case "tablewhitelist":
        case "tableWhitelist": target.getConfiguration().getTableWhitelist(); return true;
        case "timeprecisionmode":
        case "timePrecisionMode": target.getConfiguration().getTimePrecisionMode(); return true;
        case "tombstonesondelete":
        case "tombstonesOnDelete": target.getConfiguration().isTombstonesOnDelete(); return true;
        default: return null;
        }
    }
}

