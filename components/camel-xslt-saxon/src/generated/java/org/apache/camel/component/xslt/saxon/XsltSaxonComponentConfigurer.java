/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.xslt.saxon;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class XsltSaxonComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "saxonExtensionFunctions": ((XsltSaxonComponent) target).setSaxonExtensionFunctions(property(camelContext, java.lang.String.class, value)); return true;
        case "saxonConfiguration": ((XsltSaxonComponent) target).setSaxonConfiguration(property(camelContext, net.sf.saxon.Configuration.class, value)); return true;
        case "saxonConfigurationProperties": ((XsltSaxonComponent) target).setSaxonConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "uriResolverFactory": ((XsltSaxonComponent) target).setUriResolverFactory(property(camelContext, org.apache.camel.component.xslt.XsltUriResolverFactory.class, value)); return true;
        case "uriResolver": ((XsltSaxonComponent) target).setUriResolver(property(camelContext, javax.xml.transform.URIResolver.class, value)); return true;
        case "contentCache": ((XsltSaxonComponent) target).setContentCache(property(camelContext, boolean.class, value)); return true;
        case "transformerFactoryConfigurationStrategy": ((XsltSaxonComponent) target).setTransformerFactoryConfigurationStrategy(property(camelContext, org.apache.camel.component.xslt.TransformerFactoryConfigurationStrategy.class, value)); return true;
        case "transformerFactoryClass": ((XsltSaxonComponent) target).setTransformerFactoryClass(property(camelContext, java.lang.String.class, value)); return true;
        case "basicPropertyBinding": ((XsltSaxonComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((XsltSaxonComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "saxonextensionfunctions": ((XsltSaxonComponent) target).setSaxonExtensionFunctions(property(camelContext, java.lang.String.class, value)); return true;
        case "saxonconfiguration": ((XsltSaxonComponent) target).setSaxonConfiguration(property(camelContext, net.sf.saxon.Configuration.class, value)); return true;
        case "saxonconfigurationproperties": ((XsltSaxonComponent) target).setSaxonConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "uriresolverfactory": ((XsltSaxonComponent) target).setUriResolverFactory(property(camelContext, org.apache.camel.component.xslt.XsltUriResolverFactory.class, value)); return true;
        case "uriresolver": ((XsltSaxonComponent) target).setUriResolver(property(camelContext, javax.xml.transform.URIResolver.class, value)); return true;
        case "contentcache": ((XsltSaxonComponent) target).setContentCache(property(camelContext, boolean.class, value)); return true;
        case "transformerfactoryconfigurationstrategy": ((XsltSaxonComponent) target).setTransformerFactoryConfigurationStrategy(property(camelContext, org.apache.camel.component.xslt.TransformerFactoryConfigurationStrategy.class, value)); return true;
        case "transformerfactoryclass": ((XsltSaxonComponent) target).setTransformerFactoryClass(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding": ((XsltSaxonComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((XsltSaxonComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

