/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.rabbitmq;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class RabbitMQEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":exchangeName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "additionalHeaders", "additionalProperties", "addresses", "allowCustomHeaders",
            "allowMessageBodySerialization", "allowNullHeaders", "args", "autoAck", "autoDelete",
            "automaticRecoveryEnabled", "bridgeEndpoint", "bridgeErrorHandler", "channelPoolMaxSize", "channelPoolMaxWait",
            "clientProperties", "concurrentConsumers", "connectionFactory", "connectionFactoryExceptionHandler",
            "connectionTimeout", "consumerTag", "deadLetterExchange", "deadLetterExchangeType", "deadLetterQueue",
            "deadLetterRoutingKey", "declare", "durable", "exceptionHandler", "exchangeName", "exchangePattern",
            "exchangeType", "exclusive", "exclusiveConsumer", "guaranteedDeliveries", "hostname", "immediate",
            "lazyStartProducer", "mandatory", "networkRecoveryInterval", "passive", "password", "portNumber",
            "prefetchCount", "prefetchEnabled", "prefetchGlobal", "prefetchSize", "publisherAcknowledgements",
            "publisherAcknowledgementsTimeout", "queue", "reQueue", "recoverFromDeclareException", "requestTimeout",
            "requestTimeoutCheckerInterval", "requestedChannelMax", "requestedFrameMax", "requestedHeartbeat",
            "routingKey", "skipDlqDeclare", "skipExchangeDeclare", "skipQueueBind", "skipQueueDeclare", "sslProtocol",
            "threadPoolSize", "topologyRecoveryEnabled", "transferException", "trustManager", "username", "vhost");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "password", "username");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "arg.");

    @Override
    public boolean isEnabled(String scheme) {
        return "rabbitmq".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "exchangeName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

