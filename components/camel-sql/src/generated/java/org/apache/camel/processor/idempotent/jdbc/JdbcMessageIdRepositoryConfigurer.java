/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.processor.idempotent.jdbc;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class JdbcMessageIdRepositoryConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository target = (org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "clearstring":
        case "clearString": target.setClearString(property(camelContext, java.lang.String.class, value)); return true;
        case "createstring":
        case "createString": target.setCreateString(property(camelContext, java.lang.String.class, value)); return true;
        case "createtableifnotexists":
        case "createTableIfNotExists": target.setCreateTableIfNotExists(property(camelContext, boolean.class, value)); return true;
        case "deletestring":
        case "deleteString": target.setDeleteString(property(camelContext, java.lang.String.class, value)); return true;
        case "insertstring":
        case "insertString": target.setInsertString(property(camelContext, java.lang.String.class, value)); return true;
        case "jdbctemplate":
        case "jdbcTemplate": target.setJdbcTemplate(property(camelContext, org.springframework.jdbc.core.JdbcTemplate.class, value)); return true;
        case "processorname":
        case "processorName": target.setProcessorName(property(camelContext, java.lang.String.class, value)); return true;
        case "querystring":
        case "queryString": target.setQueryString(property(camelContext, java.lang.String.class, value)); return true;
        case "tableexistsstring":
        case "tableExistsString": target.setTableExistsString(property(camelContext, java.lang.String.class, value)); return true;
        case "tablename":
        case "tableName": target.setTableName(property(camelContext, java.lang.String.class, value)); return true;
        case "transactiontemplate":
        case "transactionTemplate": target.setTransactionTemplate(property(camelContext, org.springframework.transaction.support.TransactionTemplate.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "clearstring":
        case "clearString": return java.lang.String.class;
        case "createstring":
        case "createString": return java.lang.String.class;
        case "createtableifnotexists":
        case "createTableIfNotExists": return boolean.class;
        case "deletestring":
        case "deleteString": return java.lang.String.class;
        case "insertstring":
        case "insertString": return java.lang.String.class;
        case "jdbctemplate":
        case "jdbcTemplate": return org.springframework.jdbc.core.JdbcTemplate.class;
        case "processorname":
        case "processorName": return java.lang.String.class;
        case "querystring":
        case "queryString": return java.lang.String.class;
        case "tableexistsstring":
        case "tableExistsString": return java.lang.String.class;
        case "tablename":
        case "tableName": return java.lang.String.class;
        case "transactiontemplate":
        case "transactionTemplate": return org.springframework.transaction.support.TransactionTemplate.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository target = (org.apache.camel.processor.idempotent.jdbc.JdbcMessageIdRepository) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "clearstring":
        case "clearString": return target.getClearString();
        case "createstring":
        case "createString": return target.getCreateString();
        case "createtableifnotexists":
        case "createTableIfNotExists": return target.isCreateTableIfNotExists();
        case "deletestring":
        case "deleteString": return target.getDeleteString();
        case "insertstring":
        case "insertString": return target.getInsertString();
        case "jdbctemplate":
        case "jdbcTemplate": return target.getJdbcTemplate();
        case "processorname":
        case "processorName": return target.getProcessorName();
        case "querystring":
        case "queryString": return target.getQueryString();
        case "tableexistsstring":
        case "tableExistsString": return target.getTableExistsString();
        case "tablename":
        case "tableName": return target.getTableName();
        case "transactiontemplate":
        case "transactionTemplate": return target.getTransactionTemplate();
        default: return null;
        }
    }
}

