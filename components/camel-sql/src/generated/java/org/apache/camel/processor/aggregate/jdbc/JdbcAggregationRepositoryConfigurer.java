/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.processor.aggregate.jdbc;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class JdbcAggregationRepositoryConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository target = (org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowserializedheaders":
        case "allowSerializedHeaders": target.setAllowSerializedHeaders(property(camelContext, boolean.class, value)); return true;
        case "datasource":
        case "dataSource": target.setDataSource(property(camelContext, javax.sql.DataSource.class, value)); return true;
        case "deadletteruri":
        case "deadLetterUri": target.setDeadLetterUri(property(camelContext, java.lang.String.class, value)); return true;
        case "deserializationfilter":
        case "deserializationFilter": target.setDeserializationFilter(property(camelContext, java.lang.String.class, value)); return true;
        case "headerstostoreastext":
        case "headersToStoreAsText": target.setHeadersToStoreAsText(property(camelContext, java.util.List.class, value)); return true;
        case "jdbcoptimisticlockingexceptionmapper":
        case "jdbcOptimisticLockingExceptionMapper": target.setJdbcOptimisticLockingExceptionMapper(property(camelContext, org.apache.camel.processor.aggregate.jdbc.JdbcOptimisticLockingExceptionMapper.class, value)); return true;
        case "lobhandler":
        case "lobHandler": target.setLobHandler(property(camelContext, org.springframework.jdbc.support.lob.LobHandler.class, value)); return true;
        case "maximumredeliveries":
        case "maximumRedeliveries": target.setMaximumRedeliveries(property(camelContext, int.class, value)); return true;
        case "propagationbehaviorname":
        case "propagationBehaviorName": target.setPropagationBehaviorName(property(camelContext, java.lang.String.class, value)); return true;
        case "recoveryinterval":
        case "recoveryInterval": target.setRecoveryInterval(property(camelContext, long.class, value)); return true;
        case "repositoryname":
        case "repositoryName": target.setRepositoryName(property(camelContext, java.lang.String.class, value)); return true;
        case "storebodyastext":
        case "storeBodyAsText": target.setStoreBodyAsText(property(camelContext, boolean.class, value)); return true;
        case "transactionmanager":
        case "transactionManager": target.setTransactionManager(property(camelContext, org.springframework.transaction.PlatformTransactionManager.class, value)); return true;
        case "userecovery":
        case "useRecovery": target.setUseRecovery(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowserializedheaders":
        case "allowSerializedHeaders": return boolean.class;
        case "datasource":
        case "dataSource": return javax.sql.DataSource.class;
        case "deadletteruri":
        case "deadLetterUri": return java.lang.String.class;
        case "deserializationfilter":
        case "deserializationFilter": return java.lang.String.class;
        case "headerstostoreastext":
        case "headersToStoreAsText": return java.util.List.class;
        case "jdbcoptimisticlockingexceptionmapper":
        case "jdbcOptimisticLockingExceptionMapper": return org.apache.camel.processor.aggregate.jdbc.JdbcOptimisticLockingExceptionMapper.class;
        case "lobhandler":
        case "lobHandler": return org.springframework.jdbc.support.lob.LobHandler.class;
        case "maximumredeliveries":
        case "maximumRedeliveries": return int.class;
        case "propagationbehaviorname":
        case "propagationBehaviorName": return java.lang.String.class;
        case "recoveryinterval":
        case "recoveryInterval": return long.class;
        case "repositoryname":
        case "repositoryName": return java.lang.String.class;
        case "storebodyastext":
        case "storeBodyAsText": return boolean.class;
        case "transactionmanager":
        case "transactionManager": return org.springframework.transaction.PlatformTransactionManager.class;
        case "userecovery":
        case "useRecovery": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository target = (org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowserializedheaders":
        case "allowSerializedHeaders": return target.isAllowSerializedHeaders();
        case "datasource":
        case "dataSource": return target.getDataSource();
        case "deadletteruri":
        case "deadLetterUri": return target.getDeadLetterUri();
        case "deserializationfilter":
        case "deserializationFilter": return target.getDeserializationFilter();
        case "headerstostoreastext":
        case "headersToStoreAsText": return target.getHeadersToStoreAsText();
        case "jdbcoptimisticlockingexceptionmapper":
        case "jdbcOptimisticLockingExceptionMapper": return target.getJdbcOptimisticLockingExceptionMapper();
        case "lobhandler":
        case "lobHandler": return target.getLobHandler();
        case "maximumredeliveries":
        case "maximumRedeliveries": return target.getMaximumRedeliveries();
        case "propagationbehaviorname":
        case "propagationBehaviorName": return target.getPropagationBehaviorName();
        case "recoveryinterval":
        case "recoveryInterval": return target.getRecoveryInterval();
        case "repositoryname":
        case "repositoryName": return target.getRepositoryName();
        case "storebodyastext":
        case "storeBodyAsText": return target.isStoreBodyAsText();
        case "transactionmanager":
        case "transactionManager": return target.getTransactionManager();
        case "userecovery":
        case "useRecovery": return target.isUseRecovery();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "headerstostoreastext":
        case "headersToStoreAsText": return java.lang.String.class;
        default: return null;
        }
    }
}

