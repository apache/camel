/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.sql.stored;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SqlStoredEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        SqlStoredEndpoint target = (SqlStoredEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "batch": target.setBatch(property(camelContext, boolean.class, value)); return true;
        case "datasource":
        case "dataSource": target.setDataSource(property(camelContext, javax.sql.DataSource.class, value)); return true;
        case "function": target.setFunction(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "noop": target.setNoop(property(camelContext, boolean.class, value)); return true;
        case "outputheader":
        case "outputHeader": target.setOutputHeader(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "usemessagebodyfortemplate":
        case "useMessageBodyForTemplate": target.setUseMessageBodyForTemplate(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("batch", boolean.class);
        answer.put("dataSource", javax.sql.DataSource.class);
        answer.put("function", boolean.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("noop", boolean.class);
        answer.put("outputHeader", java.lang.String.class);
        answer.put("synchronous", boolean.class);
        answer.put("useMessageBodyForTemplate", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        SqlStoredEndpoint target = (SqlStoredEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "batch": return target.isBatch();
        case "datasource":
        case "dataSource": return target.getDataSource();
        case "function": return target.isFunction();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "noop": return target.isNoop();
        case "outputheader":
        case "outputHeader": return target.getOutputHeader();
        case "synchronous": return target.isSynchronous();
        case "usemessagebodyfortemplate":
        case "useMessageBodyForTemplate": return target.isUseMessageBodyForTemplate();
        default: return null;
        }
    }
}

