//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Using some token definions from: http://kiwwito.com/build-a-lexical-analyzer-with-javacc/

options {
    STATIC = false;
    FORCE_LA_CHECK = true;
    SANITY_CHECK = true;
}


PARSER_BEGIN(SSPTParser)

package org.apache.camel.component.sql.stored.template.generated;

import org.apache.camel.component.sql.stored.template.ast.*;

public class SSPTParser {
   int paramaterNameCounter = 0;

   String createNextParameterName() {
      return "_"+(paramaterNameCounter++);
   }
}

PARSER_END(SSPTParser)

public Template parse() :
{   Token procudureName;
    Template template = new Template();
    Object parameter = null;
}
{
  (procudureName = <IDENTIFIER> "(" ( (parameter = Parameter() { template.addParameter(parameter);}) (","
  parameter
  = Parameter(){template.addParameter(parameter);})*)? ")" <EOF>)
  {
   template.setProcedureName(procudureName.toString());
   return template;
  }
}

Object Parameter() :
{
    Object param;
}
{
     (param = InputParameter() {return param;}) | (param = OutParameter(){return param;})
}

InputParameter InputParameter() :
{
     String sqlTypeAsStr;
     String name;
     Token valueSrcToken;
}
{
    (sqlTypeAsStr = ParameterSqlType() " " valueSrcToken =
    InputParameterSrc())
    {
        int sqlType = ParseHelper.parseSqlType(sqlTypeAsStr);
        return new InputParameter(createNextParameterName(),sqlType,valueSrcToken,ParseHelper.sqlTypeToJavaType(sqlType,
        sqlTypeAsStr));
    }
}

OutParameter OutParameter() :
{
     String sqlType;
     String name;
     String outHeader;
}
{
    ("OUT" " " sqlType = ParameterSqlType() " " outHeader =
    OutHeader())
    {
        return new OutParameter(createNextParameterName(),ParseHelper.parseSqlType(sqlType),outHeader);
    }
}

String ParameterSqlType():
{
    Token t;
}
{
    (t = <IDENTIFIER>)
    {
        return t.toString();
    }
}

String OutHeader():
{
 Token token;
}
{
    (token = <IDENTIFIER>)
    {
        return token.toString();
    }
}
Token InputParameterSrc():
{
    Token ret = null;
}
{
    (ret = <SIMPLE_EXP_TOKEN>)
    {
        return ret;
    }
    |

    (ret = <PARAMETER_POS_TOKEN>)
    {
            return ret;
    }
}

TOKEN: {
    <#DIGIT: (["0"-"9"])>
}

TOKEN: {
    <#LETTER: (["a"-"z","A"-"Z"])>
}

TOKEN: {
    <#SPECIAL: (["#","_","-","'",".","$","{","}","\""])>
}

TOKEN : {
    <SIMPLE_EXP_TOKEN: "${"(<LETTER>|<DIGIT> | <SPECIAL> | " ")+ "}">
}

TOKEN : {
    <PARAMETER_POS_TOKEN: ":#"(<LETTER>|<DIGIT>|<SPECIAL> )+>
}


TOKEN : {
    <IDENTIFIER: ( <LETTER> | <DIGIT> | <SPECIAL> )+ >
}

