/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.processor.aggregate.cassandra;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.processor.aggregate.cassandra.CassandraAggregationRepository;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class CassandraAggregationRepositoryConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.processor.aggregate.cassandra.CassandraAggregationRepository target = (org.apache.camel.processor.aggregate.cassandra.CassandraAggregationRepository) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowserializedheaders":
        case "allowSerializedHeaders": target.setAllowSerializedHeaders(property(camelContext, boolean.class, value)); return true;
        case "deadletteruri":
        case "deadLetterUri": target.setDeadLetterUri(property(camelContext, java.lang.String.class, value)); return true;
        case "exchangecolumn":
        case "exchangeColumn": target.setExchangeColumn(property(camelContext, java.lang.String.class, value)); return true;
        case "exchangeidcolumn":
        case "exchangeIdColumn": target.setExchangeIdColumn(property(camelContext, java.lang.String.class, value)); return true;
        case "maximumredeliveries":
        case "maximumRedeliveries": target.setMaximumRedeliveries(property(camelContext, int.class, value)); return true;
        case "pkcolumns":
        case "pKColumns": target.setPKColumns(property(camelContext, java.lang.String[].class, value)); return true;
        case "prefixpkvalues":
        case "prefixPKValues": target.setPrefixPKValues(property(camelContext, java.lang.Object[].class, value)); return true;
        case "readconsistencylevel":
        case "readConsistencyLevel": target.setReadConsistencyLevel(property(camelContext, com.datastax.oss.driver.api.core.ConsistencyLevel.class, value)); return true;
        case "recoveryinterval":
        case "recoveryInterval": target.setRecoveryInterval(property(camelContext, long.class, value)); return true;
        case "session": target.setSession(property(camelContext, com.datastax.oss.driver.api.core.CqlSession.class, value)); return true;
        case "table": target.setTable(property(camelContext, java.lang.String.class, value)); return true;
        case "ttl": target.setTtl(property(camelContext, java.lang.Integer.class, value)); return true;
        case "userecovery":
        case "useRecovery": target.setUseRecovery(property(camelContext, boolean.class, value)); return true;
        case "writeconsistencylevel":
        case "writeConsistencyLevel": target.setWriteConsistencyLevel(property(camelContext, com.datastax.oss.driver.api.core.ConsistencyLevel.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowserializedheaders":
        case "allowSerializedHeaders": return boolean.class;
        case "deadletteruri":
        case "deadLetterUri": return java.lang.String.class;
        case "exchangecolumn":
        case "exchangeColumn": return java.lang.String.class;
        case "exchangeidcolumn":
        case "exchangeIdColumn": return java.lang.String.class;
        case "maximumredeliveries":
        case "maximumRedeliveries": return int.class;
        case "pkcolumns":
        case "pKColumns": return java.lang.String[].class;
        case "prefixpkvalues":
        case "prefixPKValues": return java.lang.Object[].class;
        case "readconsistencylevel":
        case "readConsistencyLevel": return com.datastax.oss.driver.api.core.ConsistencyLevel.class;
        case "recoveryinterval":
        case "recoveryInterval": return long.class;
        case "session": return com.datastax.oss.driver.api.core.CqlSession.class;
        case "table": return java.lang.String.class;
        case "ttl": return java.lang.Integer.class;
        case "userecovery":
        case "useRecovery": return boolean.class;
        case "writeconsistencylevel":
        case "writeConsistencyLevel": return com.datastax.oss.driver.api.core.ConsistencyLevel.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.processor.aggregate.cassandra.CassandraAggregationRepository target = (org.apache.camel.processor.aggregate.cassandra.CassandraAggregationRepository) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowserializedheaders":
        case "allowSerializedHeaders": return target.isAllowSerializedHeaders();
        case "deadletteruri":
        case "deadLetterUri": return target.getDeadLetterUri();
        case "exchangecolumn":
        case "exchangeColumn": return target.getExchangeColumn();
        case "exchangeidcolumn":
        case "exchangeIdColumn": return target.getExchangeIdColumn();
        case "maximumredeliveries":
        case "maximumRedeliveries": return target.getMaximumRedeliveries();
        case "pkcolumns":
        case "pKColumns": return target.getPKColumns();
        case "prefixpkvalues":
        case "prefixPKValues": return target.getPrefixPKValues();
        case "readconsistencylevel":
        case "readConsistencyLevel": return target.getReadConsistencyLevel();
        case "recoveryinterval":
        case "recoveryInterval": return target.getRecoveryInterval();
        case "session": return target.getSession();
        case "table": return target.getTable();
        case "ttl": return target.getTtl();
        case "userecovery":
        case "useRecovery": return target.isUseRecovery();
        case "writeconsistencylevel":
        case "writeConsistencyLevel": return target.getWriteConsistencyLevel();
        default: return null;
        }
    }
}

