/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.processor.idempotent.cassandra;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.processor.idempotent.cassandra.CassandraIdempotentRepository;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class CassandraIdempotentRepositoryConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.processor.idempotent.cassandra.CassandraIdempotentRepository target = (org.apache.camel.processor.idempotent.cassandra.CassandraIdempotentRepository) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "pkcolumns":
        case "PKColumns": target.setPKColumns(property(camelContext, java.lang.String.class, value)); return true;
        case "prefixpkvalues":
        case "PrefixPKValues": target.setPrefixPKValues(property(camelContext, java.lang.String[].class, value)); return true;
        case "readconsistencylevel":
        case "ReadConsistencyLevel": target.setReadConsistencyLevel(property(camelContext, com.datastax.oss.driver.api.core.ConsistencyLevel.class, value)); return true;
        case "session":
        case "Session": target.setSession(property(camelContext, com.datastax.oss.driver.api.core.CqlSession.class, value)); return true;
        case "table":
        case "Table": target.setTable(property(camelContext, java.lang.String.class, value)); return true;
        case "ttl":
        case "Ttl": target.setTtl(property(camelContext, java.lang.Integer.class, value)); return true;
        case "writeconsistencylevel":
        case "WriteConsistencyLevel": target.setWriteConsistencyLevel(property(camelContext, com.datastax.oss.driver.api.core.ConsistencyLevel.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "pkcolumns":
        case "PKColumns": return java.lang.String.class;
        case "prefixpkvalues":
        case "PrefixPKValues": return java.lang.String[].class;
        case "readconsistencylevel":
        case "ReadConsistencyLevel": return com.datastax.oss.driver.api.core.ConsistencyLevel.class;
        case "session":
        case "Session": return com.datastax.oss.driver.api.core.CqlSession.class;
        case "table":
        case "Table": return java.lang.String.class;
        case "ttl":
        case "Ttl": return java.lang.Integer.class;
        case "writeconsistencylevel":
        case "WriteConsistencyLevel": return com.datastax.oss.driver.api.core.ConsistencyLevel.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.processor.idempotent.cassandra.CassandraIdempotentRepository target = (org.apache.camel.processor.idempotent.cassandra.CassandraIdempotentRepository) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "pkcolumns":
        case "PKColumns": return target.getPKColumns();
        case "prefixpkvalues":
        case "PrefixPKValues": return target.getPrefixPKValues();
        case "readconsistencylevel":
        case "ReadConsistencyLevel": return target.getReadConsistencyLevel();
        case "session":
        case "Session": return target.getSession();
        case "table":
        case "Table": return target.getTable();
        case "ttl":
        case "Ttl": return target.getTtl();
        case "writeconsistencylevel":
        case "WriteConsistencyLevel": return target.getWriteConsistencyLevel();
        default: return null;
        }
    }
}

