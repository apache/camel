/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.telegram;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class TelegramEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "bridgeErrorHandler": ((TelegramEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "limit": ((TelegramEndpoint) target).getConfiguration().setLimit(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((TelegramEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "timeout": ((TelegramEndpoint) target).getConfiguration().setTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "exceptionHandler": ((TelegramEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((TelegramEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((TelegramEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "chatId": ((TelegramEndpoint) target).getConfiguration().setChatId(property(camelContext, java.lang.String.class, value)); return true;
        case "lazyStartProducer": ((TelegramEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "baseUri": ((TelegramEndpoint) target).getConfiguration().setBaseUri(property(camelContext, java.lang.String.class, value)); return true;
        case "basicPropertyBinding": ((TelegramEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bufferSize": ((TelegramEndpoint) target).setBufferSize(property(camelContext, int.class, value)); return true;
        case "clientConfig": ((TelegramEndpoint) target).setClientConfig(property(camelContext, org.asynchttpclient.AsyncHttpClientConfig.class, value)); return true;
        case "synchronous": ((TelegramEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffErrorThreshold": ((TelegramEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((TelegramEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((TelegramEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((TelegramEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((TelegramEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((TelegramEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((TelegramEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((TelegramEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((TelegramEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((TelegramEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((TelegramEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((TelegramEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((TelegramEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((TelegramEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "proxyHost": ((TelegramEndpoint) target).getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyPort": ((TelegramEndpoint) target).getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "authorizationToken": ((TelegramEndpoint) target).getConfiguration().setAuthorizationToken(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "bridgeerrorhandler": ((TelegramEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "limit": ((TelegramEndpoint) target).getConfiguration().setLimit(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sendemptymessagewhenidle": ((TelegramEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "timeout": ((TelegramEndpoint) target).getConfiguration().setTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "exceptionhandler": ((TelegramEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((TelegramEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((TelegramEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "chatid": ((TelegramEndpoint) target).getConfiguration().setChatId(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer": ((TelegramEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "baseuri": ((TelegramEndpoint) target).getConfiguration().setBaseUri(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding": ((TelegramEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "buffersize": ((TelegramEndpoint) target).setBufferSize(property(camelContext, int.class, value)); return true;
        case "clientconfig": ((TelegramEndpoint) target).setClientConfig(property(camelContext, org.asynchttpclient.AsyncHttpClientConfig.class, value)); return true;
        case "synchronous": ((TelegramEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold": ((TelegramEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((TelegramEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((TelegramEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((TelegramEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((TelegramEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((TelegramEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((TelegramEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((TelegramEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((TelegramEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((TelegramEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((TelegramEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((TelegramEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((TelegramEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((TelegramEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "proxyhost": ((TelegramEndpoint) target).getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport": ((TelegramEndpoint) target).getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "authorizationtoken": ((TelegramEndpoint) target).getConfiguration().setAuthorizationToken(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

