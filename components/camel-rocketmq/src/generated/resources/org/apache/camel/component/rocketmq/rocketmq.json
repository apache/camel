{
  "component": {
    "kind": "component",
    "name": "rocketmq",
    "title": "RocketMQ",
    "description": "Send and receive messages from RocketMQ cluster.",
    "deprecated": false,
    "firstVersion": "3.20.0",
    "label": "messaging",
    "javaType": "org.apache.camel.component.rocketmq.RocketMQComponent",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-rocketmq",
    "version": "4.4.0-SNAPSHOT",
    "scheme": "rocketmq",
    "extendsScheme": "",
    "syntax": "rocketmq:topicName",
    "async": true,
    "api": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": false,
    "remote": true
  },
  "componentProperties": {
    "namesrvAddr": { "index": 0, "kind": "property", "displayName": "Namesrv Addr", "group": "common", "label": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "localhost:9876", "description": "Name server address of RocketMQ cluster." },
    "sendTag": { "index": 1, "kind": "property", "displayName": "Send Tag", "group": "common", "label": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Each message would be sent with this tag." },
    "bridgeErrorHandler": { "index": 2, "kind": "property", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions (if possible) occurred while the Camel consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. Important: This is only possible if the 3rd party component allows Camel to be alerted if an exception was thrown. Some components handle this internally only, and therefore bridgeErrorHandler is not possible. In other situations we may improve the Camel component to hook into the 3rd party component and make this possible for future releases. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "consumerGroup": { "index": 3, "kind": "property", "displayName": "Consumer Group", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Consumer group name." },
    "subscribeTags": { "index": 4, "kind": "property", "displayName": "Subscribe Tags", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "*", "description": "Subscribe tags of consumer. Multiple tags could be split by , such as TagATagB" },
    "lazyStartProducer": { "index": 5, "kind": "property", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "producerGroup": { "index": 6, "kind": "property", "displayName": "Producer Group", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Producer group name." },
    "replyToConsumerGroup": { "index": 7, "kind": "property", "displayName": "Reply To Consumer Group", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Consumer group name used for receiving response." },
    "replyToTopic": { "index": 8, "kind": "property", "displayName": "Reply To Topic", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Topic used for receiving response when using in-out pattern." },
    "waitForSendResult": { "index": 9, "kind": "property", "displayName": "Wait For Send Result", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether waiting for send result before routing to next endpoint." },
    "autowiredEnabled": { "index": 10, "kind": "property", "displayName": "Autowired Enabled", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc." },
    "requestTimeoutCheckerIntervalMillis": { "index": 11, "kind": "property", "displayName": "Request Timeout Checker Interval Millis", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 1000, "description": "Check interval milliseconds of request timeout." },
    "requestTimeoutMillis": { "index": 12, "kind": "property", "displayName": "Request Timeout Millis", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 10000, "description": "Timeout milliseconds of receiving response when using in-out pattern." },
    "accessKey": { "index": 13, "kind": "property", "displayName": "Access Key", "group": "secret", "label": "secret", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": true, "description": "Access key for RocketMQ ACL." },
    "secretKey": { "index": 14, "kind": "property", "displayName": "Secret Key", "group": "secret", "label": "secret", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": true, "description": "Secret key for RocketMQ ACL." }
  },
  "headers": {
    "CamelRockerMQTopic": { "index": 0, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Topic of message", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#TOPIC" },
    "CamelRockerMQTag": { "index": 1, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Tag of message", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#TAG" },
    "CamelRockerMQKey": { "index": 2, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Key of message", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#KEY" },
    "CamelRockerMQOverrideTopicName": { "index": 3, "kind": "header", "displayName": "", "group": "producer", "label": "producer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "If this header is set, the message will be routed to the topic specified by this header instead of the origin topic in endpoint.", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#OVERRIDE_TOPIC_NAME" },
    "CamelRockerMQOverrideTag": { "index": 4, "kind": "header", "displayName": "", "group": "producer", "label": "producer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "If this header is set, the message's tag will be set to value specified by this header instead of the sendTag defined in endpoint.", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#OVERRIDE_TAG" },
    "CamelRockerMQOverrideMessageKey": { "index": 5, "kind": "header", "displayName": "", "group": "producer", "label": "producer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Set keys for the message. When using in-out pattern, the value will be prepended to the generated keys", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#OVERRIDE_MESSAGE_KEY" },
    "CamelRockerMQBrokerName": { "index": 6, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Broker name", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#BROKER_NAME" },
    "CamelRockerMQQueueId": { "index": 7, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Queue ID", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#QUEUE_ID" },
    "CamelRockerMQStoreSize": { "index": 8, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Store size", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#STORE_SIZE" },
    "CamelRockerMQQueueOffset": { "index": 9, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "long", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Queue offset", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#QUEUE_OFFSET" },
    "CamelRockerMQSysFlag": { "index": 10, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Sys flag", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#SYS_FLAG" },
    "CamelRockerMQBornTimestamp": { "index": 11, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "long", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Born timestamp", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#BORN_TIMESTAMP" },
    "CamelRockerMQBornHost": { "index": 12, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "java.net.SocketAddress", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Born host", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#BORN_HOST" },
    "CamelRockerMQStoreTimestamp": { "index": 13, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "long", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Store timestamp", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#STORE_TIMESTAMP" },
    "CamelRockerMQStoreHost": { "index": 14, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "java.net.SocketAddress", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Store host", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#STORE_HOST" },
    "CamelRockerMQMsgId": { "index": 15, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Msg ID", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#MSG_ID" },
    "CamelRockerMQCommitLogOffset": { "index": 16, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "long", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Commit log offset", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#COMMIT_LOG_OFFSET" },
    "CamelRockerMQBodyCrc": { "index": 17, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Body CRC", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#BODY_CRC" },
    "CamelRockerMQReconsumeTimes": { "index": 18, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Reconsume times", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#RECONSUME_TIMES" },
    "CamelRockerMQPreparedTransactionOffset": { "index": 19, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "long", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Prepard transaction offset", "constantName": "org.apache.camel.component.rocketmq.RocketMQConstants#PREPARED_TRANSACTION_OFFSET" }
  },
  "properties": {
    "topicName": { "index": 0, "kind": "path", "displayName": "Topic Name", "group": "common", "label": "", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Topic name of this endpoint." },
    "namesrvAddr": { "index": 1, "kind": "parameter", "displayName": "Namesrv Addr", "group": "common", "label": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "localhost:9876", "description": "Name server address of RocketMQ cluster." },
    "consumerGroup": { "index": 2, "kind": "parameter", "displayName": "Consumer Group", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Consumer group name." },
    "subscribeTags": { "index": 3, "kind": "parameter", "displayName": "Subscribe Tags", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "*", "description": "Subscribe tags of consumer. Multiple tags could be split by , such as TagATagB" },
    "bridgeErrorHandler": { "index": 4, "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions (if possible) occurred while the Camel consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. Important: This is only possible if the 3rd party component allows Camel to be alerted if an exception was thrown. Some components handle this internally only, and therefore bridgeErrorHandler is not possible. In other situations we may improve the Camel component to hook into the 3rd party component and make this possible for future releases. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exceptionHandler": { "index": 5, "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "autowired": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "index": 6, "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut" ], "deprecated": false, "autowired": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "producerGroup": { "index": 7, "kind": "parameter", "displayName": "Producer Group", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Producer group name." },
    "replyToConsumerGroup": { "index": 8, "kind": "parameter", "displayName": "Reply To Consumer Group", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Consumer group name used for receiving response." },
    "replyToTopic": { "index": 9, "kind": "parameter", "displayName": "Reply To Topic", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Topic used for receiving response when using in-out pattern." },
    "sendTag": { "index": 10, "kind": "parameter", "displayName": "Send Tag", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Each message would be sent with this tag." },
    "waitForSendResult": { "index": 11, "kind": "parameter", "displayName": "Wait For Send Result", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether waiting for send result before routing to next endpoint." },
    "lazyStartProducer": { "index": 12, "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer (advanced)", "label": "producer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "requestTimeoutCheckerIntervalMillis": { "index": 13, "kind": "parameter", "displayName": "Request Timeout Checker Interval Millis", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 1000, "description": "Check interval milliseconds of request timeout." },
    "requestTimeoutMillis": { "index": 14, "kind": "parameter", "displayName": "Request Timeout Millis", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 10000, "description": "Timeout milliseconds of receiving response when using in-out pattern." },
    "accessKey": { "index": 15, "kind": "parameter", "displayName": "Access Key", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": true, "description": "Access key for RocketMQ ACL." },
    "secretKey": { "index": 16, "kind": "parameter", "displayName": "Secret Key", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": true, "description": "Secret key for RocketMQ ACL." }
  }
}
