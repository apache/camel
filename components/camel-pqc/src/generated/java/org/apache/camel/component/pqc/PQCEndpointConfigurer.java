/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.pqc;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class PQCEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        PQCEndpoint target = (PQCEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "keyencapsulationalgorithm":
        case "keyEncapsulationAlgorithm": target.getConfiguration().setKeyEncapsulationAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "keygenerator":
        case "keyGenerator": target.getConfiguration().setKeyGenerator(property(camelContext, javax.crypto.KeyGenerator.class, value)); return true;
        case "keypair":
        case "keyPair": target.getConfiguration().setKeyPair(property(camelContext, java.security.KeyPair.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "operation": target.getConfiguration().setOperation(property(camelContext, org.apache.camel.component.pqc.PQCOperations.class, value)); return true;
        case "signaturealgorithm":
        case "signatureAlgorithm": target.getConfiguration().setSignatureAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "signer": target.getConfiguration().setSigner(property(camelContext, java.security.Signature.class, value)); return true;
        case "symmetrickeyalgorithm":
        case "symmetricKeyAlgorithm": target.getConfiguration().setSymmetricKeyAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "symmetrickeylength":
        case "symmetricKeyLength": target.getConfiguration().setSymmetricKeyLength(property(camelContext, int.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public String[] getAutowiredNames() {
        return new String[]{"keyGenerator", "keyPair", "signer"};
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "keyencapsulationalgorithm":
        case "keyEncapsulationAlgorithm": return java.lang.String.class;
        case "keygenerator":
        case "keyGenerator": return javax.crypto.KeyGenerator.class;
        case "keypair":
        case "keyPair": return java.security.KeyPair.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "operation": return org.apache.camel.component.pqc.PQCOperations.class;
        case "signaturealgorithm":
        case "signatureAlgorithm": return java.lang.String.class;
        case "signer": return java.security.Signature.class;
        case "symmetrickeyalgorithm":
        case "symmetricKeyAlgorithm": return java.lang.String.class;
        case "symmetrickeylength":
        case "symmetricKeyLength": return int.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        PQCEndpoint target = (PQCEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "keyencapsulationalgorithm":
        case "keyEncapsulationAlgorithm": return target.getConfiguration().getKeyEncapsulationAlgorithm();
        case "keygenerator":
        case "keyGenerator": return target.getConfiguration().getKeyGenerator();
        case "keypair":
        case "keyPair": return target.getConfiguration().getKeyPair();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "operation": return target.getConfiguration().getOperation();
        case "signaturealgorithm":
        case "signatureAlgorithm": return target.getConfiguration().getSignatureAlgorithm();
        case "signer": return target.getConfiguration().getSigner();
        case "symmetrickeyalgorithm":
        case "symmetricKeyAlgorithm": return target.getConfiguration().getSymmetricKeyAlgorithm();
        case "symmetrickeylength":
        case "symmetricKeyLength": return target.getConfiguration().getSymmetricKeyLength();
        default: return null;
        }
    }
}

