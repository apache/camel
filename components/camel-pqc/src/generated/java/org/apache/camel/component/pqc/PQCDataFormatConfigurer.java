/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.pqc;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class PQCDataFormatConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("BufferSize", int.class);
        map.put("KeyEncapsulationAlgorithm", java.lang.String.class);
        map.put("KeyGenerator", javax.crypto.KeyGenerator.class);
        map.put("KeyPair", java.security.KeyPair.class);
        map.put("Provider", java.lang.String.class);
        map.put("SymmetricKeyAlgorithm", java.lang.String.class);
        map.put("SymmetricKeyLength", int.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        PQCDataFormat target = (PQCDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "buffersize":
        case "bufferSize": target.setBufferSize(property(camelContext, int.class, value)); return true;
        case "keyencapsulationalgorithm":
        case "keyEncapsulationAlgorithm": target.setKeyEncapsulationAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "keygenerator":
        case "keyGenerator": target.setKeyGenerator(property(camelContext, javax.crypto.KeyGenerator.class, value)); return true;
        case "keypair":
        case "keyPair": target.setKeyPair(property(camelContext, java.security.KeyPair.class, value)); return true;
        case "provider": target.setProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "symmetrickeyalgorithm":
        case "symmetricKeyAlgorithm": target.setSymmetricKeyAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "symmetrickeylength":
        case "symmetricKeyLength": target.setSymmetricKeyLength(property(camelContext, int.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "buffersize":
        case "bufferSize": return int.class;
        case "keyencapsulationalgorithm":
        case "keyEncapsulationAlgorithm": return java.lang.String.class;
        case "keygenerator":
        case "keyGenerator": return javax.crypto.KeyGenerator.class;
        case "keypair":
        case "keyPair": return java.security.KeyPair.class;
        case "provider": return java.lang.String.class;
        case "symmetrickeyalgorithm":
        case "symmetricKeyAlgorithm": return java.lang.String.class;
        case "symmetrickeylength":
        case "symmetricKeyLength": return int.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        PQCDataFormat target = (PQCDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "buffersize":
        case "bufferSize": return target.getBufferSize();
        case "keyencapsulationalgorithm":
        case "keyEncapsulationAlgorithm": return target.getKeyEncapsulationAlgorithm();
        case "keygenerator":
        case "keyGenerator": return target.getKeyGenerator();
        case "keypair":
        case "keyPair": return target.getKeyPair();
        case "provider": return target.getProvider();
        case "symmetrickeyalgorithm":
        case "symmetricKeyAlgorithm": return target.getSymmetricKeyAlgorithm();
        case "symmetrickeylength":
        case "symmetricKeyLength": return target.getSymmetricKeyLength();
        default: return null;
        }
    }
}

