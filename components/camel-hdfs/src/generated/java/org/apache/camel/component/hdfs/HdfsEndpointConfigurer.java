/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.hdfs;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class HdfsEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        HdfsEndpoint target = (HdfsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "append": target.getConfig().setAppend(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "blocksize":
        case "blockSize": target.getConfig().setBlockSize(property(camelContext, long.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "buffersize":
        case "bufferSize": target.getConfig().setBufferSize(property(camelContext, int.class, value)); return true;
        case "checkidleinterval":
        case "checkIdleInterval": target.getConfig().setCheckIdleInterval(property(camelContext, int.class, value)); return true;
        case "chunksize":
        case "chunkSize": target.getConfig().setChunkSize(property(camelContext, int.class, value)); return true;
        case "compressioncodec":
        case "compressionCodec": target.getConfig().setCompressionCodec(property(camelContext, org.apache.camel.component.hdfs.HdfsCompressionCodec.class, value)); return true;
        case "compressiontype":
        case "compressionType": target.getConfig().setCompressionType(property(camelContext, org.apache.hadoop.io.SequenceFile.CompressionType.class, value)); return true;
        case "connectonstartup":
        case "connectOnStartup": target.getConfig().setConnectOnStartup(property(camelContext, boolean.class, value)); return true;
        case "delay": target.setDelay(property(camelContext, long.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filesystemtype":
        case "fileSystemType": target.getConfig().setFileSystemType(property(camelContext, org.apache.camel.component.hdfs.HdfsFileSystemType.class, value)); return true;
        case "filetype":
        case "fileType": target.getConfig().setFileType(property(camelContext, org.apache.camel.component.hdfs.HdfsFileType.class, value)); return true;
        case "greedy": target.setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay":
        case "initialDelay": target.setInitialDelay(property(camelContext, long.class, value)); return true;
        case "kerberosconfigfilelocation":
        case "kerberosConfigFileLocation": target.getConfig().setKerberosConfigFileLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "kerberoskeytablocation":
        case "kerberosKeytabLocation": target.getConfig().setKerberosKeytabLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "kerberosusername":
        case "kerberosUsername": target.getConfig().setKerberosUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "keytype":
        case "keyType": target.getConfig().setKeyType(property(camelContext, org.apache.camel.component.hdfs.WritableType.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxmessagesperpoll":
        case "maxMessagesPerPoll": target.getConfig().setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "namednodes":
        case "namedNodes": target.getConfig().setNamedNodes(property(camelContext, java.lang.String.class, value)); return true;
        case "openedsuffix":
        case "openedSuffix": target.getConfig().setOpenedSuffix(property(camelContext, java.lang.String.class, value)); return true;
        case "overwrite": target.getConfig().setOverwrite(property(camelContext, boolean.class, value)); return true;
        case "owner": target.getConfig().setOwner(property(camelContext, java.lang.String.class, value)); return true;
        case "pattern": target.getConfig().setPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "pollstrategy":
        case "pollStrategy": target.setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "readsuffix":
        case "readSuffix": target.getConfig().setReadSuffix(property(camelContext, java.lang.String.class, value)); return true;
        case "repeatcount":
        case "repeatCount": target.setRepeatCount(property(camelContext, long.class, value)); return true;
        case "replication": target.getConfig().setReplication(property(camelContext, short.class, value)); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": target.setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "splitstrategy":
        case "splitStrategy": target.getConfig().setSplitStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "startscheduler":
        case "startScheduler": target.setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "streamdownload":
        case "streamDownload": target.getConfig().setStreamDownload(property(camelContext, boolean.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "timeunit":
        case "timeUnit": target.setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "valuetype":
        case "valueType": target.getConfig().setValueType(property(camelContext, org.apache.camel.component.hdfs.WritableType.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("append", boolean.class);
        answer.put("backoffErrorThreshold", int.class);
        answer.put("backoffIdleThreshold", int.class);
        answer.put("backoffMultiplier", int.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("blockSize", long.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("bufferSize", int.class);
        answer.put("checkIdleInterval", int.class);
        answer.put("chunkSize", int.class);
        answer.put("compressionCodec", org.apache.camel.component.hdfs.HdfsCompressionCodec.class);
        answer.put("compressionType", org.apache.hadoop.io.SequenceFile.CompressionType.class);
        answer.put("connectOnStartup", boolean.class);
        answer.put("delay", long.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("fileSystemType", org.apache.camel.component.hdfs.HdfsFileSystemType.class);
        answer.put("fileType", org.apache.camel.component.hdfs.HdfsFileType.class);
        answer.put("greedy", boolean.class);
        answer.put("initialDelay", long.class);
        answer.put("kerberosConfigFileLocation", java.lang.String.class);
        answer.put("kerberosKeytabLocation", java.lang.String.class);
        answer.put("kerberosUsername", java.lang.String.class);
        answer.put("keyType", org.apache.camel.component.hdfs.WritableType.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("maxMessagesPerPoll", int.class);
        answer.put("namedNodes", java.lang.String.class);
        answer.put("openedSuffix", java.lang.String.class);
        answer.put("overwrite", boolean.class);
        answer.put("owner", java.lang.String.class);
        answer.put("pattern", java.lang.String.class);
        answer.put("pollStrategy", org.apache.camel.spi.PollingConsumerPollStrategy.class);
        answer.put("readSuffix", java.lang.String.class);
        answer.put("repeatCount", long.class);
        answer.put("replication", short.class);
        answer.put("runLoggingLevel", org.apache.camel.LoggingLevel.class);
        answer.put("scheduledExecutorService", java.util.concurrent.ScheduledExecutorService.class);
        answer.put("scheduler", java.lang.String.class);
        answer.put("schedulerProperties", java.util.Map.class);
        answer.put("sendEmptyMessageWhenIdle", boolean.class);
        answer.put("splitStrategy", java.lang.String.class);
        answer.put("startScheduler", boolean.class);
        answer.put("streamDownload", boolean.class);
        answer.put("synchronous", boolean.class);
        answer.put("timeUnit", java.util.concurrent.TimeUnit.class);
        answer.put("useFixedDelay", boolean.class);
        answer.put("valueType", org.apache.camel.component.hdfs.WritableType.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        HdfsEndpoint target = (HdfsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "append": target.getConfig().isAppend(); return true;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.getBackoffErrorThreshold(); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.getBackoffIdleThreshold(); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.getBackoffMultiplier(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "blocksize":
        case "blockSize": target.getConfig().getBlockSize(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "buffersize":
        case "bufferSize": target.getConfig().getBufferSize(); return true;
        case "checkidleinterval":
        case "checkIdleInterval": target.getConfig().getCheckIdleInterval(); return true;
        case "chunksize":
        case "chunkSize": target.getConfig().getChunkSize(); return true;
        case "compressioncodec":
        case "compressionCodec": target.getConfig().getCompressionCodec(); return true;
        case "compressiontype":
        case "compressionType": target.getConfig().getCompressionType(); return true;
        case "connectonstartup":
        case "connectOnStartup": target.getConfig().isConnectOnStartup(); return true;
        case "delay": target.getDelay(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "filesystemtype":
        case "fileSystemType": target.getConfig().getFileSystemType(); return true;
        case "filetype":
        case "fileType": target.getConfig().getFileType(); return true;
        case "greedy": target.isGreedy(); return true;
        case "initialdelay":
        case "initialDelay": target.getInitialDelay(); return true;
        case "kerberosconfigfilelocation":
        case "kerberosConfigFileLocation": target.getConfig().getKerberosConfigFileLocation(); return true;
        case "kerberoskeytablocation":
        case "kerberosKeytabLocation": target.getConfig().getKerberosKeytabLocation(); return true;
        case "kerberosusername":
        case "kerberosUsername": target.getConfig().getKerberosUsername(); return true;
        case "keytype":
        case "keyType": target.getConfig().getKeyType(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "maxmessagesperpoll":
        case "maxMessagesPerPoll": target.getConfig().getMaxMessagesPerPoll(); return true;
        case "namednodes":
        case "namedNodes": target.getConfig().getNamedNodes(); return true;
        case "openedsuffix":
        case "openedSuffix": target.getConfig().getOpenedSuffix(); return true;
        case "overwrite": target.getConfig().isOverwrite(); return true;
        case "owner": target.getConfig().getOwner(); return true;
        case "pattern": target.getConfig().getPattern(); return true;
        case "pollstrategy":
        case "pollStrategy": target.getPollStrategy(); return true;
        case "readsuffix":
        case "readSuffix": target.getConfig().getReadSuffix(); return true;
        case "repeatcount":
        case "repeatCount": target.getRepeatCount(); return true;
        case "replication": target.getConfig().getReplication(); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.getRunLoggingLevel(); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.getScheduledExecutorService(); return true;
        case "scheduler": target.getScheduler(); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.getSchedulerProperties(); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.isSendEmptyMessageWhenIdle(); return true;
        case "splitstrategy":
        case "splitStrategy": target.getConfig().getSplitStrategy(); return true;
        case "startscheduler":
        case "startScheduler": target.isStartScheduler(); return true;
        case "streamdownload":
        case "streamDownload": target.getConfig().isStreamDownload(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "timeunit":
        case "timeUnit": target.getTimeUnit(); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.isUseFixedDelay(); return true;
        case "valuetype":
        case "valueType": target.getConfig().getValueType(); return true;
        default: return null;
        }
    }
}

