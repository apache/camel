/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.hdfs;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class HdfsEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "connectOnStartup": ((HdfsEndpoint) target).getConfig().setConnectOnStartup(property(camelContext, boolean.class, value)); return true;
        case "fileSystemType": ((HdfsEndpoint) target).getConfig().setFileSystemType(property(camelContext, org.apache.camel.component.hdfs.HdfsFileSystemType.class, value)); return true;
        case "fileType": ((HdfsEndpoint) target).getConfig().setFileType(property(camelContext, org.apache.camel.component.hdfs.HdfsFileType.class, value)); return true;
        case "keyType": ((HdfsEndpoint) target).getConfig().setKeyType(property(camelContext, org.apache.camel.component.hdfs.WritableType.class, value)); return true;
        case "namedNodes": ((HdfsEndpoint) target).getConfig().setNamedNodes(property(camelContext, java.lang.String.class, value)); return true;
        case "owner": ((HdfsEndpoint) target).getConfig().setOwner(property(camelContext, java.lang.String.class, value)); return true;
        case "valueType": ((HdfsEndpoint) target).getConfig().setValueType(property(camelContext, org.apache.camel.component.hdfs.WritableType.class, value)); return true;
        case "bridgeErrorHandler": ((HdfsEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "pattern": ((HdfsEndpoint) target).getConfig().setPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((HdfsEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "streamDownload": ((HdfsEndpoint) target).getConfig().setStreamDownload(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((HdfsEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((HdfsEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((HdfsEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "append": ((HdfsEndpoint) target).getConfig().setAppend(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((HdfsEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "overwrite": ((HdfsEndpoint) target).getConfig().setOverwrite(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((HdfsEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "blockSize": ((HdfsEndpoint) target).getConfig().setBlockSize(property(camelContext, long.class, value)); return true;
        case "bufferSize": ((HdfsEndpoint) target).getConfig().setBufferSize(property(camelContext, int.class, value)); return true;
        case "checkIdleInterval": ((HdfsEndpoint) target).getConfig().setCheckIdleInterval(property(camelContext, int.class, value)); return true;
        case "chunkSize": ((HdfsEndpoint) target).getConfig().setChunkSize(property(camelContext, int.class, value)); return true;
        case "compressionCodec": ((HdfsEndpoint) target).getConfig().setCompressionCodec(property(camelContext, org.apache.camel.component.hdfs.HdfsCompressionCodec.class, value)); return true;
        case "compressionType": ((HdfsEndpoint) target).getConfig().setCompressionType(property(camelContext, org.apache.hadoop.io.SequenceFile.CompressionType.class, value)); return true;
        case "openedSuffix": ((HdfsEndpoint) target).getConfig().setOpenedSuffix(property(camelContext, java.lang.String.class, value)); return true;
        case "readSuffix": ((HdfsEndpoint) target).getConfig().setReadSuffix(property(camelContext, java.lang.String.class, value)); return true;
        case "replication": ((HdfsEndpoint) target).getConfig().setReplication(property(camelContext, short.class, value)); return true;
        case "splitStrategy": ((HdfsEndpoint) target).getConfig().setSplitStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((HdfsEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "maxMessagesPerPoll": ((HdfsEndpoint) target).getConfig().setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "backoffErrorThreshold": ((HdfsEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((HdfsEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((HdfsEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((HdfsEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((HdfsEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((HdfsEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((HdfsEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((HdfsEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((HdfsEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((HdfsEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((HdfsEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((HdfsEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((HdfsEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((HdfsEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "kerberosConfigFileLocation": ((HdfsEndpoint) target).getConfig().setKerberosConfigFileLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "kerberosKeytabLocation": ((HdfsEndpoint) target).getConfig().setKerberosKeytabLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "kerberosUsername": ((HdfsEndpoint) target).getConfig().setKerberosUsername(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "connectonstartup": ((HdfsEndpoint) target).getConfig().setConnectOnStartup(property(camelContext, boolean.class, value)); return true;
        case "filesystemtype": ((HdfsEndpoint) target).getConfig().setFileSystemType(property(camelContext, org.apache.camel.component.hdfs.HdfsFileSystemType.class, value)); return true;
        case "filetype": ((HdfsEndpoint) target).getConfig().setFileType(property(camelContext, org.apache.camel.component.hdfs.HdfsFileType.class, value)); return true;
        case "keytype": ((HdfsEndpoint) target).getConfig().setKeyType(property(camelContext, org.apache.camel.component.hdfs.WritableType.class, value)); return true;
        case "namednodes": ((HdfsEndpoint) target).getConfig().setNamedNodes(property(camelContext, java.lang.String.class, value)); return true;
        case "owner": ((HdfsEndpoint) target).getConfig().setOwner(property(camelContext, java.lang.String.class, value)); return true;
        case "valuetype": ((HdfsEndpoint) target).getConfig().setValueType(property(camelContext, org.apache.camel.component.hdfs.WritableType.class, value)); return true;
        case "bridgeerrorhandler": ((HdfsEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "pattern": ((HdfsEndpoint) target).getConfig().setPattern(property(camelContext, java.lang.String.class, value)); return true;
        case "sendemptymessagewhenidle": ((HdfsEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "streamdownload": ((HdfsEndpoint) target).getConfig().setStreamDownload(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((HdfsEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((HdfsEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((HdfsEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "append": ((HdfsEndpoint) target).getConfig().setAppend(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((HdfsEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "overwrite": ((HdfsEndpoint) target).getConfig().setOverwrite(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((HdfsEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "blocksize": ((HdfsEndpoint) target).getConfig().setBlockSize(property(camelContext, long.class, value)); return true;
        case "buffersize": ((HdfsEndpoint) target).getConfig().setBufferSize(property(camelContext, int.class, value)); return true;
        case "checkidleinterval": ((HdfsEndpoint) target).getConfig().setCheckIdleInterval(property(camelContext, int.class, value)); return true;
        case "chunksize": ((HdfsEndpoint) target).getConfig().setChunkSize(property(camelContext, int.class, value)); return true;
        case "compressioncodec": ((HdfsEndpoint) target).getConfig().setCompressionCodec(property(camelContext, org.apache.camel.component.hdfs.HdfsCompressionCodec.class, value)); return true;
        case "compressiontype": ((HdfsEndpoint) target).getConfig().setCompressionType(property(camelContext, org.apache.hadoop.io.SequenceFile.CompressionType.class, value)); return true;
        case "openedsuffix": ((HdfsEndpoint) target).getConfig().setOpenedSuffix(property(camelContext, java.lang.String.class, value)); return true;
        case "readsuffix": ((HdfsEndpoint) target).getConfig().setReadSuffix(property(camelContext, java.lang.String.class, value)); return true;
        case "replication": ((HdfsEndpoint) target).getConfig().setReplication(property(camelContext, short.class, value)); return true;
        case "splitstrategy": ((HdfsEndpoint) target).getConfig().setSplitStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((HdfsEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "maxmessagesperpoll": ((HdfsEndpoint) target).getConfig().setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "backofferrorthreshold": ((HdfsEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((HdfsEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((HdfsEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((HdfsEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((HdfsEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((HdfsEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((HdfsEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((HdfsEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((HdfsEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((HdfsEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((HdfsEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((HdfsEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((HdfsEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((HdfsEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "kerberosconfigfilelocation": ((HdfsEndpoint) target).getConfig().setKerberosConfigFileLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "kerberoskeytablocation": ((HdfsEndpoint) target).getConfig().setKerberosKeytabLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "kerberosusername": ((HdfsEndpoint) target).getConfig().setKerberosUsername(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

