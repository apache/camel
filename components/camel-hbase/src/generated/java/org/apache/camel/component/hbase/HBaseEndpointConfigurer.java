/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.hbase;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class HBaseEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        HBaseEndpoint target = (HBaseEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "cellmappingstrategyfactory":
        case "cellMappingStrategyFactory": target.setCellMappingStrategyFactory(property(camelContext, org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filters": target.setFilters(property(camelContext, java.util.List.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "mappingstrategyclassname":
        case "mappingStrategyClassName": target.setMappingStrategyClassName(property(camelContext, java.lang.String.class, value)); return true;
        case "mappingstrategyname":
        case "mappingStrategyName": target.setMappingStrategyName(property(camelContext, java.lang.String.class, value)); return true;
        case "maxmessagesperpoll":
        case "maxMessagesPerPoll": target.setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "maxresults":
        case "maxResults": target.setMaxResults(property(camelContext, int.class, value)); return true;
        case "operation": target.setOperation(property(camelContext, java.lang.String.class, value)); return true;
        case "remove": target.setRemove(property(camelContext, boolean.class, value)); return true;
        case "removehandler":
        case "removeHandler": target.setRemoveHandler(property(camelContext, org.apache.camel.component.hbase.HBaseRemoveHandler.class, value)); return true;
        case "rowmapping":
        case "rowMapping": target.setRowMapping(property(camelContext, java.util.Map.class, value)); return true;
        case "rowmodel":
        case "rowModel": target.setRowModel(property(camelContext, org.apache.camel.component.hbase.model.HBaseRow.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "usergroupinformation":
        case "userGroupInformation": target.setUserGroupInformation(property(camelContext, org.apache.hadoop.security.UserGroupInformation.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("cellMappingStrategyFactory", org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("filters", java.util.List.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("mappingStrategyClassName", java.lang.String.class);
        answer.put("mappingStrategyName", java.lang.String.class);
        answer.put("maxMessagesPerPoll", int.class);
        answer.put("maxResults", int.class);
        answer.put("operation", java.lang.String.class);
        answer.put("remove", boolean.class);
        answer.put("removeHandler", org.apache.camel.component.hbase.HBaseRemoveHandler.class);
        answer.put("rowMapping", java.util.Map.class);
        answer.put("rowModel", org.apache.camel.component.hbase.model.HBaseRow.class);
        answer.put("synchronous", boolean.class);
        answer.put("userGroupInformation", org.apache.hadoop.security.UserGroupInformation.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        HBaseEndpoint target = (HBaseEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "cellmappingstrategyfactory":
        case "cellMappingStrategyFactory": target.getCellMappingStrategyFactory(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "filters": target.getFilters(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "mappingstrategyclassname":
        case "mappingStrategyClassName": target.getMappingStrategyClassName(); return true;
        case "mappingstrategyname":
        case "mappingStrategyName": target.getMappingStrategyName(); return true;
        case "maxmessagesperpoll":
        case "maxMessagesPerPoll": target.getMaxMessagesPerPoll(); return true;
        case "maxresults":
        case "maxResults": target.getMaxResults(); return true;
        case "operation": target.getOperation(); return true;
        case "remove": target.isRemove(); return true;
        case "removehandler":
        case "removeHandler": target.getRemoveHandler(); return true;
        case "rowmapping":
        case "rowMapping": target.getRowMapping(); return true;
        case "rowmodel":
        case "rowModel": target.getRowModel(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "usergroupinformation":
        case "userGroupInformation": target.getUserGroupInformation(); return true;
        default: return null;
        }
    }
}

