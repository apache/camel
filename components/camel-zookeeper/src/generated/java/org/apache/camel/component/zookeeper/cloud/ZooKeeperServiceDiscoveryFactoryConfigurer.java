/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.zookeeper.cloud;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.zookeeper.cloud.ZooKeeperServiceDiscoveryFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class ZooKeeperServiceDiscoveryFactoryConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.zookeeper.cloud.ZooKeeperServiceDiscoveryFactory target = (org.apache.camel.component.zookeeper.cloud.ZooKeeperServiceDiscoveryFactory) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authinfolist":
        case "authInfoList": target.setAuthInfoList(property(camelContext, java.util.List.class, value)); return true;
        case "basepath":
        case "basePath": target.setBasePath(property(camelContext, java.lang.String.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.zookeeper.ZooKeeperCuratorConfiguration.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.setConnectionTimeout(property(camelContext, long.class, value)); return true;
        case "connectiontimeoutunit":
        case "connectionTimeoutUnit": target.setConnectionTimeoutUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "curatorframework":
        case "curatorFramework": target.setCuratorFramework(property(camelContext, org.apache.curator.framework.CuratorFramework.class, value)); return true;
        case "maxclosewait":
        case "maxCloseWait": target.setMaxCloseWait(property(camelContext, long.class, value)); return true;
        case "maxclosewaitunit":
        case "maxCloseWaitUnit": target.setMaxCloseWaitUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "namespace": target.setNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "nodes": target.setNodes(property(camelContext, java.lang.String.class, value)); return true;
        case "reconnectbasesleeptime":
        case "reconnectBaseSleepTime": target.setReconnectBaseSleepTime(property(camelContext, long.class, value)); return true;
        case "reconnectbasesleeptimeunit":
        case "reconnectBaseSleepTimeUnit": target.setReconnectBaseSleepTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "reconnectmaxretries":
        case "reconnectMaxRetries": target.setReconnectMaxRetries(property(camelContext, int.class, value)); return true;
        case "reconnectmaxsleeptime":
        case "reconnectMaxSleepTime": target.setReconnectMaxSleepTime(property(camelContext, long.class, value)); return true;
        case "reconnectmaxsleeptimeunit":
        case "reconnectMaxSleepTimeUnit": target.setReconnectMaxSleepTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "retrypolicy":
        case "retryPolicy": target.setRetryPolicy(property(camelContext, org.apache.curator.RetryPolicy.class, value)); return true;
        case "sessiontimeout":
        case "sessionTimeout": target.setSessionTimeout(property(camelContext, long.class, value)); return true;
        case "sessiontimeoutunit":
        case "sessionTimeoutUnit": target.setSessionTimeoutUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authinfolist":
        case "authInfoList": return java.util.List.class;
        case "basepath":
        case "basePath": return java.lang.String.class;
        case "configuration": return org.apache.camel.component.zookeeper.ZooKeeperCuratorConfiguration.class;
        case "connectiontimeout":
        case "connectionTimeout": return long.class;
        case "connectiontimeoutunit":
        case "connectionTimeoutUnit": return java.util.concurrent.TimeUnit.class;
        case "curatorframework":
        case "curatorFramework": return org.apache.curator.framework.CuratorFramework.class;
        case "maxclosewait":
        case "maxCloseWait": return long.class;
        case "maxclosewaitunit":
        case "maxCloseWaitUnit": return java.util.concurrent.TimeUnit.class;
        case "namespace": return java.lang.String.class;
        case "nodes": return java.lang.String.class;
        case "reconnectbasesleeptime":
        case "reconnectBaseSleepTime": return long.class;
        case "reconnectbasesleeptimeunit":
        case "reconnectBaseSleepTimeUnit": return java.util.concurrent.TimeUnit.class;
        case "reconnectmaxretries":
        case "reconnectMaxRetries": return int.class;
        case "reconnectmaxsleeptime":
        case "reconnectMaxSleepTime": return long.class;
        case "reconnectmaxsleeptimeunit":
        case "reconnectMaxSleepTimeUnit": return java.util.concurrent.TimeUnit.class;
        case "retrypolicy":
        case "retryPolicy": return org.apache.curator.RetryPolicy.class;
        case "sessiontimeout":
        case "sessionTimeout": return long.class;
        case "sessiontimeoutunit":
        case "sessionTimeoutUnit": return java.util.concurrent.TimeUnit.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.zookeeper.cloud.ZooKeeperServiceDiscoveryFactory target = (org.apache.camel.component.zookeeper.cloud.ZooKeeperServiceDiscoveryFactory) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authinfolist":
        case "authInfoList": return target.getAuthInfoList();
        case "basepath":
        case "basePath": return target.getBasePath();
        case "configuration": return target.getConfiguration();
        case "connectiontimeout":
        case "connectionTimeout": return target.getConnectionTimeout();
        case "connectiontimeoutunit":
        case "connectionTimeoutUnit": return target.getConnectionTimeoutUnit();
        case "curatorframework":
        case "curatorFramework": return target.getCuratorFramework();
        case "maxclosewait":
        case "maxCloseWait": return target.getMaxCloseWait();
        case "maxclosewaitunit":
        case "maxCloseWaitUnit": return target.getMaxCloseWaitUnit();
        case "namespace": return target.getNamespace();
        case "nodes": return target.getNodes();
        case "reconnectbasesleeptime":
        case "reconnectBaseSleepTime": return target.getReconnectBaseSleepTime();
        case "reconnectbasesleeptimeunit":
        case "reconnectBaseSleepTimeUnit": return target.getReconnectBaseSleepTimeUnit();
        case "reconnectmaxretries":
        case "reconnectMaxRetries": return target.getReconnectMaxRetries();
        case "reconnectmaxsleeptime":
        case "reconnectMaxSleepTime": return target.getReconnectMaxSleepTime();
        case "reconnectmaxsleeptimeunit":
        case "reconnectMaxSleepTimeUnit": return target.getReconnectMaxSleepTimeUnit();
        case "retrypolicy":
        case "retryPolicy": return target.getRetryPolicy();
        case "sessiontimeout":
        case "sessionTimeout": return target.getSessionTimeout();
        case "sessiontimeoutunit":
        case "sessionTimeoutUnit": return target.getSessionTimeoutUnit();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authinfolist":
        case "authInfoList": return org.apache.curator.framework.AuthInfo.class;
        default: return null;
        }
    }
}

