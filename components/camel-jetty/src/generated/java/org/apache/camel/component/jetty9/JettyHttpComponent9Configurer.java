/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jetty9;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JettyHttpComponent9Configurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        JettyHttpComponent9 target = (JettyHttpComponent9) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowjavaserializedobject":
        case "allowJavaSerializedObject": target.setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "continuationtimeout":
        case "continuationTimeout": target.setContinuationTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        case "enablejmx":
        case "enableJmx": target.setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "errorhandler":
        case "errorHandler": target.setErrorHandler(property(camelContext, org.eclipse.jetty.server.handler.ErrorHandler.class, value)); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "httpbinding":
        case "httpBinding": target.setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "httpconfiguration":
        case "httpConfiguration": target.setHttpConfiguration(property(camelContext, org.apache.camel.http.common.HttpConfiguration.class, value)); return true;
        case "jettyhttpbinding":
        case "jettyHttpBinding": target.setJettyHttpBinding(property(camelContext, org.apache.camel.component.jetty.JettyHttpBinding.class, value)); return true;
        case "keystore": target.setKeystore(property(camelContext, java.lang.String.class, value)); return true;
        case "maxthreads":
        case "maxThreads": target.setMaxThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "mbcontainer":
        case "mbContainer": target.setMbContainer(property(camelContext, org.eclipse.jetty.jmx.MBeanContainer.class, value)); return true;
        case "minthreads":
        case "minThreads": target.setMinThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyhost":
        case "proxyHost": target.setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport":
        case "proxyPort": target.setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requestbuffersize":
        case "requestBufferSize": target.setRequestBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requestheadersize":
        case "requestHeaderSize": target.setRequestHeaderSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "responsebuffersize":
        case "responseBufferSize": target.setResponseBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "responseheadersize":
        case "responseHeaderSize": target.setResponseHeaderSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sendserverversion":
        case "sendServerVersion": target.setSendServerVersion(property(camelContext, boolean.class, value)); return true;
        case "socketconnectorproperties":
        case "socketConnectorProperties": target.setSocketConnectorProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "socketconnectors":
        case "socketConnectors": target.setSocketConnectors(property(camelContext, java.util.Map.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "sslkeypassword":
        case "sslKeyPassword": target.setSslKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslpassword":
        case "sslPassword": target.setSslPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslsocketconnectorproperties":
        case "sslSocketConnectorProperties": target.setSslSocketConnectorProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sslsocketconnectors":
        case "sslSocketConnectors": target.setSslSocketConnectors(property(camelContext, java.util.Map.class, value)); return true;
        case "threadpool":
        case "threadPool": target.setThreadPool(property(camelContext, org.eclipse.jetty.util.thread.ThreadPool.class, value)); return true;
        case "usecontinuation":
        case "useContinuation": target.setUseContinuation(property(camelContext, boolean.class, value)); return true;
        case "useglobalsslcontextparameters":
        case "useGlobalSslContextParameters": target.setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "usexforwardedforheader":
        case "useXForwardedForHeader": target.setUseXForwardedForHeader(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("allowJavaSerializedObject", boolean.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("continuationTimeout", java.lang.Long.class);
        answer.put("enableJmx", boolean.class);
        answer.put("errorHandler", org.eclipse.jetty.server.handler.ErrorHandler.class);
        answer.put("headerFilterStrategy", org.apache.camel.spi.HeaderFilterStrategy.class);
        answer.put("httpBinding", org.apache.camel.http.common.HttpBinding.class);
        answer.put("httpConfiguration", org.apache.camel.http.common.HttpConfiguration.class);
        answer.put("jettyHttpBinding", org.apache.camel.component.jetty.JettyHttpBinding.class);
        answer.put("keystore", java.lang.String.class);
        answer.put("maxThreads", java.lang.Integer.class);
        answer.put("mbContainer", org.eclipse.jetty.jmx.MBeanContainer.class);
        answer.put("minThreads", java.lang.Integer.class);
        answer.put("proxyHost", java.lang.String.class);
        answer.put("proxyPort", java.lang.Integer.class);
        answer.put("requestBufferSize", java.lang.Integer.class);
        answer.put("requestHeaderSize", java.lang.Integer.class);
        answer.put("responseBufferSize", java.lang.Integer.class);
        answer.put("responseHeaderSize", java.lang.Integer.class);
        answer.put("sendServerVersion", boolean.class);
        answer.put("socketConnectorProperties", java.util.Map.class);
        answer.put("socketConnectors", java.util.Map.class);
        answer.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        answer.put("sslKeyPassword", java.lang.String.class);
        answer.put("sslPassword", java.lang.String.class);
        answer.put("sslSocketConnectorProperties", java.util.Map.class);
        answer.put("sslSocketConnectors", java.util.Map.class);
        answer.put("threadPool", org.eclipse.jetty.util.thread.ThreadPool.class);
        answer.put("useContinuation", boolean.class);
        answer.put("useGlobalSslContextParameters", boolean.class);
        answer.put("useXForwardedForHeader", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        JettyHttpComponent9 target = (JettyHttpComponent9) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowjavaserializedobject":
        case "allowJavaSerializedObject": target.isAllowJavaSerializedObject(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "continuationtimeout":
        case "continuationTimeout": target.getContinuationTimeout(); return true;
        case "enablejmx":
        case "enableJmx": target.isEnableJmx(); return true;
        case "errorhandler":
        case "errorHandler": target.getErrorHandler(); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.getHeaderFilterStrategy(); return true;
        case "httpbinding":
        case "httpBinding": target.getHttpBinding(); return true;
        case "httpconfiguration":
        case "httpConfiguration": target.getHttpConfiguration(); return true;
        case "jettyhttpbinding":
        case "jettyHttpBinding": target.getJettyHttpBinding(); return true;
        case "keystore": target.getKeystore(); return true;
        case "maxthreads":
        case "maxThreads": target.getMaxThreads(); return true;
        case "mbcontainer":
        case "mbContainer": target.getMbContainer(); return true;
        case "minthreads":
        case "minThreads": target.getMinThreads(); return true;
        case "proxyhost":
        case "proxyHost": target.getProxyHost(); return true;
        case "proxyport":
        case "proxyPort": target.getProxyPort(); return true;
        case "requestbuffersize":
        case "requestBufferSize": target.getRequestBufferSize(); return true;
        case "requestheadersize":
        case "requestHeaderSize": target.getRequestHeaderSize(); return true;
        case "responsebuffersize":
        case "responseBufferSize": target.getResponseBufferSize(); return true;
        case "responseheadersize":
        case "responseHeaderSize": target.getResponseHeaderSize(); return true;
        case "sendserverversion":
        case "sendServerVersion": target.isSendServerVersion(); return true;
        case "socketconnectorproperties":
        case "socketConnectorProperties": target.getSocketConnectorProperties(); return true;
        case "socketconnectors":
        case "socketConnectors": target.getSocketConnectors(); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.getSslContextParameters(); return true;
        case "sslkeypassword":
        case "sslKeyPassword": target.getSslKeyPassword(); return true;
        case "sslpassword":
        case "sslPassword": target.getSslPassword(); return true;
        case "sslsocketconnectorproperties":
        case "sslSocketConnectorProperties": target.getSslSocketConnectorProperties(); return true;
        case "sslsocketconnectors":
        case "sslSocketConnectors": target.getSslSocketConnectors(); return true;
        case "threadpool":
        case "threadPool": target.getThreadPool(); return true;
        case "usecontinuation":
        case "useContinuation": target.isUseContinuation(); return true;
        case "useglobalsslcontextparameters":
        case "useGlobalSslContextParameters": target.isUseGlobalSslContextParameters(); return true;
        case "usexforwardedforheader":
        case "useXForwardedForHeader": target.isUseXForwardedForHeader(); return true;
        default: return null;
        }
    }
}

