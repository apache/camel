/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jetty9;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JettyHttpComponent9Configurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "sslKeyPassword": ((JettyHttpComponent9) target).setSslKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslPassword": ((JettyHttpComponent9) target).setSslPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "keystore": ((JettyHttpComponent9) target).setKeystore(property(camelContext, java.lang.String.class, value)); return true;
        case "errorHandler": ((JettyHttpComponent9) target).setErrorHandler(property(camelContext, org.eclipse.jetty.server.handler.ErrorHandler.class, value)); return true;
        case "sslSocketConnectors": ((JettyHttpComponent9) target).setSslSocketConnectors(property(camelContext, java.util.Map.class, value)); return true;
        case "socketConnectors": ((JettyHttpComponent9) target).setSocketConnectors(property(camelContext, java.util.Map.class, value)); return true;
        case "minThreads": ((JettyHttpComponent9) target).setMinThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxThreads": ((JettyHttpComponent9) target).setMaxThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "threadPool": ((JettyHttpComponent9) target).setThreadPool(property(camelContext, org.eclipse.jetty.util.thread.ThreadPool.class, value)); return true;
        case "enableJmx": ((JettyHttpComponent9) target).setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "jettyHttpBinding": ((JettyHttpComponent9) target).setJettyHttpBinding(property(camelContext, org.apache.camel.component.jetty.JettyHttpBinding.class, value)); return true;
        case "httpBinding": ((JettyHttpComponent9) target).setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "httpConfiguration": ((JettyHttpComponent9) target).setHttpConfiguration(property(camelContext, org.apache.camel.http.common.HttpConfiguration.class, value)); return true;
        case "mbContainer": ((JettyHttpComponent9) target).setMbContainer(property(camelContext, org.eclipse.jetty.jmx.MBeanContainer.class, value)); return true;
        case "sslSocketConnectorProperties": ((JettyHttpComponent9) target).setSslSocketConnectorProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "socketConnectorProperties": ((JettyHttpComponent9) target).setSocketConnectorProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "continuationTimeout": ((JettyHttpComponent9) target).setContinuationTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        case "useContinuation": ((JettyHttpComponent9) target).setUseContinuation(property(camelContext, boolean.class, value)); return true;
        case "sslContextParameters": ((JettyHttpComponent9) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "useGlobalSslContextParameters": ((JettyHttpComponent9) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "responseBufferSize": ((JettyHttpComponent9) target).setResponseBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requestBufferSize": ((JettyHttpComponent9) target).setRequestBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requestHeaderSize": ((JettyHttpComponent9) target).setRequestHeaderSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "responseHeaderSize": ((JettyHttpComponent9) target).setResponseHeaderSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyHost": ((JettyHttpComponent9) target).setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyPort": ((JettyHttpComponent9) target).setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "useXForwardedForHeader": ((JettyHttpComponent9) target).setUseXForwardedForHeader(property(camelContext, boolean.class, value)); return true;
        case "sendServerVersion": ((JettyHttpComponent9) target).setSendServerVersion(property(camelContext, boolean.class, value)); return true;
        case "allowJavaSerializedObject": ((JettyHttpComponent9) target).setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "headerFilterStrategy": ((JettyHttpComponent9) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicPropertyBinding": ((JettyHttpComponent9) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((JettyHttpComponent9) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "sslkeypassword": ((JettyHttpComponent9) target).setSslKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslpassword": ((JettyHttpComponent9) target).setSslPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "keystore": ((JettyHttpComponent9) target).setKeystore(property(camelContext, java.lang.String.class, value)); return true;
        case "errorhandler": ((JettyHttpComponent9) target).setErrorHandler(property(camelContext, org.eclipse.jetty.server.handler.ErrorHandler.class, value)); return true;
        case "sslsocketconnectors": ((JettyHttpComponent9) target).setSslSocketConnectors(property(camelContext, java.util.Map.class, value)); return true;
        case "socketconnectors": ((JettyHttpComponent9) target).setSocketConnectors(property(camelContext, java.util.Map.class, value)); return true;
        case "minthreads": ((JettyHttpComponent9) target).setMinThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxthreads": ((JettyHttpComponent9) target).setMaxThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "threadpool": ((JettyHttpComponent9) target).setThreadPool(property(camelContext, org.eclipse.jetty.util.thread.ThreadPool.class, value)); return true;
        case "enablejmx": ((JettyHttpComponent9) target).setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "jettyhttpbinding": ((JettyHttpComponent9) target).setJettyHttpBinding(property(camelContext, org.apache.camel.component.jetty.JettyHttpBinding.class, value)); return true;
        case "httpbinding": ((JettyHttpComponent9) target).setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "httpconfiguration": ((JettyHttpComponent9) target).setHttpConfiguration(property(camelContext, org.apache.camel.http.common.HttpConfiguration.class, value)); return true;
        case "mbcontainer": ((JettyHttpComponent9) target).setMbContainer(property(camelContext, org.eclipse.jetty.jmx.MBeanContainer.class, value)); return true;
        case "sslsocketconnectorproperties": ((JettyHttpComponent9) target).setSslSocketConnectorProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "socketconnectorproperties": ((JettyHttpComponent9) target).setSocketConnectorProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "continuationtimeout": ((JettyHttpComponent9) target).setContinuationTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        case "usecontinuation": ((JettyHttpComponent9) target).setUseContinuation(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters": ((JettyHttpComponent9) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "useglobalsslcontextparameters": ((JettyHttpComponent9) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "responsebuffersize": ((JettyHttpComponent9) target).setResponseBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requestbuffersize": ((JettyHttpComponent9) target).setRequestBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requestheadersize": ((JettyHttpComponent9) target).setRequestHeaderSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "responseheadersize": ((JettyHttpComponent9) target).setResponseHeaderSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyhost": ((JettyHttpComponent9) target).setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport": ((JettyHttpComponent9) target).setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "usexforwardedforheader": ((JettyHttpComponent9) target).setUseXForwardedForHeader(property(camelContext, boolean.class, value)); return true;
        case "sendserverversion": ((JettyHttpComponent9) target).setSendServerVersion(property(camelContext, boolean.class, value)); return true;
        case "allowjavaserializedobject": ((JettyHttpComponent9) target).setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy": ((JettyHttpComponent9) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicpropertybinding": ((JettyHttpComponent9) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((JettyHttpComponent9) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

