/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jetty9;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JettyHttpEndpoint9Configurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "disableStreamCache": ((JettyHttpEndpoint9) target).setDisableStreamCache(property(camelContext, boolean.class, value)); return true;
        case "headerFilterStrategy": ((JettyHttpEndpoint9) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "httpBinding": ((JettyHttpEndpoint9) target).setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "async": ((JettyHttpEndpoint9) target).setAsync(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((JettyHttpEndpoint9) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "chunked": ((JettyHttpEndpoint9) target).setChunked(property(camelContext, boolean.class, value)); return true;
        case "continuationTimeout": ((JettyHttpEndpoint9) target).setContinuationTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        case "enableCORS": ((JettyHttpEndpoint9) target).setEnableCORS(property(camelContext, boolean.class, value)); return true;
        case "enableJmx": ((JettyHttpEndpoint9) target).setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "enableMultipartFilter": ((JettyHttpEndpoint9) target).setEnableMultipartFilter(property(camelContext, boolean.class, value)); return true;
        case "httpMethodRestrict": ((JettyHttpEndpoint9) target).setHttpMethodRestrict(property(camelContext, java.lang.String.class, value)); return true;
        case "matchOnUriPrefix": ((JettyHttpEndpoint9) target).setMatchOnUriPrefix(property(camelContext, boolean.class, value)); return true;
        case "muteException": ((JettyHttpEndpoint9) target).setMuteException(property(camelContext, boolean.class, value)); return true;
        case "responseBufferSize": ((JettyHttpEndpoint9) target).setResponseBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sendDateHeader": ((JettyHttpEndpoint9) target).setSendDateHeader(property(camelContext, boolean.class, value)); return true;
        case "sendServerVersion": ((JettyHttpEndpoint9) target).setSendServerVersion(property(camelContext, boolean.class, value)); return true;
        case "sessionSupport": ((JettyHttpEndpoint9) target).setSessionSupport(property(camelContext, boolean.class, value)); return true;
        case "transferException": ((JettyHttpEndpoint9) target).setTransferException(property(camelContext, boolean.class, value)); return true;
        case "useContinuation": ((JettyHttpEndpoint9) target).setUseContinuation(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "eagerCheckContentAvailable": ((JettyHttpEndpoint9) target).setEagerCheckContentAvailable(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((JettyHttpEndpoint9) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((JettyHttpEndpoint9) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filterInitParameters": ((JettyHttpEndpoint9) target).setFilterInitParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "filters": ((JettyHttpEndpoint9) target).setFilters(property(camelContext, java.util.List.class, value)); return true;
        case "handlers": ((JettyHttpEndpoint9) target).setHandlers(property(camelContext, java.util.List.class, value)); return true;
        case "multipartFilter": ((JettyHttpEndpoint9) target).setMultipartFilter(property(camelContext, javax.servlet.Filter.class, value)); return true;
        case "optionsEnabled": ((JettyHttpEndpoint9) target).setOptionsEnabled(property(camelContext, boolean.class, value)); return true;
        case "traceEnabled": ((JettyHttpEndpoint9) target).setTraceEnabled(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((JettyHttpEndpoint9) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "mapHttpMessageBody": ((JettyHttpEndpoint9) target).setMapHttpMessageBody(property(camelContext, boolean.class, value)); return true;
        case "mapHttpMessageFormUrlEncodedBody": ((JettyHttpEndpoint9) target).setMapHttpMessageFormUrlEncodedBody(property(camelContext, boolean.class, value)); return true;
        case "mapHttpMessageHeaders": ((JettyHttpEndpoint9) target).setMapHttpMessageHeaders(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((JettyHttpEndpoint9) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "sslContextParameters": ((JettyHttpEndpoint9) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "disablestreamcache": ((JettyHttpEndpoint9) target).setDisableStreamCache(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy": ((JettyHttpEndpoint9) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "httpbinding": ((JettyHttpEndpoint9) target).setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "async": ((JettyHttpEndpoint9) target).setAsync(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((JettyHttpEndpoint9) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "chunked": ((JettyHttpEndpoint9) target).setChunked(property(camelContext, boolean.class, value)); return true;
        case "continuationtimeout": ((JettyHttpEndpoint9) target).setContinuationTimeout(property(camelContext, java.lang.Long.class, value)); return true;
        case "enablecors": ((JettyHttpEndpoint9) target).setEnableCORS(property(camelContext, boolean.class, value)); return true;
        case "enablejmx": ((JettyHttpEndpoint9) target).setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "enablemultipartfilter": ((JettyHttpEndpoint9) target).setEnableMultipartFilter(property(camelContext, boolean.class, value)); return true;
        case "httpmethodrestrict": ((JettyHttpEndpoint9) target).setHttpMethodRestrict(property(camelContext, java.lang.String.class, value)); return true;
        case "matchonuriprefix": ((JettyHttpEndpoint9) target).setMatchOnUriPrefix(property(camelContext, boolean.class, value)); return true;
        case "muteexception": ((JettyHttpEndpoint9) target).setMuteException(property(camelContext, boolean.class, value)); return true;
        case "responsebuffersize": ((JettyHttpEndpoint9) target).setResponseBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "senddateheader": ((JettyHttpEndpoint9) target).setSendDateHeader(property(camelContext, boolean.class, value)); return true;
        case "sendserverversion": ((JettyHttpEndpoint9) target).setSendServerVersion(property(camelContext, boolean.class, value)); return true;
        case "sessionsupport": ((JettyHttpEndpoint9) target).setSessionSupport(property(camelContext, boolean.class, value)); return true;
        case "transferexception": ((JettyHttpEndpoint9) target).setTransferException(property(camelContext, boolean.class, value)); return true;
        case "usecontinuation": ((JettyHttpEndpoint9) target).setUseContinuation(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "eagercheckcontentavailable": ((JettyHttpEndpoint9) target).setEagerCheckContentAvailable(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((JettyHttpEndpoint9) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((JettyHttpEndpoint9) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filterinitparameters": ((JettyHttpEndpoint9) target).setFilterInitParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "filters": ((JettyHttpEndpoint9) target).setFilters(property(camelContext, java.util.List.class, value)); return true;
        case "handlers": ((JettyHttpEndpoint9) target).setHandlers(property(camelContext, java.util.List.class, value)); return true;
        case "multipartfilter": ((JettyHttpEndpoint9) target).setMultipartFilter(property(camelContext, javax.servlet.Filter.class, value)); return true;
        case "optionsenabled": ((JettyHttpEndpoint9) target).setOptionsEnabled(property(camelContext, boolean.class, value)); return true;
        case "traceenabled": ((JettyHttpEndpoint9) target).setTraceEnabled(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((JettyHttpEndpoint9) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "maphttpmessagebody": ((JettyHttpEndpoint9) target).setMapHttpMessageBody(property(camelContext, boolean.class, value)); return true;
        case "maphttpmessageformurlencodedbody": ((JettyHttpEndpoint9) target).setMapHttpMessageFormUrlEncodedBody(property(camelContext, boolean.class, value)); return true;
        case "maphttpmessageheaders": ((JettyHttpEndpoint9) target).setMapHttpMessageHeaders(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((JettyHttpEndpoint9) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters": ((JettyHttpEndpoint9) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
            default: return false;
        }
    }

}

