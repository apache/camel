/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.dataformat.xmlsecurity;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormat;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class XMLSecurityDataFormatConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("AddKeyValueForEncryptedKey", boolean.class);
        map.put("DigestAlgorithm", java.lang.String.class);
        map.put("KeyCipherAlgorithm", java.lang.String.class);
        map.put("KeyPassword", java.lang.String.class);
        map.put("MgfAlgorithm", java.lang.String.class);
        map.put("PassPhrase", byte[].class);
        map.put("RecipientKeyAlias", java.lang.String.class);
        map.put("SecureTag", java.lang.String.class);
        map.put("SecureTagContents", boolean.class);
        map.put("XmlCipherAlgorithm", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        XMLSecurityDataFormat target = (XMLSecurityDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "addkeyvalueforencryptedkey":
        case "addKeyValueForEncryptedKey": target.setAddKeyValueForEncryptedKey(property(camelContext, boolean.class, value)); return true;
        case "digestalgorithm":
        case "digestAlgorithm": target.setDigestAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "keycipheralgorithm":
        case "keyCipherAlgorithm": target.setKeyCipherAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "keypassword":
        case "keyPassword": target.setKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "mgfalgorithm":
        case "mgfAlgorithm": target.setMgfAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "passphrase":
        case "passPhrase": target.setPassPhrase(property(camelContext, byte[].class, value)); return true;
        case "recipientkeyalias":
        case "recipientKeyAlias": target.setRecipientKeyAlias(property(camelContext, java.lang.String.class, value)); return true;
        case "securetag":
        case "secureTag": target.setSecureTag(property(camelContext, java.lang.String.class, value)); return true;
        case "securetagcontents":
        case "secureTagContents": target.setSecureTagContents(property(camelContext, boolean.class, value)); return true;
        case "xmlcipheralgorithm":
        case "xmlCipherAlgorithm": target.setXmlCipherAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "addkeyvalueforencryptedkey":
        case "addKeyValueForEncryptedKey": return boolean.class;
        case "digestalgorithm":
        case "digestAlgorithm": return java.lang.String.class;
        case "keycipheralgorithm":
        case "keyCipherAlgorithm": return java.lang.String.class;
        case "keypassword":
        case "keyPassword": return java.lang.String.class;
        case "mgfalgorithm":
        case "mgfAlgorithm": return java.lang.String.class;
        case "passphrase":
        case "passPhrase": return byte[].class;
        case "recipientkeyalias":
        case "recipientKeyAlias": return java.lang.String.class;
        case "securetag":
        case "secureTag": return java.lang.String.class;
        case "securetagcontents":
        case "secureTagContents": return boolean.class;
        case "xmlcipheralgorithm":
        case "xmlCipherAlgorithm": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        XMLSecurityDataFormat target = (XMLSecurityDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "addkeyvalueforencryptedkey":
        case "addKeyValueForEncryptedKey": return target.isAddKeyValueForEncryptedKey();
        case "digestalgorithm":
        case "digestAlgorithm": return target.getDigestAlgorithm();
        case "keycipheralgorithm":
        case "keyCipherAlgorithm": return target.getKeyCipherAlgorithm();
        case "keypassword":
        case "keyPassword": return target.getKeyPassword();
        case "mgfalgorithm":
        case "mgfAlgorithm": return target.getMgfAlgorithm();
        case "passphrase":
        case "passPhrase": return target.getPassPhrase();
        case "recipientkeyalias":
        case "recipientKeyAlias": return target.getRecipientKeyAlias();
        case "securetag":
        case "secureTag": return target.getSecureTag();
        case "securetagcontents":
        case "secureTagContents": return target.isSecureTagContents();
        case "xmlcipheralgorithm":
        case "xmlCipherAlgorithm": return target.getXmlCipherAlgorithm();
        default: return null;
        }
    }
}

