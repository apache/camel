/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.xmlsecurity;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class XmlSignerEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("name", java.lang.String.class);
        map.put("addKeyInfoReference", java.lang.Boolean.class);
        map.put("baseUri", java.lang.String.class);
        map.put("canonicalizationMethod", javax.xml.crypto.AlgorithmMethod.class);
        map.put("clearHeaders", java.lang.Boolean.class);
        map.put("contentObjectId", java.lang.String.class);
        map.put("contentReferenceType", java.lang.String.class);
        map.put("contentReferenceUri", java.lang.String.class);
        map.put("cryptoContextProperties", java.util.Map.class);
        map.put("digestAlgorithm", java.lang.String.class);
        map.put("disallowDoctypeDecl", java.lang.Boolean.class);
        map.put("keyAccessor", org.apache.camel.component.xmlsecurity.api.KeyAccessor.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("omitXmlDeclaration", java.lang.Boolean.class);
        map.put("outputXmlEncoding", java.lang.String.class);
        map.put("parentLocalName", java.lang.String.class);
        map.put("parentNamespace", java.lang.String.class);
        map.put("parentXpath", javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.class);
        map.put("plainText", java.lang.Boolean.class);
        map.put("plainTextEncoding", java.lang.String.class);
        map.put("prefixForXmlSignatureNamespace", java.lang.String.class);
        map.put("properties", org.apache.camel.component.xmlsecurity.api.XmlSignatureProperties.class);
        map.put("schemaResourceUri", java.lang.String.class);
        map.put("signatureAlgorithm", java.lang.String.class);
        map.put("signatureId", java.lang.String.class);
        map.put("transformMethods", java.util.List.class);
        map.put("xpathsToIdAttributes", java.util.List.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("synchronous", boolean.class);
        map.put("uriDereferencer", javax.xml.crypto.URIDereferencer.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        XmlSignerEndpoint target = (XmlSignerEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "addkeyinforeference":
        case "addKeyInfoReference": target.getConfiguration().setAddKeyInfoReference(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "baseuri":
        case "baseUri": target.getConfiguration().setBaseUri(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "canonicalizationmethod":
        case "canonicalizationMethod": target.getConfiguration().setCanonicalizationMethod(property(camelContext, javax.xml.crypto.AlgorithmMethod.class, value)); return true;
        case "clearheaders":
        case "clearHeaders": target.getConfiguration().setClearHeaders(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "contentobjectid":
        case "contentObjectId": target.getConfiguration().setContentObjectId(property(camelContext, java.lang.String.class, value)); return true;
        case "contentreferencetype":
        case "contentReferenceType": target.getConfiguration().setContentReferenceType(property(camelContext, java.lang.String.class, value)); return true;
        case "contentreferenceuri":
        case "contentReferenceUri": target.getConfiguration().setContentReferenceUri(property(camelContext, java.lang.String.class, value)); return true;
        case "cryptocontextproperties":
        case "cryptoContextProperties": target.getConfiguration().setCryptoContextProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "digestalgorithm":
        case "digestAlgorithm": target.getConfiguration().setDigestAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "disallowdoctypedecl":
        case "disallowDoctypeDecl": target.getConfiguration().setDisallowDoctypeDecl(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "keyaccessor":
        case "keyAccessor": target.getConfiguration().setKeyAccessor(property(camelContext, org.apache.camel.component.xmlsecurity.api.KeyAccessor.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "omitxmldeclaration":
        case "omitXmlDeclaration": target.getConfiguration().setOmitXmlDeclaration(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "outputxmlencoding":
        case "outputXmlEncoding": target.getConfiguration().setOutputXmlEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "parentlocalname":
        case "parentLocalName": target.getConfiguration().setParentLocalName(property(camelContext, java.lang.String.class, value)); return true;
        case "parentnamespace":
        case "parentNamespace": target.getConfiguration().setParentNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "parentxpath":
        case "parentXpath": target.getConfiguration().setParentXpath(property(camelContext, javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.class, value)); return true;
        case "plaintext":
        case "plainText": target.getConfiguration().setPlainText(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "plaintextencoding":
        case "plainTextEncoding": target.getConfiguration().setPlainTextEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "prefixforxmlsignaturenamespace":
        case "prefixForXmlSignatureNamespace": target.getConfiguration().setPrefixForXmlSignatureNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "properties": target.getConfiguration().setProperties(property(camelContext, org.apache.camel.component.xmlsecurity.api.XmlSignatureProperties.class, value)); return true;
        case "schemaresourceuri":
        case "schemaResourceUri": target.getConfiguration().setSchemaResourceUri(property(camelContext, java.lang.String.class, value)); return true;
        case "signaturealgorithm":
        case "signatureAlgorithm": target.getConfiguration().setSignatureAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "signatureid":
        case "signatureId": target.getConfiguration().setSignatureId(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "transformmethods":
        case "transformMethods": target.getConfiguration().setTransformMethods(property(camelContext, java.util.List.class, value)); return true;
        case "uridereferencer":
        case "uriDereferencer": target.getConfiguration().setUriDereferencer(property(camelContext, javax.xml.crypto.URIDereferencer.class, value)); return true;
        case "xpathstoidattributes":
        case "xpathsToIdAttributes": target.getConfiguration().setXpathsToIdAttributes(property(camelContext, java.util.List.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        XmlSignerEndpoint target = (XmlSignerEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "addkeyinforeference":
        case "addKeyInfoReference": return target.getConfiguration().getAddKeyInfoReference();
        case "baseuri":
        case "baseUri": return target.getConfiguration().getBaseUri();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "canonicalizationmethod":
        case "canonicalizationMethod": return target.getConfiguration().getCanonicalizationMethod();
        case "clearheaders":
        case "clearHeaders": return target.getConfiguration().getClearHeaders();
        case "contentobjectid":
        case "contentObjectId": return target.getConfiguration().getContentObjectId();
        case "contentreferencetype":
        case "contentReferenceType": return target.getConfiguration().getContentReferenceType();
        case "contentreferenceuri":
        case "contentReferenceUri": return target.getConfiguration().getContentReferenceUri();
        case "cryptocontextproperties":
        case "cryptoContextProperties": return target.getConfiguration().getCryptoContextProperties();
        case "digestalgorithm":
        case "digestAlgorithm": return target.getConfiguration().getDigestAlgorithm();
        case "disallowdoctypedecl":
        case "disallowDoctypeDecl": return target.getConfiguration().getDisallowDoctypeDecl();
        case "keyaccessor":
        case "keyAccessor": return target.getConfiguration().getKeyAccessor();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "omitxmldeclaration":
        case "omitXmlDeclaration": return target.getConfiguration().getOmitXmlDeclaration();
        case "outputxmlencoding":
        case "outputXmlEncoding": return target.getConfiguration().getOutputXmlEncoding();
        case "parentlocalname":
        case "parentLocalName": return target.getConfiguration().getParentLocalName();
        case "parentnamespace":
        case "parentNamespace": return target.getConfiguration().getParentNamespace();
        case "parentxpath":
        case "parentXpath": return target.getConfiguration().getParentXpath();
        case "plaintext":
        case "plainText": return target.getConfiguration().getPlainText();
        case "plaintextencoding":
        case "plainTextEncoding": return target.getConfiguration().getPlainTextEncoding();
        case "prefixforxmlsignaturenamespace":
        case "prefixForXmlSignatureNamespace": return target.getConfiguration().getPrefixForXmlSignatureNamespace();
        case "properties": return target.getConfiguration().getProperties();
        case "schemaresourceuri":
        case "schemaResourceUri": return target.getConfiguration().getSchemaResourceUri();
        case "signaturealgorithm":
        case "signatureAlgorithm": return target.getConfiguration().getSignatureAlgorithm();
        case "signatureid":
        case "signatureId": return target.getConfiguration().getSignatureId();
        case "synchronous": return target.isSynchronous();
        case "transformmethods":
        case "transformMethods": return target.getConfiguration().getTransformMethods();
        case "uridereferencer":
        case "uriDereferencer": return target.getConfiguration().getUriDereferencer();
        case "xpathstoidattributes":
        case "xpathsToIdAttributes": return target.getConfiguration().getXpathsToIdAttributes();
        default: return null;
        }
    }
}

