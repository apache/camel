/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.xmlsecurity;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class XmlSignerComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    private org.apache.camel.component.xmlsecurity.processor.XmlSignerConfiguration getOrCreateConfiguration(XmlSignerComponent target) {
        if (target.getSignerConfiguration() == null) {
            target.setSignerConfiguration(new org.apache.camel.component.xmlsecurity.processor.XmlSignerConfiguration());
        }
        return target.getSignerConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        XmlSignerComponent target = (XmlSignerComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "addkeyinforeference":
        case "addKeyInfoReference": getOrCreateConfiguration(target).setAddKeyInfoReference(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "baseuri":
        case "baseUri": getOrCreateConfiguration(target).setBaseUri(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "canonicalizationmethod":
        case "canonicalizationMethod": getOrCreateConfiguration(target).setCanonicalizationMethod(property(camelContext, javax.xml.crypto.AlgorithmMethod.class, value)); return true;
        case "clearheaders":
        case "clearHeaders": getOrCreateConfiguration(target).setClearHeaders(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "contentobjectid":
        case "contentObjectId": getOrCreateConfiguration(target).setContentObjectId(property(camelContext, java.lang.String.class, value)); return true;
        case "contentreferencetype":
        case "contentReferenceType": getOrCreateConfiguration(target).setContentReferenceType(property(camelContext, java.lang.String.class, value)); return true;
        case "contentreferenceuri":
        case "contentReferenceUri": getOrCreateConfiguration(target).setContentReferenceUri(property(camelContext, java.lang.String.class, value)); return true;
        case "cryptocontextproperties":
        case "cryptoContextProperties": getOrCreateConfiguration(target).setCryptoContextProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "digestalgorithm":
        case "digestAlgorithm": getOrCreateConfiguration(target).setDigestAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "disallowdoctypedecl":
        case "disallowDoctypeDecl": getOrCreateConfiguration(target).setDisallowDoctypeDecl(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "keyaccessor":
        case "keyAccessor": getOrCreateConfiguration(target).setKeyAccessor(property(camelContext, org.apache.camel.component.xmlsecurity.api.KeyAccessor.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "omitxmldeclaration":
        case "omitXmlDeclaration": getOrCreateConfiguration(target).setOmitXmlDeclaration(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "outputxmlencoding":
        case "outputXmlEncoding": getOrCreateConfiguration(target).setOutputXmlEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "parentlocalname":
        case "parentLocalName": getOrCreateConfiguration(target).setParentLocalName(property(camelContext, java.lang.String.class, value)); return true;
        case "parentnamespace":
        case "parentNamespace": getOrCreateConfiguration(target).setParentNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "parentxpath":
        case "parentXpath": getOrCreateConfiguration(target).setParentXpath(property(camelContext, javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.class, value)); return true;
        case "plaintext":
        case "plainText": getOrCreateConfiguration(target).setPlainText(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "plaintextencoding":
        case "plainTextEncoding": getOrCreateConfiguration(target).setPlainTextEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "prefixforxmlsignaturenamespace":
        case "prefixForXmlSignatureNamespace": getOrCreateConfiguration(target).setPrefixForXmlSignatureNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "properties": getOrCreateConfiguration(target).setProperties(property(camelContext, org.apache.camel.component.xmlsecurity.api.XmlSignatureProperties.class, value)); return true;
        case "schemaresourceuri":
        case "schemaResourceUri": getOrCreateConfiguration(target).setSchemaResourceUri(property(camelContext, java.lang.String.class, value)); return true;
        case "signaturealgorithm":
        case "signatureAlgorithm": getOrCreateConfiguration(target).setSignatureAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "signatureid":
        case "signatureId": getOrCreateConfiguration(target).setSignatureId(property(camelContext, java.lang.String.class, value)); return true;
        case "signerconfiguration":
        case "signerConfiguration": target.setSignerConfiguration(property(camelContext, org.apache.camel.component.xmlsecurity.processor.XmlSignerConfiguration.class, value)); return true;
        case "transformmethods":
        case "transformMethods": getOrCreateConfiguration(target).setTransformMethods(property(camelContext, java.util.List.class, value)); return true;
        case "uridereferencer":
        case "uriDereferencer": getOrCreateConfiguration(target).setUriDereferencer(property(camelContext, javax.xml.crypto.URIDereferencer.class, value)); return true;
        case "xpathstoidattributes":
        case "xpathsToIdAttributes": getOrCreateConfiguration(target).setXpathsToIdAttributes(property(camelContext, java.util.List.class, value)); return true;
        default: return false;
        }
    }

}

