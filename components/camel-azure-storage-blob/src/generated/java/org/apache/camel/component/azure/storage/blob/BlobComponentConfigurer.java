/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.azure.storage.blob;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class BlobComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("autoDiscoverClient", boolean.class);
        map.put("blobName", java.lang.String.class);
        map.put("blobOffset", long.class);
        map.put("blobType", org.apache.camel.component.azure.storage.blob.BlobType.class);
        map.put("closeStreamAfterRead", boolean.class);
        map.put("configuration", org.apache.camel.component.azure.storage.blob.BlobConfiguration.class);
        map.put("credentials", com.azure.storage.common.StorageSharedKeyCredential.class);
        map.put("dataCount", java.lang.Long.class);
        map.put("fileDir", java.lang.String.class);
        map.put("maxResultsPerPage", java.lang.Integer.class);
        map.put("maxRetryRequests", int.class);
        map.put("prefix", java.lang.String.class);
        map.put("regex", java.lang.String.class);
        map.put("serviceClient", com.azure.storage.blob.BlobServiceClient.class);
        map.put("timeout", java.time.Duration.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("blobSequenceNumber", java.lang.Long.class);
        map.put("blockListType", com.azure.storage.blob.models.BlockListType.class);
        map.put("closeStreamAfterWrite", boolean.class);
        map.put("commitBlockListLater", boolean.class);
        map.put("createAppendBlob", boolean.class);
        map.put("createPageBlob", boolean.class);
        map.put("downloadLinkExpiration", java.lang.Long.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("operation", org.apache.camel.component.azure.storage.blob.BlobOperationsDefinition.class);
        map.put("pageBlobSize", java.lang.Long.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("accessKey", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    private org.apache.camel.component.azure.storage.blob.BlobConfiguration getOrCreateConfiguration(BlobComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.azure.storage.blob.BlobConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        BlobComponent target = (BlobComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesskey":
        case "accessKey": getOrCreateConfiguration(target).setAccessKey(property(camelContext, java.lang.String.class, value)); return true;
        case "autodiscoverclient":
        case "autoDiscoverClient": getOrCreateConfiguration(target).setAutoDiscoverClient(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "blobname":
        case "blobName": getOrCreateConfiguration(target).setBlobName(property(camelContext, java.lang.String.class, value)); return true;
        case "bloboffset":
        case "blobOffset": getOrCreateConfiguration(target).setBlobOffset(property(camelContext, long.class, value)); return true;
        case "blobsequencenumber":
        case "blobSequenceNumber": getOrCreateConfiguration(target).setBlobSequenceNumber(property(camelContext, java.lang.Long.class, value)); return true;
        case "blobtype":
        case "blobType": getOrCreateConfiguration(target).setBlobType(property(camelContext, org.apache.camel.component.azure.storage.blob.BlobType.class, value)); return true;
        case "blocklisttype":
        case "blockListType": getOrCreateConfiguration(target).setBlockListType(property(camelContext, com.azure.storage.blob.models.BlockListType.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "closestreamafterread":
        case "closeStreamAfterRead": getOrCreateConfiguration(target).setCloseStreamAfterRead(property(camelContext, boolean.class, value)); return true;
        case "closestreamafterwrite":
        case "closeStreamAfterWrite": getOrCreateConfiguration(target).setCloseStreamAfterWrite(property(camelContext, boolean.class, value)); return true;
        case "commitblocklistlater":
        case "commitBlockListLater": getOrCreateConfiguration(target).setCommitBlockListLater(property(camelContext, boolean.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.azure.storage.blob.BlobConfiguration.class, value)); return true;
        case "createappendblob":
        case "createAppendBlob": getOrCreateConfiguration(target).setCreateAppendBlob(property(camelContext, boolean.class, value)); return true;
        case "createpageblob":
        case "createPageBlob": getOrCreateConfiguration(target).setCreatePageBlob(property(camelContext, boolean.class, value)); return true;
        case "credentials": getOrCreateConfiguration(target).setCredentials(property(camelContext, com.azure.storage.common.StorageSharedKeyCredential.class, value)); return true;
        case "datacount":
        case "dataCount": getOrCreateConfiguration(target).setDataCount(property(camelContext, java.lang.Long.class, value)); return true;
        case "downloadlinkexpiration":
        case "downloadLinkExpiration": getOrCreateConfiguration(target).setDownloadLinkExpiration(property(camelContext, java.lang.Long.class, value)); return true;
        case "filedir":
        case "fileDir": getOrCreateConfiguration(target).setFileDir(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxresultsperpage":
        case "maxResultsPerPage": getOrCreateConfiguration(target).setMaxResultsPerPage(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxretryrequests":
        case "maxRetryRequests": getOrCreateConfiguration(target).setMaxRetryRequests(property(camelContext, int.class, value)); return true;
        case "operation": getOrCreateConfiguration(target).setOperation(property(camelContext, org.apache.camel.component.azure.storage.blob.BlobOperationsDefinition.class, value)); return true;
        case "pageblobsize":
        case "pageBlobSize": getOrCreateConfiguration(target).setPageBlobSize(property(camelContext, java.lang.Long.class, value)); return true;
        case "prefix": getOrCreateConfiguration(target).setPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "regex": getOrCreateConfiguration(target).setRegex(property(camelContext, java.lang.String.class, value)); return true;
        case "serviceclient":
        case "serviceClient": getOrCreateConfiguration(target).setServiceClient(property(camelContext, com.azure.storage.blob.BlobServiceClient.class, value)); return true;
        case "timeout": getOrCreateConfiguration(target).setTimeout(property(camelContext, java.time.Duration.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        BlobComponent target = (BlobComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesskey":
        case "accessKey": return getOrCreateConfiguration(target).getAccessKey();
        case "autodiscoverclient":
        case "autoDiscoverClient": return getOrCreateConfiguration(target).isAutoDiscoverClient();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "blobname":
        case "blobName": return getOrCreateConfiguration(target).getBlobName();
        case "bloboffset":
        case "blobOffset": return getOrCreateConfiguration(target).getBlobOffset();
        case "blobsequencenumber":
        case "blobSequenceNumber": return getOrCreateConfiguration(target).getBlobSequenceNumber();
        case "blobtype":
        case "blobType": return getOrCreateConfiguration(target).getBlobType();
        case "blocklisttype":
        case "blockListType": return getOrCreateConfiguration(target).getBlockListType();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "closestreamafterread":
        case "closeStreamAfterRead": return getOrCreateConfiguration(target).isCloseStreamAfterRead();
        case "closestreamafterwrite":
        case "closeStreamAfterWrite": return getOrCreateConfiguration(target).isCloseStreamAfterWrite();
        case "commitblocklistlater":
        case "commitBlockListLater": return getOrCreateConfiguration(target).isCommitBlockListLater();
        case "configuration": return target.getConfiguration();
        case "createappendblob":
        case "createAppendBlob": return getOrCreateConfiguration(target).isCreateAppendBlob();
        case "createpageblob":
        case "createPageBlob": return getOrCreateConfiguration(target).isCreatePageBlob();
        case "credentials": return getOrCreateConfiguration(target).getCredentials();
        case "datacount":
        case "dataCount": return getOrCreateConfiguration(target).getDataCount();
        case "downloadlinkexpiration":
        case "downloadLinkExpiration": return getOrCreateConfiguration(target).getDownloadLinkExpiration();
        case "filedir":
        case "fileDir": return getOrCreateConfiguration(target).getFileDir();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxresultsperpage":
        case "maxResultsPerPage": return getOrCreateConfiguration(target).getMaxResultsPerPage();
        case "maxretryrequests":
        case "maxRetryRequests": return getOrCreateConfiguration(target).getMaxRetryRequests();
        case "operation": return getOrCreateConfiguration(target).getOperation();
        case "pageblobsize":
        case "pageBlobSize": return getOrCreateConfiguration(target).getPageBlobSize();
        case "prefix": return getOrCreateConfiguration(target).getPrefix();
        case "regex": return getOrCreateConfiguration(target).getRegex();
        case "serviceclient":
        case "serviceClient": return getOrCreateConfiguration(target).getServiceClient();
        case "timeout": return getOrCreateConfiguration(target).getTimeout();
        default: return null;
        }
    }
}

