/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.bean.validator;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class BeanValidatorEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        BeanValidatorEndpoint target = (BeanValidatorEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "constraintvalidatorfactory":
        case "constraintValidatorFactory": target.setConstraintValidatorFactory(property(camelContext, javax.validation.ConstraintValidatorFactory.class, value)); return true;
        case "group": target.setGroup(property(camelContext, java.lang.String.class, value)); return true;
        case "ignorexmlconfiguration":
        case "ignoreXmlConfiguration": target.setIgnoreXmlConfiguration(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "messageinterpolator":
        case "messageInterpolator": target.setMessageInterpolator(property(camelContext, javax.validation.MessageInterpolator.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "traversableresolver":
        case "traversableResolver": target.setTraversableResolver(property(camelContext, javax.validation.TraversableResolver.class, value)); return true;
        case "validationproviderresolver":
        case "validationProviderResolver": target.setValidationProviderResolver(property(camelContext, javax.validation.ValidationProviderResolver.class, value)); return true;
        case "validatorfactory":
        case "validatorFactory": target.setValidatorFactory(property(camelContext, javax.validation.ValidatorFactory.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("constraintValidatorFactory", javax.validation.ConstraintValidatorFactory.class);
        answer.put("group", java.lang.String.class);
        answer.put("ignoreXmlConfiguration", boolean.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("messageInterpolator", javax.validation.MessageInterpolator.class);
        answer.put("synchronous", boolean.class);
        answer.put("traversableResolver", javax.validation.TraversableResolver.class);
        answer.put("validationProviderResolver", javax.validation.ValidationProviderResolver.class);
        answer.put("validatorFactory", javax.validation.ValidatorFactory.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        BeanValidatorEndpoint target = (BeanValidatorEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "constraintvalidatorfactory":
        case "constraintValidatorFactory": return target.getConstraintValidatorFactory();
        case "group": return target.getGroup();
        case "ignorexmlconfiguration":
        case "ignoreXmlConfiguration": return target.isIgnoreXmlConfiguration();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "messageinterpolator":
        case "messageInterpolator": return target.getMessageInterpolator();
        case "synchronous": return target.isSynchronous();
        case "traversableresolver":
        case "traversableResolver": return target.getTraversableResolver();
        case "validationproviderresolver":
        case "validationProviderResolver": return target.getValidationProviderResolver();
        case "validatorfactory":
        case "validatorFactory": return target.getValidatorFactory();
        default: return null;
        }
    }
}

