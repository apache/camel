/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.bean.validator;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class BeanValidatorEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "group": ((BeanValidatorEndpoint) target).setGroup(property(camelContext, java.lang.String.class, value)); return true;
        case "ignoreXmlConfiguration": ((BeanValidatorEndpoint) target).setIgnoreXmlConfiguration(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((BeanValidatorEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((BeanValidatorEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "constraintValidatorFactory": ((BeanValidatorEndpoint) target).setConstraintValidatorFactory(property(camelContext, javax.validation.ConstraintValidatorFactory.class, value)); return true;
        case "messageInterpolator": ((BeanValidatorEndpoint) target).setMessageInterpolator(property(camelContext, javax.validation.MessageInterpolator.class, value)); return true;
        case "synchronous": ((BeanValidatorEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "traversableResolver": ((BeanValidatorEndpoint) target).setTraversableResolver(property(camelContext, javax.validation.TraversableResolver.class, value)); return true;
        case "validationProviderResolver": ((BeanValidatorEndpoint) target).setValidationProviderResolver(property(camelContext, javax.validation.ValidationProviderResolver.class, value)); return true;
        case "validatorFactory": ((BeanValidatorEndpoint) target).setValidatorFactory(property(camelContext, javax.validation.ValidatorFactory.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "group": ((BeanValidatorEndpoint) target).setGroup(property(camelContext, java.lang.String.class, value)); return true;
        case "ignorexmlconfiguration": ((BeanValidatorEndpoint) target).setIgnoreXmlConfiguration(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((BeanValidatorEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((BeanValidatorEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "constraintvalidatorfactory": ((BeanValidatorEndpoint) target).setConstraintValidatorFactory(property(camelContext, javax.validation.ConstraintValidatorFactory.class, value)); return true;
        case "messageinterpolator": ((BeanValidatorEndpoint) target).setMessageInterpolator(property(camelContext, javax.validation.MessageInterpolator.class, value)); return true;
        case "synchronous": ((BeanValidatorEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "traversableresolver": ((BeanValidatorEndpoint) target).setTraversableResolver(property(camelContext, javax.validation.TraversableResolver.class, value)); return true;
        case "validationproviderresolver": ((BeanValidatorEndpoint) target).setValidationProviderResolver(property(camelContext, javax.validation.ValidationProviderResolver.class, value)); return true;
        case "validatorfactory": ((BeanValidatorEndpoint) target).setValidatorFactory(property(camelContext, javax.validation.ValidatorFactory.class, value)); return true;
            default: return false;
        }
    }

}

