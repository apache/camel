/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.vertx.kafka;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class VertxKafkaEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("topic", java.lang.String.class);
        map.put("bootstrapServers", java.lang.String.class);
        map.put("clientDnsLookup", java.lang.String.class);
        map.put("clientId", java.lang.String.class);
        map.put("connectionsMaxIdleMs", long.class);
        map.put("interceptorClasses", java.lang.String.class);
        map.put("metadataMaxAgeMs", long.class);
        map.put("metricReporters", java.lang.String.class);
        map.put("metricsNumSamples", int.class);
        map.put("metricsRecordingLevel", java.lang.String.class);
        map.put("metricsSampleWindowMs", long.class);
        map.put("receiveBufferBytes", int.class);
        map.put("reconnectBackoffMaxMs", long.class);
        map.put("reconnectBackoffMs", long.class);
        map.put("requestTimeoutMs", int.class);
        map.put("retryBackoffMs", long.class);
        map.put("sendBufferBytes", int.class);
        map.put("allowAutoCreateTopics", boolean.class);
        map.put("autoCommitIntervalMs", int.class);
        map.put("autoOffsetReset", java.lang.String.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("checkCrcs", boolean.class);
        map.put("clientRack", java.lang.String.class);
        map.put("defaultApiTimeoutMs", int.class);
        map.put("enableAutoCommit", boolean.class);
        map.put("excludeInternalTopics", boolean.class);
        map.put("fetchMaxBytes", int.class);
        map.put("fetchMaxWaitMs", int.class);
        map.put("fetchMinBytes", int.class);
        map.put("groupId", java.lang.String.class);
        map.put("groupInstanceId", java.lang.String.class);
        map.put("heartbeatIntervalMs", int.class);
        map.put("isolationLevel", java.lang.String.class);
        map.put("keyDeserializer", java.lang.String.class);
        map.put("maxPartitionFetchBytes", int.class);
        map.put("maxPollIntervalMs", int.class);
        map.put("maxPollRecords", int.class);
        map.put("partitionAssignmentStrategy", java.lang.String.class);
        map.put("sessionTimeoutMs", int.class);
        map.put("valueDeserializer", java.lang.String.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("acks", java.lang.String.class);
        map.put("batchSize", int.class);
        map.put("bufferMemory", long.class);
        map.put("compressionType", java.lang.String.class);
        map.put("deliveryTimeoutMs", int.class);
        map.put("enableIdempotence", boolean.class);
        map.put("keySerializer", java.lang.String.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("lingerMs", long.class);
        map.put("maxBlockMs", long.class);
        map.put("maxInFlightRequestsPerConnection", int.class);
        map.put("maxRequestSize", int.class);
        map.put("metadataMaxIdleMs", long.class);
        map.put("partitionerClass", java.lang.String.class);
        map.put("retries", int.class);
        map.put("transactionalId", java.lang.String.class);
        map.put("transactionTimeoutMs", int.class);
        map.put("valueSerializer", java.lang.String.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("synchronous", boolean.class);
        map.put("saslClientCallbackHandlerClass", java.lang.String.class);
        map.put("saslJaasConfig", java.lang.String.class);
        map.put("saslKerberosKinitCmd", java.lang.String.class);
        map.put("saslKerberosMinTimeBeforeRelogin", long.class);
        map.put("saslKerberosServiceName", java.lang.String.class);
        map.put("saslKerberosTicketRenewJitter", double.class);
        map.put("saslKerberosTicketRenewWindowFactor", double.class);
        map.put("saslLoginCallbackHandlerClass", java.lang.String.class);
        map.put("saslLoginClass", java.lang.String.class);
        map.put("saslLoginRefreshBufferSeconds", short.class);
        map.put("saslLoginRefreshMinPeriodSeconds", short.class);
        map.put("saslLoginRefreshWindowFactor", double.class);
        map.put("saslLoginRefreshWindowJitter", double.class);
        map.put("saslMechanism", java.lang.String.class);
        map.put("securityProtocol", java.lang.String.class);
        map.put("securityProviders", java.lang.String.class);
        map.put("sslCipherSuites", java.lang.String.class);
        map.put("sslEnabledProtocols", java.lang.String.class);
        map.put("sslEndpointIdentificationAlgorithm", java.lang.String.class);
        map.put("sslEngineFactoryClass", java.lang.String.class);
        map.put("sslKeymanagerAlgorithm", java.lang.String.class);
        map.put("sslKeyPassword", java.lang.String.class);
        map.put("sslKeystoreLocation", java.lang.String.class);
        map.put("sslKeystorePassword", java.lang.String.class);
        map.put("sslKeystoreType", java.lang.String.class);
        map.put("sslProtocol", java.lang.String.class);
        map.put("sslProvider", java.lang.String.class);
        map.put("sslSecureRandomImplementation", java.lang.String.class);
        map.put("sslTrustmanagerAlgorithm", java.lang.String.class);
        map.put("sslTruststoreLocation", java.lang.String.class);
        map.put("sslTruststorePassword", java.lang.String.class);
        map.put("sslTruststoreType", java.lang.String.class);
        ALL_OPTIONS = map;
        ConfigurerStrategy.addConfigurerClearer(VertxKafkaEndpointConfigurer::clearConfigurers);
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        VertxKafkaEndpoint target = (VertxKafkaEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acks": target.getConfiguration().setAcks(property(camelContext, java.lang.String.class, value)); return true;
        case "allowautocreatetopics":
        case "allowAutoCreateTopics": target.getConfiguration().setAllowAutoCreateTopics(property(camelContext, boolean.class, value)); return true;
        case "autocommitintervalms":
        case "autoCommitIntervalMs": target.getConfiguration().setAutoCommitIntervalMs(property(camelContext, int.class, value)); return true;
        case "autooffsetreset":
        case "autoOffsetReset": target.getConfiguration().setAutoOffsetReset(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "batchsize":
        case "batchSize": target.getConfiguration().setBatchSize(property(camelContext, int.class, value)); return true;
        case "bootstrapservers":
        case "bootstrapServers": target.getConfiguration().setBootstrapServers(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "buffermemory":
        case "bufferMemory": target.getConfiguration().setBufferMemory(property(camelContext, long.class, value)); return true;
        case "checkcrcs":
        case "checkCrcs": target.getConfiguration().setCheckCrcs(property(camelContext, boolean.class, value)); return true;
        case "clientdnslookup":
        case "clientDnsLookup": target.getConfiguration().setClientDnsLookup(property(camelContext, java.lang.String.class, value)); return true;
        case "clientid":
        case "clientId": target.getConfiguration().setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "clientrack":
        case "clientRack": target.getConfiguration().setClientRack(property(camelContext, java.lang.String.class, value)); return true;
        case "compressiontype":
        case "compressionType": target.getConfiguration().setCompressionType(property(camelContext, java.lang.String.class, value)); return true;
        case "connectionsmaxidlems":
        case "connectionsMaxIdleMs": target.getConfiguration().setConnectionsMaxIdleMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "defaultapitimeoutms":
        case "defaultApiTimeoutMs": target.getConfiguration().setDefaultApiTimeoutMs(property(camelContext, int.class, value)); return true;
        case "deliverytimeoutms":
        case "deliveryTimeoutMs": target.getConfiguration().setDeliveryTimeoutMs(property(camelContext, int.class, value)); return true;
        case "enableautocommit":
        case "enableAutoCommit": target.getConfiguration().setEnableAutoCommit(property(camelContext, boolean.class, value)); return true;
        case "enableidempotence":
        case "enableIdempotence": target.getConfiguration().setEnableIdempotence(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "excludeinternaltopics":
        case "excludeInternalTopics": target.getConfiguration().setExcludeInternalTopics(property(camelContext, boolean.class, value)); return true;
        case "fetchmaxbytes":
        case "fetchMaxBytes": target.getConfiguration().setFetchMaxBytes(property(camelContext, int.class, value)); return true;
        case "fetchmaxwaitms":
        case "fetchMaxWaitMs": target.getConfiguration().setFetchMaxWaitMs(property(camelContext, int.class, value)); return true;
        case "fetchminbytes":
        case "fetchMinBytes": target.getConfiguration().setFetchMinBytes(property(camelContext, int.class, value)); return true;
        case "groupid":
        case "groupId": target.getConfiguration().setGroupId(property(camelContext, java.lang.String.class, value)); return true;
        case "groupinstanceid":
        case "groupInstanceId": target.getConfiguration().setGroupInstanceId(property(camelContext, java.lang.String.class, value)); return true;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": target.getConfiguration().setHeartbeatIntervalMs(property(camelContext, int.class, value)); return true;
        case "interceptorclasses":
        case "interceptorClasses": target.getConfiguration().setInterceptorClasses(property(camelContext, java.lang.String.class, value)); return true;
        case "isolationlevel":
        case "isolationLevel": target.getConfiguration().setIsolationLevel(property(camelContext, java.lang.String.class, value)); return true;
        case "keydeserializer":
        case "keyDeserializer": target.getConfiguration().setKeyDeserializer(property(camelContext, java.lang.String.class, value)); return true;
        case "keyserializer":
        case "keySerializer": target.getConfiguration().setKeySerializer(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "lingerms":
        case "lingerMs": target.getConfiguration().setLingerMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "maxblockms":
        case "maxBlockMs": target.getConfiguration().setMaxBlockMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "maxinflightrequestsperconnection":
        case "maxInFlightRequestsPerConnection": target.getConfiguration().setMaxInFlightRequestsPerConnection(property(camelContext, int.class, value)); return true;
        case "maxpartitionfetchbytes":
        case "maxPartitionFetchBytes": target.getConfiguration().setMaxPartitionFetchBytes(property(camelContext, int.class, value)); return true;
        case "maxpollintervalms":
        case "maxPollIntervalMs": target.getConfiguration().setMaxPollIntervalMs(property(camelContext, int.class, value)); return true;
        case "maxpollrecords":
        case "maxPollRecords": target.getConfiguration().setMaxPollRecords(property(camelContext, int.class, value)); return true;
        case "maxrequestsize":
        case "maxRequestSize": target.getConfiguration().setMaxRequestSize(property(camelContext, int.class, value)); return true;
        case "metadatamaxagems":
        case "metadataMaxAgeMs": target.getConfiguration().setMetadataMaxAgeMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "metadatamaxidlems":
        case "metadataMaxIdleMs": target.getConfiguration().setMetadataMaxIdleMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "metricreporters":
        case "metricReporters": target.getConfiguration().setMetricReporters(property(camelContext, java.lang.String.class, value)); return true;
        case "metricsnumsamples":
        case "metricsNumSamples": target.getConfiguration().setMetricsNumSamples(property(camelContext, int.class, value)); return true;
        case "metricsrecordinglevel":
        case "metricsRecordingLevel": target.getConfiguration().setMetricsRecordingLevel(property(camelContext, java.lang.String.class, value)); return true;
        case "metricssamplewindowms":
        case "metricsSampleWindowMs": target.getConfiguration().setMetricsSampleWindowMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "partitionassignmentstrategy":
        case "partitionAssignmentStrategy": target.getConfiguration().setPartitionAssignmentStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "partitionerclass":
        case "partitionerClass": target.getConfiguration().setPartitionerClass(property(camelContext, java.lang.String.class, value)); return true;
        case "receivebufferbytes":
        case "receiveBufferBytes": target.getConfiguration().setReceiveBufferBytes(property(camelContext, int.class, value)); return true;
        case "reconnectbackoffmaxms":
        case "reconnectBackoffMaxMs": target.getConfiguration().setReconnectBackoffMaxMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "reconnectbackoffms":
        case "reconnectBackoffMs": target.getConfiguration().setReconnectBackoffMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "requesttimeoutms":
        case "requestTimeoutMs": target.getConfiguration().setRequestTimeoutMs(property(camelContext, int.class, value)); return true;
        case "retries": target.getConfiguration().setRetries(property(camelContext, int.class, value)); return true;
        case "retrybackoffms":
        case "retryBackoffMs": target.getConfiguration().setRetryBackoffMs(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "saslclientcallbackhandlerclass":
        case "saslClientCallbackHandlerClass": target.getConfiguration().setSaslClientCallbackHandlerClass(property(camelContext, java.lang.String.class, value)); return true;
        case "sasljaasconfig":
        case "saslJaasConfig": target.getConfiguration().setSaslJaasConfig(property(camelContext, java.lang.String.class, value)); return true;
        case "saslkerberoskinitcmd":
        case "saslKerberosKinitCmd": target.getConfiguration().setSaslKerberosKinitCmd(property(camelContext, java.lang.String.class, value)); return true;
        case "saslkerberosmintimebeforerelogin":
        case "saslKerberosMinTimeBeforeRelogin": target.getConfiguration().setSaslKerberosMinTimeBeforeRelogin(property(camelContext, long.class, value)); return true;
        case "saslkerberosservicename":
        case "saslKerberosServiceName": target.getConfiguration().setSaslKerberosServiceName(property(camelContext, java.lang.String.class, value)); return true;
        case "saslkerberosticketrenewjitter":
        case "saslKerberosTicketRenewJitter": target.getConfiguration().setSaslKerberosTicketRenewJitter(property(camelContext, double.class, value)); return true;
        case "saslkerberosticketrenewwindowfactor":
        case "saslKerberosTicketRenewWindowFactor": target.getConfiguration().setSaslKerberosTicketRenewWindowFactor(property(camelContext, double.class, value)); return true;
        case "sasllogincallbackhandlerclass":
        case "saslLoginCallbackHandlerClass": target.getConfiguration().setSaslLoginCallbackHandlerClass(property(camelContext, java.lang.String.class, value)); return true;
        case "saslloginclass":
        case "saslLoginClass": target.getConfiguration().setSaslLoginClass(property(camelContext, java.lang.String.class, value)); return true;
        case "saslloginrefreshbufferseconds":
        case "saslLoginRefreshBufferSeconds": target.getConfiguration().setSaslLoginRefreshBufferSeconds(property(camelContext, short.class, value)); return true;
        case "saslloginrefreshminperiodseconds":
        case "saslLoginRefreshMinPeriodSeconds": target.getConfiguration().setSaslLoginRefreshMinPeriodSeconds(property(camelContext, short.class, value)); return true;
        case "saslloginrefreshwindowfactor":
        case "saslLoginRefreshWindowFactor": target.getConfiguration().setSaslLoginRefreshWindowFactor(property(camelContext, double.class, value)); return true;
        case "saslloginrefreshwindowjitter":
        case "saslLoginRefreshWindowJitter": target.getConfiguration().setSaslLoginRefreshWindowJitter(property(camelContext, double.class, value)); return true;
        case "saslmechanism":
        case "saslMechanism": target.getConfiguration().setSaslMechanism(property(camelContext, java.lang.String.class, value)); return true;
        case "securityprotocol":
        case "securityProtocol": target.getConfiguration().setSecurityProtocol(property(camelContext, java.lang.String.class, value)); return true;
        case "securityproviders":
        case "securityProviders": target.getConfiguration().setSecurityProviders(property(camelContext, java.lang.String.class, value)); return true;
        case "sendbufferbytes":
        case "sendBufferBytes": target.getConfiguration().setSendBufferBytes(property(camelContext, int.class, value)); return true;
        case "sessiontimeoutms":
        case "sessionTimeoutMs": target.getConfiguration().setSessionTimeoutMs(property(camelContext, int.class, value)); return true;
        case "sslciphersuites":
        case "sslCipherSuites": target.getConfiguration().setSslCipherSuites(property(camelContext, java.lang.String.class, value)); return true;
        case "sslenabledprotocols":
        case "sslEnabledProtocols": target.getConfiguration().setSslEnabledProtocols(property(camelContext, java.lang.String.class, value)); return true;
        case "sslendpointidentificationalgorithm":
        case "sslEndpointIdentificationAlgorithm": target.getConfiguration().setSslEndpointIdentificationAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "sslenginefactoryclass":
        case "sslEngineFactoryClass": target.getConfiguration().setSslEngineFactoryClass(property(camelContext, java.lang.String.class, value)); return true;
        case "sslkeypassword":
        case "sslKeyPassword": target.getConfiguration().setSslKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslkeymanageralgorithm":
        case "sslKeymanagerAlgorithm": target.getConfiguration().setSslKeymanagerAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "sslkeystorelocation":
        case "sslKeystoreLocation": target.getConfiguration().setSslKeystoreLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "sslkeystorepassword":
        case "sslKeystorePassword": target.getConfiguration().setSslKeystorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslkeystoretype":
        case "sslKeystoreType": target.getConfiguration().setSslKeystoreType(property(camelContext, java.lang.String.class, value)); return true;
        case "sslprotocol":
        case "sslProtocol": target.getConfiguration().setSslProtocol(property(camelContext, java.lang.String.class, value)); return true;
        case "sslprovider":
        case "sslProvider": target.getConfiguration().setSslProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "sslsecurerandomimplementation":
        case "sslSecureRandomImplementation": target.getConfiguration().setSslSecureRandomImplementation(property(camelContext, java.lang.String.class, value)); return true;
        case "ssltrustmanageralgorithm":
        case "sslTrustmanagerAlgorithm": target.getConfiguration().setSslTrustmanagerAlgorithm(property(camelContext, java.lang.String.class, value)); return true;
        case "ssltruststorelocation":
        case "sslTruststoreLocation": target.getConfiguration().setSslTruststoreLocation(property(camelContext, java.lang.String.class, value)); return true;
        case "ssltruststorepassword":
        case "sslTruststorePassword": target.getConfiguration().setSslTruststorePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "ssltruststoretype":
        case "sslTruststoreType": target.getConfiguration().setSslTruststoreType(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "transactiontimeoutms":
        case "transactionTimeoutMs": target.getConfiguration().setTransactionTimeoutMs(property(camelContext, int.class, value)); return true;
        case "transactionalid":
        case "transactionalId": target.getConfiguration().setTransactionalId(property(camelContext, java.lang.String.class, value)); return true;
        case "valuedeserializer":
        case "valueDeserializer": target.getConfiguration().setValueDeserializer(property(camelContext, java.lang.String.class, value)); return true;
        case "valueserializer":
        case "valueSerializer": target.getConfiguration().setValueSerializer(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    public static void clearBootstrapConfigurers() {
    }

    public static void clearConfigurers() {
        ALL_OPTIONS.clear();
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        VertxKafkaEndpoint target = (VertxKafkaEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acks": return target.getConfiguration().getAcks();
        case "allowautocreatetopics":
        case "allowAutoCreateTopics": return target.getConfiguration().isAllowAutoCreateTopics();
        case "autocommitintervalms":
        case "autoCommitIntervalMs": return target.getConfiguration().getAutoCommitIntervalMs();
        case "autooffsetreset":
        case "autoOffsetReset": return target.getConfiguration().getAutoOffsetReset();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "batchsize":
        case "batchSize": return target.getConfiguration().getBatchSize();
        case "bootstrapservers":
        case "bootstrapServers": return target.getConfiguration().getBootstrapServers();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "buffermemory":
        case "bufferMemory": return target.getConfiguration().getBufferMemory();
        case "checkcrcs":
        case "checkCrcs": return target.getConfiguration().isCheckCrcs();
        case "clientdnslookup":
        case "clientDnsLookup": return target.getConfiguration().getClientDnsLookup();
        case "clientid":
        case "clientId": return target.getConfiguration().getClientId();
        case "clientrack":
        case "clientRack": return target.getConfiguration().getClientRack();
        case "compressiontype":
        case "compressionType": return target.getConfiguration().getCompressionType();
        case "connectionsmaxidlems":
        case "connectionsMaxIdleMs": return target.getConfiguration().getConnectionsMaxIdleMs();
        case "defaultapitimeoutms":
        case "defaultApiTimeoutMs": return target.getConfiguration().getDefaultApiTimeoutMs();
        case "deliverytimeoutms":
        case "deliveryTimeoutMs": return target.getConfiguration().getDeliveryTimeoutMs();
        case "enableautocommit":
        case "enableAutoCommit": return target.getConfiguration().isEnableAutoCommit();
        case "enableidempotence":
        case "enableIdempotence": return target.getConfiguration().isEnableIdempotence();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "excludeinternaltopics":
        case "excludeInternalTopics": return target.getConfiguration().isExcludeInternalTopics();
        case "fetchmaxbytes":
        case "fetchMaxBytes": return target.getConfiguration().getFetchMaxBytes();
        case "fetchmaxwaitms":
        case "fetchMaxWaitMs": return target.getConfiguration().getFetchMaxWaitMs();
        case "fetchminbytes":
        case "fetchMinBytes": return target.getConfiguration().getFetchMinBytes();
        case "groupid":
        case "groupId": return target.getConfiguration().getGroupId();
        case "groupinstanceid":
        case "groupInstanceId": return target.getConfiguration().getGroupInstanceId();
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": return target.getConfiguration().getHeartbeatIntervalMs();
        case "interceptorclasses":
        case "interceptorClasses": return target.getConfiguration().getInterceptorClasses();
        case "isolationlevel":
        case "isolationLevel": return target.getConfiguration().getIsolationLevel();
        case "keydeserializer":
        case "keyDeserializer": return target.getConfiguration().getKeyDeserializer();
        case "keyserializer":
        case "keySerializer": return target.getConfiguration().getKeySerializer();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "lingerms":
        case "lingerMs": return target.getConfiguration().getLingerMs();
        case "maxblockms":
        case "maxBlockMs": return target.getConfiguration().getMaxBlockMs();
        case "maxinflightrequestsperconnection":
        case "maxInFlightRequestsPerConnection": return target.getConfiguration().getMaxInFlightRequestsPerConnection();
        case "maxpartitionfetchbytes":
        case "maxPartitionFetchBytes": return target.getConfiguration().getMaxPartitionFetchBytes();
        case "maxpollintervalms":
        case "maxPollIntervalMs": return target.getConfiguration().getMaxPollIntervalMs();
        case "maxpollrecords":
        case "maxPollRecords": return target.getConfiguration().getMaxPollRecords();
        case "maxrequestsize":
        case "maxRequestSize": return target.getConfiguration().getMaxRequestSize();
        case "metadatamaxagems":
        case "metadataMaxAgeMs": return target.getConfiguration().getMetadataMaxAgeMs();
        case "metadatamaxidlems":
        case "metadataMaxIdleMs": return target.getConfiguration().getMetadataMaxIdleMs();
        case "metricreporters":
        case "metricReporters": return target.getConfiguration().getMetricReporters();
        case "metricsnumsamples":
        case "metricsNumSamples": return target.getConfiguration().getMetricsNumSamples();
        case "metricsrecordinglevel":
        case "metricsRecordingLevel": return target.getConfiguration().getMetricsRecordingLevel();
        case "metricssamplewindowms":
        case "metricsSampleWindowMs": return target.getConfiguration().getMetricsSampleWindowMs();
        case "partitionassignmentstrategy":
        case "partitionAssignmentStrategy": return target.getConfiguration().getPartitionAssignmentStrategy();
        case "partitionerclass":
        case "partitionerClass": return target.getConfiguration().getPartitionerClass();
        case "receivebufferbytes":
        case "receiveBufferBytes": return target.getConfiguration().getReceiveBufferBytes();
        case "reconnectbackoffmaxms":
        case "reconnectBackoffMaxMs": return target.getConfiguration().getReconnectBackoffMaxMs();
        case "reconnectbackoffms":
        case "reconnectBackoffMs": return target.getConfiguration().getReconnectBackoffMs();
        case "requesttimeoutms":
        case "requestTimeoutMs": return target.getConfiguration().getRequestTimeoutMs();
        case "retries": return target.getConfiguration().getRetries();
        case "retrybackoffms":
        case "retryBackoffMs": return target.getConfiguration().getRetryBackoffMs();
        case "saslclientcallbackhandlerclass":
        case "saslClientCallbackHandlerClass": return target.getConfiguration().getSaslClientCallbackHandlerClass();
        case "sasljaasconfig":
        case "saslJaasConfig": return target.getConfiguration().getSaslJaasConfig();
        case "saslkerberoskinitcmd":
        case "saslKerberosKinitCmd": return target.getConfiguration().getSaslKerberosKinitCmd();
        case "saslkerberosmintimebeforerelogin":
        case "saslKerberosMinTimeBeforeRelogin": return target.getConfiguration().getSaslKerberosMinTimeBeforeRelogin();
        case "saslkerberosservicename":
        case "saslKerberosServiceName": return target.getConfiguration().getSaslKerberosServiceName();
        case "saslkerberosticketrenewjitter":
        case "saslKerberosTicketRenewJitter": return target.getConfiguration().getSaslKerberosTicketRenewJitter();
        case "saslkerberosticketrenewwindowfactor":
        case "saslKerberosTicketRenewWindowFactor": return target.getConfiguration().getSaslKerberosTicketRenewWindowFactor();
        case "sasllogincallbackhandlerclass":
        case "saslLoginCallbackHandlerClass": return target.getConfiguration().getSaslLoginCallbackHandlerClass();
        case "saslloginclass":
        case "saslLoginClass": return target.getConfiguration().getSaslLoginClass();
        case "saslloginrefreshbufferseconds":
        case "saslLoginRefreshBufferSeconds": return target.getConfiguration().getSaslLoginRefreshBufferSeconds();
        case "saslloginrefreshminperiodseconds":
        case "saslLoginRefreshMinPeriodSeconds": return target.getConfiguration().getSaslLoginRefreshMinPeriodSeconds();
        case "saslloginrefreshwindowfactor":
        case "saslLoginRefreshWindowFactor": return target.getConfiguration().getSaslLoginRefreshWindowFactor();
        case "saslloginrefreshwindowjitter":
        case "saslLoginRefreshWindowJitter": return target.getConfiguration().getSaslLoginRefreshWindowJitter();
        case "saslmechanism":
        case "saslMechanism": return target.getConfiguration().getSaslMechanism();
        case "securityprotocol":
        case "securityProtocol": return target.getConfiguration().getSecurityProtocol();
        case "securityproviders":
        case "securityProviders": return target.getConfiguration().getSecurityProviders();
        case "sendbufferbytes":
        case "sendBufferBytes": return target.getConfiguration().getSendBufferBytes();
        case "sessiontimeoutms":
        case "sessionTimeoutMs": return target.getConfiguration().getSessionTimeoutMs();
        case "sslciphersuites":
        case "sslCipherSuites": return target.getConfiguration().getSslCipherSuites();
        case "sslenabledprotocols":
        case "sslEnabledProtocols": return target.getConfiguration().getSslEnabledProtocols();
        case "sslendpointidentificationalgorithm":
        case "sslEndpointIdentificationAlgorithm": return target.getConfiguration().getSslEndpointIdentificationAlgorithm();
        case "sslenginefactoryclass":
        case "sslEngineFactoryClass": return target.getConfiguration().getSslEngineFactoryClass();
        case "sslkeypassword":
        case "sslKeyPassword": return target.getConfiguration().getSslKeyPassword();
        case "sslkeymanageralgorithm":
        case "sslKeymanagerAlgorithm": return target.getConfiguration().getSslKeymanagerAlgorithm();
        case "sslkeystorelocation":
        case "sslKeystoreLocation": return target.getConfiguration().getSslKeystoreLocation();
        case "sslkeystorepassword":
        case "sslKeystorePassword": return target.getConfiguration().getSslKeystorePassword();
        case "sslkeystoretype":
        case "sslKeystoreType": return target.getConfiguration().getSslKeystoreType();
        case "sslprotocol":
        case "sslProtocol": return target.getConfiguration().getSslProtocol();
        case "sslprovider":
        case "sslProvider": return target.getConfiguration().getSslProvider();
        case "sslsecurerandomimplementation":
        case "sslSecureRandomImplementation": return target.getConfiguration().getSslSecureRandomImplementation();
        case "ssltrustmanageralgorithm":
        case "sslTrustmanagerAlgorithm": return target.getConfiguration().getSslTrustmanagerAlgorithm();
        case "ssltruststorelocation":
        case "sslTruststoreLocation": return target.getConfiguration().getSslTruststoreLocation();
        case "ssltruststorepassword":
        case "sslTruststorePassword": return target.getConfiguration().getSslTruststorePassword();
        case "ssltruststoretype":
        case "sslTruststoreType": return target.getConfiguration().getSslTruststoreType();
        case "synchronous": return target.isSynchronous();
        case "transactiontimeoutms":
        case "transactionTimeoutMs": return target.getConfiguration().getTransactionTimeoutMs();
        case "transactionalid":
        case "transactionalId": return target.getConfiguration().getTransactionalId();
        case "valuedeserializer":
        case "valueDeserializer": return target.getConfiguration().getValueDeserializer();
        case "valueserializer":
        case "valueSerializer": return target.getConfiguration().getValueSerializer();
        default: return null;
        }
    }
}

