#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

openapi: 3.1.0
info:
  title: Swagger Petstore - OpenAPI 3.0
  summary: "Pet Store 3.1"
  description: "This is a sample Pet Store Server based on the OpenAPI 3.1 specification.\
    \  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io)."
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0 AND (MIT OR GPL-2.0-only)
    identifier: Apache-2.0 AND (MIT OR GPL-2.0-only)
  version: 1.0.2
  x-namespace: Swagger
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v31
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be updated in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
              writeOnly: true
              description: A Pet in JSON Format
              required:
                - id
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
              writeOnly: true
              description: A Pet in XML Format
              required:
                - id
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
                readOnly: true
                description: A Pet in XML Format
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
                readOnly: true
                description: A Pet in JSON Format
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
              writeOnly: true
              description: A Pet in JSON Format
              required:
                - id
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
              writeOnly: true
              description: A Pet in XML Format
              required:
                - id
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
              writeOnly: true
              description: A Pet as x-www-form-urlencoded
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
                readOnly: true
                description: A Pet in XML Format
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
                readOnly: true
                description: A Pet in JSON Format
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                minContains: 1
                maxContains: 10
                contains:
                  $ref: '#/components/schemas/Pet'
                  maxProperties: 3
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
        - api_key:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "400":
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a pet when 0 < ID <= 10.  ID > 10 or non-integers will simulate
        API error conditions
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            description: param ID of pet that needs to be fetched
            exclusiveMaximum: 10
            exclusiveMinimum: 1
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
                readOnly: true
                description: A Pet in XML Format
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
                readOnly: true
                description: A Pet in JSON Format
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ""
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    Category:
      $id: /components/schemas/category
      description: Category
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: Category
    Tag:
      $id: /components/schemas/tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      $schema: https://json-schema.org/draft/2020-12/schema
      description: Pet
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
          description: Pet Category
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
        availableInstances:
          type: integer
          format: int32
          example: 7
          exclusiveMaximum: 10
          exclusiveMinimum: 1
          swagger-extension: true
        petDetails:
          $ref: '/components/schemas/petdetails'
        petDetailsId:
          $ref: '/components/schemas/petdetails#pet_details_id'
      xml:
        name: pet
    PetDetails:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: /components/schemas/petdetails
      $vocabulary: https://spec.openapis.org/oas/3.1/schema-base
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          $anchor: pet_details_id
        tag:
          $ref: '/components/schemas/tag'
        category:
          $ref: '/components/schemas/category'
          description: PetDetails Category
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
    mutual_tls:
      type: mutualTLS

webhooks:
  newPet:
    post:
      requestBody:
        description: Information about a new pet in the system
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
              description: Webhook Pet
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
