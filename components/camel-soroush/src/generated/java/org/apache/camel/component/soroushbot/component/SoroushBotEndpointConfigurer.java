/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.soroushbot.component;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SoroushBotEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        SoroushBotEndpoint target = (SoroushBotEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authorizationtoken":
        case "authorizationToken": target.setAuthorizationToken(property(camelContext, java.lang.String.class, value)); return true;
        case "autodownload":
        case "autoDownload": target.setAutoDownload(property(camelContext, boolean.class, value)); return true;
        case "autouploadfile":
        case "autoUploadFile": target.setAutoUploadFile(property(camelContext, boolean.class, value)); return true;
        case "backoffstrategy":
        case "backOffStrategy": target.setBackOffStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": target.setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "downloadthumbnail":
        case "downloadThumbnail": target.setDownloadThumbnail(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "forcedownload":
        case "forceDownload": target.setForceDownload(property(camelContext, boolean.class, value)); return true;
        case "forceupload":
        case "forceUpload": target.setForceUpload(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxconnectionretry":
        case "maxConnectionRetry": target.setMaxConnectionRetry(property(camelContext, int.class, value)); return true;
        case "maxretrywaitingtime":
        case "maxRetryWaitingTime": target.setMaxRetryWaitingTime(property(camelContext, long.class, value)); return true;
        case "queuecapacityperthread":
        case "queueCapacityPerThread": target.setQueueCapacityPerThread(property(camelContext, int.class, value)); return true;
        case "reconnectidleconnectiontimeout":
        case "reconnectIdleConnectionTimeout": target.setReconnectIdleConnectionTimeout(property(camelContext, long.class, value)); return true;
        case "retryexponentialcoefficient":
        case "retryExponentialCoefficient": target.setRetryExponentialCoefficient(property(camelContext, long.class, value)); return true;
        case "retrylinearincrement":
        case "retryLinearIncrement": target.setRetryLinearIncrement(property(camelContext, long.class, value)); return true;
        case "retrywaitingtime":
        case "retryWaitingTime": target.setRetryWaitingTime(property(camelContext, long.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("authorizationToken", java.lang.String.class);
        answer.put("autoDownload", boolean.class);
        answer.put("autoUploadFile", boolean.class);
        answer.put("backOffStrategy", java.lang.String.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("concurrentConsumers", int.class);
        answer.put("connectionTimeout", int.class);
        answer.put("downloadThumbnail", boolean.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("forceDownload", boolean.class);
        answer.put("forceUpload", boolean.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("maxConnectionRetry", int.class);
        answer.put("maxRetryWaitingTime", long.class);
        answer.put("queueCapacityPerThread", int.class);
        answer.put("reconnectIdleConnectionTimeout", long.class);
        answer.put("retryExponentialCoefficient", long.class);
        answer.put("retryLinearIncrement", long.class);
        answer.put("retryWaitingTime", long.class);
        answer.put("synchronous", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        SoroushBotEndpoint target = (SoroushBotEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authorizationtoken":
        case "authorizationToken": return target.getAuthorizationToken();
        case "autodownload":
        case "autoDownload": return target.isAutoDownload();
        case "autouploadfile":
        case "autoUploadFile": return target.isAutoUploadFile();
        case "backoffstrategy":
        case "backOffStrategy": return target.getBackOffStrategy();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "concurrentconsumers":
        case "concurrentConsumers": return target.getConcurrentConsumers();
        case "connectiontimeout":
        case "connectionTimeout": return target.getConnectionTimeout();
        case "downloadthumbnail":
        case "downloadThumbnail": return target.isDownloadThumbnail();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "forcedownload":
        case "forceDownload": return target.isForceDownload();
        case "forceupload":
        case "forceUpload": return target.isForceUpload();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxconnectionretry":
        case "maxConnectionRetry": return target.getMaxConnectionRetry();
        case "maxretrywaitingtime":
        case "maxRetryWaitingTime": return target.getMaxRetryWaitingTime();
        case "queuecapacityperthread":
        case "queueCapacityPerThread": return target.getQueueCapacityPerThread();
        case "reconnectidleconnectiontimeout":
        case "reconnectIdleConnectionTimeout": return target.getReconnectIdleConnectionTimeout();
        case "retryexponentialcoefficient":
        case "retryExponentialCoefficient": return target.getRetryExponentialCoefficient();
        case "retrylinearincrement":
        case "retryLinearIncrement": return target.getRetryLinearIncrement();
        case "retrywaitingtime":
        case "retryWaitingTime": return target.getRetryWaitingTime();
        case "synchronous": return target.isSynchronous();
        default: return null;
        }
    }
}

