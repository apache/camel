/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.soroushbot.component;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SoroushBotEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "connectionTimeout": ((SoroushBotEndpoint) target).setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "maxConnectionRetry": ((SoroushBotEndpoint) target).setMaxConnectionRetry(property(camelContext, int.class, value)); return true;
        case "bridgeErrorHandler": ((SoroushBotEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentConsumers": ((SoroushBotEndpoint) target).setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "queueCapacityPerThread": ((SoroushBotEndpoint) target).setQueueCapacityPerThread(property(camelContext, int.class, value)); return true;
        case "exceptionHandler": ((SoroushBotEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((SoroushBotEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "autoDownload": ((SoroushBotEndpoint) target).setAutoDownload(property(camelContext, boolean.class, value)); return true;
        case "autoUploadFile": ((SoroushBotEndpoint) target).setAutoUploadFile(property(camelContext, boolean.class, value)); return true;
        case "downloadThumbnail": ((SoroushBotEndpoint) target).setDownloadThumbnail(property(camelContext, boolean.class, value)); return true;
        case "forceDownload": ((SoroushBotEndpoint) target).setForceDownload(property(camelContext, boolean.class, value)); return true;
        case "forceUpload": ((SoroushBotEndpoint) target).setForceUpload(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((SoroushBotEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((SoroushBotEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((SoroushBotEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backOffStrategy": ((SoroushBotEndpoint) target).setBackOffStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "maxRetryWaitingTime": ((SoroushBotEndpoint) target).setMaxRetryWaitingTime(property(camelContext, long.class, value)); return true;
        case "reconnectIdleConnectionTimeout": ((SoroushBotEndpoint) target).setReconnectIdleConnectionTimeout(property(camelContext, long.class, value)); return true;
        case "retryExponentialCoefficient": ((SoroushBotEndpoint) target).setRetryExponentialCoefficient(property(camelContext, long.class, value)); return true;
        case "retryLinearIncrement": ((SoroushBotEndpoint) target).setRetryLinearIncrement(property(camelContext, long.class, value)); return true;
        case "retryWaitingTime": ((SoroushBotEndpoint) target).setRetryWaitingTime(property(camelContext, long.class, value)); return true;
        case "authorizationToken": ((SoroushBotEndpoint) target).setAuthorizationToken(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "connectiontimeout": ((SoroushBotEndpoint) target).setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "maxconnectionretry": ((SoroushBotEndpoint) target).setMaxConnectionRetry(property(camelContext, int.class, value)); return true;
        case "bridgeerrorhandler": ((SoroushBotEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentconsumers": ((SoroushBotEndpoint) target).setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "queuecapacityperthread": ((SoroushBotEndpoint) target).setQueueCapacityPerThread(property(camelContext, int.class, value)); return true;
        case "exceptionhandler": ((SoroushBotEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((SoroushBotEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "autodownload": ((SoroushBotEndpoint) target).setAutoDownload(property(camelContext, boolean.class, value)); return true;
        case "autouploadfile": ((SoroushBotEndpoint) target).setAutoUploadFile(property(camelContext, boolean.class, value)); return true;
        case "downloadthumbnail": ((SoroushBotEndpoint) target).setDownloadThumbnail(property(camelContext, boolean.class, value)); return true;
        case "forcedownload": ((SoroushBotEndpoint) target).setForceDownload(property(camelContext, boolean.class, value)); return true;
        case "forceupload": ((SoroushBotEndpoint) target).setForceUpload(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((SoroushBotEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((SoroushBotEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((SoroushBotEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffstrategy": ((SoroushBotEndpoint) target).setBackOffStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "maxretrywaitingtime": ((SoroushBotEndpoint) target).setMaxRetryWaitingTime(property(camelContext, long.class, value)); return true;
        case "reconnectidleconnectiontimeout": ((SoroushBotEndpoint) target).setReconnectIdleConnectionTimeout(property(camelContext, long.class, value)); return true;
        case "retryexponentialcoefficient": ((SoroushBotEndpoint) target).setRetryExponentialCoefficient(property(camelContext, long.class, value)); return true;
        case "retrylinearincrement": ((SoroushBotEndpoint) target).setRetryLinearIncrement(property(camelContext, long.class, value)); return true;
        case "retrywaitingtime": ((SoroushBotEndpoint) target).setRetryWaitingTime(property(camelContext, long.class, value)); return true;
        case "authorizationtoken": ((SoroushBotEndpoint) target).setAuthorizationToken(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

