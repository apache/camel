/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.fhir;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class FhirEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":apiName/methodName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "accessToken", "apiName", "asynchronous", "backoffErrorThreshold", "backoffIdleThreshold", "backoffMultiplier",
            "bridgeErrorHandler", "bundle", "client", "clientFactory", "compress", "connectionTimeout", "count", "cutoff",
            "deferModelScanning", "delay", "encoding", "exceptionHandler", "exchangePattern", "extraParameters",
            "fhirContext", "fhirVersion", "forceConformanceCheck", "greedy", "iCutoff", "iUrl", "id", "ifVersionMatches",
            "inBody", "initialDelay", "lazyStartProducer", "log", "longId", "meta", "metaType", "methodName", "msgBundle",
            "name", "outputParameterType", "parameters", "password", "patchBody", "pollStrategy", "preferReturn",
            "prettyPrint", "proxyHost", "proxyPassword", "proxyPort", "proxyUser", "repeatCount", "resource",
            "resourceAsString", "resourceClass", "resourceType", "resources", "respondToUri", "responseClass",
            "returnNull", "returnResource", "returnType", "runLoggingLevel", "scheduledExecutorService", "scheduler",
            "schedulerProperties", "sendEmptyMessageWhenIdle", "serverUrl", "sessionCookie", "socketTimeout",
            "startScheduler", "stringBundle", "stringId", "summary", "throwError", "timeUnit", "type", "url",
            "useFixedDelay", "useHttpGet", "username", "validationMode", "version");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "accessToken", "password", "proxyPassword", "proxyUser", "username");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "scheduler.");

    @Override
    public boolean isEnabled(String scheme) {
        return "fhir".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "apiName", null, true, copy);
        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

