/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.fhir;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class FhirEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "encoding": ((FhirEndpoint) target).getConfiguration().setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "fhirVersion": ((FhirEndpoint) target).getConfiguration().setFhirVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "inBody": ((FhirEndpoint) target).setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "log": ((FhirEndpoint) target).getConfiguration().setLog(property(camelContext, boolean.class, value)); return true;
        case "prettyPrint": ((FhirEndpoint) target).getConfiguration().setPrettyPrint(property(camelContext, boolean.class, value)); return true;
        case "serverUrl": ((FhirEndpoint) target).getConfiguration().setServerUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((FhirEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((FhirEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((FhirEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((FhirEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((FhirEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazyStartProducer": ((FhirEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((FhirEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "client": ((FhirEndpoint) target).getConfiguration().setClient(property(camelContext, ca.uhn.fhir.rest.client.api.IGenericClient.class, value)); return true;
        case "clientFactory": ((FhirEndpoint) target).getConfiguration().setClientFactory(property(camelContext, ca.uhn.fhir.rest.client.api.IRestfulClientFactory.class, value)); return true;
        case "compress": ((FhirEndpoint) target).getConfiguration().setCompress(property(camelContext, boolean.class, value)); return true;
        case "connectionTimeout": ((FhirEndpoint) target).getConfiguration().setConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "deferModelScanning": ((FhirEndpoint) target).getConfiguration().setDeferModelScanning(property(camelContext, boolean.class, value)); return true;
        case "fhirContext": ((FhirEndpoint) target).getConfiguration().setFhirContext(property(camelContext, ca.uhn.fhir.context.FhirContext.class, value)); return true;
        case "forceConformanceCheck": ((FhirEndpoint) target).getConfiguration().setForceConformanceCheck(property(camelContext, boolean.class, value)); return true;
        case "sessionCookie": ((FhirEndpoint) target).getConfiguration().setSessionCookie(property(camelContext, java.lang.String.class, value)); return true;
        case "socketTimeout": ((FhirEndpoint) target).getConfiguration().setSocketTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "summary": ((FhirEndpoint) target).getConfiguration().setSummary(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((FhirEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "validationMode": ((FhirEndpoint) target).getConfiguration().setValidationMode(property(camelContext, java.lang.String.class, value)); return true;
        case "backoffErrorThreshold": ((FhirEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((FhirEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((FhirEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((FhirEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((FhirEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((FhirEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((FhirEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((FhirEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((FhirEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((FhirEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((FhirEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((FhirEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((FhirEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((FhirEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "proxyHost": ((FhirEndpoint) target).getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyPassword": ((FhirEndpoint) target).getConfiguration().setProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyPort": ((FhirEndpoint) target).getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyUser": ((FhirEndpoint) target).getConfiguration().setProxyUser(property(camelContext, java.lang.String.class, value)); return true;
        case "accessToken": ((FhirEndpoint) target).getConfiguration().setAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "password": ((FhirEndpoint) target).getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((FhirEndpoint) target).getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "encoding": ((FhirEndpoint) target).getConfiguration().setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "fhirversion": ((FhirEndpoint) target).getConfiguration().setFhirVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "inbody": ((FhirEndpoint) target).setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "log": ((FhirEndpoint) target).getConfiguration().setLog(property(camelContext, boolean.class, value)); return true;
        case "prettyprint": ((FhirEndpoint) target).getConfiguration().setPrettyPrint(property(camelContext, boolean.class, value)); return true;
        case "serverurl": ((FhirEndpoint) target).getConfiguration().setServerUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((FhirEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendemptymessagewhenidle": ((FhirEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((FhirEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((FhirEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((FhirEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazystartproducer": ((FhirEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((FhirEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "client": ((FhirEndpoint) target).getConfiguration().setClient(property(camelContext, ca.uhn.fhir.rest.client.api.IGenericClient.class, value)); return true;
        case "clientfactory": ((FhirEndpoint) target).getConfiguration().setClientFactory(property(camelContext, ca.uhn.fhir.rest.client.api.IRestfulClientFactory.class, value)); return true;
        case "compress": ((FhirEndpoint) target).getConfiguration().setCompress(property(camelContext, boolean.class, value)); return true;
        case "connectiontimeout": ((FhirEndpoint) target).getConfiguration().setConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "defermodelscanning": ((FhirEndpoint) target).getConfiguration().setDeferModelScanning(property(camelContext, boolean.class, value)); return true;
        case "fhircontext": ((FhirEndpoint) target).getConfiguration().setFhirContext(property(camelContext, ca.uhn.fhir.context.FhirContext.class, value)); return true;
        case "forceconformancecheck": ((FhirEndpoint) target).getConfiguration().setForceConformanceCheck(property(camelContext, boolean.class, value)); return true;
        case "sessioncookie": ((FhirEndpoint) target).getConfiguration().setSessionCookie(property(camelContext, java.lang.String.class, value)); return true;
        case "sockettimeout": ((FhirEndpoint) target).getConfiguration().setSocketTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "summary": ((FhirEndpoint) target).getConfiguration().setSummary(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((FhirEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "validationmode": ((FhirEndpoint) target).getConfiguration().setValidationMode(property(camelContext, java.lang.String.class, value)); return true;
        case "backofferrorthreshold": ((FhirEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((FhirEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((FhirEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((FhirEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((FhirEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((FhirEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((FhirEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((FhirEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((FhirEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((FhirEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((FhirEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((FhirEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((FhirEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((FhirEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "proxyhost": ((FhirEndpoint) target).getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxypassword": ((FhirEndpoint) target).getConfiguration().setProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport": ((FhirEndpoint) target).getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyuser": ((FhirEndpoint) target).getConfiguration().setProxyUser(property(camelContext, java.lang.String.class, value)); return true;
        case "accesstoken": ((FhirEndpoint) target).getConfiguration().setAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "password": ((FhirEndpoint) target).getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((FhirEndpoint) target).getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

