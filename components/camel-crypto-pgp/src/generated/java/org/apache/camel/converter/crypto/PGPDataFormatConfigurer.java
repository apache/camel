/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.converter.crypto;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class PGPDataFormatConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("Algorithm", int.class);
        map.put("Armored", boolean.class);
        map.put("CompressionAlgorithm", int.class);
        map.put("HashAlgorithm", int.class);
        map.put("Integrity", boolean.class);
        map.put("KeyFileName", java.lang.String.class);
        map.put("KeyUserid", java.lang.String.class);
        map.put("Password", java.lang.String.class);
        map.put("Provider", java.lang.String.class);
        map.put("SignatureKeyFileName", java.lang.String.class);
        map.put("SignatureKeyRing", byte[].class);
        map.put("SignatureKeyUserid", java.lang.String.class);
        map.put("SignaturePassword", java.lang.String.class);
        map.put("SignatureVerificationOption", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        PGPDataFormat target = (PGPDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "algorithm": target.setAlgorithm(property(camelContext, int.class, value)); return true;
        case "armored": target.setArmored(property(camelContext, boolean.class, value)); return true;
        case "compressionalgorithm":
        case "compressionAlgorithm": target.setCompressionAlgorithm(property(camelContext, int.class, value)); return true;
        case "hashalgorithm":
        case "hashAlgorithm": target.setHashAlgorithm(property(camelContext, int.class, value)); return true;
        case "integrity": target.setIntegrity(property(camelContext, boolean.class, value)); return true;
        case "keyfilename":
        case "keyFileName": target.setKeyFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "keyuserid":
        case "keyUserid": target.setKeyUserid(property(camelContext, java.lang.String.class, value)); return true;
        case "password": target.setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "provider": target.setProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "signaturekeyfilename":
        case "signatureKeyFileName": target.setSignatureKeyFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "signaturekeyring":
        case "signatureKeyRing": target.setSignatureKeyRing(property(camelContext, byte[].class, value)); return true;
        case "signaturekeyuserid":
        case "signatureKeyUserid": target.setSignatureKeyUserid(property(camelContext, java.lang.String.class, value)); return true;
        case "signaturepassword":
        case "signaturePassword": target.setSignaturePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "signatureverificationoption":
        case "signatureVerificationOption": target.setSignatureVerificationOption(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "algorithm": return int.class;
        case "armored": return boolean.class;
        case "compressionalgorithm":
        case "compressionAlgorithm": return int.class;
        case "hashalgorithm":
        case "hashAlgorithm": return int.class;
        case "integrity": return boolean.class;
        case "keyfilename":
        case "keyFileName": return java.lang.String.class;
        case "keyuserid":
        case "keyUserid": return java.lang.String.class;
        case "password": return java.lang.String.class;
        case "provider": return java.lang.String.class;
        case "signaturekeyfilename":
        case "signatureKeyFileName": return java.lang.String.class;
        case "signaturekeyring":
        case "signatureKeyRing": return byte[].class;
        case "signaturekeyuserid":
        case "signatureKeyUserid": return java.lang.String.class;
        case "signaturepassword":
        case "signaturePassword": return java.lang.String.class;
        case "signatureverificationoption":
        case "signatureVerificationOption": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        PGPDataFormat target = (PGPDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "algorithm": return target.getAlgorithm();
        case "armored": return target.isArmored();
        case "compressionalgorithm":
        case "compressionAlgorithm": return target.getCompressionAlgorithm();
        case "hashalgorithm":
        case "hashAlgorithm": return target.getHashAlgorithm();
        case "integrity": return target.isIntegrity();
        case "keyfilename":
        case "keyFileName": return target.getKeyFileName();
        case "keyuserid":
        case "keyUserid": return target.getKeyUserid();
        case "password": return target.getPassword();
        case "provider": return target.getProvider();
        case "signaturekeyfilename":
        case "signatureKeyFileName": return target.getSignatureKeyFileName();
        case "signaturekeyring":
        case "signatureKeyRing": return target.getSignatureKeyRing();
        case "signaturekeyuserid":
        case "signatureKeyUserid": return target.getSignatureKeyUserid();
        case "signaturepassword":
        case "signaturePassword": return target.getSignaturePassword();
        case "signatureverificationoption":
        case "signatureVerificationOption": return target.getSignatureVerificationOption();
        default: return null;
        }
    }
}

