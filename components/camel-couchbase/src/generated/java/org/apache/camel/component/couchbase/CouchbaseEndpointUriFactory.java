/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.couchbase;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class CouchbaseEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":protocol://hostname:port";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "additionalHosts", "autoStartIdForInserts", "backoffErrorThreshold", "backoffIdleThreshold",
            "backoffMultiplier", "bridgeErrorHandler", "bucket", "collection", "connectTimeout",
            "consumerProcessedStrategy", "delay", "descending", "designDocumentName", "exceptionHandler",
            "exchangePattern", "fullDocument", "greedy", "hostname", "initialDelay", "key", "lazyStartProducer", "limit",
            "operation", "password", "persistTo", "pollStrategy", "port", "producerRetryAttempts", "producerRetryPause",
            "protocol", "queryTimeout", "rangeEndKey", "rangeStartKey", "repeatCount", "replicateTo", "runLoggingLevel",
            "scheduledExecutorService", "scheduler", "schedulerProperties", "scope", "sendEmptyMessageWhenIdle", "skip",
            "startScheduler", "startingIdForInsertsFrom", "timeUnit", "useFixedDelay", "username", "viewName");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "password", "username");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "scheduler.");

    @Override
    public boolean isEnabled(String scheme) {
        return "couchbase".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "protocol", null, true, copy);
        uri = buildPathParameter(syntax, uri, "hostname", null, true, copy);
        uri = buildPathParameter(syntax, uri, "port", 8091, false, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

