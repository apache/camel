/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.couchbase;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class CouchbaseEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        CouchbaseEndpoint target = (CouchbaseEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "additionalhosts":
        case "additionalHosts": target.setAdditionalHosts(property(camelContext, java.lang.String.class, value)); return true;
        case "autostartidforinserts":
        case "autoStartIdForInserts": target.setAutoStartIdForInserts(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "bucket": target.setBucket(property(camelContext, java.lang.String.class, value)); return true;
        case "consumerprocessedstrategy":
        case "consumerProcessedStrategy": target.setConsumerProcessedStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "delay": target.setDelay(property(camelContext, long.class, value)); return true;
        case "descending": target.setDescending(property(camelContext, boolean.class, value)); return true;
        case "designdocumentname":
        case "designDocumentName": target.setDesignDocumentName(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "greedy": target.setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay":
        case "initialDelay": target.setInitialDelay(property(camelContext, long.class, value)); return true;
        case "key": target.setKey(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "limit": target.setLimit(property(camelContext, int.class, value)); return true;
        case "maxreconnectdelay":
        case "maxReconnectDelay": target.setMaxReconnectDelay(property(camelContext, long.class, value)); return true;
        case "obspollinterval":
        case "obsPollInterval": target.setObsPollInterval(property(camelContext, long.class, value)); return true;
        case "obstimeout":
        case "obsTimeout": target.setObsTimeout(property(camelContext, long.class, value)); return true;
        case "opqueuemaxblocktime":
        case "opQueueMaxBlockTime": target.setOpQueueMaxBlockTime(property(camelContext, long.class, value)); return true;
        case "optimeout":
        case "opTimeOut": target.setOpTimeOut(property(camelContext, long.class, value)); return true;
        case "operation": target.setOperation(property(camelContext, java.lang.String.class, value)); return true;
        case "password": target.setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "persistto":
        case "persistTo": target.setPersistTo(property(camelContext, int.class, value)); return true;
        case "pollstrategy":
        case "pollStrategy": target.setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "producerretryattempts":
        case "producerRetryAttempts": target.setProducerRetryAttempts(property(camelContext, int.class, value)); return true;
        case "producerretrypause":
        case "producerRetryPause": target.setProducerRetryPause(property(camelContext, int.class, value)); return true;
        case "rangeendkey":
        case "rangeEndKey": target.setRangeEndKey(property(camelContext, java.lang.String.class, value)); return true;
        case "rangestartkey":
        case "rangeStartKey": target.setRangeStartKey(property(camelContext, java.lang.String.class, value)); return true;
        case "readbuffersize":
        case "readBufferSize": target.setReadBufferSize(property(camelContext, int.class, value)); return true;
        case "repeatcount":
        case "repeatCount": target.setRepeatCount(property(camelContext, long.class, value)); return true;
        case "replicateto":
        case "replicateTo": target.setReplicateTo(property(camelContext, int.class, value)); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": target.setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "shouldoptimize":
        case "shouldOptimize": target.setShouldOptimize(property(camelContext, boolean.class, value)); return true;
        case "skip": target.setSkip(property(camelContext, int.class, value)); return true;
        case "startscheduler":
        case "startScheduler": target.setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "startingidforinsertsfrom":
        case "startingIdForInsertsFrom": target.setStartingIdForInsertsFrom(property(camelContext, long.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "timeunit":
        case "timeUnit": target.setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "timeoutexceptionthreshold":
        case "timeoutExceptionThreshold": target.setTimeoutExceptionThreshold(property(camelContext, int.class, value)); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "username": target.setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "viewname":
        case "viewName": target.setViewName(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("additionalHosts", java.lang.String.class);
        answer.put("autoStartIdForInserts", boolean.class);
        answer.put("backoffErrorThreshold", int.class);
        answer.put("backoffIdleThreshold", int.class);
        answer.put("backoffMultiplier", int.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("bucket", java.lang.String.class);
        answer.put("consumerProcessedStrategy", java.lang.String.class);
        answer.put("delay", long.class);
        answer.put("descending", boolean.class);
        answer.put("designDocumentName", java.lang.String.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("greedy", boolean.class);
        answer.put("initialDelay", long.class);
        answer.put("key", java.lang.String.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("limit", int.class);
        answer.put("maxReconnectDelay", long.class);
        answer.put("obsPollInterval", long.class);
        answer.put("obsTimeout", long.class);
        answer.put("opQueueMaxBlockTime", long.class);
        answer.put("opTimeOut", long.class);
        answer.put("operation", java.lang.String.class);
        answer.put("password", java.lang.String.class);
        answer.put("persistTo", int.class);
        answer.put("pollStrategy", org.apache.camel.spi.PollingConsumerPollStrategy.class);
        answer.put("producerRetryAttempts", int.class);
        answer.put("producerRetryPause", int.class);
        answer.put("rangeEndKey", java.lang.String.class);
        answer.put("rangeStartKey", java.lang.String.class);
        answer.put("readBufferSize", int.class);
        answer.put("repeatCount", long.class);
        answer.put("replicateTo", int.class);
        answer.put("runLoggingLevel", org.apache.camel.LoggingLevel.class);
        answer.put("scheduledExecutorService", java.util.concurrent.ScheduledExecutorService.class);
        answer.put("scheduler", java.lang.String.class);
        answer.put("schedulerProperties", java.util.Map.class);
        answer.put("sendEmptyMessageWhenIdle", boolean.class);
        answer.put("shouldOptimize", boolean.class);
        answer.put("skip", int.class);
        answer.put("startScheduler", boolean.class);
        answer.put("startingIdForInsertsFrom", long.class);
        answer.put("synchronous", boolean.class);
        answer.put("timeUnit", java.util.concurrent.TimeUnit.class);
        answer.put("timeoutExceptionThreshold", int.class);
        answer.put("useFixedDelay", boolean.class);
        answer.put("username", java.lang.String.class);
        answer.put("viewName", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        CouchbaseEndpoint target = (CouchbaseEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "additionalhosts":
        case "additionalHosts": target.getAdditionalHosts(); return true;
        case "autostartidforinserts":
        case "autoStartIdForInserts": target.isAutoStartIdForInserts(); return true;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.getBackoffErrorThreshold(); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.getBackoffIdleThreshold(); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.getBackoffMultiplier(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "bucket": target.getBucket(); return true;
        case "consumerprocessedstrategy":
        case "consumerProcessedStrategy": target.getConsumerProcessedStrategy(); return true;
        case "delay": target.getDelay(); return true;
        case "descending": target.isDescending(); return true;
        case "designdocumentname":
        case "designDocumentName": target.getDesignDocumentName(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "greedy": target.isGreedy(); return true;
        case "initialdelay":
        case "initialDelay": target.getInitialDelay(); return true;
        case "key": target.getKey(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "limit": target.getLimit(); return true;
        case "maxreconnectdelay":
        case "maxReconnectDelay": target.getMaxReconnectDelay(); return true;
        case "obspollinterval":
        case "obsPollInterval": target.getObsPollInterval(); return true;
        case "obstimeout":
        case "obsTimeout": target.getObsTimeout(); return true;
        case "opqueuemaxblocktime":
        case "opQueueMaxBlockTime": target.getOpQueueMaxBlockTime(); return true;
        case "optimeout":
        case "opTimeOut": target.getOpTimeOut(); return true;
        case "operation": target.getOperation(); return true;
        case "password": target.getPassword(); return true;
        case "persistto":
        case "persistTo": target.getPersistTo(); return true;
        case "pollstrategy":
        case "pollStrategy": target.getPollStrategy(); return true;
        case "producerretryattempts":
        case "producerRetryAttempts": target.getProducerRetryAttempts(); return true;
        case "producerretrypause":
        case "producerRetryPause": target.getProducerRetryPause(); return true;
        case "rangeendkey":
        case "rangeEndKey": target.getRangeEndKey(); return true;
        case "rangestartkey":
        case "rangeStartKey": target.getRangeStartKey(); return true;
        case "readbuffersize":
        case "readBufferSize": target.getReadBufferSize(); return true;
        case "repeatcount":
        case "repeatCount": target.getRepeatCount(); return true;
        case "replicateto":
        case "replicateTo": target.getReplicateTo(); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.getRunLoggingLevel(); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.getScheduledExecutorService(); return true;
        case "scheduler": target.getScheduler(); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.getSchedulerProperties(); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.isSendEmptyMessageWhenIdle(); return true;
        case "shouldoptimize":
        case "shouldOptimize": target.isShouldOptimize(); return true;
        case "skip": target.getSkip(); return true;
        case "startscheduler":
        case "startScheduler": target.isStartScheduler(); return true;
        case "startingidforinsertsfrom":
        case "startingIdForInsertsFrom": target.getStartingIdForInsertsFrom(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "timeunit":
        case "timeUnit": target.getTimeUnit(); return true;
        case "timeoutexceptionthreshold":
        case "timeoutExceptionThreshold": target.getTimeoutExceptionThreshold(); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.isUseFixedDelay(); return true;
        case "username": target.getUsername(); return true;
        case "viewname":
        case "viewName": target.getViewName(); return true;
        default: return null;
        }
    }
}

