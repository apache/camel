/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.netty;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class NettyEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("protocol", java.lang.String.class);
        map.put("host", java.lang.String.class);
        map.put("port", int.class);
        map.put("disconnect", boolean.class);
        map.put("keepAlive", boolean.class);
        map.put("reuseAddress", boolean.class);
        map.put("reuseChannel", boolean.class);
        map.put("sync", boolean.class);
        map.put("tcpNoDelay", boolean.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("broadcast", boolean.class);
        map.put("clientMode", boolean.class);
        map.put("reconnect", boolean.class);
        map.put("reconnectInterval", int.class);
        map.put("backlog", int.class);
        map.put("bossCount", int.class);
        map.put("bossGroup", io.netty.channel.EventLoopGroup.class);
        map.put("disconnectOnNoReply", boolean.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("nettyServerBootstrapFactory", org.apache.camel.component.netty.NettyServerBootstrapFactory.class);
        map.put("networkInterface", java.lang.String.class);
        map.put("noReplyLogLevel", org.apache.camel.LoggingLevel.class);
        map.put("serverClosedChannelExceptionCaughtLogLevel", org.apache.camel.LoggingLevel.class);
        map.put("serverExceptionCaughtLogLevel", org.apache.camel.LoggingLevel.class);
        map.put("serverInitializerFactory", org.apache.camel.component.netty.ServerInitializerFactory.class);
        map.put("usingExecutorService", boolean.class);
        map.put("connectTimeout", int.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("requestTimeout", long.class);
        map.put("clientInitializerFactory", org.apache.camel.component.netty.ClientInitializerFactory.class);
        map.put("correlationManager", org.apache.camel.component.netty.NettyCamelStateCorrelationManager.class);
        map.put("lazyChannelCreation", boolean.class);
        map.put("producerPoolEnabled", boolean.class);
        map.put("producerPoolMaxActive", int.class);
        map.put("producerPoolMaxIdle", int.class);
        map.put("producerPoolMinEvictableIdle", long.class);
        map.put("producerPoolMinIdle", int.class);
        map.put("udpConnectionlessSending", boolean.class);
        map.put("useByteBuf", boolean.class);
        map.put("allowSerializedHeaders", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("channelGroup", io.netty.channel.group.ChannelGroup.class);
        map.put("nativeTransport", boolean.class);
        map.put("options", java.util.Map.class);
        map.put("receiveBufferSize", int.class);
        map.put("receiveBufferSizePredictor", int.class);
        map.put("sendBufferSize", int.class);
        map.put("synchronous", boolean.class);
        map.put("transferExchange", boolean.class);
        map.put("udpByteArrayCodec", boolean.class);
        map.put("workerCount", int.class);
        map.put("workerGroup", io.netty.channel.EventLoopGroup.class);
        map.put("allowDefaultCodec", boolean.class);
        map.put("autoAppendDelimiter", boolean.class);
        map.put("decoderMaxLineLength", int.class);
        map.put("decoders", java.util.List.class);
        map.put("delimiter", org.apache.camel.component.netty.TextLineDelimiter.class);
        map.put("encoders", java.util.List.class);
        map.put("encoding", java.lang.String.class);
        map.put("textline", boolean.class);
        map.put("enabledProtocols", java.lang.String.class);
        map.put("keyStoreFile", java.io.File.class);
        map.put("keyStoreFormat", java.lang.String.class);
        map.put("keyStoreResource", java.lang.String.class);
        map.put("needClientAuth", boolean.class);
        map.put("passphrase", java.lang.String.class);
        map.put("securityProvider", java.lang.String.class);
        map.put("ssl", boolean.class);
        map.put("sslClientCertHeaders", boolean.class);
        map.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        map.put("sslHandler", io.netty.handler.ssl.SslHandler.class);
        map.put("trustStoreFile", java.io.File.class);
        map.put("trustStoreResource", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        NettyEndpoint target = (NettyEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowdefaultcodec":
        case "allowDefaultCodec": target.getConfiguration().setAllowDefaultCodec(property(camelContext, boolean.class, value)); return true;
        case "allowserializedheaders":
        case "allowSerializedHeaders": target.getConfiguration().setAllowSerializedHeaders(property(camelContext, boolean.class, value)); return true;
        case "autoappenddelimiter":
        case "autoAppendDelimiter": target.getConfiguration().setAutoAppendDelimiter(property(camelContext, boolean.class, value)); return true;
        case "backlog": target.getConfiguration().setBacklog(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bosscount":
        case "bossCount": target.getConfiguration().setBossCount(property(camelContext, int.class, value)); return true;
        case "bossgroup":
        case "bossGroup": target.getConfiguration().setBossGroup(property(camelContext, io.netty.channel.EventLoopGroup.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "broadcast": target.getConfiguration().setBroadcast(property(camelContext, boolean.class, value)); return true;
        case "channelgroup":
        case "channelGroup": target.getConfiguration().setChannelGroup(property(camelContext, io.netty.channel.group.ChannelGroup.class, value)); return true;
        case "clientinitializerfactory":
        case "clientInitializerFactory": target.getConfiguration().setClientInitializerFactory(property(camelContext, org.apache.camel.component.netty.ClientInitializerFactory.class, value)); return true;
        case "clientmode":
        case "clientMode": target.getConfiguration().setClientMode(property(camelContext, boolean.class, value)); return true;
        case "connecttimeout":
        case "connectTimeout": target.getConfiguration().setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "correlationmanager":
        case "correlationManager": target.getConfiguration().setCorrelationManager(property(camelContext, org.apache.camel.component.netty.NettyCamelStateCorrelationManager.class, value)); return true;
        case "decodermaxlinelength":
        case "decoderMaxLineLength": target.getConfiguration().setDecoderMaxLineLength(property(camelContext, int.class, value)); return true;
        case "decoders": target.getConfiguration().setDecoders(property(camelContext, java.util.List.class, value)); return true;
        case "delimiter": target.getConfiguration().setDelimiter(property(camelContext, org.apache.camel.component.netty.TextLineDelimiter.class, value)); return true;
        case "disconnect": target.getConfiguration().setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "disconnectonnoreply":
        case "disconnectOnNoReply": target.getConfiguration().setDisconnectOnNoReply(property(camelContext, boolean.class, value)); return true;
        case "enabledprotocols":
        case "enabledProtocols": target.getConfiguration().setEnabledProtocols(property(camelContext, java.lang.String.class, value)); return true;
        case "encoders": target.getConfiguration().setEncoders(property(camelContext, java.util.List.class, value)); return true;
        case "encoding": target.getConfiguration().setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "keepalive":
        case "keepAlive": target.getConfiguration().setKeepAlive(property(camelContext, boolean.class, value)); return true;
        case "keystorefile":
        case "keyStoreFile": target.getConfiguration().setKeyStoreFile(property(camelContext, java.io.File.class, value)); return true;
        case "keystoreformat":
        case "keyStoreFormat": target.getConfiguration().setKeyStoreFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "keystoreresource":
        case "keyStoreResource": target.getConfiguration().setKeyStoreResource(property(camelContext, java.lang.String.class, value)); return true;
        case "lazychannelcreation":
        case "lazyChannelCreation": target.getConfiguration().setLazyChannelCreation(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "nativetransport":
        case "nativeTransport": target.getConfiguration().setNativeTransport(property(camelContext, boolean.class, value)); return true;
        case "needclientauth":
        case "needClientAuth": target.getConfiguration().setNeedClientAuth(property(camelContext, boolean.class, value)); return true;
        case "nettyserverbootstrapfactory":
        case "nettyServerBootstrapFactory": target.getConfiguration().setNettyServerBootstrapFactory(property(camelContext, org.apache.camel.component.netty.NettyServerBootstrapFactory.class, value)); return true;
        case "networkinterface":
        case "networkInterface": target.getConfiguration().setNetworkInterface(property(camelContext, java.lang.String.class, value)); return true;
        case "noreplyloglevel":
        case "noReplyLogLevel": target.getConfiguration().setNoReplyLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "options": target.getConfiguration().setOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "passphrase": target.getConfiguration().setPassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "producerpoolenabled":
        case "producerPoolEnabled": target.getConfiguration().setProducerPoolEnabled(property(camelContext, boolean.class, value)); return true;
        case "producerpoolmaxactive":
        case "producerPoolMaxActive": target.getConfiguration().setProducerPoolMaxActive(property(camelContext, int.class, value)); return true;
        case "producerpoolmaxidle":
        case "producerPoolMaxIdle": target.getConfiguration().setProducerPoolMaxIdle(property(camelContext, int.class, value)); return true;
        case "producerpoolminevictableidle":
        case "producerPoolMinEvictableIdle": target.getConfiguration().setProducerPoolMinEvictableIdle(property(camelContext, long.class, value)); return true;
        case "producerpoolminidle":
        case "producerPoolMinIdle": target.getConfiguration().setProducerPoolMinIdle(property(camelContext, int.class, value)); return true;
        case "receivebuffersize":
        case "receiveBufferSize": target.getConfiguration().setReceiveBufferSize(property(camelContext, int.class, value)); return true;
        case "receivebuffersizepredictor":
        case "receiveBufferSizePredictor": target.getConfiguration().setReceiveBufferSizePredictor(property(camelContext, int.class, value)); return true;
        case "reconnect": target.getConfiguration().setReconnect(property(camelContext, boolean.class, value)); return true;
        case "reconnectinterval":
        case "reconnectInterval": target.getConfiguration().setReconnectInterval(property(camelContext, int.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.getConfiguration().setRequestTimeout(property(camelContext, long.class, value)); return true;
        case "reuseaddress":
        case "reuseAddress": target.getConfiguration().setReuseAddress(property(camelContext, boolean.class, value)); return true;
        case "reusechannel":
        case "reuseChannel": target.getConfiguration().setReuseChannel(property(camelContext, boolean.class, value)); return true;
        case "securityprovider":
        case "securityProvider": target.getConfiguration().setSecurityProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "sendbuffersize":
        case "sendBufferSize": target.getConfiguration().setSendBufferSize(property(camelContext, int.class, value)); return true;
        case "serverclosedchannelexceptioncaughtloglevel":
        case "serverClosedChannelExceptionCaughtLogLevel": target.getConfiguration().setServerClosedChannelExceptionCaughtLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "serverexceptioncaughtloglevel":
        case "serverExceptionCaughtLogLevel": target.getConfiguration().setServerExceptionCaughtLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "serverinitializerfactory":
        case "serverInitializerFactory": target.getConfiguration().setServerInitializerFactory(property(camelContext, org.apache.camel.component.netty.ServerInitializerFactory.class, value)); return true;
        case "ssl": target.getConfiguration().setSsl(property(camelContext, boolean.class, value)); return true;
        case "sslclientcertheaders":
        case "sslClientCertHeaders": target.getConfiguration().setSslClientCertHeaders(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "sslhandler":
        case "sslHandler": target.getConfiguration().setSslHandler(property(camelContext, io.netty.handler.ssl.SslHandler.class, value)); return true;
        case "sync": target.getConfiguration().setSync(property(camelContext, boolean.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "tcpnodelay":
        case "tcpNoDelay": target.getConfiguration().setTcpNoDelay(property(camelContext, boolean.class, value)); return true;
        case "textline": target.getConfiguration().setTextline(property(camelContext, boolean.class, value)); return true;
        case "transferexchange":
        case "transferExchange": target.getConfiguration().setTransferExchange(property(camelContext, boolean.class, value)); return true;
        case "truststorefile":
        case "trustStoreFile": target.getConfiguration().setTrustStoreFile(property(camelContext, java.io.File.class, value)); return true;
        case "truststoreresource":
        case "trustStoreResource": target.getConfiguration().setTrustStoreResource(property(camelContext, java.lang.String.class, value)); return true;
        case "udpbytearraycodec":
        case "udpByteArrayCodec": target.getConfiguration().setUdpByteArrayCodec(property(camelContext, boolean.class, value)); return true;
        case "udpconnectionlesssending":
        case "udpConnectionlessSending": target.getConfiguration().setUdpConnectionlessSending(property(camelContext, boolean.class, value)); return true;
        case "usebytebuf":
        case "useByteBuf": target.getConfiguration().setUseByteBuf(property(camelContext, boolean.class, value)); return true;
        case "usingexecutorservice":
        case "usingExecutorService": target.getConfiguration().setUsingExecutorService(property(camelContext, boolean.class, value)); return true;
        case "workercount":
        case "workerCount": target.getConfiguration().setWorkerCount(property(camelContext, int.class, value)); return true;
        case "workergroup":
        case "workerGroup": target.getConfiguration().setWorkerGroup(property(camelContext, io.netty.channel.EventLoopGroup.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        NettyEndpoint target = (NettyEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowdefaultcodec":
        case "allowDefaultCodec": return target.getConfiguration().isAllowDefaultCodec();
        case "allowserializedheaders":
        case "allowSerializedHeaders": return target.getConfiguration().isAllowSerializedHeaders();
        case "autoappenddelimiter":
        case "autoAppendDelimiter": return target.getConfiguration().isAutoAppendDelimiter();
        case "backlog": return target.getConfiguration().getBacklog();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bosscount":
        case "bossCount": return target.getConfiguration().getBossCount();
        case "bossgroup":
        case "bossGroup": return target.getConfiguration().getBossGroup();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "broadcast": return target.getConfiguration().isBroadcast();
        case "channelgroup":
        case "channelGroup": return target.getConfiguration().getChannelGroup();
        case "clientinitializerfactory":
        case "clientInitializerFactory": return target.getConfiguration().getClientInitializerFactory();
        case "clientmode":
        case "clientMode": return target.getConfiguration().isClientMode();
        case "connecttimeout":
        case "connectTimeout": return target.getConfiguration().getConnectTimeout();
        case "correlationmanager":
        case "correlationManager": return target.getConfiguration().getCorrelationManager();
        case "decodermaxlinelength":
        case "decoderMaxLineLength": return target.getConfiguration().getDecoderMaxLineLength();
        case "decoders": return target.getConfiguration().getDecoders();
        case "delimiter": return target.getConfiguration().getDelimiter();
        case "disconnect": return target.getConfiguration().isDisconnect();
        case "disconnectonnoreply":
        case "disconnectOnNoReply": return target.getConfiguration().isDisconnectOnNoReply();
        case "enabledprotocols":
        case "enabledProtocols": return target.getConfiguration().getEnabledProtocols();
        case "encoders": return target.getConfiguration().getEncoders();
        case "encoding": return target.getConfiguration().getEncoding();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "keepalive":
        case "keepAlive": return target.getConfiguration().isKeepAlive();
        case "keystorefile":
        case "keyStoreFile": return target.getConfiguration().getKeyStoreFile();
        case "keystoreformat":
        case "keyStoreFormat": return target.getConfiguration().getKeyStoreFormat();
        case "keystoreresource":
        case "keyStoreResource": return target.getConfiguration().getKeyStoreResource();
        case "lazychannelcreation":
        case "lazyChannelCreation": return target.getConfiguration().isLazyChannelCreation();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "nativetransport":
        case "nativeTransport": return target.getConfiguration().isNativeTransport();
        case "needclientauth":
        case "needClientAuth": return target.getConfiguration().isNeedClientAuth();
        case "nettyserverbootstrapfactory":
        case "nettyServerBootstrapFactory": return target.getConfiguration().getNettyServerBootstrapFactory();
        case "networkinterface":
        case "networkInterface": return target.getConfiguration().getNetworkInterface();
        case "noreplyloglevel":
        case "noReplyLogLevel": return target.getConfiguration().getNoReplyLogLevel();
        case "options": return target.getConfiguration().getOptions();
        case "passphrase": return target.getConfiguration().getPassphrase();
        case "producerpoolenabled":
        case "producerPoolEnabled": return target.getConfiguration().isProducerPoolEnabled();
        case "producerpoolmaxactive":
        case "producerPoolMaxActive": return target.getConfiguration().getProducerPoolMaxActive();
        case "producerpoolmaxidle":
        case "producerPoolMaxIdle": return target.getConfiguration().getProducerPoolMaxIdle();
        case "producerpoolminevictableidle":
        case "producerPoolMinEvictableIdle": return target.getConfiguration().getProducerPoolMinEvictableIdle();
        case "producerpoolminidle":
        case "producerPoolMinIdle": return target.getConfiguration().getProducerPoolMinIdle();
        case "receivebuffersize":
        case "receiveBufferSize": return target.getConfiguration().getReceiveBufferSize();
        case "receivebuffersizepredictor":
        case "receiveBufferSizePredictor": return target.getConfiguration().getReceiveBufferSizePredictor();
        case "reconnect": return target.getConfiguration().isReconnect();
        case "reconnectinterval":
        case "reconnectInterval": return target.getConfiguration().getReconnectInterval();
        case "requesttimeout":
        case "requestTimeout": return target.getConfiguration().getRequestTimeout();
        case "reuseaddress":
        case "reuseAddress": return target.getConfiguration().isReuseAddress();
        case "reusechannel":
        case "reuseChannel": return target.getConfiguration().isReuseChannel();
        case "securityprovider":
        case "securityProvider": return target.getConfiguration().getSecurityProvider();
        case "sendbuffersize":
        case "sendBufferSize": return target.getConfiguration().getSendBufferSize();
        case "serverclosedchannelexceptioncaughtloglevel":
        case "serverClosedChannelExceptionCaughtLogLevel": return target.getConfiguration().getServerClosedChannelExceptionCaughtLogLevel();
        case "serverexceptioncaughtloglevel":
        case "serverExceptionCaughtLogLevel": return target.getConfiguration().getServerExceptionCaughtLogLevel();
        case "serverinitializerfactory":
        case "serverInitializerFactory": return target.getConfiguration().getServerInitializerFactory();
        case "ssl": return target.getConfiguration().isSsl();
        case "sslclientcertheaders":
        case "sslClientCertHeaders": return target.getConfiguration().isSslClientCertHeaders();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getConfiguration().getSslContextParameters();
        case "sslhandler":
        case "sslHandler": return target.getConfiguration().getSslHandler();
        case "sync": return target.getConfiguration().isSync();
        case "synchronous": return target.isSynchronous();
        case "tcpnodelay":
        case "tcpNoDelay": return target.getConfiguration().isTcpNoDelay();
        case "textline": return target.getConfiguration().isTextline();
        case "transferexchange":
        case "transferExchange": return target.getConfiguration().isTransferExchange();
        case "truststorefile":
        case "trustStoreFile": return target.getConfiguration().getTrustStoreFile();
        case "truststoreresource":
        case "trustStoreResource": return target.getConfiguration().getTrustStoreResource();
        case "udpbytearraycodec":
        case "udpByteArrayCodec": return target.getConfiguration().isUdpByteArrayCodec();
        case "udpconnectionlesssending":
        case "udpConnectionlessSending": return target.getConfiguration().isUdpConnectionlessSending();
        case "usebytebuf":
        case "useByteBuf": return target.getConfiguration().isUseByteBuf();
        case "usingexecutorservice":
        case "usingExecutorService": return target.getConfiguration().isUsingExecutorService();
        case "workercount":
        case "workerCount": return target.getConfiguration().getWorkerCount();
        case "workergroup":
        case "workerGroup": return target.getConfiguration().getWorkerGroup();
        default: return null;
        }
    }
}

