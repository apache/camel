/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.netty;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.netty.NettyConfiguration;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class NettyConfigurationConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.netty.NettyConfiguration target = (org.apache.camel.component.netty.NettyConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowdefaultcodec":
        case "allowDefaultCodec": target.setAllowDefaultCodec(property(camelContext, boolean.class, value)); return true;
        case "allowserializedheaders":
        case "allowSerializedHeaders": target.setAllowSerializedHeaders(property(camelContext, boolean.class, value)); return true;
        case "autoappenddelimiter":
        case "autoAppendDelimiter": target.setAutoAppendDelimiter(property(camelContext, boolean.class, value)); return true;
        case "backlog": target.setBacklog(property(camelContext, int.class, value)); return true;
        case "bosscount":
        case "bossCount": target.setBossCount(property(camelContext, int.class, value)); return true;
        case "bossgroup":
        case "bossGroup": target.setBossGroup(property(camelContext, io.netty.channel.EventLoopGroup.class, value)); return true;
        case "broadcast": target.setBroadcast(property(camelContext, boolean.class, value)); return true;
        case "channelgroup":
        case "channelGroup": target.setChannelGroup(property(camelContext, io.netty.channel.group.ChannelGroup.class, value)); return true;
        case "clientinitializerfactory":
        case "clientInitializerFactory": target.setClientInitializerFactory(property(camelContext, org.apache.camel.component.netty.ClientInitializerFactory.class, value)); return true;
        case "clientmode":
        case "clientMode": target.setClientMode(property(camelContext, boolean.class, value)); return true;
        case "clientpipelinefactory":
        case "clientPipelineFactory": target.setClientPipelineFactory(property(camelContext, org.apache.camel.component.netty.ClientInitializerFactory.class, value)); return true;
        case "connecttimeout":
        case "connectTimeout": target.setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "correlationmanager":
        case "correlationManager": target.setCorrelationManager(property(camelContext, org.apache.camel.component.netty.NettyCamelStateCorrelationManager.class, value)); return true;
        case "decodermaxlinelength":
        case "decoderMaxLineLength": target.setDecoderMaxLineLength(property(camelContext, int.class, value)); return true;
        case "decoders": target.setDecoders(property(camelContext, java.lang.String.class, value)); return true;
        case "decodersaslist":
        case "decodersAsList": target.setDecodersAsList(property(camelContext, java.util.List.class, value)); return true;
        case "delimiter": target.setDelimiter(property(camelContext, org.apache.camel.component.netty.TextLineDelimiter.class, value)); return true;
        case "disconnect": target.setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "disconnectonnoreply":
        case "disconnectOnNoReply": target.setDisconnectOnNoReply(property(camelContext, boolean.class, value)); return true;
        case "enabledprotocols":
        case "enabledProtocols": target.setEnabledProtocols(property(camelContext, java.lang.String.class, value)); return true;
        case "encoders": target.setEncoders(property(camelContext, java.lang.String.class, value)); return true;
        case "encodersaslist":
        case "encodersAsList": target.setEncodersAsList(property(camelContext, java.util.List.class, value)); return true;
        case "encoding": target.setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "host": target.setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "hostnameverification":
        case "hostnameVerification": target.setHostnameVerification(property(camelContext, boolean.class, value)); return true;
        case "keepalive":
        case "keepAlive": target.setKeepAlive(property(camelContext, boolean.class, value)); return true;
        case "keystorefile":
        case "keyStoreFile": target.setKeyStoreFile(property(camelContext, java.io.File.class, value)); return true;
        case "keystoreformat":
        case "keyStoreFormat": target.setKeyStoreFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "keystoreresource":
        case "keyStoreResource": target.setKeyStoreResource(property(camelContext, java.lang.String.class, value)); return true;
        case "lazychannelcreation":
        case "lazyChannelCreation": target.setLazyChannelCreation(property(camelContext, boolean.class, value)); return true;
        case "nativetransport":
        case "nativeTransport": target.setNativeTransport(property(camelContext, boolean.class, value)); return true;
        case "needclientauth":
        case "needClientAuth": target.setNeedClientAuth(property(camelContext, boolean.class, value)); return true;
        case "nettyserverbootstrapfactory":
        case "nettyServerBootstrapFactory": target.setNettyServerBootstrapFactory(property(camelContext, org.apache.camel.component.netty.NettyServerBootstrapFactory.class, value)); return true;
        case "networkinterface":
        case "networkInterface": target.setNetworkInterface(property(camelContext, java.lang.String.class, value)); return true;
        case "noreplyloglevel":
        case "noReplyLogLevel": target.setNoReplyLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "options": target.setOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "passphrase": target.setPassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "port": target.setPort(property(camelContext, int.class, value)); return true;
        case "producerpoolblockwhenexhausted":
        case "producerPoolBlockWhenExhausted": target.setProducerPoolBlockWhenExhausted(property(camelContext, boolean.class, value)); return true;
        case "producerpoolenabled":
        case "producerPoolEnabled": target.setProducerPoolEnabled(property(camelContext, boolean.class, value)); return true;
        case "producerpoolmaxidle":
        case "producerPoolMaxIdle": target.setProducerPoolMaxIdle(property(camelContext, int.class, value)); return true;
        case "producerpoolmaxtotal":
        case "producerPoolMaxTotal": target.setProducerPoolMaxTotal(property(camelContext, int.class, value)); return true;
        case "producerpoolmaxwait":
        case "producerPoolMaxWait": target.setProducerPoolMaxWait(property(camelContext, long.class, value)); return true;
        case "producerpoolminevictableidle":
        case "producerPoolMinEvictableIdle": target.setProducerPoolMinEvictableIdle(property(camelContext, long.class, value)); return true;
        case "producerpoolminidle":
        case "producerPoolMinIdle": target.setProducerPoolMinIdle(property(camelContext, int.class, value)); return true;
        case "protocol": target.setProtocol(property(camelContext, java.lang.String.class, value)); return true;
        case "receivebuffersize":
        case "receiveBufferSize": target.setReceiveBufferSize(property(camelContext, int.class, value)); return true;
        case "receivebuffersizepredictor":
        case "receiveBufferSizePredictor": target.setReceiveBufferSizePredictor(property(camelContext, int.class, value)); return true;
        case "reconnect": target.setReconnect(property(camelContext, boolean.class, value)); return true;
        case "reconnectinterval":
        case "reconnectInterval": target.setReconnectInterval(property(camelContext, int.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.setRequestTimeout(property(camelContext, long.class, value)); return true;
        case "reuseaddress":
        case "reuseAddress": target.setReuseAddress(property(camelContext, boolean.class, value)); return true;
        case "reusechannel":
        case "reuseChannel": target.setReuseChannel(property(camelContext, boolean.class, value)); return true;
        case "securityprovider":
        case "securityProvider": target.setSecurityProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "sendbuffersize":
        case "sendBufferSize": target.setSendBufferSize(property(camelContext, int.class, value)); return true;
        case "serverclosedchannelexceptioncaughtloglevel":
        case "serverClosedChannelExceptionCaughtLogLevel": target.setServerClosedChannelExceptionCaughtLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "serverexceptioncaughtloglevel":
        case "serverExceptionCaughtLogLevel": target.setServerExceptionCaughtLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "serverinitializerfactory":
        case "serverInitializerFactory": target.setServerInitializerFactory(property(camelContext, org.apache.camel.component.netty.ServerInitializerFactory.class, value)); return true;
        case "serverpipelinefactory":
        case "serverPipelineFactory": target.setServerPipelineFactory(property(camelContext, org.apache.camel.component.netty.ServerInitializerFactory.class, value)); return true;
        case "ssl": target.setSsl(property(camelContext, boolean.class, value)); return true;
        case "sslclientcertheaders":
        case "sslClientCertHeaders": target.setSslClientCertHeaders(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "sslhandler":
        case "sslHandler": target.setSslHandler(property(camelContext, io.netty.handler.ssl.SslHandler.class, value)); return true;
        case "sync": target.setSync(property(camelContext, boolean.class, value)); return true;
        case "tcpnodelay":
        case "tcpNoDelay": target.setTcpNoDelay(property(camelContext, boolean.class, value)); return true;
        case "textline": target.setTextline(property(camelContext, boolean.class, value)); return true;
        case "transferexchange":
        case "transferExchange": target.setTransferExchange(property(camelContext, boolean.class, value)); return true;
        case "truststorefile":
        case "trustStoreFile": target.setTrustStoreFile(property(camelContext, java.io.File.class, value)); return true;
        case "truststoreresource":
        case "trustStoreResource": target.setTrustStoreResource(property(camelContext, java.lang.String.class, value)); return true;
        case "udpbytearraycodec":
        case "udpByteArrayCodec": target.setUdpByteArrayCodec(property(camelContext, boolean.class, value)); return true;
        case "udpconnectionlesssending":
        case "udpConnectionlessSending": target.setUdpConnectionlessSending(property(camelContext, boolean.class, value)); return true;
        case "unixdomainsocketpath":
        case "unixDomainSocketPath": target.setUnixDomainSocketPath(property(camelContext, java.lang.String.class, value)); return true;
        case "usebytebuf":
        case "useByteBuf": target.setUseByteBuf(property(camelContext, boolean.class, value)); return true;
        case "usingexecutorservice":
        case "usingExecutorService": target.setUsingExecutorService(property(camelContext, boolean.class, value)); return true;
        case "workercount":
        case "workerCount": target.setWorkerCount(property(camelContext, int.class, value)); return true;
        case "workergroup":
        case "workerGroup": target.setWorkerGroup(property(camelContext, io.netty.channel.EventLoopGroup.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowdefaultcodec":
        case "allowDefaultCodec": return boolean.class;
        case "allowserializedheaders":
        case "allowSerializedHeaders": return boolean.class;
        case "autoappenddelimiter":
        case "autoAppendDelimiter": return boolean.class;
        case "backlog": return int.class;
        case "bosscount":
        case "bossCount": return int.class;
        case "bossgroup":
        case "bossGroup": return io.netty.channel.EventLoopGroup.class;
        case "broadcast": return boolean.class;
        case "channelgroup":
        case "channelGroup": return io.netty.channel.group.ChannelGroup.class;
        case "clientinitializerfactory":
        case "clientInitializerFactory": return org.apache.camel.component.netty.ClientInitializerFactory.class;
        case "clientmode":
        case "clientMode": return boolean.class;
        case "clientpipelinefactory":
        case "clientPipelineFactory": return org.apache.camel.component.netty.ClientInitializerFactory.class;
        case "connecttimeout":
        case "connectTimeout": return int.class;
        case "correlationmanager":
        case "correlationManager": return org.apache.camel.component.netty.NettyCamelStateCorrelationManager.class;
        case "decodermaxlinelength":
        case "decoderMaxLineLength": return int.class;
        case "decoders": return java.lang.String.class;
        case "decodersaslist":
        case "decodersAsList": return java.util.List.class;
        case "delimiter": return org.apache.camel.component.netty.TextLineDelimiter.class;
        case "disconnect": return boolean.class;
        case "disconnectonnoreply":
        case "disconnectOnNoReply": return boolean.class;
        case "enabledprotocols":
        case "enabledProtocols": return java.lang.String.class;
        case "encoders": return java.lang.String.class;
        case "encodersaslist":
        case "encodersAsList": return java.util.List.class;
        case "encoding": return java.lang.String.class;
        case "host": return java.lang.String.class;
        case "hostnameverification":
        case "hostnameVerification": return boolean.class;
        case "keepalive":
        case "keepAlive": return boolean.class;
        case "keystorefile":
        case "keyStoreFile": return java.io.File.class;
        case "keystoreformat":
        case "keyStoreFormat": return java.lang.String.class;
        case "keystoreresource":
        case "keyStoreResource": return java.lang.String.class;
        case "lazychannelcreation":
        case "lazyChannelCreation": return boolean.class;
        case "nativetransport":
        case "nativeTransport": return boolean.class;
        case "needclientauth":
        case "needClientAuth": return boolean.class;
        case "nettyserverbootstrapfactory":
        case "nettyServerBootstrapFactory": return org.apache.camel.component.netty.NettyServerBootstrapFactory.class;
        case "networkinterface":
        case "networkInterface": return java.lang.String.class;
        case "noreplyloglevel":
        case "noReplyLogLevel": return org.apache.camel.LoggingLevel.class;
        case "options": return java.util.Map.class;
        case "passphrase": return java.lang.String.class;
        case "port": return int.class;
        case "producerpoolblockwhenexhausted":
        case "producerPoolBlockWhenExhausted": return boolean.class;
        case "producerpoolenabled":
        case "producerPoolEnabled": return boolean.class;
        case "producerpoolmaxidle":
        case "producerPoolMaxIdle": return int.class;
        case "producerpoolmaxtotal":
        case "producerPoolMaxTotal": return int.class;
        case "producerpoolmaxwait":
        case "producerPoolMaxWait": return long.class;
        case "producerpoolminevictableidle":
        case "producerPoolMinEvictableIdle": return long.class;
        case "producerpoolminidle":
        case "producerPoolMinIdle": return int.class;
        case "protocol": return java.lang.String.class;
        case "receivebuffersize":
        case "receiveBufferSize": return int.class;
        case "receivebuffersizepredictor":
        case "receiveBufferSizePredictor": return int.class;
        case "reconnect": return boolean.class;
        case "reconnectinterval":
        case "reconnectInterval": return int.class;
        case "requesttimeout":
        case "requestTimeout": return long.class;
        case "reuseaddress":
        case "reuseAddress": return boolean.class;
        case "reusechannel":
        case "reuseChannel": return boolean.class;
        case "securityprovider":
        case "securityProvider": return java.lang.String.class;
        case "sendbuffersize":
        case "sendBufferSize": return int.class;
        case "serverclosedchannelexceptioncaughtloglevel":
        case "serverClosedChannelExceptionCaughtLogLevel": return org.apache.camel.LoggingLevel.class;
        case "serverexceptioncaughtloglevel":
        case "serverExceptionCaughtLogLevel": return org.apache.camel.LoggingLevel.class;
        case "serverinitializerfactory":
        case "serverInitializerFactory": return org.apache.camel.component.netty.ServerInitializerFactory.class;
        case "serverpipelinefactory":
        case "serverPipelineFactory": return org.apache.camel.component.netty.ServerInitializerFactory.class;
        case "ssl": return boolean.class;
        case "sslclientcertheaders":
        case "sslClientCertHeaders": return boolean.class;
        case "sslcontextparameters":
        case "sslContextParameters": return org.apache.camel.support.jsse.SSLContextParameters.class;
        case "sslhandler":
        case "sslHandler": return io.netty.handler.ssl.SslHandler.class;
        case "sync": return boolean.class;
        case "tcpnodelay":
        case "tcpNoDelay": return boolean.class;
        case "textline": return boolean.class;
        case "transferexchange":
        case "transferExchange": return boolean.class;
        case "truststorefile":
        case "trustStoreFile": return java.io.File.class;
        case "truststoreresource":
        case "trustStoreResource": return java.lang.String.class;
        case "udpbytearraycodec":
        case "udpByteArrayCodec": return boolean.class;
        case "udpconnectionlesssending":
        case "udpConnectionlessSending": return boolean.class;
        case "unixdomainsocketpath":
        case "unixDomainSocketPath": return java.lang.String.class;
        case "usebytebuf":
        case "useByteBuf": return boolean.class;
        case "usingexecutorservice":
        case "usingExecutorService": return boolean.class;
        case "workercount":
        case "workerCount": return int.class;
        case "workergroup":
        case "workerGroup": return io.netty.channel.EventLoopGroup.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.netty.NettyConfiguration target = (org.apache.camel.component.netty.NettyConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowdefaultcodec":
        case "allowDefaultCodec": return target.isAllowDefaultCodec();
        case "allowserializedheaders":
        case "allowSerializedHeaders": return target.isAllowSerializedHeaders();
        case "autoappenddelimiter":
        case "autoAppendDelimiter": return target.isAutoAppendDelimiter();
        case "backlog": return target.getBacklog();
        case "bosscount":
        case "bossCount": return target.getBossCount();
        case "bossgroup":
        case "bossGroup": return target.getBossGroup();
        case "broadcast": return target.isBroadcast();
        case "channelgroup":
        case "channelGroup": return target.getChannelGroup();
        case "clientinitializerfactory":
        case "clientInitializerFactory": return target.getClientInitializerFactory();
        case "clientmode":
        case "clientMode": return target.isClientMode();
        case "clientpipelinefactory":
        case "clientPipelineFactory": return target.getClientPipelineFactory();
        case "connecttimeout":
        case "connectTimeout": return target.getConnectTimeout();
        case "correlationmanager":
        case "correlationManager": return target.getCorrelationManager();
        case "decodermaxlinelength":
        case "decoderMaxLineLength": return target.getDecoderMaxLineLength();
        case "decoders": return target.getDecoders();
        case "decodersaslist":
        case "decodersAsList": return target.getDecodersAsList();
        case "delimiter": return target.getDelimiter();
        case "disconnect": return target.isDisconnect();
        case "disconnectonnoreply":
        case "disconnectOnNoReply": return target.isDisconnectOnNoReply();
        case "enabledprotocols":
        case "enabledProtocols": return target.getEnabledProtocols();
        case "encoders": return target.getEncoders();
        case "encodersaslist":
        case "encodersAsList": return target.getEncodersAsList();
        case "encoding": return target.getEncoding();
        case "host": return target.getHost();
        case "hostnameverification":
        case "hostnameVerification": return target.isHostnameVerification();
        case "keepalive":
        case "keepAlive": return target.isKeepAlive();
        case "keystorefile":
        case "keyStoreFile": return target.getKeyStoreFile();
        case "keystoreformat":
        case "keyStoreFormat": return target.getKeyStoreFormat();
        case "keystoreresource":
        case "keyStoreResource": return target.getKeyStoreResource();
        case "lazychannelcreation":
        case "lazyChannelCreation": return target.isLazyChannelCreation();
        case "nativetransport":
        case "nativeTransport": return target.isNativeTransport();
        case "needclientauth":
        case "needClientAuth": return target.isNeedClientAuth();
        case "nettyserverbootstrapfactory":
        case "nettyServerBootstrapFactory": return target.getNettyServerBootstrapFactory();
        case "networkinterface":
        case "networkInterface": return target.getNetworkInterface();
        case "noreplyloglevel":
        case "noReplyLogLevel": return target.getNoReplyLogLevel();
        case "options": return target.getOptions();
        case "passphrase": return target.getPassphrase();
        case "port": return target.getPort();
        case "producerpoolblockwhenexhausted":
        case "producerPoolBlockWhenExhausted": return target.isProducerPoolBlockWhenExhausted();
        case "producerpoolenabled":
        case "producerPoolEnabled": return target.isProducerPoolEnabled();
        case "producerpoolmaxidle":
        case "producerPoolMaxIdle": return target.getProducerPoolMaxIdle();
        case "producerpoolmaxtotal":
        case "producerPoolMaxTotal": return target.getProducerPoolMaxTotal();
        case "producerpoolmaxwait":
        case "producerPoolMaxWait": return target.getProducerPoolMaxWait();
        case "producerpoolminevictableidle":
        case "producerPoolMinEvictableIdle": return target.getProducerPoolMinEvictableIdle();
        case "producerpoolminidle":
        case "producerPoolMinIdle": return target.getProducerPoolMinIdle();
        case "protocol": return target.getProtocol();
        case "receivebuffersize":
        case "receiveBufferSize": return target.getReceiveBufferSize();
        case "receivebuffersizepredictor":
        case "receiveBufferSizePredictor": return target.getReceiveBufferSizePredictor();
        case "reconnect": return target.isReconnect();
        case "reconnectinterval":
        case "reconnectInterval": return target.getReconnectInterval();
        case "requesttimeout":
        case "requestTimeout": return target.getRequestTimeout();
        case "reuseaddress":
        case "reuseAddress": return target.isReuseAddress();
        case "reusechannel":
        case "reuseChannel": return target.isReuseChannel();
        case "securityprovider":
        case "securityProvider": return target.getSecurityProvider();
        case "sendbuffersize":
        case "sendBufferSize": return target.getSendBufferSize();
        case "serverclosedchannelexceptioncaughtloglevel":
        case "serverClosedChannelExceptionCaughtLogLevel": return target.getServerClosedChannelExceptionCaughtLogLevel();
        case "serverexceptioncaughtloglevel":
        case "serverExceptionCaughtLogLevel": return target.getServerExceptionCaughtLogLevel();
        case "serverinitializerfactory":
        case "serverInitializerFactory": return target.getServerInitializerFactory();
        case "serverpipelinefactory":
        case "serverPipelineFactory": return target.getServerPipelineFactory();
        case "ssl": return target.isSsl();
        case "sslclientcertheaders":
        case "sslClientCertHeaders": return target.isSslClientCertHeaders();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getSslContextParameters();
        case "sslhandler":
        case "sslHandler": return target.getSslHandler();
        case "sync": return target.isSync();
        case "tcpnodelay":
        case "tcpNoDelay": return target.isTcpNoDelay();
        case "textline": return target.isTextline();
        case "transferexchange":
        case "transferExchange": return target.isTransferExchange();
        case "truststorefile":
        case "trustStoreFile": return target.getTrustStoreFile();
        case "truststoreresource":
        case "trustStoreResource": return target.getTrustStoreResource();
        case "udpbytearraycodec":
        case "udpByteArrayCodec": return target.isUdpByteArrayCodec();
        case "udpconnectionlesssending":
        case "udpConnectionlessSending": return target.isUdpConnectionlessSending();
        case "unixdomainsocketpath":
        case "unixDomainSocketPath": return target.getUnixDomainSocketPath();
        case "usebytebuf":
        case "useByteBuf": return target.isUseByteBuf();
        case "usingexecutorservice":
        case "usingExecutorService": return target.isUsingExecutorService();
        case "workercount":
        case "workerCount": return target.getWorkerCount();
        case "workergroup":
        case "workerGroup": return target.getWorkerGroup();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "decodersaslist":
        case "decodersAsList": return io.netty.channel.ChannelHandler.class;
        case "encodersaslist":
        case "encodersAsList": return io.netty.channel.ChannelHandler.class;
        case "options": return java.lang.Object.class;
        default: return null;
        }
    }
}

