/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.cbor;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.cbor.CBORDataFormat;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class CBORDataFormatConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("AllowJmsType", boolean.class);
        map.put("AllowUnmarshallType", boolean.class);
        map.put("CollectionType", java.lang.Class.class);
        map.put("DisableFeatures", java.lang.String.class);
        map.put("EnableFeatures", java.lang.String.class);
        map.put("ObjectMapper", com.fasterxml.jackson.databind.ObjectMapper.class);
        map.put("PrettyPrint", boolean.class);
        map.put("UnmarshalType", java.lang.Class.class);
        map.put("UseDefaultObjectMapper", boolean.class);
        map.put("UseList", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        CBORDataFormat target = (CBORDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowjmstype":
        case "allowJmsType": target.setAllowJmsType(property(camelContext, boolean.class, value)); return true;
        case "allowunmarshalltype":
        case "allowUnmarshallType": target.setAllowUnmarshallType(property(camelContext, boolean.class, value)); return true;
        case "collectiontype":
        case "collectionType": target.setCollectionType(property(camelContext, java.lang.Class.class, value)); return true;
        case "disablefeatures":
        case "disableFeatures": target.setDisableFeatures(property(camelContext, java.lang.String.class, value)); return true;
        case "enablefeatures":
        case "enableFeatures": target.setEnableFeatures(property(camelContext, java.lang.String.class, value)); return true;
        case "objectmapper":
        case "objectMapper": target.setObjectMapper(property(camelContext, com.fasterxml.jackson.databind.ObjectMapper.class, value)); return true;
        case "prettyprint":
        case "prettyPrint": target.setPrettyPrint(property(camelContext, boolean.class, value)); return true;
        case "unmarshaltype":
        case "unmarshalType": target.setUnmarshalType(property(camelContext, java.lang.Class.class, value)); return true;
        case "usedefaultobjectmapper":
        case "useDefaultObjectMapper": target.setUseDefaultObjectMapper(property(camelContext, boolean.class, value)); return true;
        case "uselist":
        case "useList": target.setUseList(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowjmstype":
        case "allowJmsType": return boolean.class;
        case "allowunmarshalltype":
        case "allowUnmarshallType": return boolean.class;
        case "collectiontype":
        case "collectionType": return java.lang.Class.class;
        case "disablefeatures":
        case "disableFeatures": return java.lang.String.class;
        case "enablefeatures":
        case "enableFeatures": return java.lang.String.class;
        case "objectmapper":
        case "objectMapper": return com.fasterxml.jackson.databind.ObjectMapper.class;
        case "prettyprint":
        case "prettyPrint": return boolean.class;
        case "unmarshaltype":
        case "unmarshalType": return java.lang.Class.class;
        case "usedefaultobjectmapper":
        case "useDefaultObjectMapper": return boolean.class;
        case "uselist":
        case "useList": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        CBORDataFormat target = (CBORDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowjmstype":
        case "allowJmsType": return target.isAllowJmsType();
        case "allowunmarshalltype":
        case "allowUnmarshallType": return target.isAllowUnmarshallType();
        case "collectiontype":
        case "collectionType": return target.getCollectionType();
        case "disablefeatures":
        case "disableFeatures": return target.getDisableFeatures();
        case "enablefeatures":
        case "enableFeatures": return target.getEnableFeatures();
        case "objectmapper":
        case "objectMapper": return target.getObjectMapper();
        case "prettyprint":
        case "prettyPrint": return target.isPrettyPrint();
        case "unmarshaltype":
        case "unmarshalType": return target.getUnmarshalType();
        case "usedefaultobjectmapper":
        case "useDefaultObjectMapper": return target.isUseDefaultObjectMapper();
        case "uselist":
        case "useList": return target.isUseList();
        default: return null;
        }
    }
}

