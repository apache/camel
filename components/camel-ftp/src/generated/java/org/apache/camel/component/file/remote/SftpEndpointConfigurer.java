/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.file.remote;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SftpEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "charset": ((SftpEndpoint) target).setCharset(property(camelContext, java.lang.String.class, value)); return true;
        case "disconnect": ((SftpEndpoint) target).setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "doneFileName": ((SftpEndpoint) target).setDoneFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "fileName": ((SftpEndpoint) target).setFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "jschLoggingLevel": ((SftpEndpoint) target).getConfiguration().setJschLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "separator": ((SftpEndpoint) target).getConfiguration().setSeparator(property(camelContext, org.apache.camel.component.file.remote.RemoteFileConfiguration.PathSeparator.class, value)); return true;
        case "fastExistsCheck": ((SftpEndpoint) target).setFastExistsCheck(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((SftpEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "delete": ((SftpEndpoint) target).setDelete(property(camelContext, boolean.class, value)); return true;
        case "moveFailed": ((SftpEndpoint) target).setMoveFailed(property(camelContext, java.lang.String.class, value)); return true;
        case "noop": ((SftpEndpoint) target).setNoop(property(camelContext, boolean.class, value)); return true;
        case "preMove": ((SftpEndpoint) target).setPreMove(property(camelContext, java.lang.String.class, value)); return true;
        case "preSort": ((SftpEndpoint) target).setPreSort(property(camelContext, boolean.class, value)); return true;
        case "recursive": ((SftpEndpoint) target).setRecursive(property(camelContext, boolean.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((SftpEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "streamDownload": ((SftpEndpoint) target).getConfiguration().setStreamDownload(property(camelContext, boolean.class, value)); return true;
        case "download": ((SftpEndpoint) target).setDownload(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((SftpEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((SftpEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "ignoreFileNotFoundOrPermissionError": ((SftpEndpoint) target).getConfiguration().setIgnoreFileNotFoundOrPermissionError(property(camelContext, boolean.class, value)); return true;
        case "inProgressRepository": ((SftpEndpoint) target).setInProgressRepository(property(camelContext, org.apache.camel.spi.IdempotentRepository.class, value)); return true;
        case "localWorkDirectory": ((SftpEndpoint) target).setLocalWorkDirectory(property(camelContext, java.lang.String.class, value)); return true;
        case "onCompletionExceptionHandler": ((SftpEndpoint) target).setOnCompletionExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "pollStrategy": ((SftpEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "processStrategy": ((SftpEndpoint) target).setProcessStrategy(property(camelContext, org.apache.camel.component.file.GenericFileProcessStrategy.class, value)); return true;
        case "useList": ((SftpEndpoint) target).getConfiguration().setUseList(property(camelContext, boolean.class, value)); return true;
        case "fileExist": ((SftpEndpoint) target).setFileExist(property(camelContext, org.apache.camel.component.file.GenericFileExist.class, value)); return true;
        case "flatten": ((SftpEndpoint) target).setFlatten(property(camelContext, boolean.class, value)); return true;
        case "jailStartingDirectory": ((SftpEndpoint) target).setJailStartingDirectory(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((SftpEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "moveExisting": ((SftpEndpoint) target).setMoveExisting(property(camelContext, java.lang.String.class, value)); return true;
        case "tempFileName": ((SftpEndpoint) target).setTempFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "tempPrefix": ((SftpEndpoint) target).setTempPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "allowNullBody": ((SftpEndpoint) target).setAllowNullBody(property(camelContext, boolean.class, value)); return true;
        case "chmod": ((SftpEndpoint) target).getConfiguration().setChmod(property(camelContext, java.lang.String.class, value)); return true;
        case "disconnectOnBatchComplete": ((SftpEndpoint) target).setDisconnectOnBatchComplete(property(camelContext, boolean.class, value)); return true;
        case "eagerDeleteTargetFile": ((SftpEndpoint) target).setEagerDeleteTargetFile(property(camelContext, boolean.class, value)); return true;
        case "keepLastModified": ((SftpEndpoint) target).setKeepLastModified(property(camelContext, boolean.class, value)); return true;
        case "moveExistingFileStrategy": ((SftpEndpoint) target).setMoveExistingFileStrategy(property(camelContext, org.apache.camel.component.file.strategy.FileMoveExistingStrategy.class, value)); return true;
        case "sendNoop": ((SftpEndpoint) target).getConfiguration().setSendNoop(property(camelContext, boolean.class, value)); return true;
        case "autoCreate": ((SftpEndpoint) target).setAutoCreate(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((SftpEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bindAddress": ((SftpEndpoint) target).getConfiguration().setBindAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "bulkRequests": ((SftpEndpoint) target).getConfiguration().setBulkRequests(property(camelContext, java.lang.Integer.class, value)); return true;
        case "compression": ((SftpEndpoint) target).getConfiguration().setCompression(property(camelContext, int.class, value)); return true;
        case "connectTimeout": ((SftpEndpoint) target).getConfiguration().setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "maximumReconnectAttempts": ((SftpEndpoint) target).setMaximumReconnectAttempts(property(camelContext, int.class, value)); return true;
        case "proxy": ((SftpEndpoint) target).setProxy(property(camelContext, com.jcraft.jsch.Proxy.class, value)); return true;
        case "reconnectDelay": ((SftpEndpoint) target).setReconnectDelay(property(camelContext, long.class, value)); return true;
        case "serverAliveCountMax": ((SftpEndpoint) target).getConfiguration().setServerAliveCountMax(property(camelContext, int.class, value)); return true;
        case "serverAliveInterval": ((SftpEndpoint) target).getConfiguration().setServerAliveInterval(property(camelContext, int.class, value)); return true;
        case "soTimeout": ((SftpEndpoint) target).getConfiguration().setSoTimeout(property(camelContext, int.class, value)); return true;
        case "stepwise": ((SftpEndpoint) target).getConfiguration().setStepwise(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((SftpEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "throwExceptionOnConnectFailed": ((SftpEndpoint) target).getConfiguration().setThrowExceptionOnConnectFailed(property(camelContext, boolean.class, value)); return true;
        case "timeout": ((SftpEndpoint) target).getConfiguration().setTimeout(property(camelContext, int.class, value)); return true;
        case "antExclude": ((SftpEndpoint) target).setAntExclude(property(camelContext, java.lang.String.class, value)); return true;
        case "antFilterCaseSensitive": ((SftpEndpoint) target).setAntFilterCaseSensitive(property(camelContext, boolean.class, value)); return true;
        case "antInclude": ((SftpEndpoint) target).setAntInclude(property(camelContext, java.lang.String.class, value)); return true;
        case "eagerMaxMessagesPerPoll": ((SftpEndpoint) target).setEagerMaxMessagesPerPoll(property(camelContext, boolean.class, value)); return true;
        case "exclude": ((SftpEndpoint) target).setExclude(property(camelContext, java.lang.String.class, value)); return true;
        case "filter": ((SftpEndpoint) target).setFilter(property(camelContext, org.apache.camel.component.file.GenericFileFilter.class, value)); return true;
        case "filterDirectory": ((SftpEndpoint) target).setFilterDirectory(property(camelContext, java.lang.String.class, value)); return true;
        case "filterFile": ((SftpEndpoint) target).setFilterFile(property(camelContext, java.lang.String.class, value)); return true;
        case "idempotent": ((SftpEndpoint) target).setIdempotent(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "idempotentKey": ((SftpEndpoint) target).setIdempotentKey(property(camelContext, java.lang.String.class, value)); return true;
        case "idempotentRepository": ((SftpEndpoint) target).setIdempotentRepository(property(camelContext, org.apache.camel.spi.IdempotentRepository.class, value)); return true;
        case "include": ((SftpEndpoint) target).setInclude(property(camelContext, java.lang.String.class, value)); return true;
        case "maxDepth": ((SftpEndpoint) target).setMaxDepth(property(camelContext, int.class, value)); return true;
        case "maxMessagesPerPoll": ((SftpEndpoint) target).setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "minDepth": ((SftpEndpoint) target).setMinDepth(property(camelContext, int.class, value)); return true;
        case "move": ((SftpEndpoint) target).setMove(property(camelContext, java.lang.String.class, value)); return true;
        case "exclusiveReadLockStrategy": ((SftpEndpoint) target).setExclusiveReadLockStrategy(property(camelContext, org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy.class, value)); return true;
        case "readLock": ((SftpEndpoint) target).setReadLock(property(camelContext, java.lang.String.class, value)); return true;
        case "readLockCheckInterval": ((SftpEndpoint) target).setReadLockCheckInterval(property(camelContext, long.class, value)); return true;
        case "readLockDeleteOrphanLockFiles": ((SftpEndpoint) target).setReadLockDeleteOrphanLockFiles(property(camelContext, boolean.class, value)); return true;
        case "readLockIdempotentReleaseAsync": ((SftpEndpoint) target).setReadLockIdempotentReleaseAsync(property(camelContext, boolean.class, value)); return true;
        case "readLockIdempotentReleaseAsyncPoolSize": ((SftpEndpoint) target).setReadLockIdempotentReleaseAsyncPoolSize(property(camelContext, int.class, value)); return true;
        case "readLockIdempotentReleaseDelay": ((SftpEndpoint) target).setReadLockIdempotentReleaseDelay(property(camelContext, int.class, value)); return true;
        case "readLockIdempotentReleaseExecutorService": ((SftpEndpoint) target).setReadLockIdempotentReleaseExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "readLockLoggingLevel": ((SftpEndpoint) target).setReadLockLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "readLockMarkerFile": ((SftpEndpoint) target).setReadLockMarkerFile(property(camelContext, boolean.class, value)); return true;
        case "readLockMinAge": ((SftpEndpoint) target).setReadLockMinAge(property(camelContext, long.class, value)); return true;
        case "readLockMinLength": ((SftpEndpoint) target).setReadLockMinLength(property(camelContext, long.class, value)); return true;
        case "readLockRemoveOnCommit": ((SftpEndpoint) target).setReadLockRemoveOnCommit(property(camelContext, boolean.class, value)); return true;
        case "readLockRemoveOnRollback": ((SftpEndpoint) target).setReadLockRemoveOnRollback(property(camelContext, boolean.class, value)); return true;
        case "readLockTimeout": ((SftpEndpoint) target).setReadLockTimeout(property(camelContext, long.class, value)); return true;
        case "backoffErrorThreshold": ((SftpEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((SftpEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((SftpEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((SftpEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((SftpEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((SftpEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((SftpEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((SftpEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((SftpEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((SftpEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((SftpEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((SftpEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((SftpEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((SftpEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "shuffle": ((SftpEndpoint) target).setShuffle(property(camelContext, boolean.class, value)); return true;
        case "sortBy": ((SftpEndpoint) target).setSortBy(property(camelContext, java.lang.String.class, value)); return true;
        case "sorter": ((SftpEndpoint) target).setSorter(property(camelContext, java.util.Comparator.class, value)); return true;
        case "ciphers": ((SftpEndpoint) target).getConfiguration().setCiphers(property(camelContext, java.lang.String.class, value)); return true;
        case "keyPair": ((SftpEndpoint) target).getConfiguration().setKeyPair(property(camelContext, java.security.KeyPair.class, value)); return true;
        case "knownHosts": ((SftpEndpoint) target).getConfiguration().setKnownHosts(property(camelContext, byte[].class, value)); return true;
        case "knownHostsFile": ((SftpEndpoint) target).getConfiguration().setKnownHostsFile(property(camelContext, java.lang.String.class, value)); return true;
        case "knownHostsUri": ((SftpEndpoint) target).getConfiguration().setKnownHostsUri(property(camelContext, java.lang.String.class, value)); return true;
        case "password": ((SftpEndpoint) target).getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "preferredAuthentications": ((SftpEndpoint) target).getConfiguration().setPreferredAuthentications(property(camelContext, java.lang.String.class, value)); return true;
        case "privateKey": ((SftpEndpoint) target).getConfiguration().setPrivateKey(property(camelContext, byte[].class, value)); return true;
        case "privateKeyFile": ((SftpEndpoint) target).getConfiguration().setPrivateKeyFile(property(camelContext, java.lang.String.class, value)); return true;
        case "privateKeyPassphrase": ((SftpEndpoint) target).getConfiguration().setPrivateKeyPassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "privateKeyUri": ((SftpEndpoint) target).getConfiguration().setPrivateKeyUri(property(camelContext, java.lang.String.class, value)); return true;
        case "strictHostKeyChecking": ((SftpEndpoint) target).getConfiguration().setStrictHostKeyChecking(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((SftpEndpoint) target).getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "useUserKnownHostsFile": ((SftpEndpoint) target).getConfiguration().setUseUserKnownHostsFile(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "charset": ((SftpEndpoint) target).setCharset(property(camelContext, java.lang.String.class, value)); return true;
        case "disconnect": ((SftpEndpoint) target).setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "donefilename": ((SftpEndpoint) target).setDoneFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "filename": ((SftpEndpoint) target).setFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "jschlogginglevel": ((SftpEndpoint) target).getConfiguration().setJschLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "separator": ((SftpEndpoint) target).getConfiguration().setSeparator(property(camelContext, org.apache.camel.component.file.remote.RemoteFileConfiguration.PathSeparator.class, value)); return true;
        case "fastexistscheck": ((SftpEndpoint) target).setFastExistsCheck(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((SftpEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "delete": ((SftpEndpoint) target).setDelete(property(camelContext, boolean.class, value)); return true;
        case "movefailed": ((SftpEndpoint) target).setMoveFailed(property(camelContext, java.lang.String.class, value)); return true;
        case "noop": ((SftpEndpoint) target).setNoop(property(camelContext, boolean.class, value)); return true;
        case "premove": ((SftpEndpoint) target).setPreMove(property(camelContext, java.lang.String.class, value)); return true;
        case "presort": ((SftpEndpoint) target).setPreSort(property(camelContext, boolean.class, value)); return true;
        case "recursive": ((SftpEndpoint) target).setRecursive(property(camelContext, boolean.class, value)); return true;
        case "sendemptymessagewhenidle": ((SftpEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "streamdownload": ((SftpEndpoint) target).getConfiguration().setStreamDownload(property(camelContext, boolean.class, value)); return true;
        case "download": ((SftpEndpoint) target).setDownload(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((SftpEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((SftpEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "ignorefilenotfoundorpermissionerror": ((SftpEndpoint) target).getConfiguration().setIgnoreFileNotFoundOrPermissionError(property(camelContext, boolean.class, value)); return true;
        case "inprogressrepository": ((SftpEndpoint) target).setInProgressRepository(property(camelContext, org.apache.camel.spi.IdempotentRepository.class, value)); return true;
        case "localworkdirectory": ((SftpEndpoint) target).setLocalWorkDirectory(property(camelContext, java.lang.String.class, value)); return true;
        case "oncompletionexceptionhandler": ((SftpEndpoint) target).setOnCompletionExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "pollstrategy": ((SftpEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "processstrategy": ((SftpEndpoint) target).setProcessStrategy(property(camelContext, org.apache.camel.component.file.GenericFileProcessStrategy.class, value)); return true;
        case "uselist": ((SftpEndpoint) target).getConfiguration().setUseList(property(camelContext, boolean.class, value)); return true;
        case "fileexist": ((SftpEndpoint) target).setFileExist(property(camelContext, org.apache.camel.component.file.GenericFileExist.class, value)); return true;
        case "flatten": ((SftpEndpoint) target).setFlatten(property(camelContext, boolean.class, value)); return true;
        case "jailstartingdirectory": ((SftpEndpoint) target).setJailStartingDirectory(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((SftpEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "moveexisting": ((SftpEndpoint) target).setMoveExisting(property(camelContext, java.lang.String.class, value)); return true;
        case "tempfilename": ((SftpEndpoint) target).setTempFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "tempprefix": ((SftpEndpoint) target).setTempPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "allownullbody": ((SftpEndpoint) target).setAllowNullBody(property(camelContext, boolean.class, value)); return true;
        case "chmod": ((SftpEndpoint) target).getConfiguration().setChmod(property(camelContext, java.lang.String.class, value)); return true;
        case "disconnectonbatchcomplete": ((SftpEndpoint) target).setDisconnectOnBatchComplete(property(camelContext, boolean.class, value)); return true;
        case "eagerdeletetargetfile": ((SftpEndpoint) target).setEagerDeleteTargetFile(property(camelContext, boolean.class, value)); return true;
        case "keeplastmodified": ((SftpEndpoint) target).setKeepLastModified(property(camelContext, boolean.class, value)); return true;
        case "moveexistingfilestrategy": ((SftpEndpoint) target).setMoveExistingFileStrategy(property(camelContext, org.apache.camel.component.file.strategy.FileMoveExistingStrategy.class, value)); return true;
        case "sendnoop": ((SftpEndpoint) target).getConfiguration().setSendNoop(property(camelContext, boolean.class, value)); return true;
        case "autocreate": ((SftpEndpoint) target).setAutoCreate(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((SftpEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bindaddress": ((SftpEndpoint) target).getConfiguration().setBindAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "bulkrequests": ((SftpEndpoint) target).getConfiguration().setBulkRequests(property(camelContext, java.lang.Integer.class, value)); return true;
        case "compression": ((SftpEndpoint) target).getConfiguration().setCompression(property(camelContext, int.class, value)); return true;
        case "connecttimeout": ((SftpEndpoint) target).getConfiguration().setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "maximumreconnectattempts": ((SftpEndpoint) target).setMaximumReconnectAttempts(property(camelContext, int.class, value)); return true;
        case "proxy": ((SftpEndpoint) target).setProxy(property(camelContext, com.jcraft.jsch.Proxy.class, value)); return true;
        case "reconnectdelay": ((SftpEndpoint) target).setReconnectDelay(property(camelContext, long.class, value)); return true;
        case "serveralivecountmax": ((SftpEndpoint) target).getConfiguration().setServerAliveCountMax(property(camelContext, int.class, value)); return true;
        case "serveraliveinterval": ((SftpEndpoint) target).getConfiguration().setServerAliveInterval(property(camelContext, int.class, value)); return true;
        case "sotimeout": ((SftpEndpoint) target).getConfiguration().setSoTimeout(property(camelContext, int.class, value)); return true;
        case "stepwise": ((SftpEndpoint) target).getConfiguration().setStepwise(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((SftpEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "throwexceptiononconnectfailed": ((SftpEndpoint) target).getConfiguration().setThrowExceptionOnConnectFailed(property(camelContext, boolean.class, value)); return true;
        case "timeout": ((SftpEndpoint) target).getConfiguration().setTimeout(property(camelContext, int.class, value)); return true;
        case "antexclude": ((SftpEndpoint) target).setAntExclude(property(camelContext, java.lang.String.class, value)); return true;
        case "antfiltercasesensitive": ((SftpEndpoint) target).setAntFilterCaseSensitive(property(camelContext, boolean.class, value)); return true;
        case "antinclude": ((SftpEndpoint) target).setAntInclude(property(camelContext, java.lang.String.class, value)); return true;
        case "eagermaxmessagesperpoll": ((SftpEndpoint) target).setEagerMaxMessagesPerPoll(property(camelContext, boolean.class, value)); return true;
        case "exclude": ((SftpEndpoint) target).setExclude(property(camelContext, java.lang.String.class, value)); return true;
        case "filter": ((SftpEndpoint) target).setFilter(property(camelContext, org.apache.camel.component.file.GenericFileFilter.class, value)); return true;
        case "filterdirectory": ((SftpEndpoint) target).setFilterDirectory(property(camelContext, java.lang.String.class, value)); return true;
        case "filterfile": ((SftpEndpoint) target).setFilterFile(property(camelContext, java.lang.String.class, value)); return true;
        case "idempotent": ((SftpEndpoint) target).setIdempotent(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "idempotentkey": ((SftpEndpoint) target).setIdempotentKey(property(camelContext, java.lang.String.class, value)); return true;
        case "idempotentrepository": ((SftpEndpoint) target).setIdempotentRepository(property(camelContext, org.apache.camel.spi.IdempotentRepository.class, value)); return true;
        case "include": ((SftpEndpoint) target).setInclude(property(camelContext, java.lang.String.class, value)); return true;
        case "maxdepth": ((SftpEndpoint) target).setMaxDepth(property(camelContext, int.class, value)); return true;
        case "maxmessagesperpoll": ((SftpEndpoint) target).setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "mindepth": ((SftpEndpoint) target).setMinDepth(property(camelContext, int.class, value)); return true;
        case "move": ((SftpEndpoint) target).setMove(property(camelContext, java.lang.String.class, value)); return true;
        case "exclusivereadlockstrategy": ((SftpEndpoint) target).setExclusiveReadLockStrategy(property(camelContext, org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy.class, value)); return true;
        case "readlock": ((SftpEndpoint) target).setReadLock(property(camelContext, java.lang.String.class, value)); return true;
        case "readlockcheckinterval": ((SftpEndpoint) target).setReadLockCheckInterval(property(camelContext, long.class, value)); return true;
        case "readlockdeleteorphanlockfiles": ((SftpEndpoint) target).setReadLockDeleteOrphanLockFiles(property(camelContext, boolean.class, value)); return true;
        case "readlockidempotentreleaseasync": ((SftpEndpoint) target).setReadLockIdempotentReleaseAsync(property(camelContext, boolean.class, value)); return true;
        case "readlockidempotentreleaseasyncpoolsize": ((SftpEndpoint) target).setReadLockIdempotentReleaseAsyncPoolSize(property(camelContext, int.class, value)); return true;
        case "readlockidempotentreleasedelay": ((SftpEndpoint) target).setReadLockIdempotentReleaseDelay(property(camelContext, int.class, value)); return true;
        case "readlockidempotentreleaseexecutorservice": ((SftpEndpoint) target).setReadLockIdempotentReleaseExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "readlocklogginglevel": ((SftpEndpoint) target).setReadLockLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "readlockmarkerfile": ((SftpEndpoint) target).setReadLockMarkerFile(property(camelContext, boolean.class, value)); return true;
        case "readlockminage": ((SftpEndpoint) target).setReadLockMinAge(property(camelContext, long.class, value)); return true;
        case "readlockminlength": ((SftpEndpoint) target).setReadLockMinLength(property(camelContext, long.class, value)); return true;
        case "readlockremoveoncommit": ((SftpEndpoint) target).setReadLockRemoveOnCommit(property(camelContext, boolean.class, value)); return true;
        case "readlockremoveonrollback": ((SftpEndpoint) target).setReadLockRemoveOnRollback(property(camelContext, boolean.class, value)); return true;
        case "readlocktimeout": ((SftpEndpoint) target).setReadLockTimeout(property(camelContext, long.class, value)); return true;
        case "backofferrorthreshold": ((SftpEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((SftpEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((SftpEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((SftpEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((SftpEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((SftpEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((SftpEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((SftpEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((SftpEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((SftpEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((SftpEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((SftpEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((SftpEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((SftpEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "shuffle": ((SftpEndpoint) target).setShuffle(property(camelContext, boolean.class, value)); return true;
        case "sortby": ((SftpEndpoint) target).setSortBy(property(camelContext, java.lang.String.class, value)); return true;
        case "sorter": ((SftpEndpoint) target).setSorter(property(camelContext, java.util.Comparator.class, value)); return true;
        case "ciphers": ((SftpEndpoint) target).getConfiguration().setCiphers(property(camelContext, java.lang.String.class, value)); return true;
        case "keypair": ((SftpEndpoint) target).getConfiguration().setKeyPair(property(camelContext, java.security.KeyPair.class, value)); return true;
        case "knownhosts": ((SftpEndpoint) target).getConfiguration().setKnownHosts(property(camelContext, byte[].class, value)); return true;
        case "knownhostsfile": ((SftpEndpoint) target).getConfiguration().setKnownHostsFile(property(camelContext, java.lang.String.class, value)); return true;
        case "knownhostsuri": ((SftpEndpoint) target).getConfiguration().setKnownHostsUri(property(camelContext, java.lang.String.class, value)); return true;
        case "password": ((SftpEndpoint) target).getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "preferredauthentications": ((SftpEndpoint) target).getConfiguration().setPreferredAuthentications(property(camelContext, java.lang.String.class, value)); return true;
        case "privatekey": ((SftpEndpoint) target).getConfiguration().setPrivateKey(property(camelContext, byte[].class, value)); return true;
        case "privatekeyfile": ((SftpEndpoint) target).getConfiguration().setPrivateKeyFile(property(camelContext, java.lang.String.class, value)); return true;
        case "privatekeypassphrase": ((SftpEndpoint) target).getConfiguration().setPrivateKeyPassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "privatekeyuri": ((SftpEndpoint) target).getConfiguration().setPrivateKeyUri(property(camelContext, java.lang.String.class, value)); return true;
        case "stricthostkeychecking": ((SftpEndpoint) target).getConfiguration().setStrictHostKeyChecking(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((SftpEndpoint) target).getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "useuserknownhostsfile": ((SftpEndpoint) target).getConfiguration().setUseUserKnownHostsFile(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

