/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.file.remote;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.file.remote.FtpEndpointConfigurer;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class FtpsEndpointConfigurer extends FtpEndpointConfigurer implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("host", java.lang.String.class);
        map.put("port", int.class);
        map.put("directoryName", java.lang.String.class);
        map.put("binary", boolean.class);
        map.put("charset", java.lang.String.class);
        map.put("disconnect", boolean.class);
        map.put("doneFileName", java.lang.String.class);
        map.put("fileName", java.lang.String.class);
        map.put("passiveMode", boolean.class);
        map.put("separator", org.apache.camel.component.file.remote.RemoteFileConfiguration.PathSeparator.class);
        map.put("transferLoggingIntervalSeconds", int.class);
        map.put("transferLoggingLevel", org.apache.camel.LoggingLevel.class);
        map.put("transferLoggingVerbose", boolean.class);
        map.put("fastExistsCheck", boolean.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("delete", boolean.class);
        map.put("moveFailed", java.lang.String.class);
        map.put("noop", boolean.class);
        map.put("preMove", java.lang.String.class);
        map.put("preSort", boolean.class);
        map.put("recursive", boolean.class);
        map.put("resumeDownload", boolean.class);
        map.put("sendEmptyMessageWhenIdle", boolean.class);
        map.put("streamDownload", boolean.class);
        map.put("download", boolean.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("handleDirectoryParserAbsoluteResult", boolean.class);
        map.put("ignoreFileNotFoundOrPermissionError", boolean.class);
        map.put("inProgressRepository", org.apache.camel.spi.IdempotentRepository.class);
        map.put("localWorkDirectory", java.lang.String.class);
        map.put("onCompletionExceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("pollStrategy", org.apache.camel.spi.PollingConsumerPollStrategy.class);
        map.put("processStrategy", org.apache.camel.component.file.GenericFileProcessStrategy.class);
        map.put("useList", boolean.class);
        map.put("fileExist", org.apache.camel.component.file.GenericFileExist.class);
        map.put("flatten", boolean.class);
        map.put("jailStartingDirectory", boolean.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("moveExisting", java.lang.String.class);
        map.put("tempFileName", java.lang.String.class);
        map.put("tempPrefix", java.lang.String.class);
        map.put("allowNullBody", boolean.class);
        map.put("chmod", java.lang.String.class);
        map.put("disconnectOnBatchComplete", boolean.class);
        map.put("eagerDeleteTargetFile", boolean.class);
        map.put("keepLastModified", boolean.class);
        map.put("moveExistingFileStrategy", org.apache.camel.component.file.strategy.FileMoveExistingStrategy.class);
        map.put("sendNoop", boolean.class);
        map.put("activePortRange", java.lang.String.class);
        map.put("autoCreate", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("bufferSize", int.class);
        map.put("connectTimeout", int.class);
        map.put("ftpClient", org.apache.commons.net.ftp.FTPClient.class);
        map.put("ftpClientConfig", org.apache.commons.net.ftp.FTPClientConfig.class);
        map.put("ftpClientConfigParameters", java.util.Map.class);
        map.put("ftpClientParameters", java.util.Map.class);
        map.put("maximumReconnectAttempts", int.class);
        map.put("reconnectDelay", long.class);
        map.put("siteCommand", java.lang.String.class);
        map.put("soTimeout", int.class);
        map.put("stepwise", boolean.class);
        map.put("synchronous", boolean.class);
        map.put("throwExceptionOnConnectFailed", boolean.class);
        map.put("timeout", int.class);
        map.put("antExclude", java.lang.String.class);
        map.put("antFilterCaseSensitive", boolean.class);
        map.put("antInclude", java.lang.String.class);
        map.put("eagerMaxMessagesPerPoll", boolean.class);
        map.put("exclude", java.lang.String.class);
        map.put("filter", org.apache.camel.component.file.GenericFileFilter.class);
        map.put("filterDirectory", java.lang.String.class);
        map.put("filterFile", java.lang.String.class);
        map.put("idempotent", java.lang.Boolean.class);
        map.put("idempotentKey", java.lang.String.class);
        map.put("idempotentRepository", org.apache.camel.spi.IdempotentRepository.class);
        map.put("include", java.lang.String.class);
        map.put("maxDepth", int.class);
        map.put("maxMessagesPerPoll", int.class);
        map.put("minDepth", int.class);
        map.put("move", java.lang.String.class);
        map.put("exclusiveReadLockStrategy", org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy.class);
        map.put("readLock", java.lang.String.class);
        map.put("readLockCheckInterval", long.class);
        map.put("readLockDeleteOrphanLockFiles", boolean.class);
        map.put("readLockLoggingLevel", org.apache.camel.LoggingLevel.class);
        map.put("readLockMarkerFile", boolean.class);
        map.put("readLockMinAge", long.class);
        map.put("readLockMinLength", long.class);
        map.put("readLockRemoveOnCommit", boolean.class);
        map.put("readLockRemoveOnRollback", boolean.class);
        map.put("readLockTimeout", long.class);
        map.put("backoffErrorThreshold", int.class);
        map.put("backoffIdleThreshold", int.class);
        map.put("backoffMultiplier", int.class);
        map.put("delay", long.class);
        map.put("greedy", boolean.class);
        map.put("initialDelay", long.class);
        map.put("repeatCount", long.class);
        map.put("runLoggingLevel", org.apache.camel.LoggingLevel.class);
        map.put("scheduledExecutorService", java.util.concurrent.ScheduledExecutorService.class);
        map.put("scheduler", java.lang.Object.class);
        map.put("schedulerProperties", java.util.Map.class);
        map.put("startScheduler", boolean.class);
        map.put("timeUnit", java.util.concurrent.TimeUnit.class);
        map.put("useFixedDelay", boolean.class);
        map.put("account", java.lang.String.class);
        map.put("disableSecureDataChannelDefaults", boolean.class);
        map.put("execPbsz", java.lang.Long.class);
        map.put("execProt", java.lang.String.class);
        map.put("ftpClientKeyStoreParameters", java.util.Map.class);
        map.put("ftpClientTrustStoreParameters", java.util.Map.class);
        map.put("implicit", boolean.class);
        map.put("password", java.lang.String.class);
        map.put("securityProtocol", java.lang.String.class);
        map.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        map.put("username", java.lang.String.class);
        map.put("shuffle", boolean.class);
        map.put("sortBy", java.lang.String.class);
        map.put("sorter", java.util.Comparator.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        FtpsEndpoint target = (FtpsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "disablesecuredatachanneldefaults":
        case "disableSecureDataChannelDefaults": target.getConfiguration().setDisableSecureDataChannelDefaults(property(camelContext, boolean.class, value)); return true;
        case "execpbsz":
        case "execPbsz": target.getConfiguration().setExecPbsz(property(camelContext, java.lang.Long.class, value)); return true;
        case "execprot":
        case "execProt": target.getConfiguration().setExecProt(property(camelContext, java.lang.String.class, value)); return true;
        case "ftpclientkeystoreparameters":
        case "ftpClientKeyStoreParameters": target.setFtpClientKeyStoreParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "ftpclienttruststoreparameters":
        case "ftpClientTrustStoreParameters": target.setFtpClientTrustStoreParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "implicit": target.getConfiguration().setImplicit(property(camelContext, boolean.class, value)); return true;
        case "securityprotocol":
        case "securityProtocol": target.getConfiguration().setSecurityProtocol(property(camelContext, java.lang.String.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        default: return super.configure(camelContext, obj, name, value, ignoreCase);
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        FtpsEndpoint target = (FtpsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "disablesecuredatachanneldefaults":
        case "disableSecureDataChannelDefaults": return target.getConfiguration().isDisableSecureDataChannelDefaults();
        case "execpbsz":
        case "execPbsz": return target.getConfiguration().getExecPbsz();
        case "execprot":
        case "execProt": return target.getConfiguration().getExecProt();
        case "ftpclientkeystoreparameters":
        case "ftpClientKeyStoreParameters": return target.getFtpClientKeyStoreParameters();
        case "ftpclienttruststoreparameters":
        case "ftpClientTrustStoreParameters": return target.getFtpClientTrustStoreParameters();
        case "implicit": return target.getConfiguration().isImplicit();
        case "securityprotocol":
        case "securityProtocol": return target.getConfiguration().getSecurityProtocol();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getSslContextParameters();
        default: return super.getOptionValue(obj, name, ignoreCase);
        }
    }
}

