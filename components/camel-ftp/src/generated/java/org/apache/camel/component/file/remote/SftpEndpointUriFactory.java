/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.file.remote;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class SftpEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":host:port/directoryName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "allowNullBody", "antExclude", "antFilterCaseSensitive", "antInclude", "autoCreate", "backoffErrorThreshold",
            "backoffIdleThreshold", "backoffMultiplier", "binary", "bindAddress", "bridgeErrorHandler", "bulkRequests",
            "charset", "chmod", "chmodDirectory", "ciphers", "compression", "connectTimeout", "delay", "delete",
            "directoryName", "disconnect", "disconnectOnBatchComplete", "doneFileName", "download",
            "eagerDeleteTargetFile", "eagerMaxMessagesPerPoll", "exceptionHandler", "exchangePattern", "exclude",
            "excludeExt", "exclusiveReadLockStrategy", "existDirCheckUsingLs", "fastExistsCheck", "fileExist", "fileName",
            "filter", "filterDirectory", "filterFile", "flatten", "greedy", "host", "idempotent", "idempotentKey",
            "idempotentRepository", "ignoreFileNotFoundOrPermissionError", "inProgressRepository", "include", "includeExt",
            "initialDelay", "jailStartingDirectory", "jschLoggingLevel", "keepLastModified", "keyExchangeProtocols",
            "keyPair", "knownHosts", "knownHostsFile", "knownHostsUri", "lazyStartProducer", "localWorkDirectory",
            "maxDepth", "maxMessagesPerPoll", "maximumReconnectAttempts", "minDepth", "move", "moveExisting",
            "moveExistingFileStrategy", "moveFailed", "noop", "onCompletionExceptionHandler", "passiveMode", "password",
            "pollStrategy", "port", "preMove", "preSort", "preferredAuthentications", "privateKey", "privateKeyFile",
            "privateKeyPassphrase", "privateKeyUri", "processStrategy", "proxy", "publicKeyAcceptedAlgorithms", "readLock",
            "readLockCheckInterval", "readLockDeleteOrphanLockFiles", "readLockIdempotentReleaseAsync",
            "readLockIdempotentReleaseAsyncPoolSize", "readLockIdempotentReleaseDelay",
            "readLockIdempotentReleaseExecutorService", "readLockLoggingLevel", "readLockMarkerFile", "readLockMinAge",
            "readLockMinLength", "readLockRemoveOnCommit", "readLockRemoveOnRollback", "readLockTimeout", "reconnectDelay",
            "recursive", "repeatCount", "runLoggingLevel", "scheduledExecutorService", "scheduler", "schedulerProperties",
            "sendEmptyMessageWhenIdle", "sendNoop", "separator", "serverAliveCountMax", "serverAliveInterval",
            "serverHostKeys", "shuffle", "soTimeout", "sortBy", "sorter", "startScheduler", "stepwise", "streamDownload",
            "strictHostKeyChecking", "tempFileName", "tempPrefix", "throwExceptionOnConnectFailed", "timeUnit", "timeout",
            "useFixedDelay", "useList", "useUserKnownHostsFile", "username");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "keyPair", "knownHosts", "knownHostsFile", "knownHostsUri", "password", "privateKey", "privateKeyFile",
            "privateKeyPassphrase", "privateKeyUri", "username");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "scheduler.");

    @Override
    public boolean isEnabled(String scheme) {
        return "sftp".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "host", null, true, copy);
        uri = buildPathParameter(syntax, uri, "port", null, false, copy);
        uri = buildPathParameter(syntax, uri, "directoryName", null, false, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

