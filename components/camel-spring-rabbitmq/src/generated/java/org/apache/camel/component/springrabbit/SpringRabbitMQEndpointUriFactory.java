/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.springrabbit;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class SpringRabbitMQEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":exchangeName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "acknowledgeMode", "args", "asyncConsumer", "autoDeclare", "autoStartup", "bridgeErrorHandler",
            "concurrentConsumers", "connectionFactory", "deadLetterExchange", "deadLetterExchangeType", "deadLetterQueue",
            "deadLetterRoutingKey", "disableReplyTo", "exceptionHandler", "exchangeName", "exchangePattern",
            "exchangeType", "exclusive", "lazyStartProducer", "maxConcurrentConsumers", "maximumRetryAttempts",
            "messageConverter", "messageListenerContainerType", "messagePropertiesConverter", "noLocal", "prefetchCount",
            "queues", "rejectAndDontRequeue", "replyTimeout", "retry", "retryDelay", "routingKey", "synchronous",
            "testConnectionOnStartup", "usePublisherConnection");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of();
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "arg.");

    @Override
    public boolean isEnabled(String scheme) {
        return "spring-rabbitmq".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "exchangeName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

