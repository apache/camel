/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.nsq;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class NsqEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "servers": ((NsqEndpoint) target).getConfiguration().setServers(property(camelContext, java.lang.String.class, value)); return true;
        case "userAgent": ((NsqEndpoint) target).getConfiguration().setUserAgent(property(camelContext, java.lang.String.class, value)); return true;
        case "autoFinish": ((NsqEndpoint) target).getConfiguration().setAutoFinish(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "bridgeErrorHandler": ((NsqEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "channel": ((NsqEndpoint) target).getConfiguration().setChannel(property(camelContext, java.lang.String.class, value)); return true;
        case "lookupInterval": ((NsqEndpoint) target).getConfiguration().setLookupInterval(property(camelContext, long.class, value)); return true;
        case "lookupServerPort": ((NsqEndpoint) target).getConfiguration().setLookupServerPort(property(camelContext, int.class, value)); return true;
        case "messageTimeout": ((NsqEndpoint) target).getConfiguration().setMessageTimeout(property(camelContext, long.class, value)); return true;
        case "poolSize": ((NsqEndpoint) target).getConfiguration().setPoolSize(property(camelContext, int.class, value)); return true;
        case "requeueInterval": ((NsqEndpoint) target).getConfiguration().setRequeueInterval(property(camelContext, long.class, value)); return true;
        case "exceptionHandler": ((NsqEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((NsqEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazyStartProducer": ((NsqEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "port": ((NsqEndpoint) target).getConfiguration().setPort(property(camelContext, int.class, value)); return true;
        case "basicPropertyBinding": ((NsqEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((NsqEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "secure": ((NsqEndpoint) target).getConfiguration().setSecure(property(camelContext, boolean.class, value)); return true;
        case "sslContextParameters": ((NsqEndpoint) target).getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "servers": ((NsqEndpoint) target).getConfiguration().setServers(property(camelContext, java.lang.String.class, value)); return true;
        case "useragent": ((NsqEndpoint) target).getConfiguration().setUserAgent(property(camelContext, java.lang.String.class, value)); return true;
        case "autofinish": ((NsqEndpoint) target).getConfiguration().setAutoFinish(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "bridgeerrorhandler": ((NsqEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "channel": ((NsqEndpoint) target).getConfiguration().setChannel(property(camelContext, java.lang.String.class, value)); return true;
        case "lookupinterval": ((NsqEndpoint) target).getConfiguration().setLookupInterval(property(camelContext, long.class, value)); return true;
        case "lookupserverport": ((NsqEndpoint) target).getConfiguration().setLookupServerPort(property(camelContext, int.class, value)); return true;
        case "messagetimeout": ((NsqEndpoint) target).getConfiguration().setMessageTimeout(property(camelContext, long.class, value)); return true;
        case "poolsize": ((NsqEndpoint) target).getConfiguration().setPoolSize(property(camelContext, int.class, value)); return true;
        case "requeueinterval": ((NsqEndpoint) target).getConfiguration().setRequeueInterval(property(camelContext, long.class, value)); return true;
        case "exceptionhandler": ((NsqEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((NsqEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazystartproducer": ((NsqEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "port": ((NsqEndpoint) target).getConfiguration().setPort(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding": ((NsqEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((NsqEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "secure": ((NsqEndpoint) target).getConfiguration().setSecure(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters": ((NsqEndpoint) target).getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
            default: return false;
        }
    }

}

