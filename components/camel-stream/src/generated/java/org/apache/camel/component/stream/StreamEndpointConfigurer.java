/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.stream;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class StreamEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("kind", java.lang.String.class);
        map.put("encoding", java.lang.String.class);
        map.put("fileName", java.lang.String.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("fileWatcher", boolean.class);
        map.put("groupLines", int.class);
        map.put("groupStrategy", org.apache.camel.component.stream.GroupStrategy.class);
        map.put("initialPromptDelay", long.class);
        map.put("promptDelay", long.class);
        map.put("promptMessage", java.lang.String.class);
        map.put("retry", boolean.class);
        map.put("scanStream", boolean.class);
        map.put("scanStreamDelay", long.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("autoCloseCount", int.class);
        map.put("closeOnDone", boolean.class);
        map.put("delay", long.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("readTimeout", int.class);
        map.put("synchronous", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        StreamEndpoint target = (StreamEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autoclosecount":
        case "autoCloseCount": target.setAutoCloseCount(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "closeondone":
        case "closeOnDone": target.setCloseOnDone(property(camelContext, boolean.class, value)); return true;
        case "delay": target.setDelay(property(camelContext, long.class, value)); return true;
        case "encoding": target.setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filename":
        case "fileName": target.setFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "filewatcher":
        case "fileWatcher": target.setFileWatcher(property(camelContext, boolean.class, value)); return true;
        case "grouplines":
        case "groupLines": target.setGroupLines(property(camelContext, int.class, value)); return true;
        case "groupstrategy":
        case "groupStrategy": target.setGroupStrategy(property(camelContext, org.apache.camel.component.stream.GroupStrategy.class, value)); return true;
        case "initialpromptdelay":
        case "initialPromptDelay": target.setInitialPromptDelay(property(camelContext, long.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "promptdelay":
        case "promptDelay": target.setPromptDelay(property(camelContext, long.class, value)); return true;
        case "promptmessage":
        case "promptMessage": target.setPromptMessage(property(camelContext, java.lang.String.class, value)); return true;
        case "readtimeout":
        case "readTimeout": target.setReadTimeout(property(camelContext, int.class, value)); return true;
        case "retry": target.setRetry(property(camelContext, boolean.class, value)); return true;
        case "scanstream":
        case "scanStream": target.setScanStream(property(camelContext, boolean.class, value)); return true;
        case "scanstreamdelay":
        case "scanStreamDelay": target.setScanStreamDelay(property(camelContext, long.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        StreamEndpoint target = (StreamEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autoclosecount":
        case "autoCloseCount": return target.getAutoCloseCount();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "closeondone":
        case "closeOnDone": return target.isCloseOnDone();
        case "delay": return target.getDelay();
        case "encoding": return target.getEncoding();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "filename":
        case "fileName": return target.getFileName();
        case "filewatcher":
        case "fileWatcher": return target.isFileWatcher();
        case "grouplines":
        case "groupLines": return target.getGroupLines();
        case "groupstrategy":
        case "groupStrategy": return target.getGroupStrategy();
        case "initialpromptdelay":
        case "initialPromptDelay": return target.getInitialPromptDelay();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "promptdelay":
        case "promptDelay": return target.getPromptDelay();
        case "promptmessage":
        case "promptMessage": return target.getPromptMessage();
        case "readtimeout":
        case "readTimeout": return target.getReadTimeout();
        case "retry": return target.isRetry();
        case "scanstream":
        case "scanStream": return target.isScanStream();
        case "scanstreamdelay":
        case "scanStreamDelay": return target.getScanStreamDelay();
        case "synchronous": return target.isSynchronous();
        default: return null;
        }
    }
}

