/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.stream;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class StreamEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "encoding": ((StreamEndpoint) target).setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "fileName": ((StreamEndpoint) target).setFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((StreamEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "fileWatcher": ((StreamEndpoint) target).setFileWatcher(property(camelContext, boolean.class, value)); return true;
        case "groupLines": ((StreamEndpoint) target).setGroupLines(property(camelContext, int.class, value)); return true;
        case "groupStrategy": ((StreamEndpoint) target).setGroupStrategy(property(camelContext, org.apache.camel.component.stream.GroupStrategy.class, value)); return true;
        case "initialPromptDelay": ((StreamEndpoint) target).setInitialPromptDelay(property(camelContext, long.class, value)); return true;
        case "promptDelay": ((StreamEndpoint) target).setPromptDelay(property(camelContext, long.class, value)); return true;
        case "promptMessage": ((StreamEndpoint) target).setPromptMessage(property(camelContext, java.lang.String.class, value)); return true;
        case "retry": ((StreamEndpoint) target).setRetry(property(camelContext, boolean.class, value)); return true;
        case "scanStream": ((StreamEndpoint) target).setScanStream(property(camelContext, boolean.class, value)); return true;
        case "scanStreamDelay": ((StreamEndpoint) target).setScanStreamDelay(property(camelContext, long.class, value)); return true;
        case "exceptionHandler": ((StreamEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((StreamEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "autoCloseCount": ((StreamEndpoint) target).setAutoCloseCount(property(camelContext, int.class, value)); return true;
        case "closeOnDone": ((StreamEndpoint) target).setCloseOnDone(property(camelContext, boolean.class, value)); return true;
        case "delay": ((StreamEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "lazyStartProducer": ((StreamEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((StreamEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "readTimeout": ((StreamEndpoint) target).setReadTimeout(property(camelContext, int.class, value)); return true;
        case "synchronous": ((StreamEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "encoding": ((StreamEndpoint) target).setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "filename": ((StreamEndpoint) target).setFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((StreamEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "filewatcher": ((StreamEndpoint) target).setFileWatcher(property(camelContext, boolean.class, value)); return true;
        case "grouplines": ((StreamEndpoint) target).setGroupLines(property(camelContext, int.class, value)); return true;
        case "groupstrategy": ((StreamEndpoint) target).setGroupStrategy(property(camelContext, org.apache.camel.component.stream.GroupStrategy.class, value)); return true;
        case "initialpromptdelay": ((StreamEndpoint) target).setInitialPromptDelay(property(camelContext, long.class, value)); return true;
        case "promptdelay": ((StreamEndpoint) target).setPromptDelay(property(camelContext, long.class, value)); return true;
        case "promptmessage": ((StreamEndpoint) target).setPromptMessage(property(camelContext, java.lang.String.class, value)); return true;
        case "retry": ((StreamEndpoint) target).setRetry(property(camelContext, boolean.class, value)); return true;
        case "scanstream": ((StreamEndpoint) target).setScanStream(property(camelContext, boolean.class, value)); return true;
        case "scanstreamdelay": ((StreamEndpoint) target).setScanStreamDelay(property(camelContext, long.class, value)); return true;
        case "exceptionhandler": ((StreamEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((StreamEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "autoclosecount": ((StreamEndpoint) target).setAutoCloseCount(property(camelContext, int.class, value)); return true;
        case "closeondone": ((StreamEndpoint) target).setCloseOnDone(property(camelContext, boolean.class, value)); return true;
        case "delay": ((StreamEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "lazystartproducer": ((StreamEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((StreamEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "readtimeout": ((StreamEndpoint) target).setReadTimeout(property(camelContext, int.class, value)); return true;
        case "synchronous": ((StreamEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

