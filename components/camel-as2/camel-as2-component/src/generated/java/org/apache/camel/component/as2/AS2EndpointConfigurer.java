/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.as2;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class AS2EndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        AS2Endpoint target = (AS2Endpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "as2from":
        case "as2From": target.getConfiguration().setAs2From(property(camelContext, java.lang.String.class, value)); return true;
        case "as2messagestructure":
        case "as2MessageStructure": target.getConfiguration().setAs2MessageStructure(property(camelContext, org.apache.camel.component.as2.api.AS2MessageStructure.class, value)); return true;
        case "as2to":
        case "as2To": target.getConfiguration().setAs2To(property(camelContext, java.lang.String.class, value)); return true;
        case "as2version":
        case "as2Version": target.getConfiguration().setAs2Version(property(camelContext, java.lang.String.class, value)); return true;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "clientfqdn":
        case "clientFqdn": target.getConfiguration().setClientFqdn(property(camelContext, java.lang.String.class, value)); return true;
        case "compressionalgorithm":
        case "compressionAlgorithm": target.getConfiguration().setCompressionAlgorithm(property(camelContext, org.apache.camel.component.as2.api.AS2CompressionAlgorithm.class, value)); return true;
        case "decryptingprivatekey":
        case "decryptingPrivateKey": target.getConfiguration().setDecryptingPrivateKey(property(camelContext, java.security.PrivateKey.class, value)); return true;
        case "delay": target.setDelay(property(camelContext, long.class, value)); return true;
        case "dispositionnotificationto":
        case "dispositionNotificationTo": target.getConfiguration().setDispositionNotificationTo(property(camelContext, java.lang.String.class, value)); return true;
        case "edimessagetransferencoding":
        case "ediMessageTransferEncoding": target.getConfiguration().setEdiMessageTransferEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "edimessagetype":
        case "ediMessageType": target.getConfiguration().setEdiMessageType(property(camelContext, org.apache.http.entity.ContentType.class, value)); return true;
        case "encryptingalgorithm":
        case "encryptingAlgorithm": target.getConfiguration().setEncryptingAlgorithm(property(camelContext, org.apache.camel.component.as2.api.AS2EncryptionAlgorithm.class, value)); return true;
        case "encryptingcertificatechain":
        case "encryptingCertificateChain": target.getConfiguration().setEncryptingCertificateChain(property(camelContext, java.security.cert.Certificate[].class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "from": target.getConfiguration().setFrom(property(camelContext, java.lang.String.class, value)); return true;
        case "greedy": target.setGreedy(property(camelContext, boolean.class, value)); return true;
        case "inbody":
        case "inBody": target.setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "initialdelay":
        case "initialDelay": target.setInitialDelay(property(camelContext, long.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "mdnmessagetemplate":
        case "mdnMessageTemplate": target.getConfiguration().setMdnMessageTemplate(property(camelContext, java.lang.String.class, value)); return true;
        case "pollstrategy":
        case "pollStrategy": target.setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "repeatcount":
        case "repeatCount": target.setRepeatCount(property(camelContext, long.class, value)); return true;
        case "requesturi":
        case "requestUri": target.getConfiguration().setRequestUri(property(camelContext, java.lang.String.class, value)); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": target.setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "server": target.getConfiguration().setServer(property(camelContext, java.lang.String.class, value)); return true;
        case "serverfqdn":
        case "serverFqdn": target.getConfiguration().setServerFqdn(property(camelContext, java.lang.String.class, value)); return true;
        case "serverportnumber":
        case "serverPortNumber": target.getConfiguration().setServerPortNumber(property(camelContext, java.lang.Integer.class, value)); return true;
        case "signedreceiptmicalgorithms":
        case "signedReceiptMicAlgorithms": target.getConfiguration().setSignedReceiptMicAlgorithms(property(camelContext, java.lang.String[].class, value)); return true;
        case "signingalgorithm":
        case "signingAlgorithm": target.getConfiguration().setSigningAlgorithm(property(camelContext, org.apache.camel.component.as2.api.AS2SignatureAlgorithm.class, value)); return true;
        case "signingcertificatechain":
        case "signingCertificateChain": target.getConfiguration().setSigningCertificateChain(property(camelContext, java.security.cert.Certificate[].class, value)); return true;
        case "signingprivatekey":
        case "signingPrivateKey": target.getConfiguration().setSigningPrivateKey(property(camelContext, java.security.PrivateKey.class, value)); return true;
        case "startscheduler":
        case "startScheduler": target.setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "subject": target.getConfiguration().setSubject(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "targethostname":
        case "targetHostname": target.getConfiguration().setTargetHostname(property(camelContext, java.lang.String.class, value)); return true;
        case "targetportnumber":
        case "targetPortNumber": target.getConfiguration().setTargetPortNumber(property(camelContext, java.lang.Integer.class, value)); return true;
        case "timeunit":
        case "timeUnit": target.setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "useragent":
        case "userAgent": target.getConfiguration().setUserAgent(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("as2From", java.lang.String.class);
        answer.put("as2MessageStructure", org.apache.camel.component.as2.api.AS2MessageStructure.class);
        answer.put("as2To", java.lang.String.class);
        answer.put("as2Version", java.lang.String.class);
        answer.put("backoffErrorThreshold", int.class);
        answer.put("backoffIdleThreshold", int.class);
        answer.put("backoffMultiplier", int.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("clientFqdn", java.lang.String.class);
        answer.put("compressionAlgorithm", org.apache.camel.component.as2.api.AS2CompressionAlgorithm.class);
        answer.put("decryptingPrivateKey", java.security.PrivateKey.class);
        answer.put("delay", long.class);
        answer.put("dispositionNotificationTo", java.lang.String.class);
        answer.put("ediMessageTransferEncoding", java.lang.String.class);
        answer.put("ediMessageType", org.apache.http.entity.ContentType.class);
        answer.put("encryptingAlgorithm", org.apache.camel.component.as2.api.AS2EncryptionAlgorithm.class);
        answer.put("encryptingCertificateChain", java.security.cert.Certificate[].class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("from", java.lang.String.class);
        answer.put("greedy", boolean.class);
        answer.put("inBody", java.lang.String.class);
        answer.put("initialDelay", long.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("mdnMessageTemplate", java.lang.String.class);
        answer.put("pollStrategy", org.apache.camel.spi.PollingConsumerPollStrategy.class);
        answer.put("repeatCount", long.class);
        answer.put("requestUri", java.lang.String.class);
        answer.put("runLoggingLevel", org.apache.camel.LoggingLevel.class);
        answer.put("scheduledExecutorService", java.util.concurrent.ScheduledExecutorService.class);
        answer.put("scheduler", java.lang.String.class);
        answer.put("schedulerProperties", java.util.Map.class);
        answer.put("sendEmptyMessageWhenIdle", boolean.class);
        answer.put("server", java.lang.String.class);
        answer.put("serverFqdn", java.lang.String.class);
        answer.put("serverPortNumber", java.lang.Integer.class);
        answer.put("signedReceiptMicAlgorithms", java.lang.String[].class);
        answer.put("signingAlgorithm", org.apache.camel.component.as2.api.AS2SignatureAlgorithm.class);
        answer.put("signingCertificateChain", java.security.cert.Certificate[].class);
        answer.put("signingPrivateKey", java.security.PrivateKey.class);
        answer.put("startScheduler", boolean.class);
        answer.put("subject", java.lang.String.class);
        answer.put("synchronous", boolean.class);
        answer.put("targetHostname", java.lang.String.class);
        answer.put("targetPortNumber", java.lang.Integer.class);
        answer.put("timeUnit", java.util.concurrent.TimeUnit.class);
        answer.put("useFixedDelay", boolean.class);
        answer.put("userAgent", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        AS2Endpoint target = (AS2Endpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "as2from":
        case "as2From": target.getConfiguration().getAs2From(); return true;
        case "as2messagestructure":
        case "as2MessageStructure": target.getConfiguration().getAs2MessageStructure(); return true;
        case "as2to":
        case "as2To": target.getConfiguration().getAs2To(); return true;
        case "as2version":
        case "as2Version": target.getConfiguration().getAs2Version(); return true;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.getBackoffErrorThreshold(); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.getBackoffIdleThreshold(); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.getBackoffMultiplier(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "clientfqdn":
        case "clientFqdn": target.getConfiguration().getClientFqdn(); return true;
        case "compressionalgorithm":
        case "compressionAlgorithm": target.getConfiguration().getCompressionAlgorithm(); return true;
        case "decryptingprivatekey":
        case "decryptingPrivateKey": target.getConfiguration().getDecryptingPrivateKey(); return true;
        case "delay": target.getDelay(); return true;
        case "dispositionnotificationto":
        case "dispositionNotificationTo": target.getConfiguration().getDispositionNotificationTo(); return true;
        case "edimessagetransferencoding":
        case "ediMessageTransferEncoding": target.getConfiguration().getEdiMessageTransferEncoding(); return true;
        case "edimessagetype":
        case "ediMessageType": target.getConfiguration().getEdiMessageType(); return true;
        case "encryptingalgorithm":
        case "encryptingAlgorithm": target.getConfiguration().getEncryptingAlgorithm(); return true;
        case "encryptingcertificatechain":
        case "encryptingCertificateChain": target.getConfiguration().getEncryptingCertificateChain(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "from": target.getConfiguration().getFrom(); return true;
        case "greedy": target.isGreedy(); return true;
        case "inbody":
        case "inBody": target.getInBody(); return true;
        case "initialdelay":
        case "initialDelay": target.getInitialDelay(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "mdnmessagetemplate":
        case "mdnMessageTemplate": target.getConfiguration().getMdnMessageTemplate(); return true;
        case "pollstrategy":
        case "pollStrategy": target.getPollStrategy(); return true;
        case "repeatcount":
        case "repeatCount": target.getRepeatCount(); return true;
        case "requesturi":
        case "requestUri": target.getConfiguration().getRequestUri(); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.getRunLoggingLevel(); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.getScheduledExecutorService(); return true;
        case "scheduler": target.getScheduler(); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.getSchedulerProperties(); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.isSendEmptyMessageWhenIdle(); return true;
        case "server": target.getConfiguration().getServer(); return true;
        case "serverfqdn":
        case "serverFqdn": target.getConfiguration().getServerFqdn(); return true;
        case "serverportnumber":
        case "serverPortNumber": target.getConfiguration().getServerPortNumber(); return true;
        case "signedreceiptmicalgorithms":
        case "signedReceiptMicAlgorithms": target.getConfiguration().getSignedReceiptMicAlgorithms(); return true;
        case "signingalgorithm":
        case "signingAlgorithm": target.getConfiguration().getSigningAlgorithm(); return true;
        case "signingcertificatechain":
        case "signingCertificateChain": target.getConfiguration().getSigningCertificateChain(); return true;
        case "signingprivatekey":
        case "signingPrivateKey": target.getConfiguration().getSigningPrivateKey(); return true;
        case "startscheduler":
        case "startScheduler": target.isStartScheduler(); return true;
        case "subject": target.getConfiguration().getSubject(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "targethostname":
        case "targetHostname": target.getConfiguration().getTargetHostname(); return true;
        case "targetportnumber":
        case "targetPortNumber": target.getConfiguration().getTargetPortNumber(); return true;
        case "timeunit":
        case "timeUnit": target.getTimeUnit(); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.isUseFixedDelay(); return true;
        case "useragent":
        case "userAgent": target.getConfiguration().getUserAgent(); return true;
        default: return null;
        }
    }
}

