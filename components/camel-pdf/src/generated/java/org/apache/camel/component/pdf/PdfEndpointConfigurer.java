/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.pdf;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class PdfEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        PdfEndpoint target = (PdfEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "font": target.getPdfConfiguration().setFont(property(camelContext, java.lang.String.class, value)); return true;
        case "fontsize":
        case "fontSize": target.getPdfConfiguration().setFontSize(property(camelContext, float.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "marginbottom":
        case "marginBottom": target.getPdfConfiguration().setMarginBottom(property(camelContext, int.class, value)); return true;
        case "marginleft":
        case "marginLeft": target.getPdfConfiguration().setMarginLeft(property(camelContext, int.class, value)); return true;
        case "marginright":
        case "marginRight": target.getPdfConfiguration().setMarginRight(property(camelContext, int.class, value)); return true;
        case "margintop":
        case "marginTop": target.getPdfConfiguration().setMarginTop(property(camelContext, int.class, value)); return true;
        case "pagesize":
        case "pageSize": target.getPdfConfiguration().setPageSize(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "textprocessingfactory":
        case "textProcessingFactory": target.getPdfConfiguration().setTextProcessingFactory(property(camelContext, org.apache.camel.component.pdf.TextProcessingFactory.class, value)); return true;
        default: return false;
        }
    }

}

