/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.pdf;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class PdfEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("operation", org.apache.camel.component.pdf.PdfOperation.class);
        map.put("font", java.lang.String.class);
        map.put("fontSize", float.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("marginBottom", int.class);
        map.put("marginLeft", int.class);
        map.put("marginRight", int.class);
        map.put("marginTop", int.class);
        map.put("pageSize", java.lang.String.class);
        map.put("textProcessingFactory", org.apache.camel.component.pdf.TextProcessingFactory.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("synchronous", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        PdfEndpoint target = (PdfEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "font": target.getPdfConfiguration().setFont(property(camelContext, java.lang.String.class, value)); return true;
        case "fontsize":
        case "fontSize": target.getPdfConfiguration().setFontSize(property(camelContext, float.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "marginbottom":
        case "marginBottom": target.getPdfConfiguration().setMarginBottom(property(camelContext, int.class, value)); return true;
        case "marginleft":
        case "marginLeft": target.getPdfConfiguration().setMarginLeft(property(camelContext, int.class, value)); return true;
        case "marginright":
        case "marginRight": target.getPdfConfiguration().setMarginRight(property(camelContext, int.class, value)); return true;
        case "margintop":
        case "marginTop": target.getPdfConfiguration().setMarginTop(property(camelContext, int.class, value)); return true;
        case "pagesize":
        case "pageSize": target.getPdfConfiguration().setPageSize(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "textprocessingfactory":
        case "textProcessingFactory": target.getPdfConfiguration().setTextProcessingFactory(property(camelContext, org.apache.camel.component.pdf.TextProcessingFactory.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        PdfEndpoint target = (PdfEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "font": return target.getPdfConfiguration().getFont();
        case "fontsize":
        case "fontSize": return target.getPdfConfiguration().getFontSize();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "marginbottom":
        case "marginBottom": return target.getPdfConfiguration().getMarginBottom();
        case "marginleft":
        case "marginLeft": return target.getPdfConfiguration().getMarginLeft();
        case "marginright":
        case "marginRight": return target.getPdfConfiguration().getMarginRight();
        case "margintop":
        case "marginTop": return target.getPdfConfiguration().getMarginTop();
        case "pagesize":
        case "pageSize": return target.getPdfConfiguration().getPageSize();
        case "synchronous": return target.isSynchronous();
        case "textprocessingfactory":
        case "textProcessingFactory": return target.getPdfConfiguration().getTextProcessingFactory();
        default: return null;
        }
    }
}

