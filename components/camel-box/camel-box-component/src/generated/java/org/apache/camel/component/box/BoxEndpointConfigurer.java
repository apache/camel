/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.box;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class BoxEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "clientId": ((BoxEndpoint) target).getConfiguration().setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "enterpriseId": ((BoxEndpoint) target).getConfiguration().setEnterpriseId(property(camelContext, java.lang.String.class, value)); return true;
        case "inBody": ((BoxEndpoint) target).setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "userId": ((BoxEndpoint) target).getConfiguration().setUserId(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((BoxEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((BoxEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((BoxEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((BoxEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((BoxEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazyStartProducer": ((BoxEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((BoxEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "httpParams": ((BoxEndpoint) target).getConfiguration().setHttpParams(property(camelContext, java.util.Map.class, value)); return true;
        case "synchronous": ((BoxEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "accessTokenCache": ((BoxEndpoint) target).getConfiguration().setAccessTokenCache(property(camelContext, com.box.sdk.IAccessTokenCache.class, value)); return true;
        case "backoffErrorThreshold": ((BoxEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((BoxEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((BoxEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((BoxEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((BoxEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "repeatCount": ((BoxEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((BoxEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((BoxEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((BoxEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((BoxEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "timeUnit": ((BoxEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((BoxEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "clientSecret": ((BoxEndpoint) target).getConfiguration().setClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "encryptionAlgorithm": ((BoxEndpoint) target).getConfiguration().setEncryptionAlgorithm(property(camelContext, com.box.sdk.EncryptionAlgorithm.class, value)); return true;
        case "maxCacheEntries": ((BoxEndpoint) target).getConfiguration().setMaxCacheEntries(property(camelContext, int.class, value)); return true;
        case "authenticationType": ((BoxEndpoint) target).getConfiguration().setAuthenticationType(property(camelContext, java.lang.String.class, value)); return true;
        case "initialDelay": ((BoxEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "startScheduler": ((BoxEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "privateKeyFile": ((BoxEndpoint) target).getConfiguration().setPrivateKeyFile(property(camelContext, java.lang.String.class, value)); return true;
        case "privateKeyPassword": ((BoxEndpoint) target).getConfiguration().setPrivateKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "publicKeyId": ((BoxEndpoint) target).getConfiguration().setPublicKeyId(property(camelContext, java.lang.String.class, value)); return true;
        case "sslContextParameters": ((BoxEndpoint) target).getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "userName": ((BoxEndpoint) target).getConfiguration().setUserName(property(camelContext, java.lang.String.class, value)); return true;
        case "userPassword": ((BoxEndpoint) target).getConfiguration().setUserPassword(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "clientid": ((BoxEndpoint) target).getConfiguration().setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "enterpriseid": ((BoxEndpoint) target).getConfiguration().setEnterpriseId(property(camelContext, java.lang.String.class, value)); return true;
        case "inbody": ((BoxEndpoint) target).setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "userid": ((BoxEndpoint) target).getConfiguration().setUserId(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((BoxEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendemptymessagewhenidle": ((BoxEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((BoxEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((BoxEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((BoxEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazystartproducer": ((BoxEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((BoxEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "httpparams": ((BoxEndpoint) target).getConfiguration().setHttpParams(property(camelContext, java.util.Map.class, value)); return true;
        case "synchronous": ((BoxEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "accesstokencache": ((BoxEndpoint) target).getConfiguration().setAccessTokenCache(property(camelContext, com.box.sdk.IAccessTokenCache.class, value)); return true;
        case "backofferrorthreshold": ((BoxEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((BoxEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((BoxEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((BoxEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((BoxEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "repeatcount": ((BoxEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((BoxEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((BoxEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((BoxEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((BoxEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "timeunit": ((BoxEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((BoxEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "clientsecret": ((BoxEndpoint) target).getConfiguration().setClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "encryptionalgorithm": ((BoxEndpoint) target).getConfiguration().setEncryptionAlgorithm(property(camelContext, com.box.sdk.EncryptionAlgorithm.class, value)); return true;
        case "maxcacheentries": ((BoxEndpoint) target).getConfiguration().setMaxCacheEntries(property(camelContext, int.class, value)); return true;
        case "authenticationtype": ((BoxEndpoint) target).getConfiguration().setAuthenticationType(property(camelContext, java.lang.String.class, value)); return true;
        case "initialdelay": ((BoxEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "startscheduler": ((BoxEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "privatekeyfile": ((BoxEndpoint) target).getConfiguration().setPrivateKeyFile(property(camelContext, java.lang.String.class, value)); return true;
        case "privatekeypassword": ((BoxEndpoint) target).getConfiguration().setPrivateKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "publickeyid": ((BoxEndpoint) target).getConfiguration().setPublicKeyId(property(camelContext, java.lang.String.class, value)); return true;
        case "sslcontextparameters": ((BoxEndpoint) target).getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "username": ((BoxEndpoint) target).getConfiguration().setUserName(property(camelContext, java.lang.String.class, value)); return true;
        case "userpassword": ((BoxEndpoint) target).getConfiguration().setUserPassword(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

