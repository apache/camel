/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.box;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.box.BoxFoldersManagerEndpointConfiguration;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class BoxFoldersManagerEndpointConfigurationConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("Access", com.box.sdk.BoxSharedLink.Access.class);
        map.put("AccessTokenCache", com.box.sdk.IAccessTokenCache.class);
        map.put("ApiName", org.apache.camel.component.box.internal.BoxApiName.class);
        map.put("AuthenticationType", java.lang.String.class);
        map.put("ClientId", java.lang.String.class);
        map.put("ClientSecret", java.lang.String.class);
        map.put("DestinationFolderId", java.lang.String.class);
        map.put("EncryptionAlgorithm", com.box.sdk.EncryptionAlgorithm.class);
        map.put("EnterpriseId", java.lang.String.class);
        map.put("Fields", java.lang.String[].class);
        map.put("FolderId", java.lang.String.class);
        map.put("FolderName", java.lang.String.class);
        map.put("HttpParams", java.util.Map.class);
        map.put("Info", com.box.sdk.BoxFolder.Info.class);
        map.put("Limit", java.lang.Long.class);
        map.put("MaxCacheEntries", int.class);
        map.put("MethodName", java.lang.String.class);
        map.put("NewFolderName", java.lang.String.class);
        map.put("NewName", java.lang.String.class);
        map.put("Offset", java.lang.Long.class);
        map.put("ParentFolderId", java.lang.String.class);
        map.put("Path", java.lang.String[].class);
        map.put("Permissions", com.box.sdk.BoxSharedLink.Permissions.class);
        map.put("PrivateKeyFile", java.lang.String.class);
        map.put("PrivateKeyPassword", java.lang.String.class);
        map.put("PublicKeyId", java.lang.String.class);
        map.put("SslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        map.put("UnshareDate", java.util.Date.class);
        map.put("UserId", java.lang.String.class);
        map.put("UserName", java.lang.String.class);
        map.put("UserPassword", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.box.BoxFoldersManagerEndpointConfiguration target = (org.apache.camel.component.box.BoxFoldersManagerEndpointConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "access": target.setAccess(property(camelContext, com.box.sdk.BoxSharedLink.Access.class, value)); return true;
        case "accesstokencache":
        case "accessTokenCache": target.setAccessTokenCache(property(camelContext, com.box.sdk.IAccessTokenCache.class, value)); return true;
        case "apiname":
        case "apiName": target.setApiName(property(camelContext, org.apache.camel.component.box.internal.BoxApiName.class, value)); return true;
        case "authenticationtype":
        case "authenticationType": target.setAuthenticationType(property(camelContext, java.lang.String.class, value)); return true;
        case "clientid":
        case "clientId": target.setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "clientsecret":
        case "clientSecret": target.setClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "destinationfolderid":
        case "destinationFolderId": target.setDestinationFolderId(property(camelContext, java.lang.String.class, value)); return true;
        case "encryptionalgorithm":
        case "encryptionAlgorithm": target.setEncryptionAlgorithm(property(camelContext, com.box.sdk.EncryptionAlgorithm.class, value)); return true;
        case "enterpriseid":
        case "enterpriseId": target.setEnterpriseId(property(camelContext, java.lang.String.class, value)); return true;
        case "fields": target.setFields(property(camelContext, java.lang.String[].class, value)); return true;
        case "folderid":
        case "folderId": target.setFolderId(property(camelContext, java.lang.String.class, value)); return true;
        case "foldername":
        case "folderName": target.setFolderName(property(camelContext, java.lang.String.class, value)); return true;
        case "httpparams":
        case "httpParams": target.setHttpParams(property(camelContext, java.util.Map.class, value)); return true;
        case "info": target.setInfo(property(camelContext, com.box.sdk.BoxFolder.Info.class, value)); return true;
        case "limit": target.setLimit(property(camelContext, java.lang.Long.class, value)); return true;
        case "maxcacheentries":
        case "maxCacheEntries": target.setMaxCacheEntries(property(camelContext, int.class, value)); return true;
        case "methodname":
        case "methodName": target.setMethodName(property(camelContext, java.lang.String.class, value)); return true;
        case "newfoldername":
        case "newFolderName": target.setNewFolderName(property(camelContext, java.lang.String.class, value)); return true;
        case "newname":
        case "newName": target.setNewName(property(camelContext, java.lang.String.class, value)); return true;
        case "offset": target.setOffset(property(camelContext, java.lang.Long.class, value)); return true;
        case "parentfolderid":
        case "parentFolderId": target.setParentFolderId(property(camelContext, java.lang.String.class, value)); return true;
        case "path": target.setPath(property(camelContext, java.lang.String[].class, value)); return true;
        case "permissions": target.setPermissions(property(camelContext, com.box.sdk.BoxSharedLink.Permissions.class, value)); return true;
        case "privatekeyfile":
        case "privateKeyFile": target.setPrivateKeyFile(property(camelContext, java.lang.String.class, value)); return true;
        case "privatekeypassword":
        case "privateKeyPassword": target.setPrivateKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "publickeyid":
        case "publicKeyId": target.setPublicKeyId(property(camelContext, java.lang.String.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "unsharedate":
        case "unshareDate": target.setUnshareDate(property(camelContext, java.util.Date.class, value)); return true;
        case "userid":
        case "userId": target.setUserId(property(camelContext, java.lang.String.class, value)); return true;
        case "username":
        case "userName": target.setUserName(property(camelContext, java.lang.String.class, value)); return true;
        case "userpassword":
        case "userPassword": target.setUserPassword(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "access": return com.box.sdk.BoxSharedLink.Access.class;
        case "accesstokencache":
        case "accessTokenCache": return com.box.sdk.IAccessTokenCache.class;
        case "apiname":
        case "apiName": return org.apache.camel.component.box.internal.BoxApiName.class;
        case "authenticationtype":
        case "authenticationType": return java.lang.String.class;
        case "clientid":
        case "clientId": return java.lang.String.class;
        case "clientsecret":
        case "clientSecret": return java.lang.String.class;
        case "destinationfolderid":
        case "destinationFolderId": return java.lang.String.class;
        case "encryptionalgorithm":
        case "encryptionAlgorithm": return com.box.sdk.EncryptionAlgorithm.class;
        case "enterpriseid":
        case "enterpriseId": return java.lang.String.class;
        case "fields": return java.lang.String[].class;
        case "folderid":
        case "folderId": return java.lang.String.class;
        case "foldername":
        case "folderName": return java.lang.String.class;
        case "httpparams":
        case "httpParams": return java.util.Map.class;
        case "info": return com.box.sdk.BoxFolder.Info.class;
        case "limit": return java.lang.Long.class;
        case "maxcacheentries":
        case "maxCacheEntries": return int.class;
        case "methodname":
        case "methodName": return java.lang.String.class;
        case "newfoldername":
        case "newFolderName": return java.lang.String.class;
        case "newname":
        case "newName": return java.lang.String.class;
        case "offset": return java.lang.Long.class;
        case "parentfolderid":
        case "parentFolderId": return java.lang.String.class;
        case "path": return java.lang.String[].class;
        case "permissions": return com.box.sdk.BoxSharedLink.Permissions.class;
        case "privatekeyfile":
        case "privateKeyFile": return java.lang.String.class;
        case "privatekeypassword":
        case "privateKeyPassword": return java.lang.String.class;
        case "publickeyid":
        case "publicKeyId": return java.lang.String.class;
        case "sslcontextparameters":
        case "sslContextParameters": return org.apache.camel.support.jsse.SSLContextParameters.class;
        case "unsharedate":
        case "unshareDate": return java.util.Date.class;
        case "userid":
        case "userId": return java.lang.String.class;
        case "username":
        case "userName": return java.lang.String.class;
        case "userpassword":
        case "userPassword": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.box.BoxFoldersManagerEndpointConfiguration target = (org.apache.camel.component.box.BoxFoldersManagerEndpointConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "access": return target.getAccess();
        case "accesstokencache":
        case "accessTokenCache": return target.getAccessTokenCache();
        case "apiname":
        case "apiName": return target.getApiName();
        case "authenticationtype":
        case "authenticationType": return target.getAuthenticationType();
        case "clientid":
        case "clientId": return target.getClientId();
        case "clientsecret":
        case "clientSecret": return target.getClientSecret();
        case "destinationfolderid":
        case "destinationFolderId": return target.getDestinationFolderId();
        case "encryptionalgorithm":
        case "encryptionAlgorithm": return target.getEncryptionAlgorithm();
        case "enterpriseid":
        case "enterpriseId": return target.getEnterpriseId();
        case "fields": return target.getFields();
        case "folderid":
        case "folderId": return target.getFolderId();
        case "foldername":
        case "folderName": return target.getFolderName();
        case "httpparams":
        case "httpParams": return target.getHttpParams();
        case "info": return target.getInfo();
        case "limit": return target.getLimit();
        case "maxcacheentries":
        case "maxCacheEntries": return target.getMaxCacheEntries();
        case "methodname":
        case "methodName": return target.getMethodName();
        case "newfoldername":
        case "newFolderName": return target.getNewFolderName();
        case "newname":
        case "newName": return target.getNewName();
        case "offset": return target.getOffset();
        case "parentfolderid":
        case "parentFolderId": return target.getParentFolderId();
        case "path": return target.getPath();
        case "permissions": return target.getPermissions();
        case "privatekeyfile":
        case "privateKeyFile": return target.getPrivateKeyFile();
        case "privatekeypassword":
        case "privateKeyPassword": return target.getPrivateKeyPassword();
        case "publickeyid":
        case "publicKeyId": return target.getPublicKeyId();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getSslContextParameters();
        case "unsharedate":
        case "unshareDate": return target.getUnshareDate();
        case "userid":
        case "userId": return target.getUserId();
        case "username":
        case "userName": return target.getUserName();
        case "userpassword":
        case "userPassword": return target.getUserPassword();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "httpparams":
        case "httpParams": return java.lang.Object.class;
        default: return null;
        }
    }
}

