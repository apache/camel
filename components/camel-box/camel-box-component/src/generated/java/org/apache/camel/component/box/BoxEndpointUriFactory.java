/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.box;

import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class BoxEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":apiName/methodName";

    private static final Set<String> PROPERTY_NAMES;
    static {
        Set<String> set = new HashSet<>(93);
        set.add("apiName");
        set.add("methodName");
        set.add("clientId");
        set.add("enterpriseId");
        set.add("inBody");
        set.add("userId");
        set.add("exceptionHandler");
        set.add("exchangePattern");
        set.add("lazyStartProducer");
        set.add("basicPropertyBinding");
        set.add("httpParams");
        set.add("synchronous");
        set.add("authenticationType");
        set.add("accessTokenCache");
        set.add("clientSecret");
        set.add("encryptionAlgorithm");
        set.add("maxCacheEntries");
        set.add("privateKeyFile");
        set.add("privateKeyPassword");
        set.add("publicKeyId");
        set.add("sslContextParameters");
        set.add("userName");
        set.add("userPassword");
        set.add("access");
        set.add("action");
        set.add("after");
        set.add("assignTo");
        set.add("before");
        set.add("check");
        set.add("collaborationId");
        set.add("collaborator");
        set.add("commentId");
        set.add("content");
        set.add("created");
        set.add("description");
        set.add("destinationFolderId");
        set.add("dueAt");
        set.add("email");
        set.add("emailAliasId");
        set.add("externalSyncIdentifier");
        set.add("fields");
        set.add("fileContent");
        set.add("fileId");
        set.add("fileName");
        set.add("fileSize");
        set.add("fileType");
        set.add("filterTerm");
        set.add("folderId");
        set.add("folderName");
        set.add("force");
        set.add("groupId");
        set.add("groupInfo");
        set.add("groupMembershipId");
        set.add("info");
        set.add("invitabilityLevel");
        set.add("limit");
        set.add("listener");
        set.add("login");
        set.add("maxHeight");
        set.add("maxWidth");
        set.add("memberViewabilityLevel");
        set.add("message");
        set.add("metadata");
        set.add("minHeight");
        set.add("minWidth");
        set.add("modified");
        set.add("name");
        set.add("newFileName");
        set.add("newFolderName");
        set.add("newName");
        set.add("notifyUser");
        set.add("offset");
        set.add("output");
        set.add("params");
        set.add("parentFolderId");
        set.add("path");
        set.add("permissions");
        set.add("position");
        set.add("provenance");
        set.add("query");
        set.add("rangeEnd");
        set.add("rangeStart");
        set.add("role");
        set.add("size");
        set.add("sourceUserId");
        set.add("startingPosition");
        set.add("taskAssignmentId");
        set.add("taskId");
        set.add("typeName");
        set.add("types");
        set.add("unshareDate");
        set.add("userId");
        set.add("version");
        PROPERTY_NAMES = set;
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "box".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "apiName", null, true, copy);
        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public boolean isLenientProperties() {
        return true;
    }
}

