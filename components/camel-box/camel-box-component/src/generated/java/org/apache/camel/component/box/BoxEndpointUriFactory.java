/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.box;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class BoxEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":apiName/methodName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "access", "accessTokenCache", "action", "after", "apiName", "assignTo", "authenticationType", "before",
            "check", "clientId", "clientSecret", "collaborationId", "collaborator", "commentId", "content", "created",
            "description", "destinationFolderId", "dueAt", "email", "emailAliasId", "encryptionAlgorithm", "enterpriseId",
            "exceptionHandler", "exchangePattern", "externalSyncIdentifier", "fields", "fileContent", "fileId", "fileName",
            "fileSize", "fileType", "filterTerm", "folderId", "folderName", "force", "groupId", "groupInfo",
            "groupMembershipId", "httpParams", "inBody", "info", "invitabilityLevel", "lazyStartProducer", "limit",
            "listener", "login", "maxCacheEntries", "maxHeight", "maxWidth", "memberViewabilityLevel", "message",
            "metadata", "methodName", "minHeight", "minWidth", "modified", "name", "newFileName", "newFolderName",
            "newName", "notifyUser", "offset", "output", "params", "parentFolderId", "path", "permissions", "position",
            "privateKeyFile", "privateKeyPassword", "provenance", "publicKeyId", "query", "rangeEnd", "rangeStart", "role",
            "size", "sourceUserId", "sslContextParameters", "startingPosition", "taskAssignmentId", "taskId", "typeName",
            "types", "unshareDate", "userId", "userName", "userPassword", "version");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "clientSecret", "privateKeyFile", "privateKeyPassword", "publicKeyId", "userName", "userPassword");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of();

    @Override
    public boolean isEnabled(String scheme) {
        return "box".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "apiName", null, true, copy);
        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return true;
    }
}

