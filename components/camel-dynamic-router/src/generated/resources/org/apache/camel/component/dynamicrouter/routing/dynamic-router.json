{
  "component": {
    "kind": "component",
    "name": "dynamic-router",
    "title": "Dynamic Router",
    "description": "The Dynamic Router component routes exchanges to recipients, and the recipients (and their rules) may change at runtime.",
    "deprecated": false,
    "firstVersion": "3.15.0",
    "label": "messaging,core",
    "javaType": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterComponent",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-dynamic-router",
    "version": "4.4.0-SNAPSHOT",
    "scheme": "dynamic-router",
    "extendsScheme": "",
    "syntax": "dynamic-router:channel",
    "async": false,
    "api": false,
    "consumerOnly": false,
    "producerOnly": true,
    "lenientProperties": false,
    "remote": false
  },
  "componentProperties": {
    "lazyStartProducer": { "index": 0, "kind": "property", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "autowiredEnabled": { "index": 1, "kind": "property", "displayName": "Autowired Enabled", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc." }
  },
  "properties": {
    "channel": { "index": 0, "kind": "path", "displayName": "Channel", "group": "producer", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Channel for the Dynamic Router. For example, if the Dynamic Router URI is dynamic-router:\/\/test, then the channel is test. Channels are a way of keeping routing participants, their rules, and exchanges logically separate from the participants, rules, and exchanges on other channels. This can be seen as analogous to VLANs in networking." },
    "aggregationStrategy": { "index": 1, "kind": "parameter", "displayName": "Aggregation Strategy", "group": "common", "label": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Refers to an AggregationStrategy to be used to assemble the replies from the multicasts, into a single outgoing message from the Multicast. By default, Camel will use the last reply as the outgoing message. You can also use a POJO as the AggregationStrategy." },
    "aggregationStrategyBean": { "index": 2, "kind": "parameter", "displayName": "Aggregation Strategy Bean", "group": "common", "label": "common", "required": false, "type": "object", "javaType": "org.apache.camel.AggregationStrategy", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Refers to an AggregationStrategy to be used to assemble the replies from the multicasts, into a single outgoing message from the Multicast. By default, Camel will use the last reply as the outgoing message. You can also use a POJO as the AggregationStrategy." },
    "aggregationStrategyMethodAllowNull": { "index": 3, "kind": "parameter", "displayName": "Aggregation Strategy Method Allow Null", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "If this option is false then the aggregate method is not used if there was no data to enrich. If this option is true then null values is used as the oldExchange (when no data to enrich), when using POJOs as the AggregationStrategy" },
    "aggregationStrategyMethodName": { "index": 4, "kind": "parameter", "displayName": "Aggregation Strategy Method Name", "group": "common", "label": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "You can use a POJO as the AggregationStrategy. This refers to the name of the method that aggregates the exchanges." },
    "cacheSize": { "index": 5, "kind": "parameter", "displayName": "Cache Size", "group": "common", "label": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "autowired": false, "secret": false, "defaultValue": 100, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "When caching producer endpoints, this is the size of the cache. Default is 100." },
    "executorService": { "index": 6, "kind": "parameter", "displayName": "Executor Service", "group": "common", "label": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Refers to a custom Thread Pool to be used for parallel processing. Notice that, if you set this option, then parallel processing is automatically implied, and you do not have to enable that option in addition to this one." },
    "executorServiceBean": { "index": 7, "kind": "parameter", "displayName": "Executor Service Bean", "group": "common", "label": "common", "required": false, "type": "object", "javaType": "java.util.concurrent.ExecutorService", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Refers to a custom Thread Pool to be used for parallel processing. Notice that, if you set this option, then parallel processing is automatically implied, and you do not have to enable that option in addition to this one." },
    "ignoreInvalidEndpoints": { "index": 8, "kind": "parameter", "displayName": "Ignore Invalid Endpoints", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Ignore the invalid endpoint exception when attempting to create a producer with an invalid endpoint." },
    "onPrepare": { "index": 9, "kind": "parameter", "displayName": "On Prepare", "group": "common", "label": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Uses the Processor when preparing the org.apache.camel.Exchange to be sent. This can be used to deep-clone messages that should be sent, or to provide any custom logic that is needed before the exchange is sent. This is the name of a bean in the registry." },
    "onPrepareProcessor": { "index": 10, "kind": "parameter", "displayName": "On Prepare Processor", "group": "common", "label": "common", "required": false, "type": "object", "javaType": "org.apache.camel.Processor", "deprecated": false, "autowired": false, "secret": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Uses the Processor when preparing the org.apache.camel.Exchange to be sent. This can be used to deep-clone messages that should be sent, or to provide any custom logic that is needed before the exchange is sent. This is a Processor instance." },
    "parallelAggregate": { "index": 11, "kind": "parameter", "displayName": "Parallel Aggregate", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "If enabled then the aggregate method on AggregationStrategy can be called concurrently. Notice that this would require the implementation of AggregationStrategy to be implemented as thread-safe. By default, this is false, meaning that Camel synchronizes the call to the aggregate method. Though, in some use-cases, this can be used to archive higher performance when the AggregationStrategy is implemented as thread-safe." },
    "parallelProcessing": { "index": 12, "kind": "parameter", "displayName": "Parallel Processing", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "If enabled, then sending via multicast occurs concurrently. Note that the caller thread will still wait until all messages have been fully processed before it continues. It is only the sending and processing of the replies from the multicast recipients that happens concurrently. When parallel processing is enabled, then the Camel routing engine will continue processing using the last used thread from the parallel thread pool. However, if you want to use the original thread that called the multicast, then make sure to enable the synchronous option as well." },
    "recipientMode": { "index": 13, "kind": "parameter", "displayName": "Recipient Mode", "group": "common", "label": "common", "required": false, "type": "string", "javaType": "java.lang.String", "enum": [ "firstMatch", "allMatch" ], "deprecated": false, "autowired": false, "secret": false, "defaultValue": "firstMatch", "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Recipient mode: firstMatch or allMatch" },
    "shareUnitOfWork": { "index": 14, "kind": "parameter", "displayName": "Share Unit Of Work", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Shares the org.apache.camel.spi.UnitOfWork with the parent and each of the sub messages. Multicast will, by default, not share a unit of work between the parent exchange and each multicasted exchange. This means each sub exchange has its own individual unit of work." },
    "stopOnException": { "index": 15, "kind": "parameter", "displayName": "Stop On Exception", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Will stop further processing if an exception or failure occurred during processing of an org.apache.camel.Exchange and the caused exception will be thrown. Will also stop if processing the exchange failed (has a fault message), or an exception was thrown and handled by the error handler (such as using onException). In all situations, the multicast will stop further processing. This is the same behavior as in the pipeline that is used by the routing engine. The default behavior is to not stop, but to continue processing until the end." },
    "streaming": { "index": 16, "kind": "parameter", "displayName": "Streaming", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "If enabled, then Camel will process replies out-of-order (e.g., in the order they come back). If disabled, Camel will process replies in the same order as defined by the multicast." },
    "synchronous": { "index": 17, "kind": "parameter", "displayName": "Synchronous", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Sets whether synchronous processing should be strictly used. When enabled then the same thread is used to continue routing after the multicast is complete, even if parallel processing is enabled." },
    "timeout": { "index": 18, "kind": "parameter", "displayName": "Timeout", "group": "common", "label": "common", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "autowired": false, "secret": false, "defaultValue": -1, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Sets a total timeout specified in milliseconds, when using parallel processing. If the Multicast has not been able to send and process all replies within the given timeframe, then the timeout triggers and the Multicast breaks out and continues. Notice that, if you provide a TimeoutAwareAggregationStrategy, then the timeout method is invoked before breaking out. If the timeout is reached with running tasks still remaining, certain tasks (for which it is difficult for Camel to shut down in a graceful manner) may continue to run. So use this option with a bit of care." },
    "warnDroppedMessage": { "index": 19, "kind": "parameter", "displayName": "Warn Dropped Message", "group": "common", "label": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "configurationClass": "org.apache.camel.component.dynamicrouter.routing.DynamicRouterConfiguration", "configurationField": "configuration", "description": "Flag to log a warning if no predicates match for an exchange." },
    "lazyStartProducer": { "index": 20, "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer (advanced)", "label": "producer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." }
  }
}
