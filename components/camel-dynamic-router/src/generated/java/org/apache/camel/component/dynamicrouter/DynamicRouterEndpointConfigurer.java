/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.dynamicrouter;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DynamicRouterEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DynamicRouterEndpoint target = (DynamicRouterEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "aggregationstrategy":
        case "aggregationStrategy": target.getConfiguration().setAggregationStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "destinationuri":
        case "destinationUri": target.getConfiguration().setDestinationUri(property(camelContext, java.lang.String.class, value)); return true;
        case "executorservice":
        case "executorService": target.getConfiguration().setExecutorService(property(camelContext, java.lang.String.class, value)); return true;
        case "expressionlanguage":
        case "expressionLanguage": target.getConfiguration().setExpressionLanguage(property(camelContext, java.lang.String.class, value)); return true;
        case "ignoreinvalidendpoints":
        case "ignoreInvalidEndpoints": target.getConfiguration().setIgnoreInvalidEndpoints(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "onprepare":
        case "onPrepare": target.getConfiguration().setOnPrepare(property(camelContext, java.lang.String.class, value)); return true;
        case "parallelaggregate":
        case "parallelAggregate": target.getConfiguration().setParallelAggregate(property(camelContext, boolean.class, value)); return true;
        case "parallelprocessing":
        case "parallelProcessing": target.getConfiguration().setParallelProcessing(property(camelContext, boolean.class, value)); return true;
        case "predicate": target.getConfiguration().setPredicate(property(camelContext, java.lang.String.class, value)); return true;
        case "predicatebean":
        case "predicateBean": target.getConfiguration().setPredicateBean(property(camelContext, org.apache.camel.Predicate.class, value)); return true;
        case "priority": target.getConfiguration().setPriority(property(camelContext, java.lang.Integer.class, value)); return true;
        case "recipientmode":
        case "recipientMode": target.getConfiguration().setRecipientMode(property(camelContext, java.lang.String.class, value)); return true;
        case "shareunitofwork":
        case "shareUnitOfWork": target.getConfiguration().setShareUnitOfWork(property(camelContext, boolean.class, value)); return true;
        case "stoponexception":
        case "stopOnException": target.getConfiguration().setStopOnException(property(camelContext, boolean.class, value)); return true;
        case "streaming": target.getConfiguration().setStreaming(property(camelContext, boolean.class, value)); return true;
        case "subscriptionid":
        case "subscriptionId": target.getConfiguration().setSubscriptionId(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.getConfiguration().setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "timeout": target.getConfiguration().setTimeout(property(camelContext, long.class, value)); return true;
        case "warndroppedmessage":
        case "warnDroppedMessage": target.getConfiguration().setWarnDroppedMessage(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "aggregationstrategy":
        case "aggregationStrategy": return java.lang.String.class;
        case "destinationuri":
        case "destinationUri": return java.lang.String.class;
        case "executorservice":
        case "executorService": return java.lang.String.class;
        case "expressionlanguage":
        case "expressionLanguage": return java.lang.String.class;
        case "ignoreinvalidendpoints":
        case "ignoreInvalidEndpoints": return boolean.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "onprepare":
        case "onPrepare": return java.lang.String.class;
        case "parallelaggregate":
        case "parallelAggregate": return boolean.class;
        case "parallelprocessing":
        case "parallelProcessing": return boolean.class;
        case "predicate": return java.lang.String.class;
        case "predicatebean":
        case "predicateBean": return org.apache.camel.Predicate.class;
        case "priority": return java.lang.Integer.class;
        case "recipientmode":
        case "recipientMode": return java.lang.String.class;
        case "shareunitofwork":
        case "shareUnitOfWork": return boolean.class;
        case "stoponexception":
        case "stopOnException": return boolean.class;
        case "streaming": return boolean.class;
        case "subscriptionid":
        case "subscriptionId": return java.lang.String.class;
        case "synchronous": return boolean.class;
        case "timeout": return long.class;
        case "warndroppedmessage":
        case "warnDroppedMessage": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DynamicRouterEndpoint target = (DynamicRouterEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "aggregationstrategy":
        case "aggregationStrategy": return target.getConfiguration().getAggregationStrategy();
        case "destinationuri":
        case "destinationUri": return target.getConfiguration().getDestinationUri();
        case "executorservice":
        case "executorService": return target.getConfiguration().getExecutorService();
        case "expressionlanguage":
        case "expressionLanguage": return target.getConfiguration().getExpressionLanguage();
        case "ignoreinvalidendpoints":
        case "ignoreInvalidEndpoints": return target.getConfiguration().isIgnoreInvalidEndpoints();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "onprepare":
        case "onPrepare": return target.getConfiguration().getOnPrepare();
        case "parallelaggregate":
        case "parallelAggregate": return target.getConfiguration().isParallelAggregate();
        case "parallelprocessing":
        case "parallelProcessing": return target.getConfiguration().isParallelProcessing();
        case "predicate": return target.getConfiguration().getPredicate();
        case "predicatebean":
        case "predicateBean": return target.getConfiguration().getPredicateBean();
        case "priority": return target.getConfiguration().getPriority();
        case "recipientmode":
        case "recipientMode": return target.getConfiguration().getRecipientMode();
        case "shareunitofwork":
        case "shareUnitOfWork": return target.getConfiguration().isShareUnitOfWork();
        case "stoponexception":
        case "stopOnException": return target.getConfiguration().isStopOnException();
        case "streaming": return target.getConfiguration().isStreaming();
        case "subscriptionid":
        case "subscriptionId": return target.getConfiguration().getSubscriptionId();
        case "synchronous": return target.getConfiguration().isSynchronous();
        case "timeout": return target.getConfiguration().getTimeout();
        case "warndroppedmessage":
        case "warnDroppedMessage": return target.getConfiguration().isWarnDroppedMessage();
        default: return null;
        }
    }
}

