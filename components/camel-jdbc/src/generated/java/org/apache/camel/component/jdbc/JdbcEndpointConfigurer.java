/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jdbc;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JdbcEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        JdbcEndpoint target = (JdbcEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allownamedparameters":
        case "allowNamedParameters": target.setAllowNamedParameters(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "beanrowmapper":
        case "beanRowMapper": target.setBeanRowMapper(property(camelContext, org.apache.camel.component.jdbc.BeanRowMapper.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "outputclass":
        case "outputClass": target.setOutputClass(property(camelContext, java.lang.String.class, value)); return true;
        case "outputtype":
        case "outputType": target.setOutputType(property(camelContext, org.apache.camel.component.jdbc.JdbcOutputType.class, value)); return true;
        case "parameters": target.setParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "preparestatementstrategy":
        case "prepareStatementStrategy": target.setPrepareStatementStrategy(property(camelContext, org.apache.camel.component.jdbc.JdbcPrepareStatementStrategy.class, value)); return true;
        case "readsize":
        case "readSize": target.setReadSize(property(camelContext, int.class, value)); return true;
        case "resetautocommit":
        case "resetAutoCommit": target.setResetAutoCommit(property(camelContext, boolean.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "transacted": target.setTransacted(property(camelContext, boolean.class, value)); return true;
        case "usegetbytesforblob":
        case "useGetBytesForBlob": target.setUseGetBytesForBlob(property(camelContext, boolean.class, value)); return true;
        case "useheadersasparameters":
        case "useHeadersAsParameters": target.setUseHeadersAsParameters(property(camelContext, boolean.class, value)); return true;
        case "usejdbc4columnnameandlabelsemantics":
        case "useJDBC4ColumnNameAndLabelSemantics": target.setUseJDBC4ColumnNameAndLabelSemantics(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("allowNamedParameters", boolean.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("beanRowMapper", org.apache.camel.component.jdbc.BeanRowMapper.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("outputClass", java.lang.String.class);
        answer.put("outputType", org.apache.camel.component.jdbc.JdbcOutputType.class);
        answer.put("parameters", java.util.Map.class);
        answer.put("prepareStatementStrategy", org.apache.camel.component.jdbc.JdbcPrepareStatementStrategy.class);
        answer.put("readSize", int.class);
        answer.put("resetAutoCommit", boolean.class);
        answer.put("synchronous", boolean.class);
        answer.put("transacted", boolean.class);
        answer.put("useGetBytesForBlob", boolean.class);
        answer.put("useHeadersAsParameters", boolean.class);
        answer.put("useJDBC4ColumnNameAndLabelSemantics", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        JdbcEndpoint target = (JdbcEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allownamedparameters":
        case "allowNamedParameters": return target.isAllowNamedParameters();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "beanrowmapper":
        case "beanRowMapper": return target.getBeanRowMapper();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "outputclass":
        case "outputClass": return target.getOutputClass();
        case "outputtype":
        case "outputType": return target.getOutputType();
        case "parameters": return target.getParameters();
        case "preparestatementstrategy":
        case "prepareStatementStrategy": return target.getPrepareStatementStrategy();
        case "readsize":
        case "readSize": return target.getReadSize();
        case "resetautocommit":
        case "resetAutoCommit": return target.isResetAutoCommit();
        case "synchronous": return target.isSynchronous();
        case "transacted": return target.isTransacted();
        case "usegetbytesforblob":
        case "useGetBytesForBlob": return target.isUseGetBytesForBlob();
        case "useheadersasparameters":
        case "useHeadersAsParameters": return target.isUseHeadersAsParameters();
        case "usejdbc4columnnameandlabelsemantics":
        case "useJDBC4ColumnNameAndLabelSemantics": return target.isUseJDBC4ColumnNameAndLabelSemantics();
        default: return null;
        }
    }
}

