/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jdbc;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JdbcEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "allowNamedParameters": ((JdbcEndpoint) target).setAllowNamedParameters(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((JdbcEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "outputClass": ((JdbcEndpoint) target).setOutputClass(property(camelContext, java.lang.String.class, value)); return true;
        case "outputType": ((JdbcEndpoint) target).setOutputType(property(camelContext, org.apache.camel.component.jdbc.JdbcOutputType.class, value)); return true;
        case "parameters": ((JdbcEndpoint) target).setParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "readSize": ((JdbcEndpoint) target).setReadSize(property(camelContext, int.class, value)); return true;
        case "resetAutoCommit": ((JdbcEndpoint) target).setResetAutoCommit(property(camelContext, boolean.class, value)); return true;
        case "transacted": ((JdbcEndpoint) target).setTransacted(property(camelContext, boolean.class, value)); return true;
        case "useGetBytesForBlob": ((JdbcEndpoint) target).setUseGetBytesForBlob(property(camelContext, boolean.class, value)); return true;
        case "useHeadersAsParameters": ((JdbcEndpoint) target).setUseHeadersAsParameters(property(camelContext, boolean.class, value)); return true;
        case "useJDBC4ColumnNameAndLabelSemantics": ((JdbcEndpoint) target).setUseJDBC4ColumnNameAndLabelSemantics(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((JdbcEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "beanRowMapper": ((JdbcEndpoint) target).setBeanRowMapper(property(camelContext, org.apache.camel.component.jdbc.BeanRowMapper.class, value)); return true;
        case "prepareStatementStrategy": ((JdbcEndpoint) target).setPrepareStatementStrategy(property(camelContext, org.apache.camel.component.jdbc.JdbcPrepareStatementStrategy.class, value)); return true;
        case "synchronous": ((JdbcEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "allownamedparameters": ((JdbcEndpoint) target).setAllowNamedParameters(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((JdbcEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "outputclass": ((JdbcEndpoint) target).setOutputClass(property(camelContext, java.lang.String.class, value)); return true;
        case "outputtype": ((JdbcEndpoint) target).setOutputType(property(camelContext, org.apache.camel.component.jdbc.JdbcOutputType.class, value)); return true;
        case "parameters": ((JdbcEndpoint) target).setParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "readsize": ((JdbcEndpoint) target).setReadSize(property(camelContext, int.class, value)); return true;
        case "resetautocommit": ((JdbcEndpoint) target).setResetAutoCommit(property(camelContext, boolean.class, value)); return true;
        case "transacted": ((JdbcEndpoint) target).setTransacted(property(camelContext, boolean.class, value)); return true;
        case "usegetbytesforblob": ((JdbcEndpoint) target).setUseGetBytesForBlob(property(camelContext, boolean.class, value)); return true;
        case "useheadersasparameters": ((JdbcEndpoint) target).setUseHeadersAsParameters(property(camelContext, boolean.class, value)); return true;
        case "usejdbc4columnnameandlabelsemantics": ((JdbcEndpoint) target).setUseJDBC4ColumnNameAndLabelSemantics(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((JdbcEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "beanrowmapper": ((JdbcEndpoint) target).setBeanRowMapper(property(camelContext, org.apache.camel.component.jdbc.BeanRowMapper.class, value)); return true;
        case "preparestatementstrategy": ((JdbcEndpoint) target).setPrepareStatementStrategy(property(camelContext, org.apache.camel.component.jdbc.JdbcPrepareStatementStrategy.class, value)); return true;
        case "synchronous": ((JdbcEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

