/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.caffeine.load;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class CaffeineLoadCacheEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "action": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setAction(property(camelContext, java.lang.String.class, value)); return true;
        case "cache": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setCache(property(camelContext, com.github.benmanes.caffeine.cache.Cache.class, value)); return true;
        case "cacheLoader": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setCacheLoader(property(camelContext, com.github.benmanes.caffeine.cache.CacheLoader.class, value)); return true;
        case "createCacheIfNotExist": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setCreateCacheIfNotExist(property(camelContext, boolean.class, value)); return true;
        case "evictionType": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setEvictionType(property(camelContext, org.apache.camel.component.caffeine.EvictionType.class, value)); return true;
        case "expireAfterAccessTime": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setExpireAfterAccessTime(property(camelContext, int.class, value)); return true;
        case "expireAfterWriteTime": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setExpireAfterWriteTime(property(camelContext, int.class, value)); return true;
        case "initialCapacity": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setInitialCapacity(property(camelContext, int.class, value)); return true;
        case "key": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setKey(property(camelContext, java.lang.Object.class, value)); return true;
        case "lazyStartProducer": ((CaffeineLoadCacheEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maximumSize": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setMaximumSize(property(camelContext, int.class, value)); return true;
        case "removalListener": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setRemovalListener(property(camelContext, com.github.benmanes.caffeine.cache.RemovalListener.class, value)); return true;
        case "statsCounter": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setStatsCounter(property(camelContext, com.github.benmanes.caffeine.cache.stats.StatsCounter.class, value)); return true;
        case "statsEnabled": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setStatsEnabled(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((CaffeineLoadCacheEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "keyType": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setKeyType(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((CaffeineLoadCacheEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "valueType": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setValueType(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "action": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setAction(property(camelContext, java.lang.String.class, value)); return true;
        case "cache": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setCache(property(camelContext, com.github.benmanes.caffeine.cache.Cache.class, value)); return true;
        case "cacheloader": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setCacheLoader(property(camelContext, com.github.benmanes.caffeine.cache.CacheLoader.class, value)); return true;
        case "createcacheifnotexist": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setCreateCacheIfNotExist(property(camelContext, boolean.class, value)); return true;
        case "evictiontype": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setEvictionType(property(camelContext, org.apache.camel.component.caffeine.EvictionType.class, value)); return true;
        case "expireafteraccesstime": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setExpireAfterAccessTime(property(camelContext, int.class, value)); return true;
        case "expireafterwritetime": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setExpireAfterWriteTime(property(camelContext, int.class, value)); return true;
        case "initialcapacity": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setInitialCapacity(property(camelContext, int.class, value)); return true;
        case "key": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setKey(property(camelContext, java.lang.Object.class, value)); return true;
        case "lazystartproducer": ((CaffeineLoadCacheEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maximumsize": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setMaximumSize(property(camelContext, int.class, value)); return true;
        case "removallistener": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setRemovalListener(property(camelContext, com.github.benmanes.caffeine.cache.RemovalListener.class, value)); return true;
        case "statscounter": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setStatsCounter(property(camelContext, com.github.benmanes.caffeine.cache.stats.StatsCounter.class, value)); return true;
        case "statsenabled": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setStatsEnabled(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((CaffeineLoadCacheEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "keytype": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setKeyType(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((CaffeineLoadCacheEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "valuetype": ((CaffeineLoadCacheEndpoint) target).getConfiguration().setValueType(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

