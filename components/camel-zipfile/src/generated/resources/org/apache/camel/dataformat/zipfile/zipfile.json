{
  "dataformat": {
    "kind": "dataformat",
    "name": "zipfile",
    "title": "Zip File",
    "description": "Compression and decompress streams using java.util.zip.ZipStream.",
    "deprecated": false,
    "firstVersion": "2.11.0",
    "label": "dataformat,transformation,file",
    "javaType": "org.apache.camel.dataformat.zipfile.ZipFileDataFormat",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-zipfile",
    "version": "3.3.0-SNAPSHOT",
    "modelName": "zipfile",
    "modelJavaType": "org.apache.camel.model.dataformat.ZipFileDataFormat"
  },
  "properties": {
    "usingIterator": { "kind": "attribute", "displayName": "Using Iterator", "required": false, "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "If the zip file has more then one entry, the setting this option to true, allows to work with the splitter EIP, to split the data using an iterator in a streaming mode." },
    "allowEmptyDirectory": { "kind": "attribute", "displayName": "Allow Empty Directory", "required": false, "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "If the zip file has more then one entry, setting this option to true, allows to get the iterator even if the directory is empty" },
    "preservePathElements": { "kind": "attribute", "displayName": "Preserve Path Elements", "required": false, "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "If the file name contains path elements, setting this option to true, allows the path to be maintained in the zip file." },
    "contentTypeHeader": { "kind": "attribute", "displayName": "Content Type Header", "required": false, "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the data format should set the Content-Type header with the type from the data format if the data format is capable of doing so. For example application\/xml for data formats marshalling to XML, or application\/json for data formats marshalling to JSon etc." },
    "id": { "kind": "attribute", "displayName": "Id", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "The id of this node" }
  }
}
