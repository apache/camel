/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.rest;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class RestEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "consumes": ((RestEndpoint) target).setConsumes(property(camelContext, java.lang.String.class, value)); return true;
        case "inType": ((RestEndpoint) target).setInType(property(camelContext, java.lang.String.class, value)); return true;
        case "outType": ((RestEndpoint) target).setOutType(property(camelContext, java.lang.String.class, value)); return true;
        case "produces": ((RestEndpoint) target).setProduces(property(camelContext, java.lang.String.class, value)); return true;
        case "routeId": ((RestEndpoint) target).setRouteId(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((RestEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "consumerComponentName": ((RestEndpoint) target).setConsumerComponentName(property(camelContext, java.lang.String.class, value)); return true;
        case "description": ((RestEndpoint) target).setDescription(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionHandler": ((RestEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((RestEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "apiDoc": ((RestEndpoint) target).setApiDoc(property(camelContext, java.lang.String.class, value)); return true;
        case "bindingMode": ((RestEndpoint) target).setBindingMode(property(camelContext, org.apache.camel.spi.RestConfiguration.RestBindingMode.class, value)); return true;
        case "host": ((RestEndpoint) target).setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "lazyStartProducer": ((RestEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "producerComponentName": ((RestEndpoint) target).setProducerComponentName(property(camelContext, java.lang.String.class, value)); return true;
        case "queryParameters": ((RestEndpoint) target).setQueryParameters(property(camelContext, java.lang.String.class, value)); return true;
        case "basicPropertyBinding": ((RestEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((RestEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "consumes": ((RestEndpoint) target).setConsumes(property(camelContext, java.lang.String.class, value)); return true;
        case "intype": ((RestEndpoint) target).setInType(property(camelContext, java.lang.String.class, value)); return true;
        case "outtype": ((RestEndpoint) target).setOutType(property(camelContext, java.lang.String.class, value)); return true;
        case "produces": ((RestEndpoint) target).setProduces(property(camelContext, java.lang.String.class, value)); return true;
        case "routeid": ((RestEndpoint) target).setRouteId(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((RestEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "consumercomponentname": ((RestEndpoint) target).setConsumerComponentName(property(camelContext, java.lang.String.class, value)); return true;
        case "description": ((RestEndpoint) target).setDescription(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler": ((RestEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((RestEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "apidoc": ((RestEndpoint) target).setApiDoc(property(camelContext, java.lang.String.class, value)); return true;
        case "bindingmode": ((RestEndpoint) target).setBindingMode(property(camelContext, org.apache.camel.spi.RestConfiguration.RestBindingMode.class, value)); return true;
        case "host": ((RestEndpoint) target).setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer": ((RestEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "producercomponentname": ((RestEndpoint) target).setProducerComponentName(property(camelContext, java.lang.String.class, value)); return true;
        case "queryparameters": ((RestEndpoint) target).setQueryParameters(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding": ((RestEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((RestEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

