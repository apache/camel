/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.rest;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class RestEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        RestEndpoint target = (RestEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apidoc":
        case "apiDoc": target.setApiDoc(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bindingmode":
        case "bindingMode": target.setBindingMode(property(camelContext, org.apache.camel.spi.RestConfiguration.RestBindingMode.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "consumercomponentname":
        case "consumerComponentName": target.setConsumerComponentName(property(camelContext, java.lang.String.class, value)); return true;
        case "consumes": target.setConsumes(property(camelContext, java.lang.String.class, value)); return true;
        case "description": target.setDescription(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "host": target.setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "intype":
        case "inType": target.setInType(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "outtype":
        case "outType": target.setOutType(property(camelContext, java.lang.String.class, value)); return true;
        case "producercomponentname":
        case "producerComponentName": target.setProducerComponentName(property(camelContext, java.lang.String.class, value)); return true;
        case "produces": target.setProduces(property(camelContext, java.lang.String.class, value)); return true;
        case "queryparameters":
        case "queryParameters": target.setQueryParameters(property(camelContext, java.lang.String.class, value)); return true;
        case "routeid":
        case "routeId": target.setRouteId(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("apiDoc", java.lang.String.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bindingMode", org.apache.camel.spi.RestConfiguration.RestBindingMode.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("consumerComponentName", java.lang.String.class);
        answer.put("consumes", java.lang.String.class);
        answer.put("description", java.lang.String.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("host", java.lang.String.class);
        answer.put("inType", java.lang.String.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("outType", java.lang.String.class);
        answer.put("producerComponentName", java.lang.String.class);
        answer.put("produces", java.lang.String.class);
        answer.put("queryParameters", java.lang.String.class);
        answer.put("routeId", java.lang.String.class);
        answer.put("synchronous", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        RestEndpoint target = (RestEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apidoc":
        case "apiDoc": target.getApiDoc(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bindingmode":
        case "bindingMode": target.getBindingMode(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "consumercomponentname":
        case "consumerComponentName": target.getConsumerComponentName(); return true;
        case "consumes": target.getConsumes(); return true;
        case "description": target.getDescription(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "host": target.getHost(); return true;
        case "intype":
        case "inType": target.getInType(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "outtype":
        case "outType": target.getOutType(); return true;
        case "producercomponentname":
        case "producerComponentName": target.getProducerComponentName(); return true;
        case "produces": target.getProduces(); return true;
        case "queryparameters":
        case "queryParameters": target.getQueryParameters(); return true;
        case "routeid":
        case "routeId": target.getRouteId(); return true;
        case "synchronous": target.isSynchronous(); return true;
        default: return null;
        }
    }
}

