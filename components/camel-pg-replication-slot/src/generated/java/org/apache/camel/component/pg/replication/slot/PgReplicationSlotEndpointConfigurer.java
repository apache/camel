/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.pg.replication.slot;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class PgReplicationSlotEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "password": ((PgReplicationSlotEndpoint) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "user": ((PgReplicationSlotEndpoint) target).setUser(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((PgReplicationSlotEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((PgReplicationSlotEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((PgReplicationSlotEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((PgReplicationSlotEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((PgReplicationSlotEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "autoCreateSlot": ((PgReplicationSlotEndpoint) target).setAutoCreateSlot(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "basicPropertyBinding": ((PgReplicationSlotEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "slotOptions": ((PgReplicationSlotEndpoint) target).setSlotOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "statusInterval": ((PgReplicationSlotEndpoint) target).setStatusInterval(property(camelContext, java.lang.Integer.class, value)); return true;
        case "synchronous": ((PgReplicationSlotEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffErrorThreshold": ((PgReplicationSlotEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((PgReplicationSlotEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((PgReplicationSlotEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((PgReplicationSlotEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((PgReplicationSlotEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((PgReplicationSlotEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((PgReplicationSlotEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((PgReplicationSlotEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((PgReplicationSlotEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((PgReplicationSlotEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((PgReplicationSlotEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((PgReplicationSlotEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((PgReplicationSlotEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((PgReplicationSlotEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "password": ((PgReplicationSlotEndpoint) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "user": ((PgReplicationSlotEndpoint) target).setUser(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((PgReplicationSlotEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sendemptymessagewhenidle": ((PgReplicationSlotEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((PgReplicationSlotEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((PgReplicationSlotEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((PgReplicationSlotEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "autocreateslot": ((PgReplicationSlotEndpoint) target).setAutoCreateSlot(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "basicpropertybinding": ((PgReplicationSlotEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "slotoptions": ((PgReplicationSlotEndpoint) target).setSlotOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "statusinterval": ((PgReplicationSlotEndpoint) target).setStatusInterval(property(camelContext, java.lang.Integer.class, value)); return true;
        case "synchronous": ((PgReplicationSlotEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold": ((PgReplicationSlotEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((PgReplicationSlotEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((PgReplicationSlotEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((PgReplicationSlotEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((PgReplicationSlotEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((PgReplicationSlotEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((PgReplicationSlotEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((PgReplicationSlotEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((PgReplicationSlotEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((PgReplicationSlotEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((PgReplicationSlotEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((PgReplicationSlotEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((PgReplicationSlotEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((PgReplicationSlotEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

