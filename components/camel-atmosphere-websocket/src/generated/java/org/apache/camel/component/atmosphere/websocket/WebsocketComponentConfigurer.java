/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.atmosphere.websocket;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class WebsocketComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "servletName": ((WebsocketComponent) target).setServletName(property(camelContext, java.lang.String.class, value)); return true;
        case "httpRegistry": ((WebsocketComponent) target).setHttpRegistry(property(camelContext, org.apache.camel.component.servlet.HttpRegistry.class, value)); return true;
        case "attachmentMultipartBinding": ((WebsocketComponent) target).setAttachmentMultipartBinding(property(camelContext, boolean.class, value)); return true;
        case "fileNameExtWhitelist": ((WebsocketComponent) target).setFileNameExtWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "httpBinding": ((WebsocketComponent) target).setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "httpConfiguration": ((WebsocketComponent) target).setHttpConfiguration(property(camelContext, org.apache.camel.http.common.HttpConfiguration.class, value)); return true;
        case "allowJavaSerializedObject": ((WebsocketComponent) target).setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "headerFilterStrategy": ((WebsocketComponent) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicPropertyBinding": ((WebsocketComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((WebsocketComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((WebsocketComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "servletname": ((WebsocketComponent) target).setServletName(property(camelContext, java.lang.String.class, value)); return true;
        case "httpregistry": ((WebsocketComponent) target).setHttpRegistry(property(camelContext, org.apache.camel.component.servlet.HttpRegistry.class, value)); return true;
        case "attachmentmultipartbinding": ((WebsocketComponent) target).setAttachmentMultipartBinding(property(camelContext, boolean.class, value)); return true;
        case "filenameextwhitelist": ((WebsocketComponent) target).setFileNameExtWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "httpbinding": ((WebsocketComponent) target).setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "httpconfiguration": ((WebsocketComponent) target).setHttpConfiguration(property(camelContext, org.apache.camel.http.common.HttpConfiguration.class, value)); return true;
        case "allowjavaserializedobject": ((WebsocketComponent) target).setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy": ((WebsocketComponent) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicpropertybinding": ((WebsocketComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((WebsocketComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((WebsocketComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

