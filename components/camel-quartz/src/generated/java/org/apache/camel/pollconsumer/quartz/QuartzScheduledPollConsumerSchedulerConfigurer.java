/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.pollconsumer.quartz;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.pollconsumer.quartz.QuartzScheduledPollConsumerScheduler;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class QuartzScheduledPollConsumerSchedulerConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.pollconsumer.quartz.QuartzScheduledPollConsumerScheduler target = (org.apache.camel.pollconsumer.quartz.QuartzScheduledPollConsumerScheduler) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "camelcontext":
        case "camelContext": target.setCamelContext(property(camelContext, org.apache.camel.CamelContext.class, value)); return true;
        case "cron": target.setCron(property(camelContext, java.lang.String.class, value)); return true;
        case "deletejob":
        case "deleteJob": target.setDeleteJob(property(camelContext, boolean.class, value)); return true;
        case "jobparameters":
        case "jobParameters": target.setJobParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "quartzscheduler":
        case "quartzScheduler": target.setQuartzScheduler(property(camelContext, org.quartz.Scheduler.class, value)); return true;
        case "timezone":
        case "timeZone": target.setTimeZone(property(camelContext, java.util.TimeZone.class, value)); return true;
        case "triggergroup":
        case "triggerGroup": target.setTriggerGroup(property(camelContext, java.lang.String.class, value)); return true;
        case "triggerid":
        case "triggerId": target.setTriggerId(property(camelContext, java.lang.String.class, value)); return true;
        case "triggerparameters":
        case "triggerParameters": target.setTriggerParameters(property(camelContext, java.util.Map.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "camelcontext":
        case "camelContext": return org.apache.camel.CamelContext.class;
        case "cron": return java.lang.String.class;
        case "deletejob":
        case "deleteJob": return boolean.class;
        case "jobparameters":
        case "jobParameters": return java.util.Map.class;
        case "quartzscheduler":
        case "quartzScheduler": return org.quartz.Scheduler.class;
        case "timezone":
        case "timeZone": return java.util.TimeZone.class;
        case "triggergroup":
        case "triggerGroup": return java.lang.String.class;
        case "triggerid":
        case "triggerId": return java.lang.String.class;
        case "triggerparameters":
        case "triggerParameters": return java.util.Map.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.pollconsumer.quartz.QuartzScheduledPollConsumerScheduler target = (org.apache.camel.pollconsumer.quartz.QuartzScheduledPollConsumerScheduler) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "camelcontext":
        case "camelContext": return target.getCamelContext();
        case "cron": return target.getCron();
        case "deletejob":
        case "deleteJob": return target.isDeleteJob();
        case "jobparameters":
        case "jobParameters": return target.getJobParameters();
        case "quartzscheduler":
        case "quartzScheduler": return target.getQuartzScheduler();
        case "timezone":
        case "timeZone": return target.getTimeZone();
        case "triggergroup":
        case "triggerGroup": return target.getTriggerGroup();
        case "triggerid":
        case "triggerId": return target.getTriggerId();
        case "triggerparameters":
        case "triggerParameters": return target.getTriggerParameters();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "jobparameters":
        case "jobParameters": return java.lang.Object.class;
        case "triggerparameters":
        case "triggerParameters": return java.lang.Object.class;
        default: return null;
        }
    }
}

