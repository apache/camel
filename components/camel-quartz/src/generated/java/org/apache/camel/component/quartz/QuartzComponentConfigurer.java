/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.quartz;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class QuartzComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("bridgeErrorHandler", boolean.class);
        map.put("enableJmx", boolean.class);
        map.put("prefixInstanceName", boolean.class);
        map.put("prefixJobNameWithEndpointId", boolean.class);
        map.put("properties", java.util.Map.class);
        map.put("propertiesFile", java.lang.String.class);
        map.put("propertiesRef", java.lang.String.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("scheduler", org.quartz.Scheduler.class);
        map.put("schedulerFactory", org.quartz.SchedulerFactory.class);
        map.put("autoStartScheduler", boolean.class);
        map.put("interruptJobsOnShutdown", boolean.class);
        map.put("startDelayedSeconds", int.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        QuartzComponent target = (QuartzComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autostartscheduler":
        case "autoStartScheduler": target.setAutoStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "enablejmx":
        case "enableJmx": target.setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "interruptjobsonshutdown":
        case "interruptJobsOnShutdown": target.setInterruptJobsOnShutdown(property(camelContext, boolean.class, value)); return true;
        case "prefixinstancename":
        case "prefixInstanceName": target.setPrefixInstanceName(property(camelContext, boolean.class, value)); return true;
        case "prefixjobnamewithendpointid":
        case "prefixJobNameWithEndpointId": target.setPrefixJobNameWithEndpointId(property(camelContext, boolean.class, value)); return true;
        case "properties": target.setProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "propertiesfile":
        case "propertiesFile": target.setPropertiesFile(property(camelContext, java.lang.String.class, value)); return true;
        case "propertiesref":
        case "propertiesRef": target.setPropertiesRef(property(camelContext, java.lang.String.class, value)); return true;
        case "scheduler": target.setScheduler(property(camelContext, org.quartz.Scheduler.class, value)); return true;
        case "schedulerfactory":
        case "schedulerFactory": target.setSchedulerFactory(property(camelContext, org.quartz.SchedulerFactory.class, value)); return true;
        case "startdelayedseconds":
        case "startDelayedSeconds": target.setStartDelayedSeconds(property(camelContext, int.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        QuartzComponent target = (QuartzComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autostartscheduler":
        case "autoStartScheduler": return target.isAutoStartScheduler();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "enablejmx":
        case "enableJmx": return target.isEnableJmx();
        case "interruptjobsonshutdown":
        case "interruptJobsOnShutdown": return target.isInterruptJobsOnShutdown();
        case "prefixinstancename":
        case "prefixInstanceName": return target.isPrefixInstanceName();
        case "prefixjobnamewithendpointid":
        case "prefixJobNameWithEndpointId": return target.isPrefixJobNameWithEndpointId();
        case "properties": return target.getProperties();
        case "propertiesfile":
        case "propertiesFile": return target.getPropertiesFile();
        case "propertiesref":
        case "propertiesRef": return target.getPropertiesRef();
        case "scheduler": return target.getScheduler();
        case "schedulerfactory":
        case "schedulerFactory": return target.getSchedulerFactory();
        case "startdelayedseconds":
        case "startDelayedSeconds": return target.getStartDelayedSeconds();
        default: return null;
        }
    }
}

