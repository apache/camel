/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.dapr;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class DaprComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.dapr.DaprConfiguration getOrCreateConfiguration(DaprComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.dapr.DaprConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DaprComponent target = (DaprComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": target.setAutowiredEnabled(property(camelContext, boolean.class, value)); return true;
        case "bindingname":
        case "bindingName": getOrCreateConfiguration(target).setBindingName(property(camelContext, java.lang.String.class, value)); return true;
        case "bindingoperation":
        case "bindingOperation": getOrCreateConfiguration(target).setBindingOperation(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrency": getOrCreateConfiguration(target).setConcurrency(property(camelContext, io.dapr.client.domain.StateOptions.Concurrency.class, value)); return true;
        case "configkeys":
        case "configKeys": getOrCreateConfiguration(target).setConfigKeys(property(camelContext, java.util.List.class, value)); return true;
        case "configstore":
        case "configStore": getOrCreateConfiguration(target).setConfigStore(property(camelContext, java.lang.String.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.dapr.DaprConfiguration.class, value)); return true;
        case "consistency": getOrCreateConfiguration(target).setConsistency(property(camelContext, io.dapr.client.domain.StateOptions.Consistency.class, value)); return true;
        case "contenttype":
        case "contentType": getOrCreateConfiguration(target).setContentType(property(camelContext, java.lang.String.class, value)); return true;
        case "etag":
        case "eTag": getOrCreateConfiguration(target).setETag(property(camelContext, java.lang.String.class, value)); return true;
        case "httpextension":
        case "httpExtension": getOrCreateConfiguration(target).setHttpExtension(property(camelContext, io.dapr.client.domain.HttpExtension.class, value)); return true;
        case "key": getOrCreateConfiguration(target).setKey(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "methodtoinvoke":
        case "methodToInvoke": getOrCreateConfiguration(target).setMethodToInvoke(property(camelContext, java.lang.String.class, value)); return true;
        case "previewclient":
        case "previewClient": getOrCreateConfiguration(target).setPreviewClient(property(camelContext, io.dapr.client.DaprPreviewClient.class, value)); return true;
        case "pubsubname":
        case "pubSubName": getOrCreateConfiguration(target).setPubSubName(property(camelContext, java.lang.String.class, value)); return true;
        case "secretstore":
        case "secretStore": getOrCreateConfiguration(target).setSecretStore(property(camelContext, java.lang.String.class, value)); return true;
        case "servicetoinvoke":
        case "serviceToInvoke": getOrCreateConfiguration(target).setServiceToInvoke(property(camelContext, java.lang.String.class, value)); return true;
        case "stateoperation":
        case "stateOperation": getOrCreateConfiguration(target).setStateOperation(property(camelContext, org.apache.camel.component.dapr.StateOperation.class, value)); return true;
        case "statestore":
        case "stateStore": getOrCreateConfiguration(target).setStateStore(property(camelContext, java.lang.String.class, value)); return true;
        case "topic": getOrCreateConfiguration(target).setTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "verb": getOrCreateConfiguration(target).setVerb(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public String[] getAutowiredNames() {
        return new String[]{"httpExtension", "previewClient"};
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return boolean.class;
        case "bindingname":
        case "bindingName": return java.lang.String.class;
        case "bindingoperation":
        case "bindingOperation": return java.lang.String.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "concurrency": return io.dapr.client.domain.StateOptions.Concurrency.class;
        case "configkeys":
        case "configKeys": return java.util.List.class;
        case "configstore":
        case "configStore": return java.lang.String.class;
        case "configuration": return org.apache.camel.component.dapr.DaprConfiguration.class;
        case "consistency": return io.dapr.client.domain.StateOptions.Consistency.class;
        case "contenttype":
        case "contentType": return java.lang.String.class;
        case "etag":
        case "eTag": return java.lang.String.class;
        case "httpextension":
        case "httpExtension": return io.dapr.client.domain.HttpExtension.class;
        case "key": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "methodtoinvoke":
        case "methodToInvoke": return java.lang.String.class;
        case "previewclient":
        case "previewClient": return io.dapr.client.DaprPreviewClient.class;
        case "pubsubname":
        case "pubSubName": return java.lang.String.class;
        case "secretstore":
        case "secretStore": return java.lang.String.class;
        case "servicetoinvoke":
        case "serviceToInvoke": return java.lang.String.class;
        case "stateoperation":
        case "stateOperation": return org.apache.camel.component.dapr.StateOperation.class;
        case "statestore":
        case "stateStore": return java.lang.String.class;
        case "topic": return java.lang.String.class;
        case "verb": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DaprComponent target = (DaprComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autowiredenabled":
        case "autowiredEnabled": return target.isAutowiredEnabled();
        case "bindingname":
        case "bindingName": return getOrCreateConfiguration(target).getBindingName();
        case "bindingoperation":
        case "bindingOperation": return getOrCreateConfiguration(target).getBindingOperation();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "concurrency": return getOrCreateConfiguration(target).getConcurrency();
        case "configkeys":
        case "configKeys": return getOrCreateConfiguration(target).getConfigKeys();
        case "configstore":
        case "configStore": return getOrCreateConfiguration(target).getConfigStore();
        case "configuration": return target.getConfiguration();
        case "consistency": return getOrCreateConfiguration(target).getConsistency();
        case "contenttype":
        case "contentType": return getOrCreateConfiguration(target).getContentType();
        case "etag":
        case "eTag": return getOrCreateConfiguration(target).getETag();
        case "httpextension":
        case "httpExtension": return getOrCreateConfiguration(target).getHttpExtension();
        case "key": return getOrCreateConfiguration(target).getKey();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "methodtoinvoke":
        case "methodToInvoke": return getOrCreateConfiguration(target).getMethodToInvoke();
        case "previewclient":
        case "previewClient": return getOrCreateConfiguration(target).getPreviewClient();
        case "pubsubname":
        case "pubSubName": return getOrCreateConfiguration(target).getPubSubName();
        case "secretstore":
        case "secretStore": return getOrCreateConfiguration(target).getSecretStore();
        case "servicetoinvoke":
        case "serviceToInvoke": return getOrCreateConfiguration(target).getServiceToInvoke();
        case "stateoperation":
        case "stateOperation": return getOrCreateConfiguration(target).getStateOperation();
        case "statestore":
        case "stateStore": return getOrCreateConfiguration(target).getStateStore();
        case "topic": return getOrCreateConfiguration(target).getTopic();
        case "verb": return getOrCreateConfiguration(target).getVerb();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "configkeys":
        case "configKeys": return java.lang.String.class;
        default: return null;
        }
    }
}

