/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.ibm.watson.language;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class WatsonLanguageComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.ibm.watson.language.WatsonLanguageConfiguration getOrCreateConfiguration(WatsonLanguageComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.ibm.watson.language.WatsonLanguageConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        WatsonLanguageComponent target = (WatsonLanguageComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "analyzecategories":
        case "analyzeCategories": getOrCreateConfiguration(target).setAnalyzeCategories(property(camelContext, boolean.class, value)); return true;
        case "analyzeconcepts":
        case "analyzeConcepts": getOrCreateConfiguration(target).setAnalyzeConcepts(property(camelContext, boolean.class, value)); return true;
        case "analyzeemotion":
        case "analyzeEmotion": getOrCreateConfiguration(target).setAnalyzeEmotion(property(camelContext, boolean.class, value)); return true;
        case "analyzeentities":
        case "analyzeEntities": getOrCreateConfiguration(target).setAnalyzeEntities(property(camelContext, boolean.class, value)); return true;
        case "analyzekeywords":
        case "analyzeKeywords": getOrCreateConfiguration(target).setAnalyzeKeywords(property(camelContext, boolean.class, value)); return true;
        case "analyzesentiment":
        case "analyzeSentiment": getOrCreateConfiguration(target).setAnalyzeSentiment(property(camelContext, boolean.class, value)); return true;
        case "apikey":
        case "apiKey": getOrCreateConfiguration(target).setApiKey(property(camelContext, java.lang.String.class, value)); return true;
        case "autowiredenabled":
        case "autowiredEnabled": target.setAutowiredEnabled(property(camelContext, boolean.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.ibm.watson.language.WatsonLanguageConfiguration.class, value)); return true;
        case "healthcheckconsumerenabled":
        case "healthCheckConsumerEnabled": target.setHealthCheckConsumerEnabled(property(camelContext, boolean.class, value)); return true;
        case "healthcheckproducerenabled":
        case "healthCheckProducerEnabled": target.setHealthCheckProducerEnabled(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "operation": getOrCreateConfiguration(target).setOperation(property(camelContext, org.apache.camel.component.ibm.watson.language.WatsonLanguageOperations.class, value)); return true;
        case "serviceurl":
        case "serviceUrl": getOrCreateConfiguration(target).setServiceUrl(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "analyzecategories":
        case "analyzeCategories": return boolean.class;
        case "analyzeconcepts":
        case "analyzeConcepts": return boolean.class;
        case "analyzeemotion":
        case "analyzeEmotion": return boolean.class;
        case "analyzeentities":
        case "analyzeEntities": return boolean.class;
        case "analyzekeywords":
        case "analyzeKeywords": return boolean.class;
        case "analyzesentiment":
        case "analyzeSentiment": return boolean.class;
        case "apikey":
        case "apiKey": return java.lang.String.class;
        case "autowiredenabled":
        case "autowiredEnabled": return boolean.class;
        case "configuration": return org.apache.camel.component.ibm.watson.language.WatsonLanguageConfiguration.class;
        case "healthcheckconsumerenabled":
        case "healthCheckConsumerEnabled": return boolean.class;
        case "healthcheckproducerenabled":
        case "healthCheckProducerEnabled": return boolean.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "operation": return org.apache.camel.component.ibm.watson.language.WatsonLanguageOperations.class;
        case "serviceurl":
        case "serviceUrl": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        WatsonLanguageComponent target = (WatsonLanguageComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "analyzecategories":
        case "analyzeCategories": return getOrCreateConfiguration(target).isAnalyzeCategories();
        case "analyzeconcepts":
        case "analyzeConcepts": return getOrCreateConfiguration(target).isAnalyzeConcepts();
        case "analyzeemotion":
        case "analyzeEmotion": return getOrCreateConfiguration(target).isAnalyzeEmotion();
        case "analyzeentities":
        case "analyzeEntities": return getOrCreateConfiguration(target).isAnalyzeEntities();
        case "analyzekeywords":
        case "analyzeKeywords": return getOrCreateConfiguration(target).isAnalyzeKeywords();
        case "analyzesentiment":
        case "analyzeSentiment": return getOrCreateConfiguration(target).isAnalyzeSentiment();
        case "apikey":
        case "apiKey": return getOrCreateConfiguration(target).getApiKey();
        case "autowiredenabled":
        case "autowiredEnabled": return target.isAutowiredEnabled();
        case "configuration": return target.getConfiguration();
        case "healthcheckconsumerenabled":
        case "healthCheckConsumerEnabled": return target.isHealthCheckConsumerEnabled();
        case "healthcheckproducerenabled":
        case "healthCheckProducerEnabled": return target.isHealthCheckProducerEnabled();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "operation": return getOrCreateConfiguration(target).getOperation();
        case "serviceurl":
        case "serviceUrl": return getOrCreateConfiguration(target).getServiceUrl();
        default: return null;
        }
    }
}

