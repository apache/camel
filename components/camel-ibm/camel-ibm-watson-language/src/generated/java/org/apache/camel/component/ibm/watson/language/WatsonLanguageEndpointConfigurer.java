/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.ibm.watson.language;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class WatsonLanguageEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        WatsonLanguageEndpoint target = (WatsonLanguageEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "analyzecategories":
        case "analyzeCategories": target.getConfiguration().setAnalyzeCategories(property(camelContext, boolean.class, value)); return true;
        case "analyzeconcepts":
        case "analyzeConcepts": target.getConfiguration().setAnalyzeConcepts(property(camelContext, boolean.class, value)); return true;
        case "analyzeemotion":
        case "analyzeEmotion": target.getConfiguration().setAnalyzeEmotion(property(camelContext, boolean.class, value)); return true;
        case "analyzeentities":
        case "analyzeEntities": target.getConfiguration().setAnalyzeEntities(property(camelContext, boolean.class, value)); return true;
        case "analyzekeywords":
        case "analyzeKeywords": target.getConfiguration().setAnalyzeKeywords(property(camelContext, boolean.class, value)); return true;
        case "analyzesentiment":
        case "analyzeSentiment": target.getConfiguration().setAnalyzeSentiment(property(camelContext, boolean.class, value)); return true;
        case "apikey":
        case "apiKey": target.getConfiguration().setApiKey(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "operation": target.getConfiguration().setOperation(property(camelContext, org.apache.camel.component.ibm.watson.language.WatsonLanguageOperations.class, value)); return true;
        case "serviceurl":
        case "serviceUrl": target.getConfiguration().setServiceUrl(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "analyzecategories":
        case "analyzeCategories": return boolean.class;
        case "analyzeconcepts":
        case "analyzeConcepts": return boolean.class;
        case "analyzeemotion":
        case "analyzeEmotion": return boolean.class;
        case "analyzeentities":
        case "analyzeEntities": return boolean.class;
        case "analyzekeywords":
        case "analyzeKeywords": return boolean.class;
        case "analyzesentiment":
        case "analyzeSentiment": return boolean.class;
        case "apikey":
        case "apiKey": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "operation": return org.apache.camel.component.ibm.watson.language.WatsonLanguageOperations.class;
        case "serviceurl":
        case "serviceUrl": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        WatsonLanguageEndpoint target = (WatsonLanguageEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "analyzecategories":
        case "analyzeCategories": return target.getConfiguration().isAnalyzeCategories();
        case "analyzeconcepts":
        case "analyzeConcepts": return target.getConfiguration().isAnalyzeConcepts();
        case "analyzeemotion":
        case "analyzeEmotion": return target.getConfiguration().isAnalyzeEmotion();
        case "analyzeentities":
        case "analyzeEntities": return target.getConfiguration().isAnalyzeEntities();
        case "analyzekeywords":
        case "analyzeKeywords": return target.getConfiguration().isAnalyzeKeywords();
        case "analyzesentiment":
        case "analyzeSentiment": return target.getConfiguration().isAnalyzeSentiment();
        case "apikey":
        case "apiKey": return target.getConfiguration().getApiKey();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "operation": return target.getConfiguration().getOperation();
        case "serviceurl":
        case "serviceUrl": return target.getConfiguration().getServiceUrl();
        default: return null;
        }
    }
}

