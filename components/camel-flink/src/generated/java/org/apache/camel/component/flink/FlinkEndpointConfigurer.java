/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.flink;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class FlinkEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        FlinkEndpoint target = (FlinkEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "collect": target.setCollect(property(camelContext, boolean.class, value)); return true;
        case "dataset":
        case "dataSet": target.setDataSet(property(camelContext, org.apache.flink.api.java.DataSet.class, value)); return true;
        case "datasetcallback":
        case "dataSetCallback": target.setDataSetCallback(property(camelContext, org.apache.camel.component.flink.DataSetCallback.class, value)); return true;
        case "datastream":
        case "dataStream": target.setDataStream(property(camelContext, org.apache.flink.streaming.api.datastream.DataStream.class, value)); return true;
        case "datastreamcallback":
        case "dataStreamCallback": target.setDataStreamCallback(property(camelContext, org.apache.camel.component.flink.DataStreamCallback.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("collect", boolean.class);
        answer.put("dataSet", org.apache.flink.api.java.DataSet.class);
        answer.put("dataSetCallback", org.apache.camel.component.flink.DataSetCallback.class);
        answer.put("dataStream", org.apache.flink.streaming.api.datastream.DataStream.class);
        answer.put("dataStreamCallback", org.apache.camel.component.flink.DataStreamCallback.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("synchronous", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        FlinkEndpoint target = (FlinkEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "collect": target.isCollect(); return true;
        case "dataset":
        case "dataSet": target.getDataSet(); return true;
        case "datasetcallback":
        case "dataSetCallback": target.getDataSetCallback(); return true;
        case "datastream":
        case "dataStream": target.getDataStream(); return true;
        case "datastreamcallback":
        case "dataStreamCallback": target.getDataStreamCallback(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "synchronous": target.isSynchronous(); return true;
        default: return null;
        }
    }
}

