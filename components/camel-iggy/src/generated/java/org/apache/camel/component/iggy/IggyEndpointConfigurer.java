/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.iggy;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class IggyEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        IggyEndpoint target = (IggyEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocommit":
        case "autoCommit": target.getConfiguration().setAutoCommit(property(camelContext, boolean.class, value)); return true;
        case "autocreatestream":
        case "autoCreateStream": target.getConfiguration().setAutoCreateStream(property(camelContext, boolean.class, value)); return true;
        case "autocreatetopic":
        case "autoCreateTopic": target.getConfiguration().setAutoCreateTopic(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "clienttransport":
        case "clientTransport": target.getConfiguration().setClientTransport(property(camelContext, java.lang.String.class, value)); return true;
        case "compressionalgorithm":
        case "compressionAlgorithm": target.getConfiguration().setCompressionAlgorithm(property(camelContext, org.apache.iggy.topic.CompressionAlgorithm.class, value)); return true;
        case "consumergroupname":
        case "consumerGroupName": target.getConfiguration().setConsumerGroupName(property(camelContext, java.lang.String.class, value)); return true;
        case "consumerscount":
        case "consumersCount": target.getConfiguration().setConsumersCount(property(camelContext, int.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "host": target.getConfiguration().setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxtopicsize":
        case "maxTopicSize": target.getConfiguration().setMaxTopicSize(property(camelContext, java.lang.Long.class, value)); return true;
        case "messageexpiry":
        case "messageExpiry": target.getConfiguration().setMessageExpiry(property(camelContext, java.lang.Long.class, value)); return true;
        case "partitionid":
        case "partitionId": target.getConfiguration().setPartitionId(property(camelContext, java.lang.Long.class, value)); return true;
        case "partitioning": target.getConfiguration().setPartitioning(property(camelContext, org.apache.iggy.message.Partitioning.class, value)); return true;
        case "partitionscount":
        case "partitionsCount": target.getConfiguration().setPartitionsCount(property(camelContext, java.lang.Long.class, value)); return true;
        case "password": target.getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "pollbatchsize":
        case "pollBatchSize": target.getConfiguration().setPollBatchSize(property(camelContext, java.lang.Long.class, value)); return true;
        case "pollingstrategy":
        case "pollingStrategy": target.getConfiguration().setPollingStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "port": target.getConfiguration().setPort(property(camelContext, int.class, value)); return true;
        case "replicationfactor":
        case "replicationFactor": target.getConfiguration().setReplicationFactor(property(camelContext, java.lang.Short.class, value)); return true;
        case "shutdowntimeout":
        case "shutdownTimeout": target.getConfiguration().setShutdownTimeout(property(camelContext, int.class, value)); return true;
        case "startingoffset":
        case "startingOffset": target.getConfiguration().setStartingOffset(property(camelContext, java.lang.Long.class, value)); return true;
        case "streamid":
        case "streamId": target.getConfiguration().setStreamId(property(camelContext, java.lang.Long.class, value)); return true;
        case "streamname":
        case "streamName": target.getConfiguration().setStreamName(property(camelContext, java.lang.String.class, value)); return true;
        case "username": target.getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocommit":
        case "autoCommit": return boolean.class;
        case "autocreatestream":
        case "autoCreateStream": return boolean.class;
        case "autocreatetopic":
        case "autoCreateTopic": return boolean.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "clienttransport":
        case "clientTransport": return java.lang.String.class;
        case "compressionalgorithm":
        case "compressionAlgorithm": return org.apache.iggy.topic.CompressionAlgorithm.class;
        case "consumergroupname":
        case "consumerGroupName": return java.lang.String.class;
        case "consumerscount":
        case "consumersCount": return int.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "host": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxtopicsize":
        case "maxTopicSize": return java.lang.Long.class;
        case "messageexpiry":
        case "messageExpiry": return java.lang.Long.class;
        case "partitionid":
        case "partitionId": return java.lang.Long.class;
        case "partitioning": return org.apache.iggy.message.Partitioning.class;
        case "partitionscount":
        case "partitionsCount": return java.lang.Long.class;
        case "password": return java.lang.String.class;
        case "pollbatchsize":
        case "pollBatchSize": return java.lang.Long.class;
        case "pollingstrategy":
        case "pollingStrategy": return java.lang.String.class;
        case "port": return int.class;
        case "replicationfactor":
        case "replicationFactor": return java.lang.Short.class;
        case "shutdowntimeout":
        case "shutdownTimeout": return int.class;
        case "startingoffset":
        case "startingOffset": return java.lang.Long.class;
        case "streamid":
        case "streamId": return java.lang.Long.class;
        case "streamname":
        case "streamName": return java.lang.String.class;
        case "username": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        IggyEndpoint target = (IggyEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocommit":
        case "autoCommit": return target.getConfiguration().isAutoCommit();
        case "autocreatestream":
        case "autoCreateStream": return target.getConfiguration().isAutoCreateStream();
        case "autocreatetopic":
        case "autoCreateTopic": return target.getConfiguration().isAutoCreateTopic();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "clienttransport":
        case "clientTransport": return target.getConfiguration().getClientTransport();
        case "compressionalgorithm":
        case "compressionAlgorithm": return target.getConfiguration().getCompressionAlgorithm();
        case "consumergroupname":
        case "consumerGroupName": return target.getConfiguration().getConsumerGroupName();
        case "consumerscount":
        case "consumersCount": return target.getConfiguration().getConsumersCount();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "host": return target.getConfiguration().getHost();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxtopicsize":
        case "maxTopicSize": return target.getConfiguration().getMaxTopicSize();
        case "messageexpiry":
        case "messageExpiry": return target.getConfiguration().getMessageExpiry();
        case "partitionid":
        case "partitionId": return target.getConfiguration().getPartitionId();
        case "partitioning": return target.getConfiguration().getPartitioning();
        case "partitionscount":
        case "partitionsCount": return target.getConfiguration().getPartitionsCount();
        case "password": return target.getConfiguration().getPassword();
        case "pollbatchsize":
        case "pollBatchSize": return target.getConfiguration().getPollBatchSize();
        case "pollingstrategy":
        case "pollingStrategy": return target.getConfiguration().getPollingStrategy();
        case "port": return target.getConfiguration().getPort();
        case "replicationfactor":
        case "replicationFactor": return target.getConfiguration().getReplicationFactor();
        case "shutdowntimeout":
        case "shutdownTimeout": return target.getConfiguration().getShutdownTimeout();
        case "startingoffset":
        case "startingOffset": return target.getConfiguration().getStartingOffset();
        case "streamid":
        case "streamId": return target.getConfiguration().getStreamId();
        case "streamname":
        case "streamName": return target.getConfiguration().getStreamName();
        case "username": return target.getConfiguration().getUsername();
        default: return null;
        }
    }
}

