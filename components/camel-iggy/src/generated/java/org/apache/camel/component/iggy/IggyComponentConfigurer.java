/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.iggy;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class IggyComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.iggy.IggyConfiguration getOrCreateConfiguration(IggyComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.iggy.IggyConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        IggyComponent target = (IggyComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocommit":
        case "autoCommit": getOrCreateConfiguration(target).setAutoCommit(property(camelContext, boolean.class, value)); return true;
        case "autocreatestream":
        case "autoCreateStream": getOrCreateConfiguration(target).setAutoCreateStream(property(camelContext, boolean.class, value)); return true;
        case "autocreatetopic":
        case "autoCreateTopic": getOrCreateConfiguration(target).setAutoCreateTopic(property(camelContext, boolean.class, value)); return true;
        case "autowiredenabled":
        case "autowiredEnabled": target.setAutowiredEnabled(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "clienttransport":
        case "clientTransport": getOrCreateConfiguration(target).setClientTransport(property(camelContext, java.lang.String.class, value)); return true;
        case "compressionalgorithm":
        case "compressionAlgorithm": getOrCreateConfiguration(target).setCompressionAlgorithm(property(camelContext, org.apache.iggy.topic.CompressionAlgorithm.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.iggy.IggyConfiguration.class, value)); return true;
        case "consumergroupname":
        case "consumerGroupName": getOrCreateConfiguration(target).setConsumerGroupName(property(camelContext, java.lang.String.class, value)); return true;
        case "consumerscount":
        case "consumersCount": getOrCreateConfiguration(target).setConsumersCount(property(camelContext, int.class, value)); return true;
        case "host": getOrCreateConfiguration(target).setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxtopicsize":
        case "maxTopicSize": getOrCreateConfiguration(target).setMaxTopicSize(property(camelContext, java.lang.Long.class, value)); return true;
        case "messageexpiry":
        case "messageExpiry": getOrCreateConfiguration(target).setMessageExpiry(property(camelContext, java.lang.Long.class, value)); return true;
        case "partitionid":
        case "partitionId": getOrCreateConfiguration(target).setPartitionId(property(camelContext, java.lang.Long.class, value)); return true;
        case "partitioning": getOrCreateConfiguration(target).setPartitioning(property(camelContext, org.apache.iggy.message.Partitioning.class, value)); return true;
        case "partitionscount":
        case "partitionsCount": getOrCreateConfiguration(target).setPartitionsCount(property(camelContext, java.lang.Long.class, value)); return true;
        case "password": getOrCreateConfiguration(target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "pollbatchsize":
        case "pollBatchSize": getOrCreateConfiguration(target).setPollBatchSize(property(camelContext, java.lang.Long.class, value)); return true;
        case "pollingstrategy":
        case "pollingStrategy": getOrCreateConfiguration(target).setPollingStrategy(property(camelContext, java.lang.String.class, value)); return true;
        case "port": getOrCreateConfiguration(target).setPort(property(camelContext, int.class, value)); return true;
        case "replicationfactor":
        case "replicationFactor": getOrCreateConfiguration(target).setReplicationFactor(property(camelContext, java.lang.Short.class, value)); return true;
        case "shutdowntimeout":
        case "shutdownTimeout": getOrCreateConfiguration(target).setShutdownTimeout(property(camelContext, int.class, value)); return true;
        case "startingoffset":
        case "startingOffset": getOrCreateConfiguration(target).setStartingOffset(property(camelContext, java.lang.Long.class, value)); return true;
        case "streamid":
        case "streamId": getOrCreateConfiguration(target).setStreamId(property(camelContext, java.lang.Long.class, value)); return true;
        case "streamname":
        case "streamName": getOrCreateConfiguration(target).setStreamName(property(camelContext, java.lang.String.class, value)); return true;
        case "username": getOrCreateConfiguration(target).setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocommit":
        case "autoCommit": return boolean.class;
        case "autocreatestream":
        case "autoCreateStream": return boolean.class;
        case "autocreatetopic":
        case "autoCreateTopic": return boolean.class;
        case "autowiredenabled":
        case "autowiredEnabled": return boolean.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "clienttransport":
        case "clientTransport": return java.lang.String.class;
        case "compressionalgorithm":
        case "compressionAlgorithm": return org.apache.iggy.topic.CompressionAlgorithm.class;
        case "configuration": return org.apache.camel.component.iggy.IggyConfiguration.class;
        case "consumergroupname":
        case "consumerGroupName": return java.lang.String.class;
        case "consumerscount":
        case "consumersCount": return int.class;
        case "host": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxtopicsize":
        case "maxTopicSize": return java.lang.Long.class;
        case "messageexpiry":
        case "messageExpiry": return java.lang.Long.class;
        case "partitionid":
        case "partitionId": return java.lang.Long.class;
        case "partitioning": return org.apache.iggy.message.Partitioning.class;
        case "partitionscount":
        case "partitionsCount": return java.lang.Long.class;
        case "password": return java.lang.String.class;
        case "pollbatchsize":
        case "pollBatchSize": return java.lang.Long.class;
        case "pollingstrategy":
        case "pollingStrategy": return java.lang.String.class;
        case "port": return int.class;
        case "replicationfactor":
        case "replicationFactor": return java.lang.Short.class;
        case "shutdowntimeout":
        case "shutdownTimeout": return int.class;
        case "startingoffset":
        case "startingOffset": return java.lang.Long.class;
        case "streamid":
        case "streamId": return java.lang.Long.class;
        case "streamname":
        case "streamName": return java.lang.String.class;
        case "username": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        IggyComponent target = (IggyComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocommit":
        case "autoCommit": return getOrCreateConfiguration(target).isAutoCommit();
        case "autocreatestream":
        case "autoCreateStream": return getOrCreateConfiguration(target).isAutoCreateStream();
        case "autocreatetopic":
        case "autoCreateTopic": return getOrCreateConfiguration(target).isAutoCreateTopic();
        case "autowiredenabled":
        case "autowiredEnabled": return target.isAutowiredEnabled();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "clienttransport":
        case "clientTransport": return getOrCreateConfiguration(target).getClientTransport();
        case "compressionalgorithm":
        case "compressionAlgorithm": return getOrCreateConfiguration(target).getCompressionAlgorithm();
        case "configuration": return target.getConfiguration();
        case "consumergroupname":
        case "consumerGroupName": return getOrCreateConfiguration(target).getConsumerGroupName();
        case "consumerscount":
        case "consumersCount": return getOrCreateConfiguration(target).getConsumersCount();
        case "host": return getOrCreateConfiguration(target).getHost();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxtopicsize":
        case "maxTopicSize": return getOrCreateConfiguration(target).getMaxTopicSize();
        case "messageexpiry":
        case "messageExpiry": return getOrCreateConfiguration(target).getMessageExpiry();
        case "partitionid":
        case "partitionId": return getOrCreateConfiguration(target).getPartitionId();
        case "partitioning": return getOrCreateConfiguration(target).getPartitioning();
        case "partitionscount":
        case "partitionsCount": return getOrCreateConfiguration(target).getPartitionsCount();
        case "password": return getOrCreateConfiguration(target).getPassword();
        case "pollbatchsize":
        case "pollBatchSize": return getOrCreateConfiguration(target).getPollBatchSize();
        case "pollingstrategy":
        case "pollingStrategy": return getOrCreateConfiguration(target).getPollingStrategy();
        case "port": return getOrCreateConfiguration(target).getPort();
        case "replicationfactor":
        case "replicationFactor": return getOrCreateConfiguration(target).getReplicationFactor();
        case "shutdowntimeout":
        case "shutdownTimeout": return getOrCreateConfiguration(target).getShutdownTimeout();
        case "startingoffset":
        case "startingOffset": return getOrCreateConfiguration(target).getStartingOffset();
        case "streamid":
        case "streamId": return getOrCreateConfiguration(target).getStreamId();
        case "streamname":
        case "streamName": return getOrCreateConfiguration(target).getStreamName();
        case "username": return getOrCreateConfiguration(target).getUsername();
        default: return null;
        }
    }
}

