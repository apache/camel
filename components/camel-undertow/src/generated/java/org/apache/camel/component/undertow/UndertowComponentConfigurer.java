/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.undertow;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class UndertowComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("bridgeErrorHandler", boolean.class);
        map.put("muteException", boolean.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("hostOptions", org.apache.camel.component.undertow.UndertowHostOptions.class);
        map.put("undertowHttpBinding", org.apache.camel.component.undertow.UndertowHttpBinding.class);
        map.put("allowedRoles", java.lang.String.class);
        map.put("securityConfiguration", java.lang.Object.class);
        map.put("securityProvider", org.apache.camel.component.undertow.spi.UndertowSecurityProvider.class);
        map.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        map.put("useGlobalSslContextParameters", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        UndertowComponent target = (UndertowComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowedroles":
        case "allowedRoles": target.setAllowedRoles(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "hostoptions":
        case "hostOptions": target.setHostOptions(property(camelContext, org.apache.camel.component.undertow.UndertowHostOptions.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "muteexception":
        case "muteException": target.setMuteException(property(camelContext, boolean.class, value)); return true;
        case "securityconfiguration":
        case "securityConfiguration": target.setSecurityConfiguration(property(camelContext, java.lang.Object.class, value)); return true;
        case "securityprovider":
        case "securityProvider": target.setSecurityProvider(property(camelContext, org.apache.camel.component.undertow.spi.UndertowSecurityProvider.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "undertowhttpbinding":
        case "undertowHttpBinding": target.setUndertowHttpBinding(property(camelContext, org.apache.camel.component.undertow.UndertowHttpBinding.class, value)); return true;
        case "useglobalsslcontextparameters":
        case "useGlobalSslContextParameters": target.setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        UndertowComponent target = (UndertowComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowedroles":
        case "allowedRoles": return target.getAllowedRoles();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "hostoptions":
        case "hostOptions": return target.getHostOptions();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "muteexception":
        case "muteException": return target.isMuteException();
        case "securityconfiguration":
        case "securityConfiguration": return target.getSecurityConfiguration();
        case "securityprovider":
        case "securityProvider": return target.getSecurityProvider();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getSslContextParameters();
        case "undertowhttpbinding":
        case "undertowHttpBinding": return target.getUndertowHttpBinding();
        case "useglobalsslcontextparameters":
        case "useGlobalSslContextParameters": return target.isUseGlobalSslContextParameters();
        default: return null;
        }
    }
}

