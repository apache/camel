/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.debezium;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DebeziumPostgresEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DebeziumPostgresEndpoint target = (DebeziumPostgresEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "additionalproperties":
        case "additionalProperties": target.getConfiguration().setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "columnblacklist":
        case "columnBlacklist": target.getConfiguration().setColumnBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "databasedbname":
        case "databaseDbname": target.getConfiguration().setDatabaseDbname(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistoryfilefilename":
        case "databaseHistoryFileFilename": target.getConfiguration().setDatabaseHistoryFileFilename(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehostname":
        case "databaseHostname": target.getConfiguration().setDatabaseHostname(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseinitialstatements":
        case "databaseInitialStatements": target.getConfiguration().setDatabaseInitialStatements(property(camelContext, java.lang.String.class, value)); return true;
        case "databasepassword":
        case "databasePassword": target.getConfiguration().setDatabasePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseport":
        case "databasePort": target.getConfiguration().setDatabasePort(property(camelContext, int.class, value)); return true;
        case "databaseservername":
        case "databaseServerName": target.getConfiguration().setDatabaseServerName(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslcert":
        case "databaseSslcert": target.getConfiguration().setDatabaseSslcert(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslfactory":
        case "databaseSslfactory": target.getConfiguration().setDatabaseSslfactory(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslkey":
        case "databaseSslkey": target.getConfiguration().setDatabaseSslkey(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslmode":
        case "databaseSslmode": target.getConfiguration().setDatabaseSslmode(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslpassword":
        case "databaseSslpassword": target.getConfiguration().setDatabaseSslpassword(property(camelContext, java.lang.String.class, value)); return true;
        case "databasesslrootcert":
        case "databaseSslrootcert": target.getConfiguration().setDatabaseSslrootcert(property(camelContext, java.lang.String.class, value)); return true;
        case "databasetcpkeepalive":
        case "databaseTcpkeepalive": target.getConfiguration().setDatabaseTcpkeepalive(property(camelContext, boolean.class, value)); return true;
        case "databaseuser":
        case "databaseUser": target.getConfiguration().setDatabaseUser(property(camelContext, java.lang.String.class, value)); return true;
        case "decimalhandlingmode":
        case "decimalHandlingMode": target.getConfiguration().setDecimalHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": target.getConfiguration().setHeartbeatIntervalMs(property(camelContext, int.class, value)); return true;
        case "heartbeattopicsprefix":
        case "heartbeatTopicsPrefix": target.getConfiguration().setHeartbeatTopicsPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "hstorehandlingmode":
        case "hstoreHandlingMode": target.getConfiguration().setHstoreHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "includeunknowndatatypes":
        case "includeUnknownDatatypes": target.getConfiguration().setIncludeUnknownDatatypes(property(camelContext, boolean.class, value)); return true;
        case "internalkeyconverter":
        case "internalKeyConverter": target.getConfiguration().setInternalKeyConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "internalvalueconverter":
        case "internalValueConverter": target.getConfiguration().setInternalValueConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "intervalhandlingmode":
        case "intervalHandlingMode": target.getConfiguration().setIntervalHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "maxbatchsize":
        case "maxBatchSize": target.getConfiguration().setMaxBatchSize(property(camelContext, int.class, value)); return true;
        case "maxqueuesize":
        case "maxQueueSize": target.getConfiguration().setMaxQueueSize(property(camelContext, int.class, value)); return true;
        case "messagekeycolumns":
        case "messageKeyColumns": target.getConfiguration().setMessageKeyColumns(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommitpolicy":
        case "offsetCommitPolicy": target.getConfiguration().setOffsetCommitPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommittimeoutms":
        case "offsetCommitTimeoutMs": target.getConfiguration().setOffsetCommitTimeoutMs(property(camelContext, long.class, value)); return true;
        case "offsetflushintervalms":
        case "offsetFlushIntervalMs": target.getConfiguration().setOffsetFlushIntervalMs(property(camelContext, long.class, value)); return true;
        case "offsetstorage":
        case "offsetStorage": target.getConfiguration().setOffsetStorage(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragefilename":
        case "offsetStorageFileName": target.getConfiguration().setOffsetStorageFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragepartitions":
        case "offsetStoragePartitions": target.getConfiguration().setOffsetStoragePartitions(property(camelContext, int.class, value)); return true;
        case "offsetstoragereplicationfactor":
        case "offsetStorageReplicationFactor": target.getConfiguration().setOffsetStorageReplicationFactor(property(camelContext, int.class, value)); return true;
        case "offsetstoragetopic":
        case "offsetStorageTopic": target.getConfiguration().setOffsetStorageTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "pluginname":
        case "pluginName": target.getConfiguration().setPluginName(property(camelContext, java.lang.String.class, value)); return true;
        case "pollintervalms":
        case "pollIntervalMs": target.getConfiguration().setPollIntervalMs(property(camelContext, long.class, value)); return true;
        case "publicationname":
        case "publicationName": target.getConfiguration().setPublicationName(property(camelContext, java.lang.String.class, value)); return true;
        case "schemablacklist":
        case "schemaBlacklist": target.getConfiguration().setSchemaBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "schemarefreshmode":
        case "schemaRefreshMode": target.getConfiguration().setSchemaRefreshMode(property(camelContext, java.lang.String.class, value)); return true;
        case "schemawhitelist":
        case "schemaWhitelist": target.getConfiguration().setSchemaWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "slotdroponstop":
        case "slotDropOnStop": target.getConfiguration().setSlotDropOnStop(property(camelContext, boolean.class, value)); return true;
        case "slotmaxretries":
        case "slotMaxRetries": target.getConfiguration().setSlotMaxRetries(property(camelContext, int.class, value)); return true;
        case "slotname":
        case "slotName": target.getConfiguration().setSlotName(property(camelContext, java.lang.String.class, value)); return true;
        case "slotretrydelayms":
        case "slotRetryDelayMs": target.getConfiguration().setSlotRetryDelayMs(property(camelContext, long.class, value)); return true;
        case "slotstreamparams":
        case "slotStreamParams": target.getConfiguration().setSlotStreamParams(property(camelContext, java.lang.String.class, value)); return true;
        case "snapshotcustomclass":
        case "snapshotCustomClass": target.getConfiguration().setSnapshotCustomClass(property(camelContext, java.lang.String.class, value)); return true;
        case "snapshotdelayms":
        case "snapshotDelayMs": target.getConfiguration().setSnapshotDelayMs(property(camelContext, long.class, value)); return true;
        case "snapshotfetchsize":
        case "snapshotFetchSize": target.getConfiguration().setSnapshotFetchSize(property(camelContext, int.class, value)); return true;
        case "snapshotlocktimeoutms":
        case "snapshotLockTimeoutMs": target.getConfiguration().setSnapshotLockTimeoutMs(property(camelContext, long.class, value)); return true;
        case "snapshotmode":
        case "snapshotMode": target.getConfiguration().setSnapshotMode(property(camelContext, java.lang.String.class, value)); return true;
        case "snapshotselectstatementoverrides":
        case "snapshotSelectStatementOverrides": target.getConfiguration().setSnapshotSelectStatementOverrides(property(camelContext, java.lang.String.class, value)); return true;
        case "sourcestructversion":
        case "sourceStructVersion": target.getConfiguration().setSourceStructVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "statusupdateintervalms":
        case "statusUpdateIntervalMs": target.getConfiguration().setStatusUpdateIntervalMs(property(camelContext, int.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "tableblacklist":
        case "tableBlacklist": target.getConfiguration().setTableBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "tablewhitelist":
        case "tableWhitelist": target.getConfiguration().setTableWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "timeprecisionmode":
        case "timePrecisionMode": target.getConfiguration().setTimePrecisionMode(property(camelContext, java.lang.String.class, value)); return true;
        case "toastedvalueplaceholder":
        case "toastedValuePlaceholder": target.getConfiguration().setToastedValuePlaceholder(property(camelContext, java.lang.String.class, value)); return true;
        case "tombstonesondelete":
        case "tombstonesOnDelete": target.getConfiguration().setTombstonesOnDelete(property(camelContext, boolean.class, value)); return true;
        case "xminfetchintervalms":
        case "xminFetchIntervalMs": target.getConfiguration().setXminFetchIntervalMs(property(camelContext, long.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("additionalProperties", java.util.Map.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("columnBlacklist", java.lang.String.class);
        answer.put("databaseDbname", java.lang.String.class);
        answer.put("databaseHistoryFileFilename", java.lang.String.class);
        answer.put("databaseHostname", java.lang.String.class);
        answer.put("databaseInitialStatements", java.lang.String.class);
        answer.put("databasePassword", java.lang.String.class);
        answer.put("databasePort", int.class);
        answer.put("databaseServerName", java.lang.String.class);
        answer.put("databaseSslcert", java.lang.String.class);
        answer.put("databaseSslfactory", java.lang.String.class);
        answer.put("databaseSslkey", java.lang.String.class);
        answer.put("databaseSslmode", java.lang.String.class);
        answer.put("databaseSslpassword", java.lang.String.class);
        answer.put("databaseSslrootcert", java.lang.String.class);
        answer.put("databaseTcpkeepalive", boolean.class);
        answer.put("databaseUser", java.lang.String.class);
        answer.put("decimalHandlingMode", java.lang.String.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("heartbeatIntervalMs", int.class);
        answer.put("heartbeatTopicsPrefix", java.lang.String.class);
        answer.put("hstoreHandlingMode", java.lang.String.class);
        answer.put("includeUnknownDatatypes", boolean.class);
        answer.put("internalKeyConverter", java.lang.String.class);
        answer.put("internalValueConverter", java.lang.String.class);
        answer.put("intervalHandlingMode", java.lang.String.class);
        answer.put("maxBatchSize", int.class);
        answer.put("maxQueueSize", int.class);
        answer.put("messageKeyColumns", java.lang.String.class);
        answer.put("offsetCommitPolicy", java.lang.String.class);
        answer.put("offsetCommitTimeoutMs", long.class);
        answer.put("offsetFlushIntervalMs", long.class);
        answer.put("offsetStorage", java.lang.String.class);
        answer.put("offsetStorageFileName", java.lang.String.class);
        answer.put("offsetStoragePartitions", int.class);
        answer.put("offsetStorageReplicationFactor", int.class);
        answer.put("offsetStorageTopic", java.lang.String.class);
        answer.put("pluginName", java.lang.String.class);
        answer.put("pollIntervalMs", long.class);
        answer.put("publicationName", java.lang.String.class);
        answer.put("schemaBlacklist", java.lang.String.class);
        answer.put("schemaRefreshMode", java.lang.String.class);
        answer.put("schemaWhitelist", java.lang.String.class);
        answer.put("slotDropOnStop", boolean.class);
        answer.put("slotMaxRetries", int.class);
        answer.put("slotName", java.lang.String.class);
        answer.put("slotRetryDelayMs", long.class);
        answer.put("slotStreamParams", java.lang.String.class);
        answer.put("snapshotCustomClass", java.lang.String.class);
        answer.put("snapshotDelayMs", long.class);
        answer.put("snapshotFetchSize", int.class);
        answer.put("snapshotLockTimeoutMs", long.class);
        answer.put("snapshotMode", java.lang.String.class);
        answer.put("snapshotSelectStatementOverrides", java.lang.String.class);
        answer.put("sourceStructVersion", java.lang.String.class);
        answer.put("statusUpdateIntervalMs", int.class);
        answer.put("synchronous", boolean.class);
        answer.put("tableBlacklist", java.lang.String.class);
        answer.put("tableWhitelist", java.lang.String.class);
        answer.put("timePrecisionMode", java.lang.String.class);
        answer.put("toastedValuePlaceholder", java.lang.String.class);
        answer.put("tombstonesOnDelete", boolean.class);
        answer.put("xminFetchIntervalMs", long.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DebeziumPostgresEndpoint target = (DebeziumPostgresEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "additionalproperties":
        case "additionalProperties": target.getConfiguration().getAdditionalProperties(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "columnblacklist":
        case "columnBlacklist": target.getConfiguration().getColumnBlacklist(); return true;
        case "databasedbname":
        case "databaseDbname": target.getConfiguration().getDatabaseDbname(); return true;
        case "databasehistoryfilefilename":
        case "databaseHistoryFileFilename": target.getConfiguration().getDatabaseHistoryFileFilename(); return true;
        case "databasehostname":
        case "databaseHostname": target.getConfiguration().getDatabaseHostname(); return true;
        case "databaseinitialstatements":
        case "databaseInitialStatements": target.getConfiguration().getDatabaseInitialStatements(); return true;
        case "databasepassword":
        case "databasePassword": target.getConfiguration().getDatabasePassword(); return true;
        case "databaseport":
        case "databasePort": target.getConfiguration().getDatabasePort(); return true;
        case "databaseservername":
        case "databaseServerName": target.getConfiguration().getDatabaseServerName(); return true;
        case "databasesslcert":
        case "databaseSslcert": target.getConfiguration().getDatabaseSslcert(); return true;
        case "databasesslfactory":
        case "databaseSslfactory": target.getConfiguration().getDatabaseSslfactory(); return true;
        case "databasesslkey":
        case "databaseSslkey": target.getConfiguration().getDatabaseSslkey(); return true;
        case "databasesslmode":
        case "databaseSslmode": target.getConfiguration().getDatabaseSslmode(); return true;
        case "databasesslpassword":
        case "databaseSslpassword": target.getConfiguration().getDatabaseSslpassword(); return true;
        case "databasesslrootcert":
        case "databaseSslrootcert": target.getConfiguration().getDatabaseSslrootcert(); return true;
        case "databasetcpkeepalive":
        case "databaseTcpkeepalive": target.getConfiguration().isDatabaseTcpkeepalive(); return true;
        case "databaseuser":
        case "databaseUser": target.getConfiguration().getDatabaseUser(); return true;
        case "decimalhandlingmode":
        case "decimalHandlingMode": target.getConfiguration().getDecimalHandlingMode(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "heartbeatintervalms":
        case "heartbeatIntervalMs": target.getConfiguration().getHeartbeatIntervalMs(); return true;
        case "heartbeattopicsprefix":
        case "heartbeatTopicsPrefix": target.getConfiguration().getHeartbeatTopicsPrefix(); return true;
        case "hstorehandlingmode":
        case "hstoreHandlingMode": target.getConfiguration().getHstoreHandlingMode(); return true;
        case "includeunknowndatatypes":
        case "includeUnknownDatatypes": target.getConfiguration().isIncludeUnknownDatatypes(); return true;
        case "internalkeyconverter":
        case "internalKeyConverter": target.getConfiguration().getInternalKeyConverter(); return true;
        case "internalvalueconverter":
        case "internalValueConverter": target.getConfiguration().getInternalValueConverter(); return true;
        case "intervalhandlingmode":
        case "intervalHandlingMode": target.getConfiguration().getIntervalHandlingMode(); return true;
        case "maxbatchsize":
        case "maxBatchSize": target.getConfiguration().getMaxBatchSize(); return true;
        case "maxqueuesize":
        case "maxQueueSize": target.getConfiguration().getMaxQueueSize(); return true;
        case "messagekeycolumns":
        case "messageKeyColumns": target.getConfiguration().getMessageKeyColumns(); return true;
        case "offsetcommitpolicy":
        case "offsetCommitPolicy": target.getConfiguration().getOffsetCommitPolicy(); return true;
        case "offsetcommittimeoutms":
        case "offsetCommitTimeoutMs": target.getConfiguration().getOffsetCommitTimeoutMs(); return true;
        case "offsetflushintervalms":
        case "offsetFlushIntervalMs": target.getConfiguration().getOffsetFlushIntervalMs(); return true;
        case "offsetstorage":
        case "offsetStorage": target.getConfiguration().getOffsetStorage(); return true;
        case "offsetstoragefilename":
        case "offsetStorageFileName": target.getConfiguration().getOffsetStorageFileName(); return true;
        case "offsetstoragepartitions":
        case "offsetStoragePartitions": target.getConfiguration().getOffsetStoragePartitions(); return true;
        case "offsetstoragereplicationfactor":
        case "offsetStorageReplicationFactor": target.getConfiguration().getOffsetStorageReplicationFactor(); return true;
        case "offsetstoragetopic":
        case "offsetStorageTopic": target.getConfiguration().getOffsetStorageTopic(); return true;
        case "pluginname":
        case "pluginName": target.getConfiguration().getPluginName(); return true;
        case "pollintervalms":
        case "pollIntervalMs": target.getConfiguration().getPollIntervalMs(); return true;
        case "publicationname":
        case "publicationName": target.getConfiguration().getPublicationName(); return true;
        case "schemablacklist":
        case "schemaBlacklist": target.getConfiguration().getSchemaBlacklist(); return true;
        case "schemarefreshmode":
        case "schemaRefreshMode": target.getConfiguration().getSchemaRefreshMode(); return true;
        case "schemawhitelist":
        case "schemaWhitelist": target.getConfiguration().getSchemaWhitelist(); return true;
        case "slotdroponstop":
        case "slotDropOnStop": target.getConfiguration().isSlotDropOnStop(); return true;
        case "slotmaxretries":
        case "slotMaxRetries": target.getConfiguration().getSlotMaxRetries(); return true;
        case "slotname":
        case "slotName": target.getConfiguration().getSlotName(); return true;
        case "slotretrydelayms":
        case "slotRetryDelayMs": target.getConfiguration().getSlotRetryDelayMs(); return true;
        case "slotstreamparams":
        case "slotStreamParams": target.getConfiguration().getSlotStreamParams(); return true;
        case "snapshotcustomclass":
        case "snapshotCustomClass": target.getConfiguration().getSnapshotCustomClass(); return true;
        case "snapshotdelayms":
        case "snapshotDelayMs": target.getConfiguration().getSnapshotDelayMs(); return true;
        case "snapshotfetchsize":
        case "snapshotFetchSize": target.getConfiguration().getSnapshotFetchSize(); return true;
        case "snapshotlocktimeoutms":
        case "snapshotLockTimeoutMs": target.getConfiguration().getSnapshotLockTimeoutMs(); return true;
        case "snapshotmode":
        case "snapshotMode": target.getConfiguration().getSnapshotMode(); return true;
        case "snapshotselectstatementoverrides":
        case "snapshotSelectStatementOverrides": target.getConfiguration().getSnapshotSelectStatementOverrides(); return true;
        case "sourcestructversion":
        case "sourceStructVersion": target.getConfiguration().getSourceStructVersion(); return true;
        case "statusupdateintervalms":
        case "statusUpdateIntervalMs": target.getConfiguration().getStatusUpdateIntervalMs(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "tableblacklist":
        case "tableBlacklist": target.getConfiguration().getTableBlacklist(); return true;
        case "tablewhitelist":
        case "tableWhitelist": target.getConfiguration().getTableWhitelist(); return true;
        case "timeprecisionmode":
        case "timePrecisionMode": target.getConfiguration().getTimePrecisionMode(); return true;
        case "toastedvalueplaceholder":
        case "toastedValuePlaceholder": target.getConfiguration().getToastedValuePlaceholder(); return true;
        case "tombstonesondelete":
        case "tombstonesOnDelete": target.getConfiguration().isTombstonesOnDelete(); return true;
        case "xminfetchintervalms":
        case "xminFetchIntervalMs": target.getConfiguration().getXminFetchIntervalMs(); return true;
        default: return null;
        }
    }
}

