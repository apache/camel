/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.grpc;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class GrpcEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        GrpcEndpoint target = (GrpcEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authenticationtype":
        case "authenticationType": target.getConfiguration().setAuthenticationType(property(camelContext, org.apache.camel.component.grpc.GrpcAuthType.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "consumerstrategy":
        case "consumerStrategy": target.getConfiguration().setConsumerStrategy(property(camelContext, org.apache.camel.component.grpc.GrpcConsumerStrategy.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "flowcontrolwindow":
        case "flowControlWindow": target.getConfiguration().setFlowControlWindow(property(camelContext, int.class, value)); return true;
        case "forwardoncompleted":
        case "forwardOnCompleted": target.getConfiguration().setForwardOnCompleted(property(camelContext, boolean.class, value)); return true;
        case "forwardonerror":
        case "forwardOnError": target.getConfiguration().setForwardOnError(property(camelContext, boolean.class, value)); return true;
        case "jwtalgorithm":
        case "jwtAlgorithm": target.getConfiguration().setJwtAlgorithm(property(camelContext, org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm.class, value)); return true;
        case "jwtissuer":
        case "jwtIssuer": target.getConfiguration().setJwtIssuer(property(camelContext, java.lang.String.class, value)); return true;
        case "jwtsecret":
        case "jwtSecret": target.getConfiguration().setJwtSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "jwtsubject":
        case "jwtSubject": target.getConfiguration().setJwtSubject(property(camelContext, java.lang.String.class, value)); return true;
        case "keycertchainresource":
        case "keyCertChainResource": target.getConfiguration().setKeyCertChainResource(property(camelContext, java.lang.String.class, value)); return true;
        case "keypassword":
        case "keyPassword": target.getConfiguration().setKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "keyresource":
        case "keyResource": target.getConfiguration().setKeyResource(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxconcurrentcallsperconnection":
        case "maxConcurrentCallsPerConnection": target.getConfiguration().setMaxConcurrentCallsPerConnection(property(camelContext, int.class, value)); return true;
        case "maxmessagesize":
        case "maxMessageSize": target.getConfiguration().setMaxMessageSize(property(camelContext, int.class, value)); return true;
        case "method": target.getConfiguration().setMethod(property(camelContext, java.lang.String.class, value)); return true;
        case "negotiationtype":
        case "negotiationType": target.getConfiguration().setNegotiationType(property(camelContext, io.grpc.netty.NegotiationType.class, value)); return true;
        case "producerstrategy":
        case "producerStrategy": target.getConfiguration().setProducerStrategy(property(camelContext, org.apache.camel.component.grpc.GrpcProducerStrategy.class, value)); return true;
        case "serviceaccountresource":
        case "serviceAccountResource": target.getConfiguration().setServiceAccountResource(property(camelContext, java.lang.String.class, value)); return true;
        case "streamrepliesto":
        case "streamRepliesTo": target.getConfiguration().setStreamRepliesTo(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "trustcertcollectionresource":
        case "trustCertCollectionResource": target.getConfiguration().setTrustCertCollectionResource(property(camelContext, java.lang.String.class, value)); return true;
        case "useragent":
        case "userAgent": target.getConfiguration().setUserAgent(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("authenticationType", org.apache.camel.component.grpc.GrpcAuthType.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("consumerStrategy", org.apache.camel.component.grpc.GrpcConsumerStrategy.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("flowControlWindow", int.class);
        answer.put("forwardOnCompleted", boolean.class);
        answer.put("forwardOnError", boolean.class);
        answer.put("jwtAlgorithm", org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm.class);
        answer.put("jwtIssuer", java.lang.String.class);
        answer.put("jwtSecret", java.lang.String.class);
        answer.put("jwtSubject", java.lang.String.class);
        answer.put("keyCertChainResource", java.lang.String.class);
        answer.put("keyPassword", java.lang.String.class);
        answer.put("keyResource", java.lang.String.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("maxConcurrentCallsPerConnection", int.class);
        answer.put("maxMessageSize", int.class);
        answer.put("method", java.lang.String.class);
        answer.put("negotiationType", io.grpc.netty.NegotiationType.class);
        answer.put("producerStrategy", org.apache.camel.component.grpc.GrpcProducerStrategy.class);
        answer.put("serviceAccountResource", java.lang.String.class);
        answer.put("streamRepliesTo", java.lang.String.class);
        answer.put("synchronous", boolean.class);
        answer.put("trustCertCollectionResource", java.lang.String.class);
        answer.put("userAgent", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        GrpcEndpoint target = (GrpcEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authenticationtype":
        case "authenticationType": target.getConfiguration().getAuthenticationType(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "consumerstrategy":
        case "consumerStrategy": target.getConfiguration().getConsumerStrategy(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "flowcontrolwindow":
        case "flowControlWindow": target.getConfiguration().getFlowControlWindow(); return true;
        case "forwardoncompleted":
        case "forwardOnCompleted": target.getConfiguration().isForwardOnCompleted(); return true;
        case "forwardonerror":
        case "forwardOnError": target.getConfiguration().isForwardOnError(); return true;
        case "jwtalgorithm":
        case "jwtAlgorithm": target.getConfiguration().getJwtAlgorithm(); return true;
        case "jwtissuer":
        case "jwtIssuer": target.getConfiguration().getJwtIssuer(); return true;
        case "jwtsecret":
        case "jwtSecret": target.getConfiguration().getJwtSecret(); return true;
        case "jwtsubject":
        case "jwtSubject": target.getConfiguration().getJwtSubject(); return true;
        case "keycertchainresource":
        case "keyCertChainResource": target.getConfiguration().getKeyCertChainResource(); return true;
        case "keypassword":
        case "keyPassword": target.getConfiguration().getKeyPassword(); return true;
        case "keyresource":
        case "keyResource": target.getConfiguration().getKeyResource(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "maxconcurrentcallsperconnection":
        case "maxConcurrentCallsPerConnection": target.getConfiguration().getMaxConcurrentCallsPerConnection(); return true;
        case "maxmessagesize":
        case "maxMessageSize": target.getConfiguration().getMaxMessageSize(); return true;
        case "method": target.getConfiguration().getMethod(); return true;
        case "negotiationtype":
        case "negotiationType": target.getConfiguration().getNegotiationType(); return true;
        case "producerstrategy":
        case "producerStrategy": target.getConfiguration().getProducerStrategy(); return true;
        case "serviceaccountresource":
        case "serviceAccountResource": target.getConfiguration().getServiceAccountResource(); return true;
        case "streamrepliesto":
        case "streamRepliesTo": target.getConfiguration().getStreamRepliesTo(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "trustcertcollectionresource":
        case "trustCertCollectionResource": target.getConfiguration().getTrustCertCollectionResource(); return true;
        case "useragent":
        case "userAgent": target.getConfiguration().getUserAgent(); return true;
        default: return null;
        }
    }
}

