/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.azure.eventhubs;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class EventHubsEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":namespace/eventHubName";

    private static final Set<String> PROPERTY_NAMES;
    private static final Set<String> SECRET_PROPERTY_NAMES;
    static {
        Set<String> props = new HashSet<>(24);
        props.add("blobStorageSharedKeyCredential");
        props.add("connectionString");
        props.add("autoDiscoverClient");
        props.add("prefetchCount");
        props.add("sharedAccessKey");
        props.add("sharedAccessName");
        props.add("partitionId");
        props.add("checkpointStore");
        props.add("synchronous");
        props.add("exchangePattern");
        props.add("amqpTransportType");
        props.add("consumerGroupName");
        props.add("eventPosition");
        props.add("lazyStartProducer");
        props.add("blobAccountName");
        props.add("bridgeErrorHandler");
        props.add("producerAsyncClient");
        props.add("partitionKey");
        props.add("namespace");
        props.add("amqpRetryOptions");
        props.add("blobContainerName");
        props.add("eventHubName");
        props.add("exceptionHandler");
        props.add("blobAccessKey");
        PROPERTY_NAMES = Collections.unmodifiableSet(props);
        Set<String> secretProps = new HashSet<>(4);
        secretProps.add("blobStorageSharedKeyCredential");
        secretProps.add("connectionString");
        secretProps.add("sharedAccessKey");
        secretProps.add("blobAccessKey");
        SECRET_PROPERTY_NAMES = Collections.unmodifiableSet(secretProps);
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "azure-eventhubs".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "namespace", null, false, copy);
        uri = buildPathParameter(syntax, uri, "eventHubName", null, false, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

