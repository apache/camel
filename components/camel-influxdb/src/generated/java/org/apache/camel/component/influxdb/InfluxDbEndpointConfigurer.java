/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.influxdb;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class InfluxDbEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        InfluxDbEndpoint target = (InfluxDbEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocreatedatabase":
        case "autoCreateDatabase": target.setAutoCreateDatabase(property(camelContext, boolean.class, value)); return true;
        case "batch": target.setBatch(property(camelContext, boolean.class, value)); return true;
        case "checkdatabaseexistence":
        case "checkDatabaseExistence": target.setCheckDatabaseExistence(property(camelContext, boolean.class, value)); return true;
        case "databasename":
        case "databaseName": target.setDatabaseName(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "operation": target.setOperation(property(camelContext, java.lang.String.class, value)); return true;
        case "query": target.setQuery(property(camelContext, java.lang.String.class, value)); return true;
        case "retentionpolicy":
        case "retentionPolicy": target.setRetentionPolicy(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocreatedatabase":
        case "autoCreateDatabase": return boolean.class;
        case "batch": return boolean.class;
        case "checkdatabaseexistence":
        case "checkDatabaseExistence": return boolean.class;
        case "databasename":
        case "databaseName": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "operation": return java.lang.String.class;
        case "query": return java.lang.String.class;
        case "retentionpolicy":
        case "retentionPolicy": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        InfluxDbEndpoint target = (InfluxDbEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "autocreatedatabase":
        case "autoCreateDatabase": return target.isAutoCreateDatabase();
        case "batch": return target.isBatch();
        case "checkdatabaseexistence":
        case "checkDatabaseExistence": return target.isCheckDatabaseExistence();
        case "databasename":
        case "databaseName": return target.getDatabaseName();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "operation": return target.getOperation();
        case "query": return target.getQuery();
        case "retentionpolicy":
        case "retentionPolicy": return target.getRetentionPolicy();
        default: return null;
        }
    }
}

