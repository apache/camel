/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.atomix.client.messaging;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class AtomixMessagingEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "atomix": ((AtomixMessagingEndpoint) target).getConfiguration().setAtomix(property(camelContext, io.atomix.Atomix.class, value)); return true;
        case "broadcastType": ((AtomixMessagingEndpoint) target).getConfiguration().setBroadcastType(property(camelContext, org.apache.camel.component.atomix.client.messaging.AtomixMessaging.BroadcastType.class, value)); return true;
        case "channelName": ((AtomixMessagingEndpoint) target).getConfiguration().setChannelName(property(camelContext, java.lang.String.class, value)); return true;
        case "configurationUri": ((AtomixMessagingEndpoint) target).getConfiguration().setConfigurationUri(property(camelContext, java.lang.String.class, value)); return true;
        case "defaultAction": ((AtomixMessagingEndpoint) target).getConfiguration().setDefaultAction(property(camelContext, org.apache.camel.component.atomix.client.messaging.AtomixMessaging.Action.class, value)); return true;
        case "memberName": ((AtomixMessagingEndpoint) target).getConfiguration().setMemberName(property(camelContext, java.lang.String.class, value)); return true;
        case "nodes": ((AtomixMessagingEndpoint) target).getConfiguration().setNodes(property(camelContext, java.lang.String.class, value)); return true;
        case "resultHeader": ((AtomixMessagingEndpoint) target).getConfiguration().setResultHeader(property(camelContext, java.lang.String.class, value)); return true;
        case "transportClassName": ((AtomixMessagingEndpoint) target).getConfiguration().setTransportClassName(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((AtomixMessagingEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((AtomixMessagingEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((AtomixMessagingEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazyStartProducer": ((AtomixMessagingEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((AtomixMessagingEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "defaultResourceConfig": ((AtomixMessagingEndpoint) target).getConfiguration().setDefaultResourceConfig(property(camelContext, java.util.Properties.class, value)); return true;
        case "defaultResourceOptions": ((AtomixMessagingEndpoint) target).getConfiguration().setDefaultResourceOptions(property(camelContext, java.util.Properties.class, value)); return true;
        case "ephemeral": ((AtomixMessagingEndpoint) target).getConfiguration().setEphemeral(property(camelContext, boolean.class, value)); return true;
        case "readConsistency": ((AtomixMessagingEndpoint) target).getConfiguration().setReadConsistency(property(camelContext, io.atomix.resource.ReadConsistency.class, value)); return true;
        case "resourceConfigs": ((AtomixMessagingEndpoint) target).getConfiguration().setResourceConfigs(property(camelContext, java.util.Map.class, value)); return true;
        case "resourceOptions": ((AtomixMessagingEndpoint) target).getConfiguration().setResourceOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "synchronous": ((AtomixMessagingEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "atomix": ((AtomixMessagingEndpoint) target).getConfiguration().setAtomix(property(camelContext, io.atomix.Atomix.class, value)); return true;
        case "broadcasttype": ((AtomixMessagingEndpoint) target).getConfiguration().setBroadcastType(property(camelContext, org.apache.camel.component.atomix.client.messaging.AtomixMessaging.BroadcastType.class, value)); return true;
        case "channelname": ((AtomixMessagingEndpoint) target).getConfiguration().setChannelName(property(camelContext, java.lang.String.class, value)); return true;
        case "configurationuri": ((AtomixMessagingEndpoint) target).getConfiguration().setConfigurationUri(property(camelContext, java.lang.String.class, value)); return true;
        case "defaultaction": ((AtomixMessagingEndpoint) target).getConfiguration().setDefaultAction(property(camelContext, org.apache.camel.component.atomix.client.messaging.AtomixMessaging.Action.class, value)); return true;
        case "membername": ((AtomixMessagingEndpoint) target).getConfiguration().setMemberName(property(camelContext, java.lang.String.class, value)); return true;
        case "nodes": ((AtomixMessagingEndpoint) target).getConfiguration().setNodes(property(camelContext, java.lang.String.class, value)); return true;
        case "resultheader": ((AtomixMessagingEndpoint) target).getConfiguration().setResultHeader(property(camelContext, java.lang.String.class, value)); return true;
        case "transportclassname": ((AtomixMessagingEndpoint) target).getConfiguration().setTransportClassName(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((AtomixMessagingEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((AtomixMessagingEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((AtomixMessagingEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazystartproducer": ((AtomixMessagingEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((AtomixMessagingEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "defaultresourceconfig": ((AtomixMessagingEndpoint) target).getConfiguration().setDefaultResourceConfig(property(camelContext, java.util.Properties.class, value)); return true;
        case "defaultresourceoptions": ((AtomixMessagingEndpoint) target).getConfiguration().setDefaultResourceOptions(property(camelContext, java.util.Properties.class, value)); return true;
        case "ephemeral": ((AtomixMessagingEndpoint) target).getConfiguration().setEphemeral(property(camelContext, boolean.class, value)); return true;
        case "readconsistency": ((AtomixMessagingEndpoint) target).getConfiguration().setReadConsistency(property(camelContext, io.atomix.resource.ReadConsistency.class, value)); return true;
        case "resourceconfigs": ((AtomixMessagingEndpoint) target).getConfiguration().setResourceConfigs(property(camelContext, java.util.Map.class, value)); return true;
        case "resourceoptions": ((AtomixMessagingEndpoint) target).getConfiguration().setResourceOptions(property(camelContext, java.util.Map.class, value)); return true;
        case "synchronous": ((AtomixMessagingEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

