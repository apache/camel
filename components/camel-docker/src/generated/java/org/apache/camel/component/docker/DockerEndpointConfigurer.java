/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.docker;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DockerEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DockerEndpoint target = (DockerEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "certpath":
        case "certPath": target.getConfiguration().setCertPath(property(camelContext, java.lang.String.class, value)); return true;
        case "cmdexecfactory":
        case "cmdExecFactory": target.getConfiguration().setCmdExecFactory(property(camelContext, java.lang.String.class, value)); return true;
        case "email": target.getConfiguration().setEmail(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "followredirectfilter":
        case "followRedirectFilter": target.getConfiguration().setFollowRedirectFilter(property(camelContext, boolean.class, value)); return true;
        case "host": target.getConfiguration().setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "loggingfilter":
        case "loggingFilter": target.getConfiguration().setLoggingFilter(property(camelContext, boolean.class, value)); return true;
        case "maxperrouteconnections":
        case "maxPerRouteConnections": target.getConfiguration().setMaxPerRouteConnections(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxtotalconnections":
        case "maxTotalConnections": target.getConfiguration().setMaxTotalConnections(property(camelContext, java.lang.Integer.class, value)); return true;
        case "parameters": target.getConfiguration().setParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "password": target.getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "port": target.getConfiguration().setPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.getConfiguration().setRequestTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "secure": target.getConfiguration().setSecure(property(camelContext, boolean.class, value)); return true;
        case "serveraddress":
        case "serverAddress": target.getConfiguration().setServerAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "socket": target.getConfiguration().setSocket(property(camelContext, boolean.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "tlsverify":
        case "tlsVerify": target.getConfiguration().setTlsVerify(property(camelContext, boolean.class, value)); return true;
        case "username": target.getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("certPath", java.lang.String.class);
        answer.put("cmdExecFactory", java.lang.String.class);
        answer.put("email", java.lang.String.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("followRedirectFilter", boolean.class);
        answer.put("host", java.lang.String.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("loggingFilter", boolean.class);
        answer.put("maxPerRouteConnections", java.lang.Integer.class);
        answer.put("maxTotalConnections", java.lang.Integer.class);
        answer.put("parameters", java.util.Map.class);
        answer.put("password", java.lang.String.class);
        answer.put("port", java.lang.Integer.class);
        answer.put("requestTimeout", java.lang.Integer.class);
        answer.put("secure", boolean.class);
        answer.put("serverAddress", java.lang.String.class);
        answer.put("socket", boolean.class);
        answer.put("synchronous", boolean.class);
        answer.put("tlsVerify", boolean.class);
        answer.put("username", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DockerEndpoint target = (DockerEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "certpath":
        case "certPath": target.getConfiguration().getCertPath(); return true;
        case "cmdexecfactory":
        case "cmdExecFactory": target.getConfiguration().getCmdExecFactory(); return true;
        case "email": target.getConfiguration().getEmail(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "followredirectfilter":
        case "followRedirectFilter": target.getConfiguration().isFollowRedirectFilter(); return true;
        case "host": target.getConfiguration().getHost(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "loggingfilter":
        case "loggingFilter": target.getConfiguration().isLoggingFilter(); return true;
        case "maxperrouteconnections":
        case "maxPerRouteConnections": target.getConfiguration().getMaxPerRouteConnections(); return true;
        case "maxtotalconnections":
        case "maxTotalConnections": target.getConfiguration().getMaxTotalConnections(); return true;
        case "parameters": target.getConfiguration().getParameters(); return true;
        case "password": target.getConfiguration().getPassword(); return true;
        case "port": target.getConfiguration().getPort(); return true;
        case "requesttimeout":
        case "requestTimeout": target.getConfiguration().getRequestTimeout(); return true;
        case "secure": target.getConfiguration().isSecure(); return true;
        case "serveraddress":
        case "serverAddress": target.getConfiguration().getServerAddress(); return true;
        case "socket": target.getConfiguration().isSocket(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "tlsverify":
        case "tlsVerify": target.getConfiguration().isTlsVerify(); return true;
        case "username": target.getConfiguration().getUsername(); return true;
        default: return null;
        }
    }
}

