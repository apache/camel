/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.azure.cosmosdb;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class CosmosDbEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":databaseName/containerName";

    private static final Set<String> PROPERTY_NAMES;
    private static final Set<String> SECRET_PROPERTY_NAMES;
    private static final Set<String> MULTI_VALUE_PREFIXES;
    static {
        Set<String> props = new HashSet<>(32);
        props.add("accountKey");
        props.add("bridgeErrorHandler");
        props.add("changeFeedProcessorOptions");
        props.add("clientTelemetryEnabled");
        props.add("connectionSharingAcrossClientsEnabled");
        props.add("consistencyLevel");
        props.add("containerName");
        props.add("containerPartitionKeyPath");
        props.add("contentResponseOnWriteEnabled");
        props.add("cosmosAsyncClient");
        props.add("createContainerIfNotExists");
        props.add("createDatabaseIfNotExists");
        props.add("createLeaseContainerIfNotExists");
        props.add("createLeaseDatabaseIfNotExists");
        props.add("databaseEndpoint");
        props.add("databaseName");
        props.add("exceptionHandler");
        props.add("exchangePattern");
        props.add("hostName");
        props.add("itemId");
        props.add("itemPartitionKey");
        props.add("lazyStartProducer");
        props.add("leaseContainerName");
        props.add("leaseDatabaseName");
        props.add("multipleWriteRegionsEnabled");
        props.add("operation");
        props.add("preferredRegions");
        props.add("query");
        props.add("queryRequestOptions");
        props.add("readRequestsFallbackEnabled");
        props.add("throughputProperties");
        props.add("useDefaultIdentity");
        PROPERTY_NAMES = Collections.unmodifiableSet(props);
        Set<String> secretProps = new HashSet<>(1);
        secretProps.add("accountKey");
        SECRET_PROPERTY_NAMES = Collections.unmodifiableSet(secretProps);
        MULTI_VALUE_PREFIXES = Collections.emptySet();
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "azure-cosmosdb".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "databaseName", null, false, copy);
        uri = buildPathParameter(syntax, uri, "containerName", null, false, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

