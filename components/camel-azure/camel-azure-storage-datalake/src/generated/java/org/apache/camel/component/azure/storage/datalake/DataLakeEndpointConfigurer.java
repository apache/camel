/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.azure.storage.datalake;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DataLakeEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        DataLakeEndpoint target = (DataLakeEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accountkey":
        case "accountKey": target.getConfiguration().setAccountKey(property(camelContext, java.lang.String.class, value)); return true;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "clientid":
        case "clientId": target.getConfiguration().setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "clientsecret":
        case "clientSecret": target.getConfiguration().setClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "clientsecretcredential":
        case "clientSecretCredential": target.getConfiguration().setClientSecretCredential(property(camelContext, com.azure.identity.ClientSecretCredential.class, value)); return true;
        case "close": target.getConfiguration().setClose(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "closestreamafterread":
        case "closeStreamAfterRead": target.getConfiguration().setCloseStreamAfterRead(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "datacount":
        case "dataCount": target.getConfiguration().setDataCount(property(camelContext, java.lang.Long.class, value)); return true;
        case "datalakeserviceclient":
        case "dataLakeServiceClient": target.setDataLakeServiceClient(property(camelContext, com.azure.storage.file.datalake.DataLakeServiceClient.class, value)); return true;
        case "delay": target.setDelay(property(camelContext, long.class, value)); return true;
        case "directoryname":
        case "directoryName": target.getConfiguration().setDirectoryName(property(camelContext, java.lang.String.class, value)); return true;
        case "downloadlinkexpiration":
        case "downloadLinkExpiration": target.getConfiguration().setDownloadLinkExpiration(property(camelContext, java.lang.Long.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "expression": target.getConfiguration().setExpression(property(camelContext, java.lang.String.class, value)); return true;
        case "filedir":
        case "fileDir": target.getConfiguration().setFileDir(property(camelContext, java.lang.String.class, value)); return true;
        case "filename":
        case "fileName": target.getConfiguration().setFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "fileoffset":
        case "fileOffset": target.getConfiguration().setFileOffset(property(camelContext, java.lang.Long.class, value)); return true;
        case "greedy": target.setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay":
        case "initialDelay": target.setInitialDelay(property(camelContext, long.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxresults":
        case "maxResults": target.getConfiguration().setMaxResults(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxretryrequests":
        case "maxRetryRequests": target.getConfiguration().setMaxRetryRequests(property(camelContext, int.class, value)); return true;
        case "openoptions":
        case "openOptions": target.getConfiguration().setOpenOptions(property(camelContext, java.util.Set.class, value)); return true;
        case "operation": target.getConfiguration().setOperation(property(camelContext, org.apache.camel.component.azure.storage.datalake.DataLakeOperationsDefinition.class, value)); return true;
        case "path": target.getConfiguration().setPath(property(camelContext, java.lang.String.class, value)); return true;
        case "permission": target.getConfiguration().setPermission(property(camelContext, java.lang.String.class, value)); return true;
        case "pollstrategy":
        case "pollStrategy": target.setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "position": target.getConfiguration().setPosition(property(camelContext, java.lang.Long.class, value)); return true;
        case "recursive": target.getConfiguration().setRecursive(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "regex": target.getConfiguration().setRegex(property(camelContext, java.lang.String.class, value)); return true;
        case "repeatcount":
        case "repeatCount": target.setRepeatCount(property(camelContext, long.class, value)); return true;
        case "retainuncommiteddata":
        case "retainUncommitedData": target.getConfiguration().setRetainUncommitedData(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": target.setScheduler(property(camelContext, java.lang.Object.class, value)); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "serviceclient":
        case "serviceClient": target.getConfiguration().setServiceClient(property(camelContext, com.azure.storage.file.datalake.DataLakeServiceClient.class, value)); return true;
        case "sharedkeycredential":
        case "sharedKeyCredential": target.getConfiguration().setSharedKeyCredential(property(camelContext, com.azure.storage.common.StorageSharedKeyCredential.class, value)); return true;
        case "startscheduler":
        case "startScheduler": target.setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "tenantid":
        case "tenantId": target.getConfiguration().setTenantId(property(camelContext, java.lang.String.class, value)); return true;
        case "timeunit":
        case "timeUnit": target.setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "timeout": target.getConfiguration().setTimeout(property(camelContext, java.time.Duration.class, value)); return true;
        case "umask": target.getConfiguration().setUmask(property(camelContext, java.lang.String.class, value)); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "userprincipalnamereturned":
        case "userPrincipalNameReturned": target.getConfiguration().setUserPrincipalNameReturned(property(camelContext, java.lang.Boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public String[] getAutowiredNames() {
        return new String[]{"serviceClient"};
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accountkey":
        case "accountKey": return java.lang.String.class;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": return int.class;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": return int.class;
        case "backoffmultiplier":
        case "backoffMultiplier": return int.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "clientid":
        case "clientId": return java.lang.String.class;
        case "clientsecret":
        case "clientSecret": return java.lang.String.class;
        case "clientsecretcredential":
        case "clientSecretCredential": return com.azure.identity.ClientSecretCredential.class;
        case "close": return java.lang.Boolean.class;
        case "closestreamafterread":
        case "closeStreamAfterRead": return java.lang.Boolean.class;
        case "datacount":
        case "dataCount": return java.lang.Long.class;
        case "datalakeserviceclient":
        case "dataLakeServiceClient": return com.azure.storage.file.datalake.DataLakeServiceClient.class;
        case "delay": return long.class;
        case "directoryname":
        case "directoryName": return java.lang.String.class;
        case "downloadlinkexpiration":
        case "downloadLinkExpiration": return java.lang.Long.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "expression": return java.lang.String.class;
        case "filedir":
        case "fileDir": return java.lang.String.class;
        case "filename":
        case "fileName": return java.lang.String.class;
        case "fileoffset":
        case "fileOffset": return java.lang.Long.class;
        case "greedy": return boolean.class;
        case "initialdelay":
        case "initialDelay": return long.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxresults":
        case "maxResults": return java.lang.Integer.class;
        case "maxretryrequests":
        case "maxRetryRequests": return int.class;
        case "openoptions":
        case "openOptions": return java.util.Set.class;
        case "operation": return org.apache.camel.component.azure.storage.datalake.DataLakeOperationsDefinition.class;
        case "path": return java.lang.String.class;
        case "permission": return java.lang.String.class;
        case "pollstrategy":
        case "pollStrategy": return org.apache.camel.spi.PollingConsumerPollStrategy.class;
        case "position": return java.lang.Long.class;
        case "recursive": return java.lang.Boolean.class;
        case "regex": return java.lang.String.class;
        case "repeatcount":
        case "repeatCount": return long.class;
        case "retainuncommiteddata":
        case "retainUncommitedData": return java.lang.Boolean.class;
        case "runlogginglevel":
        case "runLoggingLevel": return org.apache.camel.LoggingLevel.class;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": return java.util.concurrent.ScheduledExecutorService.class;
        case "scheduler": return java.lang.Object.class;
        case "schedulerproperties":
        case "schedulerProperties": return java.util.Map.class;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": return boolean.class;
        case "serviceclient":
        case "serviceClient": return com.azure.storage.file.datalake.DataLakeServiceClient.class;
        case "sharedkeycredential":
        case "sharedKeyCredential": return com.azure.storage.common.StorageSharedKeyCredential.class;
        case "startscheduler":
        case "startScheduler": return boolean.class;
        case "tenantid":
        case "tenantId": return java.lang.String.class;
        case "timeunit":
        case "timeUnit": return java.util.concurrent.TimeUnit.class;
        case "timeout": return java.time.Duration.class;
        case "umask": return java.lang.String.class;
        case "usefixeddelay":
        case "useFixedDelay": return boolean.class;
        case "userprincipalnamereturned":
        case "userPrincipalNameReturned": return java.lang.Boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        DataLakeEndpoint target = (DataLakeEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accountkey":
        case "accountKey": return target.getConfiguration().getAccountKey();
        case "backofferrorthreshold":
        case "backoffErrorThreshold": return target.getBackoffErrorThreshold();
        case "backoffidlethreshold":
        case "backoffIdleThreshold": return target.getBackoffIdleThreshold();
        case "backoffmultiplier":
        case "backoffMultiplier": return target.getBackoffMultiplier();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "clientid":
        case "clientId": return target.getConfiguration().getClientId();
        case "clientsecret":
        case "clientSecret": return target.getConfiguration().getClientSecret();
        case "clientsecretcredential":
        case "clientSecretCredential": return target.getConfiguration().getClientSecretCredential();
        case "close": return target.getConfiguration().getClose();
        case "closestreamafterread":
        case "closeStreamAfterRead": return target.getConfiguration().getCloseStreamAfterRead();
        case "datacount":
        case "dataCount": return target.getConfiguration().getDataCount();
        case "datalakeserviceclient":
        case "dataLakeServiceClient": return target.getDataLakeServiceClient();
        case "delay": return target.getDelay();
        case "directoryname":
        case "directoryName": return target.getConfiguration().getDirectoryName();
        case "downloadlinkexpiration":
        case "downloadLinkExpiration": return target.getConfiguration().getDownloadLinkExpiration();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "expression": return target.getConfiguration().getExpression();
        case "filedir":
        case "fileDir": return target.getConfiguration().getFileDir();
        case "filename":
        case "fileName": return target.getConfiguration().getFileName();
        case "fileoffset":
        case "fileOffset": return target.getConfiguration().getFileOffset();
        case "greedy": return target.isGreedy();
        case "initialdelay":
        case "initialDelay": return target.getInitialDelay();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxresults":
        case "maxResults": return target.getConfiguration().getMaxResults();
        case "maxretryrequests":
        case "maxRetryRequests": return target.getConfiguration().getMaxRetryRequests();
        case "openoptions":
        case "openOptions": return target.getConfiguration().getOpenOptions();
        case "operation": return target.getConfiguration().getOperation();
        case "path": return target.getConfiguration().getPath();
        case "permission": return target.getConfiguration().getPermission();
        case "pollstrategy":
        case "pollStrategy": return target.getPollStrategy();
        case "position": return target.getConfiguration().getPosition();
        case "recursive": return target.getConfiguration().getRecursive();
        case "regex": return target.getConfiguration().getRegex();
        case "repeatcount":
        case "repeatCount": return target.getRepeatCount();
        case "retainuncommiteddata":
        case "retainUncommitedData": return target.getConfiguration().getRetainUncommitedData();
        case "runlogginglevel":
        case "runLoggingLevel": return target.getRunLoggingLevel();
        case "scheduledexecutorservice":
        case "scheduledExecutorService": return target.getScheduledExecutorService();
        case "scheduler": return target.getScheduler();
        case "schedulerproperties":
        case "schedulerProperties": return target.getSchedulerProperties();
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": return target.isSendEmptyMessageWhenIdle();
        case "serviceclient":
        case "serviceClient": return target.getConfiguration().getServiceClient();
        case "sharedkeycredential":
        case "sharedKeyCredential": return target.getConfiguration().getSharedKeyCredential();
        case "startscheduler":
        case "startScheduler": return target.isStartScheduler();
        case "tenantid":
        case "tenantId": return target.getConfiguration().getTenantId();
        case "timeunit":
        case "timeUnit": return target.getTimeUnit();
        case "timeout": return target.getConfiguration().getTimeout();
        case "umask": return target.getConfiguration().getUmask();
        case "usefixeddelay":
        case "useFixedDelay": return target.isUseFixedDelay();
        case "userprincipalnamereturned":
        case "userPrincipalNameReturned": return target.getConfiguration().getUserPrincipalNameReturned();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "openoptions":
        case "openOptions": return java.nio.file.OpenOption.class;
        case "schedulerproperties":
        case "schedulerProperties": return java.lang.Object.class;
        default: return null;
        }
    }
}

