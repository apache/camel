<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    ">

  <!-- START SNIPPET: e1 -->
  <!-- use STaXBuilder to create the expression we want to use in the route below for splitting the XML file -->
  <!-- notice we use the factory-method to define the stax method, and to pass in the parameter as a constructor-arg -->
  <bean id="staxRecord" class="org.apache.camel.component.stax.StAXBuilder" factory-method="stax">
    <!-- FQN class name of the POJO with the JAXB annotations -->
    <constructor-arg index="0" value="org.apache.camel.component.stax.model.Record"/>
  </bean>

  <camelContext xmlns="http://camel.apache.org/schema/spring">
    <route>
      <!-- pickup XML files -->
      <from uri="file:target/in"/>
      <split streaming="true">
        <!-- split the file using StAX (ref to bean above) -->
        <!-- and use streaming mode in the splitter -->
        <ref>staxRecord</ref>
        <!-- and send each splitted to a mock endpoint, which will be a Record POJO instance -->
        <to uri="mock:records"/>
      </split>
    </route>
  </camelContext>
  <!-- END SNIPPET: e1 -->

</beans>
