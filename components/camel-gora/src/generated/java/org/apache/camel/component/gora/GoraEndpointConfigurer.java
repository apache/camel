/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.gora;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class GoraEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        GoraEndpoint target = (GoraEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": target.getConfiguration().setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "datastoreclass":
        case "dataStoreClass": target.getConfiguration().setDataStoreClass(property(camelContext, java.lang.String.class, value)); return true;
        case "endkey":
        case "endKey": target.getConfiguration().setEndKey(property(camelContext, java.lang.Object.class, value)); return true;
        case "endtime":
        case "endTime": target.getConfiguration().setEndTime(property(camelContext, long.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "fields": target.getConfiguration().setFields(property(camelContext, com.google.common.base.Strings.class, value)); return true;
        case "flushoneveryoperation":
        case "flushOnEveryOperation": target.getConfiguration().setFlushOnEveryOperation(property(camelContext, boolean.class, value)); return true;
        case "hadoopconfiguration":
        case "hadoopConfiguration": target.getConfiguration().setHadoopConfiguration(property(camelContext, org.apache.hadoop.conf.Configuration.class, value)); return true;
        case "keyclass":
        case "keyClass": target.getConfiguration().setKeyClass(property(camelContext, java.lang.String.class, value)); return true;
        case "keyrangefrom":
        case "keyRangeFrom": target.getConfiguration().setKeyRangeFrom(property(camelContext, java.lang.Object.class, value)); return true;
        case "keyrangeto":
        case "keyRangeTo": target.getConfiguration().setKeyRangeTo(property(camelContext, java.lang.Object.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "limit": target.getConfiguration().setLimit(property(camelContext, long.class, value)); return true;
        case "startkey":
        case "startKey": target.getConfiguration().setStartKey(property(camelContext, java.lang.Object.class, value)); return true;
        case "starttime":
        case "startTime": target.getConfiguration().setStartTime(property(camelContext, long.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "timerangefrom":
        case "timeRangeFrom": target.getConfiguration().setTimeRangeFrom(property(camelContext, long.class, value)); return true;
        case "timerangeto":
        case "timeRangeTo": target.getConfiguration().setTimeRangeTo(property(camelContext, long.class, value)); return true;
        case "timestamp": target.getConfiguration().setTimestamp(property(camelContext, long.class, value)); return true;
        case "valueclass":
        case "valueClass": target.getConfiguration().setValueClass(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("concurrentConsumers", int.class);
        answer.put("dataStoreClass", java.lang.String.class);
        answer.put("endKey", java.lang.Object.class);
        answer.put("endTime", long.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("fields", com.google.common.base.Strings.class);
        answer.put("flushOnEveryOperation", boolean.class);
        answer.put("hadoopConfiguration", org.apache.hadoop.conf.Configuration.class);
        answer.put("keyClass", java.lang.String.class);
        answer.put("keyRangeFrom", java.lang.Object.class);
        answer.put("keyRangeTo", java.lang.Object.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("limit", long.class);
        answer.put("startKey", java.lang.Object.class);
        answer.put("startTime", long.class);
        answer.put("synchronous", boolean.class);
        answer.put("timeRangeFrom", long.class);
        answer.put("timeRangeTo", long.class);
        answer.put("timestamp", long.class);
        answer.put("valueClass", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        GoraEndpoint target = (GoraEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": target.getConfiguration().getConcurrentConsumers(); return true;
        case "datastoreclass":
        case "dataStoreClass": target.getConfiguration().getDataStoreClass(); return true;
        case "endkey":
        case "endKey": target.getConfiguration().getEndKey(); return true;
        case "endtime":
        case "endTime": target.getConfiguration().getEndTime(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "fields": target.getConfiguration().getFields(); return true;
        case "flushoneveryoperation":
        case "flushOnEveryOperation": target.getConfiguration().isFlushOnEveryOperation(); return true;
        case "hadoopconfiguration":
        case "hadoopConfiguration": target.getConfiguration().getHadoopConfiguration(); return true;
        case "keyclass":
        case "keyClass": target.getConfiguration().getKeyClass(); return true;
        case "keyrangefrom":
        case "keyRangeFrom": target.getConfiguration().getKeyRangeFrom(); return true;
        case "keyrangeto":
        case "keyRangeTo": target.getConfiguration().getKeyRangeTo(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "limit": target.getConfiguration().getLimit(); return true;
        case "startkey":
        case "startKey": target.getConfiguration().getStartKey(); return true;
        case "starttime":
        case "startTime": target.getConfiguration().getStartTime(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "timerangefrom":
        case "timeRangeFrom": target.getConfiguration().getTimeRangeFrom(); return true;
        case "timerangeto":
        case "timeRangeTo": target.getConfiguration().getTimeRangeTo(); return true;
        case "timestamp": target.getConfiguration().getTimestamp(); return true;
        case "valueclass":
        case "valueClass": target.getConfiguration().getValueClass(); return true;
        default: return null;
        }
    }
}

