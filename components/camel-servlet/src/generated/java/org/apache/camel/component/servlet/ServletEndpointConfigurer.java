/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.servlet;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ServletEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ServletEndpoint target = (ServletEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "async": target.setAsync(property(camelContext, boolean.class, value)); return true;
        case "attachmentmultipartbinding":
        case "attachmentMultipartBinding": target.setAttachmentMultipartBinding(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "chunked": target.setChunked(property(camelContext, boolean.class, value)); return true;
        case "disablestreamcache":
        case "disableStreamCache": target.setDisableStreamCache(property(camelContext, boolean.class, value)); return true;
        case "eagercheckcontentavailable":
        case "eagerCheckContentAvailable": target.setEagerCheckContentAvailable(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filenameextwhitelist":
        case "fileNameExtWhitelist": target.setFileNameExtWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "httpbinding":
        case "httpBinding": target.setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "httpmethodrestrict":
        case "httpMethodRestrict": target.setHttpMethodRestrict(property(camelContext, java.lang.String.class, value)); return true;
        case "maphttpmessagebody":
        case "mapHttpMessageBody": target.setMapHttpMessageBody(property(camelContext, boolean.class, value)); return true;
        case "maphttpmessageformurlencodedbody":
        case "mapHttpMessageFormUrlEncodedBody": target.setMapHttpMessageFormUrlEncodedBody(property(camelContext, boolean.class, value)); return true;
        case "maphttpmessageheaders":
        case "mapHttpMessageHeaders": target.setMapHttpMessageHeaders(property(camelContext, boolean.class, value)); return true;
        case "matchonuriprefix":
        case "matchOnUriPrefix": target.setMatchOnUriPrefix(property(camelContext, boolean.class, value)); return true;
        case "muteexception":
        case "muteException": target.setMuteException(property(camelContext, boolean.class, value)); return true;
        case "optionsenabled":
        case "optionsEnabled": target.setOptionsEnabled(property(camelContext, boolean.class, value)); return true;
        case "responsebuffersize":
        case "responseBufferSize": target.setResponseBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "servletname":
        case "servletName": target.setServletName(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "traceenabled":
        case "traceEnabled": target.setTraceEnabled(property(camelContext, boolean.class, value)); return true;
        case "transferexception":
        case "transferException": target.setTransferException(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("async", boolean.class);
        answer.put("attachmentMultipartBinding", boolean.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("chunked", boolean.class);
        answer.put("disableStreamCache", boolean.class);
        answer.put("eagerCheckContentAvailable", boolean.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("fileNameExtWhitelist", java.lang.String.class);
        answer.put("headerFilterStrategy", org.apache.camel.spi.HeaderFilterStrategy.class);
        answer.put("httpBinding", org.apache.camel.http.common.HttpBinding.class);
        answer.put("httpMethodRestrict", java.lang.String.class);
        answer.put("mapHttpMessageBody", boolean.class);
        answer.put("mapHttpMessageFormUrlEncodedBody", boolean.class);
        answer.put("mapHttpMessageHeaders", boolean.class);
        answer.put("matchOnUriPrefix", boolean.class);
        answer.put("muteException", boolean.class);
        answer.put("optionsEnabled", boolean.class);
        answer.put("responseBufferSize", java.lang.Integer.class);
        answer.put("servletName", java.lang.String.class);
        answer.put("synchronous", boolean.class);
        answer.put("traceEnabled", boolean.class);
        answer.put("transferException", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ServletEndpoint target = (ServletEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "async": target.isAsync(); return true;
        case "attachmentmultipartbinding":
        case "attachmentMultipartBinding": target.isAttachmentMultipartBinding(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "chunked": target.isChunked(); return true;
        case "disablestreamcache":
        case "disableStreamCache": target.isDisableStreamCache(); return true;
        case "eagercheckcontentavailable":
        case "eagerCheckContentAvailable": target.isEagerCheckContentAvailable(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "filenameextwhitelist":
        case "fileNameExtWhitelist": target.getFileNameExtWhitelist(); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.getHeaderFilterStrategy(); return true;
        case "httpbinding":
        case "httpBinding": target.getHttpBinding(); return true;
        case "httpmethodrestrict":
        case "httpMethodRestrict": target.getHttpMethodRestrict(); return true;
        case "maphttpmessagebody":
        case "mapHttpMessageBody": target.isMapHttpMessageBody(); return true;
        case "maphttpmessageformurlencodedbody":
        case "mapHttpMessageFormUrlEncodedBody": target.isMapHttpMessageFormUrlEncodedBody(); return true;
        case "maphttpmessageheaders":
        case "mapHttpMessageHeaders": target.isMapHttpMessageHeaders(); return true;
        case "matchonuriprefix":
        case "matchOnUriPrefix": target.isMatchOnUriPrefix(); return true;
        case "muteexception":
        case "muteException": target.isMuteException(); return true;
        case "optionsenabled":
        case "optionsEnabled": target.isOptionsEnabled(); return true;
        case "responsebuffersize":
        case "responseBufferSize": target.getResponseBufferSize(); return true;
        case "servletname":
        case "servletName": target.getServletName(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "traceenabled":
        case "traceEnabled": target.isTraceEnabled(); return true;
        case "transferexception":
        case "transferException": target.isTransferException(); return true;
        default: return null;
        }
    }
}

