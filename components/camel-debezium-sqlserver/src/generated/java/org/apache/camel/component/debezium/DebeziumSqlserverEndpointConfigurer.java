/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.debezium;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DebeziumSqlserverEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "additionalProperties": ((DebeziumSqlserverEndpoint) target).getConfiguration().setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "bridgeErrorHandler": ((DebeziumSqlserverEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "internalKeyConverter": ((DebeziumSqlserverEndpoint) target).getConfiguration().setInternalKeyConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "internalValueConverter": ((DebeziumSqlserverEndpoint) target).getConfiguration().setInternalValueConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetCommitPolicy": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetCommitPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetCommitTimeoutMs": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetCommitTimeoutMs(property(camelContext, long.class, value)); return true;
        case "offsetFlushIntervalMs": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetFlushIntervalMs(property(camelContext, long.class, value)); return true;
        case "offsetStorage": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStorage(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetStorageFileName": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStorageFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetStoragePartitions": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStoragePartitions(property(camelContext, int.class, value)); return true;
        case "offsetStorageReplicationFactor": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStorageReplicationFactor(property(camelContext, int.class, value)); return true;
        case "offsetStorageTopic": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStorageTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionHandler": ((DebeziumSqlserverEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((DebeziumSqlserverEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "basicPropertyBinding": ((DebeziumSqlserverEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((DebeziumSqlserverEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "columnBlacklist": ((DebeziumSqlserverEndpoint) target).getConfiguration().setColumnBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseDbname": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseDbname(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseHistory": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistory(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseHistoryFileFilename": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryFileFilename(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseHistoryKafkaBootstrapServers": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryKafkaBootstrapServers(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseHistoryKafkaRecoveryAttempts": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryKafkaRecoveryAttempts(property(camelContext, int.class, value)); return true;
        case "databaseHistoryKafkaRecoveryPollIntervalMs": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryKafkaRecoveryPollIntervalMs(property(camelContext, int.class, value)); return true;
        case "databaseHistoryKafkaTopic": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryKafkaTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseHostname": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHostname(property(camelContext, java.lang.String.class, value)); return true;
        case "databasePassword": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabasePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "databasePort": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabasePort(property(camelContext, int.class, value)); return true;
        case "databaseServerName": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseServerName(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseServerTimezone": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseServerTimezone(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseUser": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseUser(property(camelContext, java.lang.String.class, value)); return true;
        case "decimalHandlingMode": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDecimalHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "heartbeatIntervalMs": ((DebeziumSqlserverEndpoint) target).getConfiguration().setHeartbeatIntervalMs(property(camelContext, int.class, value)); return true;
        case "heartbeatTopicsPrefix": ((DebeziumSqlserverEndpoint) target).getConfiguration().setHeartbeatTopicsPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "maxBatchSize": ((DebeziumSqlserverEndpoint) target).getConfiguration().setMaxBatchSize(property(camelContext, int.class, value)); return true;
        case "maxQueueSize": ((DebeziumSqlserverEndpoint) target).getConfiguration().setMaxQueueSize(property(camelContext, int.class, value)); return true;
        case "messageKeyColumns": ((DebeziumSqlserverEndpoint) target).getConfiguration().setMessageKeyColumns(property(camelContext, java.lang.String.class, value)); return true;
        case "pollIntervalMs": ((DebeziumSqlserverEndpoint) target).getConfiguration().setPollIntervalMs(property(camelContext, long.class, value)); return true;
        case "snapshotDelayMs": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotDelayMs(property(camelContext, long.class, value)); return true;
        case "snapshotFetchSize": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotFetchSize(property(camelContext, int.class, value)); return true;
        case "snapshotLockTimeoutMs": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotLockTimeoutMs(property(camelContext, long.class, value)); return true;
        case "snapshotMode": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotMode(property(camelContext, java.lang.String.class, value)); return true;
        case "snapshotSelectStatementOverrides": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotSelectStatementOverrides(property(camelContext, java.lang.String.class, value)); return true;
        case "sourceStructVersion": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSourceStructVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "tableBlacklist": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTableBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "tableIgnoreBuiltin": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTableIgnoreBuiltin(property(camelContext, boolean.class, value)); return true;
        case "tableWhitelist": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTableWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "timePrecisionMode": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTimePrecisionMode(property(camelContext, java.lang.String.class, value)); return true;
        case "tombstonesOnDelete": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTombstonesOnDelete(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "additionalproperties": ((DebeziumSqlserverEndpoint) target).getConfiguration().setAdditionalProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "bridgeerrorhandler": ((DebeziumSqlserverEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "internalkeyconverter": ((DebeziumSqlserverEndpoint) target).getConfiguration().setInternalKeyConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "internalvalueconverter": ((DebeziumSqlserverEndpoint) target).getConfiguration().setInternalValueConverter(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommitpolicy": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetCommitPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetcommittimeoutms": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetCommitTimeoutMs(property(camelContext, long.class, value)); return true;
        case "offsetflushintervalms": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetFlushIntervalMs(property(camelContext, long.class, value)); return true;
        case "offsetstorage": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStorage(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragefilename": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStorageFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "offsetstoragepartitions": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStoragePartitions(property(camelContext, int.class, value)); return true;
        case "offsetstoragereplicationfactor": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStorageReplicationFactor(property(camelContext, int.class, value)); return true;
        case "offsetstoragetopic": ((DebeziumSqlserverEndpoint) target).getConfiguration().setOffsetStorageTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler": ((DebeziumSqlserverEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((DebeziumSqlserverEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "basicpropertybinding": ((DebeziumSqlserverEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((DebeziumSqlserverEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "columnblacklist": ((DebeziumSqlserverEndpoint) target).getConfiguration().setColumnBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "databasedbname": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseDbname(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistory": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistory(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistoryfilefilename": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryFileFilename(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistorykafkabootstrapservers": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryKafkaBootstrapServers(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehistorykafkarecoveryattempts": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryKafkaRecoveryAttempts(property(camelContext, int.class, value)); return true;
        case "databasehistorykafkarecoverypollintervalms": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryKafkaRecoveryPollIntervalMs(property(camelContext, int.class, value)); return true;
        case "databasehistorykafkatopic": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHistoryKafkaTopic(property(camelContext, java.lang.String.class, value)); return true;
        case "databasehostname": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseHostname(property(camelContext, java.lang.String.class, value)); return true;
        case "databasepassword": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabasePassword(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseport": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabasePort(property(camelContext, int.class, value)); return true;
        case "databaseservername": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseServerName(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseservertimezone": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseServerTimezone(property(camelContext, java.lang.String.class, value)); return true;
        case "databaseuser": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDatabaseUser(property(camelContext, java.lang.String.class, value)); return true;
        case "decimalhandlingmode": ((DebeziumSqlserverEndpoint) target).getConfiguration().setDecimalHandlingMode(property(camelContext, java.lang.String.class, value)); return true;
        case "heartbeatintervalms": ((DebeziumSqlserverEndpoint) target).getConfiguration().setHeartbeatIntervalMs(property(camelContext, int.class, value)); return true;
        case "heartbeattopicsprefix": ((DebeziumSqlserverEndpoint) target).getConfiguration().setHeartbeatTopicsPrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "maxbatchsize": ((DebeziumSqlserverEndpoint) target).getConfiguration().setMaxBatchSize(property(camelContext, int.class, value)); return true;
        case "maxqueuesize": ((DebeziumSqlserverEndpoint) target).getConfiguration().setMaxQueueSize(property(camelContext, int.class, value)); return true;
        case "messagekeycolumns": ((DebeziumSqlserverEndpoint) target).getConfiguration().setMessageKeyColumns(property(camelContext, java.lang.String.class, value)); return true;
        case "pollintervalms": ((DebeziumSqlserverEndpoint) target).getConfiguration().setPollIntervalMs(property(camelContext, long.class, value)); return true;
        case "snapshotdelayms": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotDelayMs(property(camelContext, long.class, value)); return true;
        case "snapshotfetchsize": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotFetchSize(property(camelContext, int.class, value)); return true;
        case "snapshotlocktimeoutms": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotLockTimeoutMs(property(camelContext, long.class, value)); return true;
        case "snapshotmode": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotMode(property(camelContext, java.lang.String.class, value)); return true;
        case "snapshotselectstatementoverrides": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSnapshotSelectStatementOverrides(property(camelContext, java.lang.String.class, value)); return true;
        case "sourcestructversion": ((DebeziumSqlserverEndpoint) target).getConfiguration().setSourceStructVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "tableblacklist": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTableBlacklist(property(camelContext, java.lang.String.class, value)); return true;
        case "tableignorebuiltin": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTableIgnoreBuiltin(property(camelContext, boolean.class, value)); return true;
        case "tablewhitelist": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTableWhitelist(property(camelContext, java.lang.String.class, value)); return true;
        case "timeprecisionmode": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTimePrecisionMode(property(camelContext, java.lang.String.class, value)); return true;
        case "tombstonesondelete": ((DebeziumSqlserverEndpoint) target).getConfiguration().setTombstonesOnDelete(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

