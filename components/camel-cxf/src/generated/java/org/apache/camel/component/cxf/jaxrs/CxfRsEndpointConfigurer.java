/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.cxf.jaxrs;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class CxfRsEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("beanId", java.lang.String.class);
        map.put("address", java.lang.String.class);
        map.put("features", java.util.List.class);
        map.put("loggingFeatureEnabled", boolean.class);
        map.put("loggingSizeLimit", int.class);
        map.put("modelRef", java.lang.String.class);
        map.put("providers", java.lang.String.class);
        map.put("resourceClasses", java.util.List.class);
        map.put("schemaLocations", java.util.List.class);
        map.put("skipFaultLogging", boolean.class);
        map.put("bindingStyle", org.apache.camel.component.cxf.jaxrs.BindingStyle.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("publishedEndpointUrl", java.lang.String.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("serviceBeans", java.lang.String.class);
        map.put("cookieHandler", org.apache.camel.http.base.cookie.CookieHandler.class);
        map.put("hostnameVerifier", javax.net.ssl.HostnameVerifier.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        map.put("throwExceptionOnFailure", boolean.class);
        map.put("httpClientAPI", boolean.class);
        map.put("ignoreDeleteMethodMessageBody", boolean.class);
        map.put("maxClientCacheSize", int.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("binding", org.apache.camel.component.cxf.jaxrs.CxfRsBinding.class);
        map.put("bus", org.apache.cxf.Bus.class);
        map.put("continuationTimeout", long.class);
        map.put("cxfRsConfigurer", org.apache.camel.component.cxf.jaxrs.CxfRsConfigurer.class);
        map.put("defaultBus", boolean.class);
        map.put("headerFilterStrategy", org.apache.camel.spi.HeaderFilterStrategy.class);
        map.put("performInvocation", boolean.class);
        map.put("propagateContexts", boolean.class);
        map.put("synchronous", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        CxfRsEndpoint target = (CxfRsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "binding": target.setBinding(property(camelContext, org.apache.camel.component.cxf.jaxrs.CxfRsBinding.class, value)); return true;
        case "bindingstyle":
        case "bindingStyle": target.setBindingStyle(property(camelContext, org.apache.camel.component.cxf.jaxrs.BindingStyle.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "bus": target.setBus(property(camelContext, org.apache.cxf.Bus.class, value)); return true;
        case "continuationtimeout":
        case "continuationTimeout": target.setContinuationTimeout(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "cookiehandler":
        case "cookieHandler": target.setCookieHandler(property(camelContext, org.apache.camel.http.base.cookie.CookieHandler.class, value)); return true;
        case "cxfrsconfigurer":
        case "cxfRsConfigurer": target.setCxfRsConfigurer(property(camelContext, org.apache.camel.component.cxf.jaxrs.CxfRsConfigurer.class, value)); return true;
        case "defaultbus":
        case "defaultBus": target.setDefaultBus(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "features": target.setFeatures(property(camelContext, java.util.List.class, value)); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "hostnameverifier":
        case "hostnameVerifier": target.setHostnameVerifier(property(camelContext, javax.net.ssl.HostnameVerifier.class, value)); return true;
        case "httpclientapi":
        case "httpClientAPI": target.setHttpClientAPI(property(camelContext, boolean.class, value)); return true;
        case "ignoredeletemethodmessagebody":
        case "ignoreDeleteMethodMessageBody": target.setIgnoreDeleteMethodMessageBody(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "loggingfeatureenabled":
        case "loggingFeatureEnabled": target.setLoggingFeatureEnabled(property(camelContext, boolean.class, value)); return true;
        case "loggingsizelimit":
        case "loggingSizeLimit": target.setLoggingSizeLimit(property(camelContext, int.class, value)); return true;
        case "maxclientcachesize":
        case "maxClientCacheSize": target.setMaxClientCacheSize(property(camelContext, int.class, value)); return true;
        case "modelref":
        case "modelRef": target.setModelRef(property(camelContext, java.lang.String.class, value)); return true;
        case "performinvocation":
        case "performInvocation": target.setPerformInvocation(property(camelContext, boolean.class, value)); return true;
        case "propagatecontexts":
        case "propagateContexts": target.setPropagateContexts(property(camelContext, boolean.class, value)); return true;
        case "providers": target.setProviders(property(camelContext, java.lang.String.class, value)); return true;
        case "publishedendpointurl":
        case "publishedEndpointUrl": target.setPublishedEndpointUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "resourceclasses":
        case "resourceClasses": target.setResourceClasses(property(camelContext, java.util.List.class, value)); return true;
        case "schemalocations":
        case "schemaLocations": target.setSchemaLocations(property(camelContext, java.util.List.class, value)); return true;
        case "servicebeans":
        case "serviceBeans": target.setServiceBeans(property(camelContext, java.lang.String.class, value)); return true;
        case "skipfaultlogging":
        case "skipFaultLogging": target.setSkipFaultLogging(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "throwexceptiononfailure":
        case "throwExceptionOnFailure": target.setThrowExceptionOnFailure(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        CxfRsEndpoint target = (CxfRsEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "binding": return target.getBinding();
        case "bindingstyle":
        case "bindingStyle": return target.getBindingStyle();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "bus": return target.getBus();
        case "continuationtimeout":
        case "continuationTimeout": return target.getContinuationTimeout();
        case "cookiehandler":
        case "cookieHandler": return target.getCookieHandler();
        case "cxfrsconfigurer":
        case "cxfRsConfigurer": return target.getCxfRsConfigurer();
        case "defaultbus":
        case "defaultBus": return target.isDefaultBus();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "features": return target.getFeatures();
        case "headerfilterstrategy":
        case "headerFilterStrategy": return target.getHeaderFilterStrategy();
        case "hostnameverifier":
        case "hostnameVerifier": return target.getHostnameVerifier();
        case "httpclientapi":
        case "httpClientAPI": return target.isHttpClientAPI();
        case "ignoredeletemethodmessagebody":
        case "ignoreDeleteMethodMessageBody": return target.isIgnoreDeleteMethodMessageBody();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "loggingfeatureenabled":
        case "loggingFeatureEnabled": return target.isLoggingFeatureEnabled();
        case "loggingsizelimit":
        case "loggingSizeLimit": return target.getLoggingSizeLimit();
        case "maxclientcachesize":
        case "maxClientCacheSize": return target.getMaxClientCacheSize();
        case "modelref":
        case "modelRef": return target.getModelRef();
        case "performinvocation":
        case "performInvocation": return target.isPerformInvocation();
        case "propagatecontexts":
        case "propagateContexts": return target.isPropagateContexts();
        case "providers": return target.getProviders();
        case "publishedendpointurl":
        case "publishedEndpointUrl": return target.getPublishedEndpointUrl();
        case "resourceclasses":
        case "resourceClasses": return target.getResourceClasses();
        case "schemalocations":
        case "schemaLocations": return target.getSchemaLocations();
        case "servicebeans":
        case "serviceBeans": return target.getServiceBeans();
        case "skipfaultlogging":
        case "skipFaultLogging": return target.isSkipFaultLogging();
        case "sslcontextparameters":
        case "sslContextParameters": return target.getSslContextParameters();
        case "synchronous": return target.isSynchronous();
        case "throwexceptiononfailure":
        case "throwExceptionOnFailure": return target.isThrowExceptionOnFailure();
        default: return null;
        }
    }
}

