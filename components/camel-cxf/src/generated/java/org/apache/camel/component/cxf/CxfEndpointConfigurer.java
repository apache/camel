/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.cxf;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class CxfEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        CxfEndpoint target = (CxfEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowstreaming":
        case "allowStreaming": target.setAllowStreaming(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bindingid":
        case "bindingId": target.setBindingId(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "bus": target.setBus(property(camelContext, org.apache.cxf.Bus.class, value)); return true;
        case "continuationtimeout":
        case "continuationTimeout": target.setContinuationTimeout(property(camelContext, long.class, value)); return true;
        case "cookiehandler":
        case "cookieHandler": target.setCookieHandler(property(camelContext, org.apache.camel.http.base.cookie.CookieHandler.class, value)); return true;
        case "cxfbinding":
        case "cxfBinding": target.setCxfBinding(property(camelContext, org.apache.camel.component.cxf.CxfBinding.class, value)); return true;
        case "cxfconfigurer":
        case "cxfConfigurer": target.setCxfConfigurer(property(camelContext, org.apache.camel.component.cxf.CxfConfigurer.class, value)); return true;
        case "dataformat":
        case "dataFormat": target.setDataFormat(property(camelContext, org.apache.camel.component.cxf.DataFormat.class, value)); return true;
        case "defaultbus":
        case "defaultBus": target.setDefaultBus(property(camelContext, boolean.class, value)); return true;
        case "defaultoperationname":
        case "defaultOperationName": target.setDefaultOperationName(property(camelContext, java.lang.String.class, value)); return true;
        case "defaultoperationnamespace":
        case "defaultOperationNamespace": target.setDefaultOperationNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "hostnameverifier":
        case "hostnameVerifier": target.setHostnameVerifier(property(camelContext, javax.net.ssl.HostnameVerifier.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "loggingfeatureenabled":
        case "loggingFeatureEnabled": target.setLoggingFeatureEnabled(property(camelContext, boolean.class, value)); return true;
        case "loggingsizelimit":
        case "loggingSizeLimit": target.setLoggingSizeLimit(property(camelContext, int.class, value)); return true;
        case "mergeprotocolheaders":
        case "mergeProtocolHeaders": target.setMergeProtocolHeaders(property(camelContext, boolean.class, value)); return true;
        case "mtomenabled":
        case "mtomEnabled": target.setMtomEnabled(property(camelContext, boolean.class, value)); return true;
        case "password": target.setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "portname":
        case "portName": target.setPortName(property(camelContext, java.lang.String.class, value)); return true;
        case "properties": target.setProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "publishedendpointurl":
        case "publishedEndpointUrl": target.setPublishedEndpointUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "serviceclass":
        case "serviceClass": target.setServiceClass(property(camelContext, java.lang.Class.class, value)); return true;
        case "servicename":
        case "serviceName": target.setServiceName(property(camelContext, java.lang.String.class, value)); return true;
        case "skipfaultlogging":
        case "skipFaultLogging": target.setSkipFaultLogging(property(camelContext, boolean.class, value)); return true;
        case "skippayloadmessagepartcheck":
        case "skipPayloadMessagePartCheck": target.setSkipPayloadMessagePartCheck(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "username": target.setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "wrapped": target.setWrapped(property(camelContext, boolean.class, value)); return true;
        case "wrappedstyle":
        case "wrappedStyle": target.setWrappedStyle(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "wsdlurl":
        case "wsdlURL": target.setWsdlURL(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("allowStreaming", java.lang.Boolean.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bindingId", java.lang.String.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("bus", org.apache.cxf.Bus.class);
        answer.put("continuationTimeout", long.class);
        answer.put("cookieHandler", org.apache.camel.http.base.cookie.CookieHandler.class);
        answer.put("cxfBinding", org.apache.camel.component.cxf.CxfBinding.class);
        answer.put("cxfConfigurer", org.apache.camel.component.cxf.CxfConfigurer.class);
        answer.put("dataFormat", org.apache.camel.component.cxf.DataFormat.class);
        answer.put("defaultBus", boolean.class);
        answer.put("defaultOperationName", java.lang.String.class);
        answer.put("defaultOperationNamespace", java.lang.String.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("headerFilterStrategy", org.apache.camel.spi.HeaderFilterStrategy.class);
        answer.put("hostnameVerifier", javax.net.ssl.HostnameVerifier.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("loggingFeatureEnabled", boolean.class);
        answer.put("loggingSizeLimit", int.class);
        answer.put("mergeProtocolHeaders", boolean.class);
        answer.put("mtomEnabled", boolean.class);
        answer.put("password", java.lang.String.class);
        answer.put("portName", java.lang.String.class);
        answer.put("properties", java.util.Map.class);
        answer.put("publishedEndpointUrl", java.lang.String.class);
        answer.put("serviceClass", java.lang.Class.class);
        answer.put("serviceName", java.lang.String.class);
        answer.put("skipFaultLogging", boolean.class);
        answer.put("skipPayloadMessagePartCheck", boolean.class);
        answer.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        answer.put("synchronous", boolean.class);
        answer.put("username", java.lang.String.class);
        answer.put("wrapped", boolean.class);
        answer.put("wrappedStyle", java.lang.Boolean.class);
        answer.put("wsdlURL", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        CxfEndpoint target = (CxfEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowstreaming":
        case "allowStreaming": target.getAllowStreaming(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bindingid":
        case "bindingId": target.getBindingId(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "bus": target.getBus(); return true;
        case "continuationtimeout":
        case "continuationTimeout": target.getContinuationTimeout(); return true;
        case "cookiehandler":
        case "cookieHandler": target.getCookieHandler(); return true;
        case "cxfbinding":
        case "cxfBinding": target.getCxfBinding(); return true;
        case "cxfconfigurer":
        case "cxfConfigurer": target.getCxfConfigurer(); return true;
        case "dataformat":
        case "dataFormat": target.getDataFormat(); return true;
        case "defaultbus":
        case "defaultBus": target.isDefaultBus(); return true;
        case "defaultoperationname":
        case "defaultOperationName": target.getDefaultOperationName(); return true;
        case "defaultoperationnamespace":
        case "defaultOperationNamespace": target.getDefaultOperationNamespace(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "headerfilterstrategy":
        case "headerFilterStrategy": target.getHeaderFilterStrategy(); return true;
        case "hostnameverifier":
        case "hostnameVerifier": target.getHostnameVerifier(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "loggingfeatureenabled":
        case "loggingFeatureEnabled": target.isLoggingFeatureEnabled(); return true;
        case "loggingsizelimit":
        case "loggingSizeLimit": target.getLoggingSizeLimit(); return true;
        case "mergeprotocolheaders":
        case "mergeProtocolHeaders": target.isMergeProtocolHeaders(); return true;
        case "mtomenabled":
        case "mtomEnabled": target.isMtomEnabled(); return true;
        case "password": target.getPassword(); return true;
        case "portname":
        case "portName": target.getPortName(); return true;
        case "properties": target.getProperties(); return true;
        case "publishedendpointurl":
        case "publishedEndpointUrl": target.getPublishedEndpointUrl(); return true;
        case "serviceclass":
        case "serviceClass": target.getServiceClass(); return true;
        case "servicename":
        case "serviceName": target.getServiceName(); return true;
        case "skipfaultlogging":
        case "skipFaultLogging": target.isSkipFaultLogging(); return true;
        case "skippayloadmessagepartcheck":
        case "skipPayloadMessagePartCheck": target.isSkipPayloadMessagePartCheck(); return true;
        case "sslcontextparameters":
        case "sslContextParameters": target.getSslContextParameters(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "username": target.getUsername(); return true;
        case "wrapped": target.isWrapped(); return true;
        case "wrappedstyle":
        case "wrappedStyle": target.getWrappedStyle(); return true;
        case "wsdlurl":
        case "wsdlURL": target.getWsdlURL(); return true;
        default: return null;
        }
    }
}

