/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.cxf;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class CxfEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "dataFormat": ((CxfEndpoint) target).setDataFormat(property(camelContext, org.apache.camel.component.cxf.DataFormat.class, value)); return true;
        case "wrappedStyle": ((CxfEndpoint) target).setWrappedStyle(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "bridgeErrorHandler": ((CxfEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((CxfEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((CxfEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "cookieHandler": ((CxfEndpoint) target).setCookieHandler(property(camelContext, org.apache.camel.http.base.cookie.CookieHandler.class, value)); return true;
        case "defaultOperationName": ((CxfEndpoint) target).setDefaultOperationName(property(camelContext, java.lang.String.class, value)); return true;
        case "defaultOperationNamespace": ((CxfEndpoint) target).setDefaultOperationNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "hostnameVerifier": ((CxfEndpoint) target).setHostnameVerifier(property(camelContext, javax.net.ssl.HostnameVerifier.class, value)); return true;
        case "lazyStartProducer": ((CxfEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "sslContextParameters": ((CxfEndpoint) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "wrapped": ((CxfEndpoint) target).setWrapped(property(camelContext, boolean.class, value)); return true;
        case "allowStreaming": ((CxfEndpoint) target).setAllowStreaming(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "basicPropertyBinding": ((CxfEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bus": ((CxfEndpoint) target).setBus(property(camelContext, org.apache.cxf.Bus.class, value)); return true;
        case "continuationTimeout": ((CxfEndpoint) target).setContinuationTimeout(property(camelContext, long.class, value)); return true;
        case "cxfBinding": ((CxfEndpoint) target).setCxfBinding(property(camelContext, org.apache.camel.component.cxf.CxfBinding.class, value)); return true;
        case "cxfConfigurer": ((CxfEndpoint) target).setCxfConfigurer(property(camelContext, org.apache.camel.component.cxf.CxfConfigurer.class, value)); return true;
        case "defaultBus": ((CxfEndpoint) target).setDefaultBus(property(camelContext, boolean.class, value)); return true;
        case "headerFilterStrategy": ((CxfEndpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "mergeProtocolHeaders": ((CxfEndpoint) target).setMergeProtocolHeaders(property(camelContext, boolean.class, value)); return true;
        case "mtomEnabled": ((CxfEndpoint) target).setMtomEnabled(property(camelContext, boolean.class, value)); return true;
        case "properties": ((CxfEndpoint) target).setProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "skipPayloadMessagePartCheck": ((CxfEndpoint) target).setSkipPayloadMessagePartCheck(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((CxfEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "loggingFeatureEnabled": ((CxfEndpoint) target).setLoggingFeatureEnabled(property(camelContext, boolean.class, value)); return true;
        case "loggingSizeLimit": ((CxfEndpoint) target).setLoggingSizeLimit(property(camelContext, int.class, value)); return true;
        case "skipFaultLogging": ((CxfEndpoint) target).setSkipFaultLogging(property(camelContext, boolean.class, value)); return true;
        case "password": ((CxfEndpoint) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((CxfEndpoint) target).setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "bindingId": ((CxfEndpoint) target).setBindingId(property(camelContext, java.lang.String.class, value)); return true;
        case "portName": ((CxfEndpoint) target).setPortName(property(camelContext, java.lang.String.class, value)); return true;
        case "publishedEndpointUrl": ((CxfEndpoint) target).setPublishedEndpointUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "serviceClass": ((CxfEndpoint) target).setServiceClass(property(camelContext, java.lang.Class.class, value)); return true;
        case "serviceName": ((CxfEndpoint) target).setServiceName(property(camelContext, java.lang.String.class, value)); return true;
        case "wsdlURL": ((CxfEndpoint) target).setWsdlURL(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "dataformat": ((CxfEndpoint) target).setDataFormat(property(camelContext, org.apache.camel.component.cxf.DataFormat.class, value)); return true;
        case "wrappedstyle": ((CxfEndpoint) target).setWrappedStyle(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "bridgeerrorhandler": ((CxfEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((CxfEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((CxfEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "cookiehandler": ((CxfEndpoint) target).setCookieHandler(property(camelContext, org.apache.camel.http.base.cookie.CookieHandler.class, value)); return true;
        case "defaultoperationname": ((CxfEndpoint) target).setDefaultOperationName(property(camelContext, java.lang.String.class, value)); return true;
        case "defaultoperationnamespace": ((CxfEndpoint) target).setDefaultOperationNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "hostnameverifier": ((CxfEndpoint) target).setHostnameVerifier(property(camelContext, javax.net.ssl.HostnameVerifier.class, value)); return true;
        case "lazystartproducer": ((CxfEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters": ((CxfEndpoint) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "wrapped": ((CxfEndpoint) target).setWrapped(property(camelContext, boolean.class, value)); return true;
        case "allowstreaming": ((CxfEndpoint) target).setAllowStreaming(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "basicpropertybinding": ((CxfEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bus": ((CxfEndpoint) target).setBus(property(camelContext, org.apache.cxf.Bus.class, value)); return true;
        case "continuationtimeout": ((CxfEndpoint) target).setContinuationTimeout(property(camelContext, long.class, value)); return true;
        case "cxfbinding": ((CxfEndpoint) target).setCxfBinding(property(camelContext, org.apache.camel.component.cxf.CxfBinding.class, value)); return true;
        case "cxfconfigurer": ((CxfEndpoint) target).setCxfConfigurer(property(camelContext, org.apache.camel.component.cxf.CxfConfigurer.class, value)); return true;
        case "defaultbus": ((CxfEndpoint) target).setDefaultBus(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy": ((CxfEndpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "mergeprotocolheaders": ((CxfEndpoint) target).setMergeProtocolHeaders(property(camelContext, boolean.class, value)); return true;
        case "mtomenabled": ((CxfEndpoint) target).setMtomEnabled(property(camelContext, boolean.class, value)); return true;
        case "properties": ((CxfEndpoint) target).setProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "skippayloadmessagepartcheck": ((CxfEndpoint) target).setSkipPayloadMessagePartCheck(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((CxfEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "loggingfeatureenabled": ((CxfEndpoint) target).setLoggingFeatureEnabled(property(camelContext, boolean.class, value)); return true;
        case "loggingsizelimit": ((CxfEndpoint) target).setLoggingSizeLimit(property(camelContext, int.class, value)); return true;
        case "skipfaultlogging": ((CxfEndpoint) target).setSkipFaultLogging(property(camelContext, boolean.class, value)); return true;
        case "password": ((CxfEndpoint) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((CxfEndpoint) target).setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "bindingid": ((CxfEndpoint) target).setBindingId(property(camelContext, java.lang.String.class, value)); return true;
        case "portname": ((CxfEndpoint) target).setPortName(property(camelContext, java.lang.String.class, value)); return true;
        case "publishedendpointurl": ((CxfEndpoint) target).setPublishedEndpointUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "serviceclass": ((CxfEndpoint) target).setServiceClass(property(camelContext, java.lang.Class.class, value)); return true;
        case "servicename": ((CxfEndpoint) target).setServiceName(property(camelContext, java.lang.String.class, value)); return true;
        case "wsdlurl": ((CxfEndpoint) target).setWsdlURL(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

