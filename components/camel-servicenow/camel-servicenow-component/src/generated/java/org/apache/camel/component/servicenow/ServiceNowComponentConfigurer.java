/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.servicenow;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ServiceNowComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("configuration", org.apache.camel.component.servicenow.ServiceNowConfiguration.class);
        map.put("display", java.lang.String.class);
        map.put("displayValue", java.lang.String.class);
        map.put("excludeReferenceLink", java.lang.Boolean.class);
        map.put("favorites", java.lang.Boolean.class);
        map.put("includeAggregates", java.lang.Boolean.class);
        map.put("includeAvailableAggregates", java.lang.Boolean.class);
        map.put("includeAvailableBreakdowns", java.lang.Boolean.class);
        map.put("includeScoreNotes", java.lang.Boolean.class);
        map.put("includeScores", java.lang.Boolean.class);
        map.put("inputDisplayValue", java.lang.Boolean.class);
        map.put("key", java.lang.Boolean.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("models", java.util.Map.class);
        map.put("perPage", java.lang.Integer.class);
        map.put("release", org.apache.camel.component.servicenow.ServiceNowRelease.class);
        map.put("requestModels", java.util.Map.class);
        map.put("resource", java.lang.String.class);
        map.put("responseModels", java.util.Map.class);
        map.put("sortBy", java.lang.String.class);
        map.put("sortDir", java.lang.String.class);
        map.put("suppressAutoSysField", java.lang.Boolean.class);
        map.put("suppressPaginationHeader", java.lang.Boolean.class);
        map.put("table", java.lang.String.class);
        map.put("target", java.lang.Boolean.class);
        map.put("topLevelOnly", java.lang.Boolean.class);
        map.put("apiVersion", java.lang.String.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("dateFormat", java.lang.String.class);
        map.put("dateTimeFormat", java.lang.String.class);
        map.put("httpClientPolicy", org.apache.cxf.transports.http.configuration.HTTPClientPolicy.class);
        map.put("instanceName", java.lang.String.class);
        map.put("mapper", com.fasterxml.jackson.databind.ObjectMapper.class);
        map.put("proxyAuthorizationPolicy", org.apache.cxf.configuration.security.ProxyAuthorizationPolicy.class);
        map.put("retrieveTargetRecordOnImport", java.lang.Boolean.class);
        map.put("timeFormat", java.lang.String.class);
        map.put("proxyHost", java.lang.String.class);
        map.put("proxyPort", java.lang.Integer.class);
        map.put("apiUrl", java.lang.String.class);
        map.put("oauthClientId", java.lang.String.class);
        map.put("oauthClientSecret", java.lang.String.class);
        map.put("oauthTokenUrl", java.lang.String.class);
        map.put("password", java.lang.String.class);
        map.put("proxyPassword", java.lang.String.class);
        map.put("proxyUserName", java.lang.String.class);
        map.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        map.put("useGlobalSslContextParameters", boolean.class);
        map.put("userName", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    private org.apache.camel.component.servicenow.ServiceNowConfiguration getOrCreateConfiguration(ServiceNowComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.servicenow.ServiceNowConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ServiceNowComponent target = (ServiceNowComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apiurl":
        case "apiUrl": getOrCreateConfiguration(target).setApiUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "apiversion":
        case "apiVersion": getOrCreateConfiguration(target).setApiVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.servicenow.ServiceNowConfiguration.class, value)); return true;
        case "dateformat":
        case "dateFormat": getOrCreateConfiguration(target).setDateFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "datetimeformat":
        case "dateTimeFormat": getOrCreateConfiguration(target).setDateTimeFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "display": getOrCreateConfiguration(target).setDisplay(property(camelContext, java.lang.String.class, value)); return true;
        case "displayvalue":
        case "displayValue": getOrCreateConfiguration(target).setDisplayValue(property(camelContext, java.lang.String.class, value)); return true;
        case "excludereferencelink":
        case "excludeReferenceLink": getOrCreateConfiguration(target).setExcludeReferenceLink(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "favorites": getOrCreateConfiguration(target).setFavorites(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "httpclientpolicy":
        case "httpClientPolicy": getOrCreateConfiguration(target).setHttpClientPolicy(property(camelContext, org.apache.cxf.transports.http.configuration.HTTPClientPolicy.class, value)); return true;
        case "includeaggregates":
        case "includeAggregates": getOrCreateConfiguration(target).setIncludeAggregates(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "includeavailableaggregates":
        case "includeAvailableAggregates": getOrCreateConfiguration(target).setIncludeAvailableAggregates(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "includeavailablebreakdowns":
        case "includeAvailableBreakdowns": getOrCreateConfiguration(target).setIncludeAvailableBreakdowns(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "includescorenotes":
        case "includeScoreNotes": getOrCreateConfiguration(target).setIncludeScoreNotes(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "includescores":
        case "includeScores": getOrCreateConfiguration(target).setIncludeScores(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "inputdisplayvalue":
        case "inputDisplayValue": getOrCreateConfiguration(target).setInputDisplayValue(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "instancename":
        case "instanceName": target.setInstanceName(property(camelContext, java.lang.String.class, value)); return true;
        case "key": getOrCreateConfiguration(target).setKey(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "mapper": getOrCreateConfiguration(target).setMapper(property(camelContext, com.fasterxml.jackson.databind.ObjectMapper.class, value)); return true;
        case "models": getOrCreateConfiguration(target).setModels(property(camelContext, java.util.Map.class, value)); return true;
        case "oauthclientid":
        case "oauthClientId": getOrCreateConfiguration(target).setOauthClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthclientsecret":
        case "oauthClientSecret": getOrCreateConfiguration(target).setOauthClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthtokenurl":
        case "oauthTokenUrl": getOrCreateConfiguration(target).setOauthTokenUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "password": getOrCreateConfiguration(target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "perpage":
        case "perPage": getOrCreateConfiguration(target).setPerPage(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyauthorizationpolicy":
        case "proxyAuthorizationPolicy": getOrCreateConfiguration(target).setProxyAuthorizationPolicy(property(camelContext, org.apache.cxf.configuration.security.ProxyAuthorizationPolicy.class, value)); return true;
        case "proxyhost":
        case "proxyHost": getOrCreateConfiguration(target).setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxypassword":
        case "proxyPassword": getOrCreateConfiguration(target).setProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport":
        case "proxyPort": getOrCreateConfiguration(target).setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyusername":
        case "proxyUserName": getOrCreateConfiguration(target).setProxyUserName(property(camelContext, java.lang.String.class, value)); return true;
        case "release": getOrCreateConfiguration(target).setRelease(property(camelContext, org.apache.camel.component.servicenow.ServiceNowRelease.class, value)); return true;
        case "requestmodels":
        case "requestModels": getOrCreateConfiguration(target).setRequestModels(property(camelContext, java.util.Map.class, value)); return true;
        case "resource": getOrCreateConfiguration(target).setResource(property(camelContext, java.lang.String.class, value)); return true;
        case "responsemodels":
        case "responseModels": getOrCreateConfiguration(target).setResponseModels(property(camelContext, java.util.Map.class, value)); return true;
        case "retrievetargetrecordonimport":
        case "retrieveTargetRecordOnImport": getOrCreateConfiguration(target).setRetrieveTargetRecordOnImport(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "sortby":
        case "sortBy": getOrCreateConfiguration(target).setSortBy(property(camelContext, java.lang.String.class, value)); return true;
        case "sortdir":
        case "sortDir": getOrCreateConfiguration(target).setSortDir(property(camelContext, java.lang.String.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": getOrCreateConfiguration(target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "suppressautosysfield":
        case "suppressAutoSysField": getOrCreateConfiguration(target).setSuppressAutoSysField(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "suppresspaginationheader":
        case "suppressPaginationHeader": getOrCreateConfiguration(target).setSuppressPaginationHeader(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "table": getOrCreateConfiguration(target).setTable(property(camelContext, java.lang.String.class, value)); return true;
        case "target": getOrCreateConfiguration(target).setTarget(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "timeformat":
        case "timeFormat": getOrCreateConfiguration(target).setTimeFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "toplevelonly":
        case "topLevelOnly": getOrCreateConfiguration(target).setTopLevelOnly(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "useglobalsslcontextparameters":
        case "useGlobalSslContextParameters": target.setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "username":
        case "userName": getOrCreateConfiguration(target).setUserName(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ServiceNowComponent target = (ServiceNowComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apiurl":
        case "apiUrl": return getOrCreateConfiguration(target).getApiUrl();
        case "apiversion":
        case "apiVersion": return getOrCreateConfiguration(target).getApiVersion();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "configuration": return target.getConfiguration();
        case "dateformat":
        case "dateFormat": return getOrCreateConfiguration(target).getDateFormat();
        case "datetimeformat":
        case "dateTimeFormat": return getOrCreateConfiguration(target).getDateTimeFormat();
        case "display": return getOrCreateConfiguration(target).getDisplay();
        case "displayvalue":
        case "displayValue": return getOrCreateConfiguration(target).getDisplayValue();
        case "excludereferencelink":
        case "excludeReferenceLink": return getOrCreateConfiguration(target).getExcludeReferenceLink();
        case "favorites": return getOrCreateConfiguration(target).getFavorites();
        case "httpclientpolicy":
        case "httpClientPolicy": return getOrCreateConfiguration(target).getHttpClientPolicy();
        case "includeaggregates":
        case "includeAggregates": return getOrCreateConfiguration(target).getIncludeAggregates();
        case "includeavailableaggregates":
        case "includeAvailableAggregates": return getOrCreateConfiguration(target).getIncludeAvailableAggregates();
        case "includeavailablebreakdowns":
        case "includeAvailableBreakdowns": return getOrCreateConfiguration(target).getIncludeAvailableBreakdowns();
        case "includescorenotes":
        case "includeScoreNotes": return getOrCreateConfiguration(target).getIncludeScoreNotes();
        case "includescores":
        case "includeScores": return getOrCreateConfiguration(target).getIncludeScores();
        case "inputdisplayvalue":
        case "inputDisplayValue": return getOrCreateConfiguration(target).getInputDisplayValue();
        case "instancename":
        case "instanceName": return target.getInstanceName();
        case "key": return getOrCreateConfiguration(target).getKey();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "mapper": return getOrCreateConfiguration(target).getMapper();
        case "models": return getOrCreateConfiguration(target).getModels();
        case "oauthclientid":
        case "oauthClientId": return getOrCreateConfiguration(target).getOauthClientId();
        case "oauthclientsecret":
        case "oauthClientSecret": return getOrCreateConfiguration(target).getOauthClientSecret();
        case "oauthtokenurl":
        case "oauthTokenUrl": return getOrCreateConfiguration(target).getOauthTokenUrl();
        case "password": return getOrCreateConfiguration(target).getPassword();
        case "perpage":
        case "perPage": return getOrCreateConfiguration(target).getPerPage();
        case "proxyauthorizationpolicy":
        case "proxyAuthorizationPolicy": return getOrCreateConfiguration(target).getProxyAuthorizationPolicy();
        case "proxyhost":
        case "proxyHost": return getOrCreateConfiguration(target).getProxyHost();
        case "proxypassword":
        case "proxyPassword": return getOrCreateConfiguration(target).getProxyPassword();
        case "proxyport":
        case "proxyPort": return getOrCreateConfiguration(target).getProxyPort();
        case "proxyusername":
        case "proxyUserName": return getOrCreateConfiguration(target).getProxyUserName();
        case "release": return getOrCreateConfiguration(target).getRelease();
        case "requestmodels":
        case "requestModels": return getOrCreateConfiguration(target).getRequestModels();
        case "resource": return getOrCreateConfiguration(target).getResource();
        case "responsemodels":
        case "responseModels": return getOrCreateConfiguration(target).getResponseModels();
        case "retrievetargetrecordonimport":
        case "retrieveTargetRecordOnImport": return getOrCreateConfiguration(target).getRetrieveTargetRecordOnImport();
        case "sortby":
        case "sortBy": return getOrCreateConfiguration(target).getSortBy();
        case "sortdir":
        case "sortDir": return getOrCreateConfiguration(target).getSortDir();
        case "sslcontextparameters":
        case "sslContextParameters": return getOrCreateConfiguration(target).getSslContextParameters();
        case "suppressautosysfield":
        case "suppressAutoSysField": return getOrCreateConfiguration(target).getSuppressAutoSysField();
        case "suppresspaginationheader":
        case "suppressPaginationHeader": return getOrCreateConfiguration(target).getSuppressPaginationHeader();
        case "table": return getOrCreateConfiguration(target).getTable();
        case "target": return getOrCreateConfiguration(target).getTarget();
        case "timeformat":
        case "timeFormat": return getOrCreateConfiguration(target).getTimeFormat();
        case "toplevelonly":
        case "topLevelOnly": return getOrCreateConfiguration(target).getTopLevelOnly();
        case "useglobalsslcontextparameters":
        case "useGlobalSslContextParameters": return target.isUseGlobalSslContextParameters();
        case "username":
        case "userName": return getOrCreateConfiguration(target).getUserName();
        default: return null;
        }
    }
}

