/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.mina;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class MinaComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.mina.MinaConfiguration getOrCreateConfiguration(MinaComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.mina.MinaConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        MinaComponent target = (MinaComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowdefaultcodec":
        case "allowDefaultCodec": getOrCreateConfiguration(target).setAllowDefaultCodec(property(camelContext, boolean.class, value)); return true;
        case "autostarttls":
        case "autoStartTls": getOrCreateConfiguration(target).setAutoStartTls(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "cachedaddress":
        case "cachedAddress": getOrCreateConfiguration(target).setCachedAddress(property(camelContext, boolean.class, value)); return true;
        case "clientmode":
        case "clientMode": getOrCreateConfiguration(target).setClientMode(property(camelContext, boolean.class, value)); return true;
        case "codec": getOrCreateConfiguration(target).setCodec(property(camelContext, org.apache.mina.filter.codec.ProtocolCodecFactory.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.mina.MinaConfiguration.class, value)); return true;
        case "decodermaxlinelength":
        case "decoderMaxLineLength": getOrCreateConfiguration(target).setDecoderMaxLineLength(property(camelContext, int.class, value)); return true;
        case "disconnect": getOrCreateConfiguration(target).setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "disconnectonnoreply":
        case "disconnectOnNoReply": getOrCreateConfiguration(target).setDisconnectOnNoReply(property(camelContext, boolean.class, value)); return true;
        case "encodermaxlinelength":
        case "encoderMaxLineLength": getOrCreateConfiguration(target).setEncoderMaxLineLength(property(camelContext, int.class, value)); return true;
        case "encoding": getOrCreateConfiguration(target).setEncoding(property(camelContext, java.lang.String.class, value)); return true;
        case "filters": getOrCreateConfiguration(target).setFilters(property(camelContext, java.util.List.class, value)); return true;
        case "lazysessioncreation":
        case "lazySessionCreation": getOrCreateConfiguration(target).setLazySessionCreation(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maximumpoolsize":
        case "maximumPoolSize": getOrCreateConfiguration(target).setMaximumPoolSize(property(camelContext, int.class, value)); return true;
        case "minalogger":
        case "minaLogger": getOrCreateConfiguration(target).setMinaLogger(property(camelContext, boolean.class, value)); return true;
        case "noreplyloglevel":
        case "noReplyLogLevel": getOrCreateConfiguration(target).setNoReplyLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "orderedthreadpoolexecutor":
        case "orderedThreadPoolExecutor": getOrCreateConfiguration(target).setOrderedThreadPoolExecutor(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters":
        case "sslContextParameters": getOrCreateConfiguration(target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "sync": getOrCreateConfiguration(target).setSync(property(camelContext, boolean.class, value)); return true;
        case "textline": getOrCreateConfiguration(target).setTextline(property(camelContext, boolean.class, value)); return true;
        case "textlinedelimiter":
        case "textlineDelimiter": getOrCreateConfiguration(target).setTextlineDelimiter(property(camelContext, org.apache.camel.component.mina.MinaTextLineDelimiter.class, value)); return true;
        case "timeout": getOrCreateConfiguration(target).setTimeout(property(camelContext, long.class, value)); return true;
        case "transferexchange":
        case "transferExchange": getOrCreateConfiguration(target).setTransferExchange(property(camelContext, boolean.class, value)); return true;
        case "useglobalsslcontextparameters":
        case "useGlobalSslContextParameters": target.setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "writetimeout":
        case "writeTimeout": getOrCreateConfiguration(target).setWriteTimeout(property(camelContext, long.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("allowDefaultCodec", boolean.class);
        answer.put("autoStartTls", boolean.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("cachedAddress", boolean.class);
        answer.put("clientMode", boolean.class);
        answer.put("codec", org.apache.mina.filter.codec.ProtocolCodecFactory.class);
        answer.put("configuration", org.apache.camel.component.mina.MinaConfiguration.class);
        answer.put("decoderMaxLineLength", int.class);
        answer.put("disconnect", boolean.class);
        answer.put("disconnectOnNoReply", boolean.class);
        answer.put("encoderMaxLineLength", int.class);
        answer.put("encoding", java.lang.String.class);
        answer.put("filters", java.util.List.class);
        answer.put("lazySessionCreation", boolean.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("maximumPoolSize", int.class);
        answer.put("minaLogger", boolean.class);
        answer.put("noReplyLogLevel", org.apache.camel.LoggingLevel.class);
        answer.put("orderedThreadPoolExecutor", boolean.class);
        answer.put("sslContextParameters", org.apache.camel.support.jsse.SSLContextParameters.class);
        answer.put("sync", boolean.class);
        answer.put("textline", boolean.class);
        answer.put("textlineDelimiter", org.apache.camel.component.mina.MinaTextLineDelimiter.class);
        answer.put("timeout", long.class);
        answer.put("transferExchange", boolean.class);
        answer.put("useGlobalSslContextParameters", boolean.class);
        answer.put("writeTimeout", long.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        MinaComponent target = (MinaComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "allowdefaultcodec":
        case "allowDefaultCodec": getOrCreateConfiguration(target).isAllowDefaultCodec(); return true;
        case "autostarttls":
        case "autoStartTls": getOrCreateConfiguration(target).isAutoStartTls(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "cachedaddress":
        case "cachedAddress": getOrCreateConfiguration(target).isCachedAddress(); return true;
        case "clientmode":
        case "clientMode": getOrCreateConfiguration(target).isClientMode(); return true;
        case "codec": getOrCreateConfiguration(target).getCodec(); return true;
        case "configuration": target.getConfiguration(); return true;
        case "decodermaxlinelength":
        case "decoderMaxLineLength": getOrCreateConfiguration(target).getDecoderMaxLineLength(); return true;
        case "disconnect": getOrCreateConfiguration(target).isDisconnect(); return true;
        case "disconnectonnoreply":
        case "disconnectOnNoReply": getOrCreateConfiguration(target).isDisconnectOnNoReply(); return true;
        case "encodermaxlinelength":
        case "encoderMaxLineLength": getOrCreateConfiguration(target).getEncoderMaxLineLength(); return true;
        case "encoding": getOrCreateConfiguration(target).getEncoding(); return true;
        case "filters": getOrCreateConfiguration(target).getFilters(); return true;
        case "lazysessioncreation":
        case "lazySessionCreation": getOrCreateConfiguration(target).isLazySessionCreation(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "maximumpoolsize":
        case "maximumPoolSize": getOrCreateConfiguration(target).getMaximumPoolSize(); return true;
        case "minalogger":
        case "minaLogger": getOrCreateConfiguration(target).isMinaLogger(); return true;
        case "noreplyloglevel":
        case "noReplyLogLevel": getOrCreateConfiguration(target).getNoReplyLogLevel(); return true;
        case "orderedthreadpoolexecutor":
        case "orderedThreadPoolExecutor": getOrCreateConfiguration(target).isOrderedThreadPoolExecutor(); return true;
        case "sslcontextparameters":
        case "sslContextParameters": getOrCreateConfiguration(target).getSslContextParameters(); return true;
        case "sync": getOrCreateConfiguration(target).isSync(); return true;
        case "textline": getOrCreateConfiguration(target).isTextline(); return true;
        case "textlinedelimiter":
        case "textlineDelimiter": getOrCreateConfiguration(target).getTextlineDelimiter(); return true;
        case "timeout": getOrCreateConfiguration(target).getTimeout(); return true;
        case "transferexchange":
        case "transferExchange": getOrCreateConfiguration(target).isTransferExchange(); return true;
        case "useglobalsslcontextparameters":
        case "useGlobalSslContextParameters": target.isUseGlobalSslContextParameters(); return true;
        case "writetimeout":
        case "writeTimeout": getOrCreateConfiguration(target).getWriteTimeout(); return true;
        default: return null;
        }
    }
}

