/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.aws.sqs;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SqsEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "amazonAWSHost": ((SqsEndpoint) target).getConfiguration().setAmazonAWSHost(property(camelContext, java.lang.String.class, value)); return true;
        case "amazonSQSClient": ((SqsEndpoint) target).getConfiguration().setAmazonSQSClient(property(camelContext, com.amazonaws.services.sqs.AmazonSQS.class, value)); return true;
        case "autoCreateQueue": ((SqsEndpoint) target).getConfiguration().setAutoCreateQueue(property(camelContext, boolean.class, value)); return true;
        case "headerFilterStrategy": ((SqsEndpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "protocol": ((SqsEndpoint) target).getConfiguration().setProtocol(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyProtocol": ((SqsEndpoint) target).getConfiguration().setProxyProtocol(property(camelContext, com.amazonaws.Protocol.class, value)); return true;
        case "queueOwnerAWSAccountId": ((SqsEndpoint) target).getConfiguration().setQueueOwnerAWSAccountId(property(camelContext, java.lang.String.class, value)); return true;
        case "region": ((SqsEndpoint) target).getConfiguration().setRegion(property(camelContext, java.lang.String.class, value)); return true;
        case "attributeNames": ((SqsEndpoint) target).getConfiguration().setAttributeNames(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((SqsEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentConsumers": ((SqsEndpoint) target).getConfiguration().setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "defaultVisibilityTimeout": ((SqsEndpoint) target).getConfiguration().setDefaultVisibilityTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "deleteAfterRead": ((SqsEndpoint) target).getConfiguration().setDeleteAfterRead(property(camelContext, boolean.class, value)); return true;
        case "deleteIfFiltered": ((SqsEndpoint) target).getConfiguration().setDeleteIfFiltered(property(camelContext, boolean.class, value)); return true;
        case "extendMessageVisibility": ((SqsEndpoint) target).getConfiguration().setExtendMessageVisibility(property(camelContext, boolean.class, value)); return true;
        case "kmsDataKeyReusePeriodSeconds": ((SqsEndpoint) target).getConfiguration().setKmsDataKeyReusePeriodSeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "kmsMasterKeyId": ((SqsEndpoint) target).getConfiguration().setKmsMasterKeyId(property(camelContext, java.lang.String.class, value)); return true;
        case "maxMessagesPerPoll": ((SqsEndpoint) target).setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "messageAttributeNames": ((SqsEndpoint) target).getConfiguration().setMessageAttributeNames(property(camelContext, java.lang.String.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((SqsEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "serverSideEncryptionEnabled": ((SqsEndpoint) target).getConfiguration().setServerSideEncryptionEnabled(property(camelContext, boolean.class, value)); return true;
        case "visibilityTimeout": ((SqsEndpoint) target).getConfiguration().setVisibilityTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "waitTimeSeconds": ((SqsEndpoint) target).getConfiguration().setWaitTimeSeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "exceptionHandler": ((SqsEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((SqsEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((SqsEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "delaySeconds": ((SqsEndpoint) target).getConfiguration().setDelaySeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "lazyStartProducer": ((SqsEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "messageDeduplicationIdStrategy": ((SqsEndpoint) target).getConfiguration().setMessageDeduplicationIdStrategy(property(camelContext, org.apache.camel.component.aws.sqs.MessageDeduplicationIdStrategy.class, value)); return true;
        case "messageGroupIdStrategy": ((SqsEndpoint) target).getConfiguration().setMessageGroupIdStrategy(property(camelContext, org.apache.camel.component.aws.sqs.MessageGroupIdStrategy.class, value)); return true;
        case "operation": ((SqsEndpoint) target).getConfiguration().setOperation(property(camelContext, org.apache.camel.component.aws.sqs.SqsOperations.class, value)); return true;
        case "basicPropertyBinding": ((SqsEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "delayQueue": ((SqsEndpoint) target).getConfiguration().setDelayQueue(property(camelContext, boolean.class, value)); return true;
        case "queueUrl": ((SqsEndpoint) target).getConfiguration().setQueueUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((SqsEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffErrorThreshold": ((SqsEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((SqsEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((SqsEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((SqsEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((SqsEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((SqsEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((SqsEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((SqsEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((SqsEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((SqsEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((SqsEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((SqsEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((SqsEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((SqsEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "proxyHost": ((SqsEndpoint) target).getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyPort": ((SqsEndpoint) target).getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maximumMessageSize": ((SqsEndpoint) target).getConfiguration().setMaximumMessageSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "messageRetentionPeriod": ((SqsEndpoint) target).getConfiguration().setMessageRetentionPeriod(property(camelContext, java.lang.Integer.class, value)); return true;
        case "policy": ((SqsEndpoint) target).getConfiguration().setPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "receiveMessageWaitTimeSeconds": ((SqsEndpoint) target).getConfiguration().setReceiveMessageWaitTimeSeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "redrivePolicy": ((SqsEndpoint) target).getConfiguration().setRedrivePolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "accessKey": ((SqsEndpoint) target).getConfiguration().setAccessKey(property(camelContext, java.lang.String.class, value)); return true;
        case "secretKey": ((SqsEndpoint) target).getConfiguration().setSecretKey(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "amazonawshost": ((SqsEndpoint) target).getConfiguration().setAmazonAWSHost(property(camelContext, java.lang.String.class, value)); return true;
        case "amazonsqsclient": ((SqsEndpoint) target).getConfiguration().setAmazonSQSClient(property(camelContext, com.amazonaws.services.sqs.AmazonSQS.class, value)); return true;
        case "autocreatequeue": ((SqsEndpoint) target).getConfiguration().setAutoCreateQueue(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy": ((SqsEndpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "protocol": ((SqsEndpoint) target).getConfiguration().setProtocol(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyprotocol": ((SqsEndpoint) target).getConfiguration().setProxyProtocol(property(camelContext, com.amazonaws.Protocol.class, value)); return true;
        case "queueownerawsaccountid": ((SqsEndpoint) target).getConfiguration().setQueueOwnerAWSAccountId(property(camelContext, java.lang.String.class, value)); return true;
        case "region": ((SqsEndpoint) target).getConfiguration().setRegion(property(camelContext, java.lang.String.class, value)); return true;
        case "attributenames": ((SqsEndpoint) target).getConfiguration().setAttributeNames(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((SqsEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentconsumers": ((SqsEndpoint) target).getConfiguration().setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "defaultvisibilitytimeout": ((SqsEndpoint) target).getConfiguration().setDefaultVisibilityTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "deleteafterread": ((SqsEndpoint) target).getConfiguration().setDeleteAfterRead(property(camelContext, boolean.class, value)); return true;
        case "deleteiffiltered": ((SqsEndpoint) target).getConfiguration().setDeleteIfFiltered(property(camelContext, boolean.class, value)); return true;
        case "extendmessagevisibility": ((SqsEndpoint) target).getConfiguration().setExtendMessageVisibility(property(camelContext, boolean.class, value)); return true;
        case "kmsdatakeyreuseperiodseconds": ((SqsEndpoint) target).getConfiguration().setKmsDataKeyReusePeriodSeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "kmsmasterkeyid": ((SqsEndpoint) target).getConfiguration().setKmsMasterKeyId(property(camelContext, java.lang.String.class, value)); return true;
        case "maxmessagesperpoll": ((SqsEndpoint) target).setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "messageattributenames": ((SqsEndpoint) target).getConfiguration().setMessageAttributeNames(property(camelContext, java.lang.String.class, value)); return true;
        case "sendemptymessagewhenidle": ((SqsEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "serversideencryptionenabled": ((SqsEndpoint) target).getConfiguration().setServerSideEncryptionEnabled(property(camelContext, boolean.class, value)); return true;
        case "visibilitytimeout": ((SqsEndpoint) target).getConfiguration().setVisibilityTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "waittimeseconds": ((SqsEndpoint) target).getConfiguration().setWaitTimeSeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "exceptionhandler": ((SqsEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((SqsEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((SqsEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "delayseconds": ((SqsEndpoint) target).getConfiguration().setDelaySeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "lazystartproducer": ((SqsEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "messagededuplicationidstrategy": ((SqsEndpoint) target).getConfiguration().setMessageDeduplicationIdStrategy(property(camelContext, org.apache.camel.component.aws.sqs.MessageDeduplicationIdStrategy.class, value)); return true;
        case "messagegroupidstrategy": ((SqsEndpoint) target).getConfiguration().setMessageGroupIdStrategy(property(camelContext, org.apache.camel.component.aws.sqs.MessageGroupIdStrategy.class, value)); return true;
        case "operation": ((SqsEndpoint) target).getConfiguration().setOperation(property(camelContext, org.apache.camel.component.aws.sqs.SqsOperations.class, value)); return true;
        case "basicpropertybinding": ((SqsEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "delayqueue": ((SqsEndpoint) target).getConfiguration().setDelayQueue(property(camelContext, boolean.class, value)); return true;
        case "queueurl": ((SqsEndpoint) target).getConfiguration().setQueueUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((SqsEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold": ((SqsEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((SqsEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((SqsEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((SqsEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((SqsEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((SqsEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((SqsEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((SqsEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((SqsEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((SqsEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((SqsEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((SqsEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((SqsEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((SqsEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "proxyhost": ((SqsEndpoint) target).getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport": ((SqsEndpoint) target).getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maximummessagesize": ((SqsEndpoint) target).getConfiguration().setMaximumMessageSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "messageretentionperiod": ((SqsEndpoint) target).getConfiguration().setMessageRetentionPeriod(property(camelContext, java.lang.Integer.class, value)); return true;
        case "policy": ((SqsEndpoint) target).getConfiguration().setPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "receivemessagewaittimeseconds": ((SqsEndpoint) target).getConfiguration().setReceiveMessageWaitTimeSeconds(property(camelContext, java.lang.Integer.class, value)); return true;
        case "redrivepolicy": ((SqsEndpoint) target).getConfiguration().setRedrivePolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "accesskey": ((SqsEndpoint) target).getConfiguration().setAccessKey(property(camelContext, java.lang.String.class, value)); return true;
        case "secretkey": ((SqsEndpoint) target).getConfiguration().setSecretKey(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

