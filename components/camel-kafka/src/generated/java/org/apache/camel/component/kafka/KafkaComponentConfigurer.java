/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.kafka;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class KafkaComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "configuration": ((KafkaComponent) target).setConfiguration(property(camelContext, org.apache.camel.component.kafka.KafkaConfiguration.class, value)); return true;
        case "brokers": ((KafkaComponent) target).setBrokers(property(camelContext, java.lang.String.class, value)); return true;
        case "workerPool": ((KafkaComponent) target).setWorkerPool(property(camelContext, java.util.concurrent.ExecutorService.class, value)); return true;
        case "useGlobalSslContextParameters": ((KafkaComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "breakOnFirstError": ((KafkaComponent) target).setBreakOnFirstError(property(camelContext, boolean.class, value)); return true;
        case "allowManualCommit": ((KafkaComponent) target).setAllowManualCommit(property(camelContext, boolean.class, value)); return true;
        case "kafkaManualCommitFactory": ((KafkaComponent) target).setKafkaManualCommitFactory(property(camelContext, org.apache.camel.component.kafka.KafkaManualCommitFactory.class, value)); return true;
        case "basicPropertyBinding": ((KafkaComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((KafkaComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((KafkaComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "configuration": ((KafkaComponent) target).setConfiguration(property(camelContext, org.apache.camel.component.kafka.KafkaConfiguration.class, value)); return true;
        case "brokers": ((KafkaComponent) target).setBrokers(property(camelContext, java.lang.String.class, value)); return true;
        case "workerpool": ((KafkaComponent) target).setWorkerPool(property(camelContext, java.util.concurrent.ExecutorService.class, value)); return true;
        case "useglobalsslcontextparameters": ((KafkaComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "breakonfirsterror": ((KafkaComponent) target).setBreakOnFirstError(property(camelContext, boolean.class, value)); return true;
        case "allowmanualcommit": ((KafkaComponent) target).setAllowManualCommit(property(camelContext, boolean.class, value)); return true;
        case "kafkamanualcommitfactory": ((KafkaComponent) target).setKafkaManualCommitFactory(property(camelContext, org.apache.camel.component.kafka.KafkaManualCommitFactory.class, value)); return true;
        case "basicpropertybinding": ((KafkaComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((KafkaComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((KafkaComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

