/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.log;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class LogEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        LogEndpoint target = (LogEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "exchangeformatter":
        case "exchangeFormatter": target.setExchangeFormatter(property(camelContext, org.apache.camel.spi.ExchangeFormatter.class, value)); return true;
        case "groupactiveonly":
        case "groupActiveOnly": target.setGroupActiveOnly(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "groupdelay":
        case "groupDelay": target.setGroupDelay(property(camelContext, java.lang.Long.class, value)); return true;
        case "groupinterval":
        case "groupInterval": target.setGroupInterval(property(camelContext, java.lang.Long.class, value)); return true;
        case "groupsize":
        case "groupSize": target.setGroupSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "level": target.setLevel(property(camelContext, java.lang.String.class, value)); return true;
        case "logmask":
        case "logMask": target.setLogMask(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "marker": target.setMarker(property(camelContext, java.lang.String.class, value)); return true;
        case "maxchars":
        case "maxChars": target.setMaxChars(property(camelContext, int.class, value)); return true;
        case "multiline": target.setMultiline(property(camelContext, boolean.class, value)); return true;
        case "showall":
        case "showAll": target.setShowAll(property(camelContext, boolean.class, value)); return true;
        case "showbody":
        case "showBody": target.setShowBody(property(camelContext, boolean.class, value)); return true;
        case "showbodytype":
        case "showBodyType": target.setShowBodyType(property(camelContext, boolean.class, value)); return true;
        case "showcaughtexception":
        case "showCaughtException": target.setShowCaughtException(property(camelContext, boolean.class, value)); return true;
        case "showexception":
        case "showException": target.setShowException(property(camelContext, boolean.class, value)); return true;
        case "showexchangeid":
        case "showExchangeId": target.setShowExchangeId(property(camelContext, boolean.class, value)); return true;
        case "showexchangepattern":
        case "showExchangePattern": target.setShowExchangePattern(property(camelContext, boolean.class, value)); return true;
        case "showfiles":
        case "showFiles": target.setShowFiles(property(camelContext, boolean.class, value)); return true;
        case "showfuture":
        case "showFuture": target.setShowFuture(property(camelContext, boolean.class, value)); return true;
        case "showheaders":
        case "showHeaders": target.setShowHeaders(property(camelContext, boolean.class, value)); return true;
        case "showproperties":
        case "showProperties": target.setShowProperties(property(camelContext, boolean.class, value)); return true;
        case "showstacktrace":
        case "showStackTrace": target.setShowStackTrace(property(camelContext, boolean.class, value)); return true;
        case "showstreams":
        case "showStreams": target.setShowStreams(property(camelContext, boolean.class, value)); return true;
        case "skipbodylineseparator":
        case "skipBodyLineSeparator": target.setSkipBodyLineSeparator(property(camelContext, boolean.class, value)); return true;
        case "style": target.setStyle(property(camelContext, org.apache.camel.support.processor.DefaultExchangeFormatter.OutputStyle.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("exchangeFormatter", org.apache.camel.spi.ExchangeFormatter.class);
        answer.put("groupActiveOnly", java.lang.Boolean.class);
        answer.put("groupDelay", java.lang.Long.class);
        answer.put("groupInterval", java.lang.Long.class);
        answer.put("groupSize", java.lang.Integer.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("level", java.lang.String.class);
        answer.put("logMask", java.lang.Boolean.class);
        answer.put("marker", java.lang.String.class);
        answer.put("maxChars", int.class);
        answer.put("multiline", boolean.class);
        answer.put("showAll", boolean.class);
        answer.put("showBody", boolean.class);
        answer.put("showBodyType", boolean.class);
        answer.put("showCaughtException", boolean.class);
        answer.put("showException", boolean.class);
        answer.put("showExchangeId", boolean.class);
        answer.put("showExchangePattern", boolean.class);
        answer.put("showFiles", boolean.class);
        answer.put("showFuture", boolean.class);
        answer.put("showHeaders", boolean.class);
        answer.put("showProperties", boolean.class);
        answer.put("showStackTrace", boolean.class);
        answer.put("showStreams", boolean.class);
        answer.put("skipBodyLineSeparator", boolean.class);
        answer.put("style", org.apache.camel.support.processor.DefaultExchangeFormatter.OutputStyle.class);
        answer.put("synchronous", boolean.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        LogEndpoint target = (LogEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "exchangeformatter":
        case "exchangeFormatter": target.getExchangeFormatter(); return true;
        case "groupactiveonly":
        case "groupActiveOnly": target.getGroupActiveOnly(); return true;
        case "groupdelay":
        case "groupDelay": target.getGroupDelay(); return true;
        case "groupinterval":
        case "groupInterval": target.getGroupInterval(); return true;
        case "groupsize":
        case "groupSize": target.getGroupSize(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "level": target.getLevel(); return true;
        case "logmask":
        case "logMask": target.getLogMask(); return true;
        case "marker": target.getMarker(); return true;
        case "maxchars":
        case "maxChars": target.getMaxChars(); return true;
        case "multiline": target.isMultiline(); return true;
        case "showall":
        case "showAll": target.isShowAll(); return true;
        case "showbody":
        case "showBody": target.isShowBody(); return true;
        case "showbodytype":
        case "showBodyType": target.isShowBodyType(); return true;
        case "showcaughtexception":
        case "showCaughtException": target.isShowCaughtException(); return true;
        case "showexception":
        case "showException": target.isShowException(); return true;
        case "showexchangeid":
        case "showExchangeId": target.isShowExchangeId(); return true;
        case "showexchangepattern":
        case "showExchangePattern": target.isShowExchangePattern(); return true;
        case "showfiles":
        case "showFiles": target.isShowFiles(); return true;
        case "showfuture":
        case "showFuture": target.isShowFuture(); return true;
        case "showheaders":
        case "showHeaders": target.isShowHeaders(); return true;
        case "showproperties":
        case "showProperties": target.isShowProperties(); return true;
        case "showstacktrace":
        case "showStackTrace": target.isShowStackTrace(); return true;
        case "showstreams":
        case "showStreams": target.isShowStreams(); return true;
        case "skipbodylineseparator":
        case "skipBodyLineSeparator": target.isSkipBodyLineSeparator(); return true;
        case "style": target.getStyle(); return true;
        case "synchronous": target.isSynchronous(); return true;
        default: return null;
        }
    }
}

