/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.aws.kinesis;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class KinesisEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "amazonKinesisClient": ((KinesisEndpoint) target).getConfiguration().setAmazonKinesisClient(property(camelContext, com.amazonaws.services.kinesis.AmazonKinesis.class, value)); return true;
        case "proxyHost": ((KinesisEndpoint) target).getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyPort": ((KinesisEndpoint) target).getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyProtocol": ((KinesisEndpoint) target).getConfiguration().setProxyProtocol(property(camelContext, com.amazonaws.Protocol.class, value)); return true;
        case "region": ((KinesisEndpoint) target).getConfiguration().setRegion(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((KinesisEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "iteratorType": ((KinesisEndpoint) target).getConfiguration().setIteratorType(property(camelContext, com.amazonaws.services.kinesis.model.ShardIteratorType.class, value)); return true;
        case "maxResultsPerRequest": ((KinesisEndpoint) target).getConfiguration().setMaxResultsPerRequest(property(camelContext, int.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((KinesisEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "sequenceNumber": ((KinesisEndpoint) target).getConfiguration().setSequenceNumber(property(camelContext, java.lang.String.class, value)); return true;
        case "shardClosed": ((KinesisEndpoint) target).getConfiguration().setShardClosed(property(camelContext, org.apache.camel.component.aws.kinesis.KinesisShardClosedStrategyEnum.class, value)); return true;
        case "shardId": ((KinesisEndpoint) target).getConfiguration().setShardId(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionHandler": ((KinesisEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((KinesisEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((KinesisEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazyStartProducer": ((KinesisEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((KinesisEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((KinesisEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffErrorThreshold": ((KinesisEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((KinesisEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((KinesisEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((KinesisEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((KinesisEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((KinesisEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((KinesisEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((KinesisEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((KinesisEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((KinesisEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((KinesisEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((KinesisEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((KinesisEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((KinesisEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "accessKey": ((KinesisEndpoint) target).getConfiguration().setAccessKey(property(camelContext, java.lang.String.class, value)); return true;
        case "secretKey": ((KinesisEndpoint) target).getConfiguration().setSecretKey(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "amazonkinesisclient": ((KinesisEndpoint) target).getConfiguration().setAmazonKinesisClient(property(camelContext, com.amazonaws.services.kinesis.AmazonKinesis.class, value)); return true;
        case "proxyhost": ((KinesisEndpoint) target).getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport": ((KinesisEndpoint) target).getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "proxyprotocol": ((KinesisEndpoint) target).getConfiguration().setProxyProtocol(property(camelContext, com.amazonaws.Protocol.class, value)); return true;
        case "region": ((KinesisEndpoint) target).getConfiguration().setRegion(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((KinesisEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "iteratortype": ((KinesisEndpoint) target).getConfiguration().setIteratorType(property(camelContext, com.amazonaws.services.kinesis.model.ShardIteratorType.class, value)); return true;
        case "maxresultsperrequest": ((KinesisEndpoint) target).getConfiguration().setMaxResultsPerRequest(property(camelContext, int.class, value)); return true;
        case "sendemptymessagewhenidle": ((KinesisEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "sequencenumber": ((KinesisEndpoint) target).getConfiguration().setSequenceNumber(property(camelContext, java.lang.String.class, value)); return true;
        case "shardclosed": ((KinesisEndpoint) target).getConfiguration().setShardClosed(property(camelContext, org.apache.camel.component.aws.kinesis.KinesisShardClosedStrategyEnum.class, value)); return true;
        case "shardid": ((KinesisEndpoint) target).getConfiguration().setShardId(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler": ((KinesisEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((KinesisEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((KinesisEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "lazystartproducer": ((KinesisEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((KinesisEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((KinesisEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold": ((KinesisEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((KinesisEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((KinesisEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((KinesisEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((KinesisEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((KinesisEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((KinesisEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((KinesisEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((KinesisEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((KinesisEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((KinesisEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((KinesisEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((KinesisEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((KinesisEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "accesskey": ((KinesisEndpoint) target).getConfiguration().setAccessKey(property(camelContext, java.lang.String.class, value)); return true;
        case "secretkey": ((KinesisEndpoint) target).getConfiguration().setSecretKey(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

