/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.smpp;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class SmppEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":host:port";
    private static final String[] SCHEMES = new String[]{"smpp", "smpps"};

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "addressRange", "alphabet", "bridgeErrorHandler", "dataCoding", "destAddr", "destAddrNpi", "destAddrTon",
            "encoding", "enquireLinkTimer", "exceptionHandler", "exchangePattern", "host", "httpProxyHost",
            "httpProxyPassword", "httpProxyPort", "httpProxyUsername", "initialReconnectDelay", "lazySessionCreation",
            "lazyStartProducer", "maxReconnect", "numberingPlanIndicator", "password", "pduProcessorDegree",
            "pduProcessorQueueCapacity", "port", "priorityFlag", "protocolId", "proxyHeaders", "reconnectDelay",
            "registeredDelivery", "replaceIfPresentFlag", "serviceType", "sessionStateListener", "singleDLR", "sourceAddr",
            "sourceAddrNpi", "sourceAddrTon", "splittingPolicy", "systemId", "systemType", "transactionTimer",
            "typeOfNumber", "usingSSL");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "password", "systemId");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of();

    @Override
    public boolean isEnabled(String scheme) {
        for (String s : SCHEMES) {
            if (s.equals(scheme)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "host", "localhost", false, copy);
        uri = buildPathParameter(syntax, uri, "port", "2775", false, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return true;
    }
}

