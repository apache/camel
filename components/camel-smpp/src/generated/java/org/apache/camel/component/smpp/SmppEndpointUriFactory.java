/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.smpp;

import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class SmppEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":host:port";
    private static final String[] SCHEMES = new String[]{"smpp", "smpps"};

    private static final Set<String> PROPERTY_NAMES;
    static {
        Set<String> set = new HashSet<>(42);
        set.add("host");
        set.add("port");
        set.add("initialReconnectDelay");
        set.add("maxReconnect");
        set.add("reconnectDelay");
        set.add("splittingPolicy");
        set.add("systemType");
        set.add("addressRange");
        set.add("bridgeErrorHandler");
        set.add("exceptionHandler");
        set.add("exchangePattern");
        set.add("destAddr");
        set.add("destAddrNpi");
        set.add("destAddrTon");
        set.add("lazySessionCreation");
        set.add("lazyStartProducer");
        set.add("numberingPlanIndicator");
        set.add("priorityFlag");
        set.add("protocolId");
        set.add("registeredDelivery");
        set.add("replaceIfPresentFlag");
        set.add("serviceType");
        set.add("sourceAddr");
        set.add("sourceAddrNpi");
        set.add("sourceAddrTon");
        set.add("typeOfNumber");
        set.add("basicPropertyBinding");
        set.add("enquireLinkTimer");
        set.add("sessionStateListener");
        set.add("synchronous");
        set.add("transactionTimer");
        set.add("alphabet");
        set.add("dataCoding");
        set.add("encoding");
        set.add("httpProxyHost");
        set.add("httpProxyPassword");
        set.add("httpProxyPort");
        set.add("httpProxyUsername");
        set.add("proxyHeaders");
        set.add("password");
        set.add("systemId");
        set.add("usingSSL");
        PROPERTY_NAMES = set;
    }


    @Override
    public boolean isEnabled(String scheme) {
        for (String s : SCHEMES) {
            if (s.equals(scheme)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "host", "localhost", false, copy);
        uri = buildPathParameter(syntax, uri, "port", "2775", false, copy);
        uri = buildQueryParameters(uri, copy);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public boolean isLenientProperties() {
        return true;
    }
}

