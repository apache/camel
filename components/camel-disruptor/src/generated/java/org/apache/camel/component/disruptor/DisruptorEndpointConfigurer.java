/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.disruptor;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DisruptorEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "size": ((DisruptorEndpoint) target).setSize(property(camelContext, int.class, value)); return true;
        case "bridgeErrorHandler": ((DisruptorEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentConsumers": ((DisruptorEndpoint) target).setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "multipleConsumers": ((DisruptorEndpoint) target).setMultipleConsumers(property(camelContext, boolean.class, value)); return true;
        case "waitStrategy": ((DisruptorEndpoint) target).setWaitStrategy(property(camelContext, org.apache.camel.component.disruptor.DisruptorWaitStrategy.class, value)); return true;
        case "exceptionHandler": ((DisruptorEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((DisruptorEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "blockWhenFull": ((DisruptorEndpoint) target).setBlockWhenFull(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((DisruptorEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "producerType": ((DisruptorEndpoint) target).setProducerType(property(camelContext, org.apache.camel.component.disruptor.DisruptorProducerType.class, value)); return true;
        case "timeout": ((DisruptorEndpoint) target).setTimeout(property(camelContext, long.class, value)); return true;
        case "waitForTaskToComplete": ((DisruptorEndpoint) target).setWaitForTaskToComplete(property(camelContext, org.apache.camel.WaitForTaskToComplete.class, value)); return true;
        case "basicPropertyBinding": ((DisruptorEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((DisruptorEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "size": ((DisruptorEndpoint) target).setSize(property(camelContext, int.class, value)); return true;
        case "bridgeerrorhandler": ((DisruptorEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentconsumers": ((DisruptorEndpoint) target).setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "multipleconsumers": ((DisruptorEndpoint) target).setMultipleConsumers(property(camelContext, boolean.class, value)); return true;
        case "waitstrategy": ((DisruptorEndpoint) target).setWaitStrategy(property(camelContext, org.apache.camel.component.disruptor.DisruptorWaitStrategy.class, value)); return true;
        case "exceptionhandler": ((DisruptorEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((DisruptorEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "blockwhenfull": ((DisruptorEndpoint) target).setBlockWhenFull(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((DisruptorEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "producertype": ((DisruptorEndpoint) target).setProducerType(property(camelContext, org.apache.camel.component.disruptor.DisruptorProducerType.class, value)); return true;
        case "timeout": ((DisruptorEndpoint) target).setTimeout(property(camelContext, long.class, value)); return true;
        case "waitfortasktocomplete": ((DisruptorEndpoint) target).setWaitForTaskToComplete(property(camelContext, org.apache.camel.WaitForTaskToComplete.class, value)); return true;
        case "basicpropertybinding": ((DisruptorEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((DisruptorEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

