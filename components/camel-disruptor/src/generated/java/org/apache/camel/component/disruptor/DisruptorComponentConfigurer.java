/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.disruptor;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class DisruptorComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "defaultConcurrentConsumers": ((DisruptorComponent) target).setDefaultConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "defaultMultipleConsumers": ((DisruptorComponent) target).setDefaultMultipleConsumers(property(camelContext, boolean.class, value)); return true;
        case "defaultProducerType": ((DisruptorComponent) target).setDefaultProducerType(property(camelContext, org.apache.camel.component.disruptor.DisruptorProducerType.class, value)); return true;
        case "defaultWaitStrategy": ((DisruptorComponent) target).setDefaultWaitStrategy(property(camelContext, org.apache.camel.component.disruptor.DisruptorWaitStrategy.class, value)); return true;
        case "defaultBlockWhenFull": ((DisruptorComponent) target).setDefaultBlockWhenFull(property(camelContext, boolean.class, value)); return true;
        case "queueSize": ((DisruptorComponent) target).setQueueSize(property(camelContext, int.class, value)); return true;
        case "bufferSize": ((DisruptorComponent) target).setBufferSize(property(camelContext, int.class, value)); return true;
        case "basicPropertyBinding": ((DisruptorComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((DisruptorComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((DisruptorComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "defaultconcurrentconsumers": ((DisruptorComponent) target).setDefaultConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "defaultmultipleconsumers": ((DisruptorComponent) target).setDefaultMultipleConsumers(property(camelContext, boolean.class, value)); return true;
        case "defaultproducertype": ((DisruptorComponent) target).setDefaultProducerType(property(camelContext, org.apache.camel.component.disruptor.DisruptorProducerType.class, value)); return true;
        case "defaultwaitstrategy": ((DisruptorComponent) target).setDefaultWaitStrategy(property(camelContext, org.apache.camel.component.disruptor.DisruptorWaitStrategy.class, value)); return true;
        case "defaultblockwhenfull": ((DisruptorComponent) target).setDefaultBlockWhenFull(property(camelContext, boolean.class, value)); return true;
        case "queuesize": ((DisruptorComponent) target).setQueueSize(property(camelContext, int.class, value)); return true;
        case "buffersize": ((DisruptorComponent) target).setBufferSize(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding": ((DisruptorComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((DisruptorComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((DisruptorComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

