/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.http;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class HttpComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "httpClientConfigurer": ((HttpComponent) target).setHttpClientConfigurer(property(camelContext, org.apache.camel.component.http.HttpClientConfigurer.class, value)); return true;
        case "clientConnectionManager": ((HttpComponent) target).setClientConnectionManager(property(camelContext, org.apache.http.conn.HttpClientConnectionManager.class, value)); return true;
        case "httpContext": ((HttpComponent) target).setHttpContext(property(camelContext, org.apache.http.protocol.HttpContext.class, value)); return true;
        case "sslContextParameters": ((HttpComponent) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "useGlobalSslContextParameters": ((HttpComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "x509HostnameVerifier": ((HttpComponent) target).setX509HostnameVerifier(property(camelContext, javax.net.ssl.HostnameVerifier.class, value)); return true;
        case "maxTotalConnections": ((HttpComponent) target).setMaxTotalConnections(property(camelContext, int.class, value)); return true;
        case "connectionsPerRoute": ((HttpComponent) target).setConnectionsPerRoute(property(camelContext, int.class, value)); return true;
        case "connectionTimeToLive": ((HttpComponent) target).setConnectionTimeToLive(property(camelContext, long.class, value)); return true;
        case "cookieStore": ((HttpComponent) target).setCookieStore(property(camelContext, org.apache.http.client.CookieStore.class, value)); return true;
        case "connectionRequestTimeout": ((HttpComponent) target).setConnectionRequestTimeout(property(camelContext, int.class, value)); return true;
        case "connectTimeout": ((HttpComponent) target).setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "socketTimeout": ((HttpComponent) target).setSocketTimeout(property(camelContext, int.class, value)); return true;
        case "httpBinding": ((HttpComponent) target).setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "httpConfiguration": ((HttpComponent) target).setHttpConfiguration(property(camelContext, org.apache.camel.http.common.HttpConfiguration.class, value)); return true;
        case "allowJavaSerializedObject": ((HttpComponent) target).setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "headerFilterStrategy": ((HttpComponent) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicPropertyBinding": ((HttpComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((HttpComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "httpclientconfigurer": ((HttpComponent) target).setHttpClientConfigurer(property(camelContext, org.apache.camel.component.http.HttpClientConfigurer.class, value)); return true;
        case "clientconnectionmanager": ((HttpComponent) target).setClientConnectionManager(property(camelContext, org.apache.http.conn.HttpClientConnectionManager.class, value)); return true;
        case "httpcontext": ((HttpComponent) target).setHttpContext(property(camelContext, org.apache.http.protocol.HttpContext.class, value)); return true;
        case "sslcontextparameters": ((HttpComponent) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "useglobalsslcontextparameters": ((HttpComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "x509hostnameverifier": ((HttpComponent) target).setX509HostnameVerifier(property(camelContext, javax.net.ssl.HostnameVerifier.class, value)); return true;
        case "maxtotalconnections": ((HttpComponent) target).setMaxTotalConnections(property(camelContext, int.class, value)); return true;
        case "connectionsperroute": ((HttpComponent) target).setConnectionsPerRoute(property(camelContext, int.class, value)); return true;
        case "connectiontimetolive": ((HttpComponent) target).setConnectionTimeToLive(property(camelContext, long.class, value)); return true;
        case "cookiestore": ((HttpComponent) target).setCookieStore(property(camelContext, org.apache.http.client.CookieStore.class, value)); return true;
        case "connectionrequesttimeout": ((HttpComponent) target).setConnectionRequestTimeout(property(camelContext, int.class, value)); return true;
        case "connecttimeout": ((HttpComponent) target).setConnectTimeout(property(camelContext, int.class, value)); return true;
        case "sockettimeout": ((HttpComponent) target).setSocketTimeout(property(camelContext, int.class, value)); return true;
        case "httpbinding": ((HttpComponent) target).setHttpBinding(property(camelContext, org.apache.camel.http.common.HttpBinding.class, value)); return true;
        case "httpconfiguration": ((HttpComponent) target).setHttpConfiguration(property(camelContext, org.apache.camel.http.common.HttpConfiguration.class, value)); return true;
        case "allowjavaserializedobject": ((HttpComponent) target).setAllowJavaSerializedObject(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy": ((HttpComponent) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicpropertybinding": ((HttpComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((HttpComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

