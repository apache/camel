/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.http;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class HttpEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = "://httpUri";
    private static final String[] SCHEMES = new String[]{"http", "https"};

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "authDomain", "authHost", "authMethod", "authMethodPriority", "authPassword", "authUsername",
            "authenticationPreemptive", "bridgeEndpoint", "clearExpiredCookies", "clientBuilder",
            "clientConnectionManager", "connectionClose", "connectionsPerRoute", "cookieHandler", "cookieStore",
            "copyHeaders", "customHostHeader", "deleteWithBody", "disableStreamCache", "followRedirects", "getWithBody",
            "headerFilterStrategy", "httpClient", "httpClientConfigurer", "httpClientOptions", "httpContext", "httpMethod",
            "httpUri", "ignoreResponseBody", "lazyStartProducer", "maxTotalConnections", "okStatusCodeRange",
            "preserveHostHeader", "proxyAuthDomain", "proxyAuthHost", "proxyAuthMethod", "proxyAuthNtHost",
            "proxyAuthPassword", "proxyAuthPort", "proxyAuthScheme", "proxyAuthUsername", "proxyHost", "proxyPort",
            "skipRequestHeaders", "skipResponseHeaders", "sslContextParameters", "throwExceptionOnFailure",
            "useSystemProperties", "userAgent", "x509HostnameVerifier");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "authPassword", "authUsername", "proxyAuthPassword", "proxyAuthUsername");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "httpClient.");

    @Override
    public boolean isEnabled(String scheme) {
        for (String s : SCHEMES) {
            if (s.equals(scheme)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "httpUri", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return true;
    }
}

