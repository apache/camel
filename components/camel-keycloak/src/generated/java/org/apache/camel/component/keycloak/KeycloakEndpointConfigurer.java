/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.keycloak;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class KeycloakEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        KeycloakEndpoint target = (KeycloakEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authclient":
        case "authClient": target.getConfiguration().setAuthClient(property(camelContext, java.lang.String.class, value)); return true;
        case "authipaddress":
        case "authIpAddress": target.getConfiguration().setAuthIpAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "authrealm":
        case "authRealm": target.getConfiguration().setAuthRealm(property(camelContext, java.lang.String.class, value)); return true;
        case "authrealmfilter":
        case "authRealmFilter": target.getConfiguration().setAuthRealmFilter(property(camelContext, java.lang.String.class, value)); return true;
        case "authuser":
        case "authUser": target.getConfiguration().setAuthUser(property(camelContext, java.lang.String.class, value)); return true;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "client": target.getConfiguration().setClient(property(camelContext, java.lang.String.class, value)); return true;
        case "clientid":
        case "clientId": target.getConfiguration().setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "clientsecret":
        case "clientSecret": target.getConfiguration().setClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "datefrom":
        case "dateFrom": target.getConfiguration().setDateFrom(property(camelContext, java.lang.String.class, value)); return true;
        case "dateto":
        case "dateTo": target.getConfiguration().setDateTo(property(camelContext, java.lang.String.class, value)); return true;
        case "delay": target.setDelay(property(camelContext, long.class, value)); return true;
        case "eventtype":
        case "eventType": target.getConfiguration().setEventType(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "first": target.getConfiguration().setFirst(property(camelContext, int.class, value)); return true;
        case "greedy": target.setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay":
        case "initialDelay": target.setInitialDelay(property(camelContext, long.class, value)); return true;
        case "ipaddress":
        case "ipAddress": target.getConfiguration().setIpAddress(property(camelContext, java.lang.String.class, value)); return true;
        case "keycloakclient":
        case "keycloakClient": target.getConfiguration().setKeycloakClient(property(camelContext, org.keycloak.admin.client.Keycloak.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxresults":
        case "maxResults": target.getConfiguration().setMaxResults(property(camelContext, int.class, value)); return true;
        case "operation": target.getConfiguration().setOperation(property(camelContext, org.apache.camel.component.keycloak.KeycloakOperations.class, value)); return true;
        case "operationtypes":
        case "operationTypes": target.getConfiguration().setOperationTypes(property(camelContext, java.lang.String.class, value)); return true;
        case "password": target.getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "pojorequest":
        case "pojoRequest": target.getConfiguration().setPojoRequest(property(camelContext, boolean.class, value)); return true;
        case "pollstrategy":
        case "pollStrategy": target.setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "realm": target.getConfiguration().setRealm(property(camelContext, java.lang.String.class, value)); return true;
        case "repeatcount":
        case "repeatCount": target.setRepeatCount(property(camelContext, long.class, value)); return true;
        case "resourcepath":
        case "resourcePath": target.getConfiguration().setResourcePath(property(camelContext, java.lang.String.class, value)); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": target.setScheduler(property(camelContext, java.lang.Object.class, value)); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "serverurl":
        case "serverUrl": target.getConfiguration().setServerUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "startscheduler":
        case "startScheduler": target.setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit":
        case "timeUnit": target.setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "types": target.getConfiguration().setTypes(property(camelContext, java.lang.String.class, value)); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "user": target.getConfiguration().setUser(property(camelContext, java.lang.String.class, value)); return true;
        case "username": target.getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public String[] getAutowiredNames() {
        return new String[]{"keycloakClient"};
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authclient":
        case "authClient": return java.lang.String.class;
        case "authipaddress":
        case "authIpAddress": return java.lang.String.class;
        case "authrealm":
        case "authRealm": return java.lang.String.class;
        case "authrealmfilter":
        case "authRealmFilter": return java.lang.String.class;
        case "authuser":
        case "authUser": return java.lang.String.class;
        case "backofferrorthreshold":
        case "backoffErrorThreshold": return int.class;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": return int.class;
        case "backoffmultiplier":
        case "backoffMultiplier": return int.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "client": return java.lang.String.class;
        case "clientid":
        case "clientId": return java.lang.String.class;
        case "clientsecret":
        case "clientSecret": return java.lang.String.class;
        case "datefrom":
        case "dateFrom": return java.lang.String.class;
        case "dateto":
        case "dateTo": return java.lang.String.class;
        case "delay": return long.class;
        case "eventtype":
        case "eventType": return java.lang.String.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "first": return int.class;
        case "greedy": return boolean.class;
        case "initialdelay":
        case "initialDelay": return long.class;
        case "ipaddress":
        case "ipAddress": return java.lang.String.class;
        case "keycloakclient":
        case "keycloakClient": return org.keycloak.admin.client.Keycloak.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "maxresults":
        case "maxResults": return int.class;
        case "operation": return org.apache.camel.component.keycloak.KeycloakOperations.class;
        case "operationtypes":
        case "operationTypes": return java.lang.String.class;
        case "password": return java.lang.String.class;
        case "pojorequest":
        case "pojoRequest": return boolean.class;
        case "pollstrategy":
        case "pollStrategy": return org.apache.camel.spi.PollingConsumerPollStrategy.class;
        case "realm": return java.lang.String.class;
        case "repeatcount":
        case "repeatCount": return long.class;
        case "resourcepath":
        case "resourcePath": return java.lang.String.class;
        case "runlogginglevel":
        case "runLoggingLevel": return org.apache.camel.LoggingLevel.class;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": return java.util.concurrent.ScheduledExecutorService.class;
        case "scheduler": return java.lang.Object.class;
        case "schedulerproperties":
        case "schedulerProperties": return java.util.Map.class;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": return boolean.class;
        case "serverurl":
        case "serverUrl": return java.lang.String.class;
        case "startscheduler":
        case "startScheduler": return boolean.class;
        case "timeunit":
        case "timeUnit": return java.util.concurrent.TimeUnit.class;
        case "types": return java.lang.String.class;
        case "usefixeddelay":
        case "useFixedDelay": return boolean.class;
        case "user": return java.lang.String.class;
        case "username": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        KeycloakEndpoint target = (KeycloakEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "authclient":
        case "authClient": return target.getConfiguration().getAuthClient();
        case "authipaddress":
        case "authIpAddress": return target.getConfiguration().getAuthIpAddress();
        case "authrealm":
        case "authRealm": return target.getConfiguration().getAuthRealm();
        case "authrealmfilter":
        case "authRealmFilter": return target.getConfiguration().getAuthRealmFilter();
        case "authuser":
        case "authUser": return target.getConfiguration().getAuthUser();
        case "backofferrorthreshold":
        case "backoffErrorThreshold": return target.getBackoffErrorThreshold();
        case "backoffidlethreshold":
        case "backoffIdleThreshold": return target.getBackoffIdleThreshold();
        case "backoffmultiplier":
        case "backoffMultiplier": return target.getBackoffMultiplier();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "client": return target.getConfiguration().getClient();
        case "clientid":
        case "clientId": return target.getConfiguration().getClientId();
        case "clientsecret":
        case "clientSecret": return target.getConfiguration().getClientSecret();
        case "datefrom":
        case "dateFrom": return target.getConfiguration().getDateFrom();
        case "dateto":
        case "dateTo": return target.getConfiguration().getDateTo();
        case "delay": return target.getDelay();
        case "eventtype":
        case "eventType": return target.getConfiguration().getEventType();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "first": return target.getConfiguration().getFirst();
        case "greedy": return target.isGreedy();
        case "initialdelay":
        case "initialDelay": return target.getInitialDelay();
        case "ipaddress":
        case "ipAddress": return target.getConfiguration().getIpAddress();
        case "keycloakclient":
        case "keycloakClient": return target.getConfiguration().getKeycloakClient();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxresults":
        case "maxResults": return target.getConfiguration().getMaxResults();
        case "operation": return target.getConfiguration().getOperation();
        case "operationtypes":
        case "operationTypes": return target.getConfiguration().getOperationTypes();
        case "password": return target.getConfiguration().getPassword();
        case "pojorequest":
        case "pojoRequest": return target.getConfiguration().isPojoRequest();
        case "pollstrategy":
        case "pollStrategy": return target.getPollStrategy();
        case "realm": return target.getConfiguration().getRealm();
        case "repeatcount":
        case "repeatCount": return target.getRepeatCount();
        case "resourcepath":
        case "resourcePath": return target.getConfiguration().getResourcePath();
        case "runlogginglevel":
        case "runLoggingLevel": return target.getRunLoggingLevel();
        case "scheduledexecutorservice":
        case "scheduledExecutorService": return target.getScheduledExecutorService();
        case "scheduler": return target.getScheduler();
        case "schedulerproperties":
        case "schedulerProperties": return target.getSchedulerProperties();
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": return target.isSendEmptyMessageWhenIdle();
        case "serverurl":
        case "serverUrl": return target.getConfiguration().getServerUrl();
        case "startscheduler":
        case "startScheduler": return target.isStartScheduler();
        case "timeunit":
        case "timeUnit": return target.getTimeUnit();
        case "types": return target.getConfiguration().getTypes();
        case "usefixeddelay":
        case "useFixedDelay": return target.isUseFixedDelay();
        case "user": return target.getConfiguration().getUser();
        case "username": return target.getConfiguration().getUsername();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "schedulerproperties":
        case "schedulerProperties": return java.lang.Object.class;
        default: return null;
        }
    }
}

