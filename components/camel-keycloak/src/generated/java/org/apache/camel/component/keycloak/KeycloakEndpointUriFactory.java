/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.keycloak;

import javax.annotation.processing.Generated;
import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateEndpointUriFactoryMojo")
public class KeycloakEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":label";

    private static final Set<String> PROPERTY_NAMES;
    private static final Set<String> SECRET_PROPERTY_NAMES;
    private static final Map<String, String> MULTI_VALUE_PREFIXES;
    static {
        Set<String> props = new HashSet<>(47);
        props.add("accessToken");
        props.add("authClient");
        props.add("authIpAddress");
        props.add("authRealm");
        props.add("authRealmFilter");
        props.add("authUser");
        props.add("backoffErrorThreshold");
        props.add("backoffIdleThreshold");
        props.add("backoffMultiplier");
        props.add("bridgeErrorHandler");
        props.add("client");
        props.add("clientId");
        props.add("clientSecret");
        props.add("dateFrom");
        props.add("dateTo");
        props.add("delay");
        props.add("eventType");
        props.add("exceptionHandler");
        props.add("exchangePattern");
        props.add("first");
        props.add("greedy");
        props.add("initialDelay");
        props.add("ipAddress");
        props.add("keycloakClient");
        props.add("label");
        props.add("lazyStartProducer");
        props.add("maxResults");
        props.add("operation");
        props.add("operationTypes");
        props.add("password");
        props.add("pojoRequest");
        props.add("pollStrategy");
        props.add("realm");
        props.add("repeatCount");
        props.add("resourcePath");
        props.add("runLoggingLevel");
        props.add("scheduledExecutorService");
        props.add("scheduler");
        props.add("schedulerProperties");
        props.add("sendEmptyMessageWhenIdle");
        props.add("serverUrl");
        props.add("startScheduler");
        props.add("timeUnit");
        props.add("types");
        props.add("useFixedDelay");
        props.add("user");
        props.add("username");
        PROPERTY_NAMES = Collections.unmodifiableSet(props);
        Set<String> secretProps = new HashSet<>(4);
        secretProps.add("accessToken");
        secretProps.add("clientSecret");
        secretProps.add("password");
        secretProps.add("username");
        SECRET_PROPERTY_NAMES = Collections.unmodifiableSet(secretProps);
        Map<String, String> prefixes = new HashMap<>(1);
        prefixes.put("schedulerProperties", "scheduler.");
        MULTI_VALUE_PREFIXES = Collections.unmodifiableMap(prefixes);
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "keycloak".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "label", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Map<String, String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

