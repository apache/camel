/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.mock;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class MockEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "assertPeriod": ((MockEndpoint) target).setAssertPeriod(property(camelContext, long.class, value)); return true;
        case "expectedCount": ((MockEndpoint) target).setExpectedCount(property(camelContext, int.class, value)); return true;
        case "failFast": ((MockEndpoint) target).setFailFast(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((MockEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "reportGroup": ((MockEndpoint) target).setReportGroup(property(camelContext, int.class, value)); return true;
        case "resultMinimumWaitTime": ((MockEndpoint) target).setResultMinimumWaitTime(property(camelContext, long.class, value)); return true;
        case "resultWaitTime": ((MockEndpoint) target).setResultWaitTime(property(camelContext, long.class, value)); return true;
        case "retainFirst": ((MockEndpoint) target).setRetainFirst(property(camelContext, int.class, value)); return true;
        case "retainLast": ((MockEndpoint) target).setRetainLast(property(camelContext, int.class, value)); return true;
        case "sleepForEmptyTest": ((MockEndpoint) target).setSleepForEmptyTest(property(camelContext, long.class, value)); return true;
        case "copyOnExchange": ((MockEndpoint) target).setCopyOnExchange(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((MockEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((MockEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "assertperiod": ((MockEndpoint) target).setAssertPeriod(property(camelContext, long.class, value)); return true;
        case "expectedcount": ((MockEndpoint) target).setExpectedCount(property(camelContext, int.class, value)); return true;
        case "failfast": ((MockEndpoint) target).setFailFast(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((MockEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "reportgroup": ((MockEndpoint) target).setReportGroup(property(camelContext, int.class, value)); return true;
        case "resultminimumwaittime": ((MockEndpoint) target).setResultMinimumWaitTime(property(camelContext, long.class, value)); return true;
        case "resultwaittime": ((MockEndpoint) target).setResultWaitTime(property(camelContext, long.class, value)); return true;
        case "retainfirst": ((MockEndpoint) target).setRetainFirst(property(camelContext, int.class, value)); return true;
        case "retainlast": ((MockEndpoint) target).setRetainLast(property(camelContext, int.class, value)); return true;
        case "sleepforemptytest": ((MockEndpoint) target).setSleepForEmptyTest(property(camelContext, long.class, value)); return true;
        case "copyonexchange": ((MockEndpoint) target).setCopyOnExchange(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((MockEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((MockEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

