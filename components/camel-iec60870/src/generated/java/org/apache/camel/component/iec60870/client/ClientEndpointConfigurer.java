/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.iec60870.client;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ClientEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("uriPath", org.apache.camel.component.iec60870.ObjectAddress.class);
        map.put("dataModuleOptions", org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions.class);
        map.put("protocolOptions", org.eclipse.neoscada.protocol.iec60870.ProtocolOptions.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("synchronous", boolean.class);
        map.put("acknowledgeWindow", short.class);
        map.put("adsuAddressType", org.eclipse.neoscada.protocol.iec60870.ASDUAddressType.class);
        map.put("causeOfTransmissionType", org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType.class);
        map.put("informationObjectAddressType", org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType.class);
        map.put("maxUnacknowledged", short.class);
        map.put("timeout1", int.class);
        map.put("timeout2", int.class);
        map.put("timeout3", int.class);
        map.put("causeSourceAddress", byte.class);
        map.put("connectionTimeout", int.class);
        map.put("ignoreBackgroundScan", boolean.class);
        map.put("ignoreDaylightSavingTime", boolean.class);
        map.put("timeZone", java.util.TimeZone.class);
        map.put("connectionId", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ClientEndpoint target = (ClientEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acknowledgewindow":
        case "acknowledgeWindow": target.getConnectionOptions().setAcknowledgeWindow(property(camelContext, short.class, value)); return true;
        case "adsuaddresstype":
        case "adsuAddressType": target.getConnectionOptions().setAdsuAddressType(property(camelContext, org.eclipse.neoscada.protocol.iec60870.ASDUAddressType.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "causeoftransmissiontype":
        case "causeOfTransmissionType": target.getConnectionOptions().setCauseOfTransmissionType(property(camelContext, org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType.class, value)); return true;
        case "causesourceaddress":
        case "causeSourceAddress": target.getConnectionOptions().setCauseSourceAddress(property(camelContext, byte.class, value)); return true;
        case "connectionid":
        case "connectionId": target.setConnectionId(property(camelContext, java.lang.String.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.getConnectionOptions().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "datamoduleoptions":
        case "dataModuleOptions": target.getConnectionOptions().setDataModuleOptions(property(camelContext, org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "ignorebackgroundscan":
        case "ignoreBackgroundScan": target.getConnectionOptions().setIgnoreBackgroundScan(property(camelContext, boolean.class, value)); return true;
        case "ignoredaylightsavingtime":
        case "ignoreDaylightSavingTime": target.getConnectionOptions().setIgnoreDaylightSavingTime(property(camelContext, boolean.class, value)); return true;
        case "informationobjectaddresstype":
        case "informationObjectAddressType": target.getConnectionOptions().setInformationObjectAddressType(property(camelContext, org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxunacknowledged":
        case "maxUnacknowledged": target.getConnectionOptions().setMaxUnacknowledged(property(camelContext, short.class, value)); return true;
        case "protocoloptions":
        case "protocolOptions": target.getConnectionOptions().setProtocolOptions(property(camelContext, org.eclipse.neoscada.protocol.iec60870.ProtocolOptions.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "timezone":
        case "timeZone": target.getConnectionOptions().setTimeZone(property(camelContext, java.util.TimeZone.class, value)); return true;
        case "timeout1": target.getConnectionOptions().setTimeout1(property(camelContext, int.class, value)); return true;
        case "timeout2": target.getConnectionOptions().setTimeout2(property(camelContext, int.class, value)); return true;
        case "timeout3": target.getConnectionOptions().setTimeout3(property(camelContext, int.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ClientEndpoint target = (ClientEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acknowledgewindow":
        case "acknowledgeWindow": return target.getConnectionOptions().getAcknowledgeWindow();
        case "adsuaddresstype":
        case "adsuAddressType": return target.getConnectionOptions().getAdsuAddressType();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "causeoftransmissiontype":
        case "causeOfTransmissionType": return target.getConnectionOptions().getCauseOfTransmissionType();
        case "causesourceaddress":
        case "causeSourceAddress": return target.getConnectionOptions().getCauseSourceAddress();
        case "connectionid":
        case "connectionId": return target.getConnectionId();
        case "connectiontimeout":
        case "connectionTimeout": return target.getConnectionOptions().getConnectionTimeout();
        case "datamoduleoptions":
        case "dataModuleOptions": return target.getConnectionOptions().getDataModuleOptions();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "ignorebackgroundscan":
        case "ignoreBackgroundScan": return target.getConnectionOptions().isIgnoreBackgroundScan();
        case "ignoredaylightsavingtime":
        case "ignoreDaylightSavingTime": return target.getConnectionOptions().isIgnoreDaylightSavingTime();
        case "informationobjectaddresstype":
        case "informationObjectAddressType": return target.getConnectionOptions().getInformationObjectAddressType();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxunacknowledged":
        case "maxUnacknowledged": return target.getConnectionOptions().getMaxUnacknowledged();
        case "protocoloptions":
        case "protocolOptions": return target.getConnectionOptions().getProtocolOptions();
        case "synchronous": return target.isSynchronous();
        case "timezone":
        case "timeZone": return target.getConnectionOptions().getTimeZone();
        case "timeout1": return target.getConnectionOptions().getTimeout1();
        case "timeout2": return target.getConnectionOptions().getTimeout2();
        case "timeout3": return target.getConnectionOptions().getTimeout3();
        default: return null;
        }
    }
}

