/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.iec60870.server;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ServerEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ServerEndpoint target = (ServerEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acknowledgewindow":
        case "acknowledgeWindow": target.getConnectionOptions().setAcknowledgeWindow(property(camelContext, short.class, value)); return true;
        case "adsuaddresstype":
        case "adsuAddressType": target.getConnectionOptions().setAdsuAddressType(property(camelContext, org.eclipse.neoscada.protocol.iec60870.ASDUAddressType.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "causeoftransmissiontype":
        case "causeOfTransmissionType": target.getConnectionOptions().setCauseOfTransmissionType(property(camelContext, org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType.class, value)); return true;
        case "causesourceaddress":
        case "causeSourceAddress": target.getConnectionOptions().setCauseSourceAddress(property(camelContext, byte.class, value)); return true;
        case "connectionid":
        case "connectionId": target.setConnectionId(property(camelContext, java.lang.String.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.getConnectionOptions().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "datamoduleoptions":
        case "dataModuleOptions": target.getConnectionOptions().setDataModuleOptions(property(camelContext, org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filternonexecute":
        case "filterNonExecute": target.setFilterNonExecute(property(camelContext, boolean.class, value)); return true;
        case "ignorebackgroundscan":
        case "ignoreBackgroundScan": target.getConnectionOptions().setIgnoreBackgroundScan(property(camelContext, boolean.class, value)); return true;
        case "ignoredaylightsavingtime":
        case "ignoreDaylightSavingTime": target.getConnectionOptions().setIgnoreDaylightSavingTime(property(camelContext, boolean.class, value)); return true;
        case "informationobjectaddresstype":
        case "informationObjectAddressType": target.getConnectionOptions().setInformationObjectAddressType(property(camelContext, org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxunacknowledged":
        case "maxUnacknowledged": target.getConnectionOptions().setMaxUnacknowledged(property(camelContext, short.class, value)); return true;
        case "protocoloptions":
        case "protocolOptions": target.getConnectionOptions().setProtocolOptions(property(camelContext, org.eclipse.neoscada.protocol.iec60870.ProtocolOptions.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "timezone":
        case "timeZone": target.getConnectionOptions().setTimeZone(property(camelContext, java.util.TimeZone.class, value)); return true;
        case "timeout1": target.getConnectionOptions().setTimeout1(property(camelContext, int.class, value)); return true;
        case "timeout2": target.getConnectionOptions().setTimeout2(property(camelContext, int.class, value)); return true;
        case "timeout3": target.getConnectionOptions().setTimeout3(property(camelContext, int.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("acknowledgeWindow", short.class);
        answer.put("adsuAddressType", org.eclipse.neoscada.protocol.iec60870.ASDUAddressType.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("causeOfTransmissionType", org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType.class);
        answer.put("causeSourceAddress", byte.class);
        answer.put("connectionId", java.lang.String.class);
        answer.put("connectionTimeout", int.class);
        answer.put("dataModuleOptions", org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions.class);
        answer.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        answer.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        answer.put("filterNonExecute", boolean.class);
        answer.put("ignoreBackgroundScan", boolean.class);
        answer.put("ignoreDaylightSavingTime", boolean.class);
        answer.put("informationObjectAddressType", org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("maxUnacknowledged", short.class);
        answer.put("protocolOptions", org.eclipse.neoscada.protocol.iec60870.ProtocolOptions.class);
        answer.put("synchronous", boolean.class);
        answer.put("timeZone", java.util.TimeZone.class);
        answer.put("timeout1", int.class);
        answer.put("timeout2", int.class);
        answer.put("timeout3", int.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ServerEndpoint target = (ServerEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "acknowledgewindow":
        case "acknowledgeWindow": target.getConnectionOptions().getAcknowledgeWindow(); return true;
        case "adsuaddresstype":
        case "adsuAddressType": target.getConnectionOptions().getAdsuAddressType(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "causeoftransmissiontype":
        case "causeOfTransmissionType": target.getConnectionOptions().getCauseOfTransmissionType(); return true;
        case "causesourceaddress":
        case "causeSourceAddress": target.getConnectionOptions().getCauseSourceAddress(); return true;
        case "connectionid":
        case "connectionId": target.getConnectionId(); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.getConnectionOptions().getConnectionTimeout(); return true;
        case "datamoduleoptions":
        case "dataModuleOptions": target.getConnectionOptions().getDataModuleOptions(); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.getExceptionHandler(); return true;
        case "exchangepattern":
        case "exchangePattern": target.getExchangePattern(); return true;
        case "filternonexecute":
        case "filterNonExecute": target.isFilterNonExecute(); return true;
        case "ignorebackgroundscan":
        case "ignoreBackgroundScan": target.getConnectionOptions().isIgnoreBackgroundScan(); return true;
        case "ignoredaylightsavingtime":
        case "ignoreDaylightSavingTime": target.getConnectionOptions().isIgnoreDaylightSavingTime(); return true;
        case "informationobjectaddresstype":
        case "informationObjectAddressType": target.getConnectionOptions().getInformationObjectAddressType(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "maxunacknowledged":
        case "maxUnacknowledged": target.getConnectionOptions().getMaxUnacknowledged(); return true;
        case "protocoloptions":
        case "protocolOptions": target.getConnectionOptions().getProtocolOptions(); return true;
        case "synchronous": target.isSynchronous(); return true;
        case "timezone":
        case "timeZone": target.getConnectionOptions().getTimeZone(); return true;
        case "timeout1": target.getConnectionOptions().getTimeout1(); return true;
        case "timeout2": target.getConnectionOptions().getTimeout2(); return true;
        case "timeout3": target.getConnectionOptions().getTimeout3(); return true;
        default: return null;
        }
    }
}

