/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.zendesk;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.zendesk.ZendeskEndpointConfiguration;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class ZendeskEndpointConfigurationConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("Active", java.lang.Boolean.class);
        map.put("Article", org.zendesk.client.v2.model.hc.Article.class);
        map.put("ArticleAttachments", org.zendesk.client.v2.model.hc.ArticleAttachments.class);
        map.put("ArticleId", java.lang.Long.class);
        map.put("ArticleId0", java.lang.Long.class);
        map.put("Attachment", org.zendesk.client.v2.model.Attachment.class);
        map.put("Attachments", java.util.List.class);
        map.put("Audit", org.zendesk.client.v2.model.Audit.class);
        map.put("AuditId", java.lang.Long.class);
        map.put("Automation", org.zendesk.client.v2.model.Automation.class);
        map.put("AutomationId", java.lang.Long.class);
        map.put("AutomationId0", java.lang.Long.class);
        map.put("Category", org.zendesk.client.v2.model.hc.Category.class);
        map.put("CategoryId", java.lang.Long.class);
        map.put("CategoryId0", java.lang.String.class);
        map.put("CategoryId1", java.lang.Long.class);
        map.put("Category_id", java.lang.Long.class);
        map.put("Comment", org.zendesk.client.v2.model.Comment.class);
        map.put("CommentId", java.lang.Long.class);
        map.put("Content", byte[].class);
        map.put("ContentTag", org.zendesk.client.v2.model.hc.ContentTag.class);
        map.put("ContentTagId", java.lang.String.class);
        map.put("ContentType", java.lang.String.class);
        map.put("Email", java.lang.String.class);
        map.put("EndTime", java.util.Date.class);
        map.put("ExternalId", java.lang.String.class);
        map.put("ExternalId0", java.lang.Long.class);
        map.put("ExternalId0s", long[].class);
        map.put("ExternalIds", java.lang.String[].class);
        map.put("Field", org.zendesk.client.v2.model.Field.class);
        map.put("File", java.io.File.class);
        map.put("FileName", java.lang.String.class);
        map.put("Forum", org.zendesk.client.v2.model.Forum.class);
        map.put("Forum_id", java.lang.Long.class);
        map.put("Group", org.zendesk.client.v2.model.Group.class);
        map.put("GroupMembership", org.zendesk.client.v2.model.GroupMembership.class);
        map.put("Group_id", java.lang.Long.class);
        map.put("Group_membership_id", java.lang.Long.class);
        map.put("Id", java.lang.Long.class);
        map.put("IdArticle", java.lang.String.class);
        map.put("Identity", org.zendesk.client.v2.model.Identity.class);
        map.put("IdentityId", java.lang.Long.class);
        map.put("Ids", long[].class);
        map.put("IncludeArchived", java.lang.Boolean.class);
        map.put("Inline", java.lang.Boolean.class);
        map.put("InstallationId", java.lang.Integer.class);
        map.put("Item", org.zendesk.client.v2.model.dynamic.DynamicContentItem.class);
        map.put("ItemId", java.lang.Long.class);
        map.put("Json", java.lang.String.class);
        map.put("Labels", java.util.List.class);
        map.put("Locale", java.lang.String.class);
        map.put("Macro", org.zendesk.client.v2.model.Macro.class);
        map.put("MacroId", java.lang.Long.class);
        map.put("MacroId0", java.lang.Long.class);
        map.put("MethodName", org.apache.camel.component.zendesk.internal.ZendeskApiMethod.class);
        map.put("MonitorId", java.lang.Long.class);
        map.put("Name", java.lang.String.class);
        map.put("NamePrefix", java.lang.String.class);
        map.put("NewPassword", java.lang.String.class);
        map.put("NotifySubscribers", java.lang.Boolean.class);
        map.put("OauthToken", java.lang.String.class);
        map.put("OldPassword", java.lang.String.class);
        map.put("Order", org.zendesk.client.v2.model.SortOrder.class);
        map.put("Organization", org.zendesk.client.v2.model.Organization.class);
        map.put("OrganizationId", java.lang.Long.class);
        map.put("OrganizationList", java.util.List.class);
        map.put("OrganizationMembership", org.zendesk.client.v2.model.OrganizationMembership.class);
        map.put("OrganizationMembershipList", java.util.List.class);
        map.put("OrganizationMemberships", org.zendesk.client.v2.model.OrganizationMembership[].class);
        map.put("Organization_id", java.lang.Long.class);
        map.put("Organization_membership_id", java.lang.Long.class);
        map.put("Organizations", org.zendesk.client.v2.model.Organization[].class);
        map.put("Page", java.lang.Integer.class);
        map.put("PageSize", java.lang.Integer.class);
        map.put("Password", java.lang.String.class);
        map.put("PermissionGroup", org.zendesk.client.v2.model.hc.PermissionGroup.class);
        map.put("Query", java.lang.String.class);
        map.put("QueryParams", java.util.Map.class);
        map.put("Request", org.zendesk.client.v2.model.Request.class);
        map.put("RequestId", java.lang.Long.class);
        map.put("Role", java.lang.String.class);
        map.put("Roles", java.lang.String[].class);
        map.put("SatisfactionRating", org.zendesk.client.v2.model.SatisfactionRating.class);
        map.put("Schedule", org.zendesk.client.v2.model.schedules.Schedule.class);
        map.put("ScheduleId", java.lang.Long.class);
        map.put("SearchTerm", java.lang.String.class);
        map.put("Section", org.zendesk.client.v2.model.hc.Section.class);
        map.put("SectionId", java.lang.Long.class);
        map.put("SectionId0", java.lang.Long.class);
        map.put("ServerUrl", java.lang.String.class);
        map.put("SortBy", java.lang.String.class);
        map.put("SortOrder", org.zendesk.client.v2.model.SortOrder.class);
        map.put("StartTime", java.util.Date.class);
        map.put("Status", org.zendesk.client.v2.model.JobStatus.class);
        map.put("Statuses", java.util.List.class);
        map.put("SuspendedTicket", org.zendesk.client.v2.model.SuspendedTicket.class);
        map.put("Tags", java.lang.String[].class);
        map.put("Target", org.zendesk.client.v2.model.targets.Target.class);
        map.put("TargetId", java.lang.Long.class);
        map.put("Ticket", org.zendesk.client.v2.model.Ticket.class);
        map.put("TicketForm", org.zendesk.client.v2.model.TicketForm.class);
        map.put("TicketId", java.lang.Long.class);
        map.put("TicketId0", java.lang.Long.class);
        map.put("TicketImport", org.zendesk.client.v2.model.TicketImport.class);
        map.put("TicketList", java.util.List.class);
        map.put("Tickets", org.zendesk.client.v2.model.Ticket[].class);
        map.put("Token", java.lang.String.class);
        map.put("Topic", org.zendesk.client.v2.model.Topic.class);
        map.put("Translation", org.zendesk.client.v2.model.hc.Translation.class);
        map.put("TranslationId", java.lang.Long.class);
        map.put("Trigger", org.zendesk.client.v2.model.Trigger.class);
        map.put("TriggerId", java.lang.Long.class);
        map.put("TriggerId0", java.lang.Long.class);
        map.put("TweetId", java.lang.Long.class);
        map.put("UnixEpochTime", java.lang.Long.class);
        map.put("Upload", org.zendesk.client.v2.model.Attachment.Upload.class);
        map.put("User", org.zendesk.client.v2.model.User.class);
        map.put("UserId", java.lang.Long.class);
        map.put("UserId0", java.lang.Long.class);
        map.put("UserIdThatWillBeMerged", java.lang.Long.class);
        map.put("UserIdThatWillRemain", java.lang.Long.class);
        map.put("UserList", java.util.List.class);
        map.put("UserSegment", org.zendesk.client.v2.model.hc.UserSegment.class);
        map.put("User_id", java.lang.Long.class);
        map.put("Username", java.lang.String.class);
        map.put("Users", org.zendesk.client.v2.model.User[].class);
        map.put("UsersList", java.util.List.class);
        map.put("Variant", org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.zendesk.ZendeskEndpointConfiguration target = (org.apache.camel.component.zendesk.ZendeskEndpointConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "active": target.setActive(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "article": target.setArticle(property(camelContext, org.zendesk.client.v2.model.hc.Article.class, value)); return true;
        case "articleattachments":
        case "articleAttachments": target.setArticleAttachments(property(camelContext, org.zendesk.client.v2.model.hc.ArticleAttachments.class, value)); return true;
        case "articleid":
        case "articleId": target.setArticleId(property(camelContext, java.lang.Long.class, value)); return true;
        case "articleid0":
        case "articleId0": target.setArticleId0(property(camelContext, java.lang.Long.class, value)); return true;
        case "attachment": target.setAttachment(property(camelContext, org.zendesk.client.v2.model.Attachment.class, value)); return true;
        case "attachments": target.setAttachments(property(camelContext, java.util.List.class, value)); return true;
        case "audit": target.setAudit(property(camelContext, org.zendesk.client.v2.model.Audit.class, value)); return true;
        case "auditid":
        case "auditId": target.setAuditId(property(camelContext, java.lang.Long.class, value)); return true;
        case "automation": target.setAutomation(property(camelContext, org.zendesk.client.v2.model.Automation.class, value)); return true;
        case "automationid":
        case "automationId": target.setAutomationId(property(camelContext, java.lang.Long.class, value)); return true;
        case "automationid0":
        case "automationId0": target.setAutomationId0(property(camelContext, java.lang.Long.class, value)); return true;
        case "category": target.setCategory(property(camelContext, org.zendesk.client.v2.model.hc.Category.class, value)); return true;
        case "categoryid":
        case "categoryId": target.setCategoryId(property(camelContext, java.lang.Long.class, value)); return true;
        case "categoryid0":
        case "categoryId0": target.setCategoryId0(property(camelContext, java.lang.String.class, value)); return true;
        case "categoryid1":
        case "categoryId1": target.setCategoryId1(property(camelContext, java.lang.Long.class, value)); return true;
        case "category_id": target.setCategory_id(property(camelContext, java.lang.Long.class, value)); return true;
        case "comment": target.setComment(property(camelContext, org.zendesk.client.v2.model.Comment.class, value)); return true;
        case "commentid":
        case "commentId": target.setCommentId(property(camelContext, java.lang.Long.class, value)); return true;
        case "content": target.setContent(property(camelContext, byte[].class, value)); return true;
        case "contenttag":
        case "contentTag": target.setContentTag(property(camelContext, org.zendesk.client.v2.model.hc.ContentTag.class, value)); return true;
        case "contenttagid":
        case "contentTagId": target.setContentTagId(property(camelContext, java.lang.String.class, value)); return true;
        case "contenttype":
        case "contentType": target.setContentType(property(camelContext, java.lang.String.class, value)); return true;
        case "email": target.setEmail(property(camelContext, java.lang.String.class, value)); return true;
        case "endtime":
        case "endTime": target.setEndTime(property(camelContext, java.util.Date.class, value)); return true;
        case "externalid":
        case "externalId": target.setExternalId(property(camelContext, java.lang.String.class, value)); return true;
        case "externalid0":
        case "externalId0": target.setExternalId0(property(camelContext, java.lang.Long.class, value)); return true;
        case "externalid0s":
        case "externalId0s": target.setExternalId0s(property(camelContext, long[].class, value)); return true;
        case "externalids":
        case "externalIds": target.setExternalIds(property(camelContext, java.lang.String[].class, value)); return true;
        case "field": target.setField(property(camelContext, org.zendesk.client.v2.model.Field.class, value)); return true;
        case "file": target.setFile(property(camelContext, java.io.File.class, value)); return true;
        case "filename":
        case "fileName": target.setFileName(property(camelContext, java.lang.String.class, value)); return true;
        case "forum": target.setForum(property(camelContext, org.zendesk.client.v2.model.Forum.class, value)); return true;
        case "forum_id": target.setForum_id(property(camelContext, java.lang.Long.class, value)); return true;
        case "group": target.setGroup(property(camelContext, org.zendesk.client.v2.model.Group.class, value)); return true;
        case "groupmembership":
        case "groupMembership": target.setGroupMembership(property(camelContext, org.zendesk.client.v2.model.GroupMembership.class, value)); return true;
        case "group_id": target.setGroup_id(property(camelContext, java.lang.Long.class, value)); return true;
        case "group_membership_id": target.setGroup_membership_id(property(camelContext, java.lang.Long.class, value)); return true;
        case "id": target.setId(property(camelContext, java.lang.Long.class, value)); return true;
        case "idarticle":
        case "idArticle": target.setIdArticle(property(camelContext, java.lang.String.class, value)); return true;
        case "identity": target.setIdentity(property(camelContext, org.zendesk.client.v2.model.Identity.class, value)); return true;
        case "identityid":
        case "identityId": target.setIdentityId(property(camelContext, java.lang.Long.class, value)); return true;
        case "ids": target.setIds(property(camelContext, long[].class, value)); return true;
        case "includearchived":
        case "includeArchived": target.setIncludeArchived(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "inline": target.setInline(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "installationid":
        case "installationId": target.setInstallationId(property(camelContext, java.lang.Integer.class, value)); return true;
        case "item": target.setItem(property(camelContext, org.zendesk.client.v2.model.dynamic.DynamicContentItem.class, value)); return true;
        case "itemid":
        case "itemId": target.setItemId(property(camelContext, java.lang.Long.class, value)); return true;
        case "json": target.setJson(property(camelContext, java.lang.String.class, value)); return true;
        case "labels": target.setLabels(property(camelContext, java.util.List.class, value)); return true;
        case "locale": target.setLocale(property(camelContext, java.lang.String.class, value)); return true;
        case "macro": target.setMacro(property(camelContext, org.zendesk.client.v2.model.Macro.class, value)); return true;
        case "macroid":
        case "macroId": target.setMacroId(property(camelContext, java.lang.Long.class, value)); return true;
        case "macroid0":
        case "macroId0": target.setMacroId0(property(camelContext, java.lang.Long.class, value)); return true;
        case "methodname":
        case "methodName": target.setMethodName(property(camelContext, org.apache.camel.component.zendesk.internal.ZendeskApiMethod.class, value)); return true;
        case "monitorid":
        case "monitorId": target.setMonitorId(property(camelContext, java.lang.Long.class, value)); return true;
        case "name": target.setName(property(camelContext, java.lang.String.class, value)); return true;
        case "nameprefix":
        case "namePrefix": target.setNamePrefix(property(camelContext, java.lang.String.class, value)); return true;
        case "newpassword":
        case "newPassword": target.setNewPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "notifysubscribers":
        case "notifySubscribers": target.setNotifySubscribers(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "oauthtoken":
        case "oauthToken": target.setOauthToken(property(camelContext, java.lang.String.class, value)); return true;
        case "oldpassword":
        case "oldPassword": target.setOldPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "order": target.setOrder(property(camelContext, org.zendesk.client.v2.model.SortOrder.class, value)); return true;
        case "organization": target.setOrganization(property(camelContext, org.zendesk.client.v2.model.Organization.class, value)); return true;
        case "organizationid":
        case "organizationId": target.setOrganizationId(property(camelContext, java.lang.Long.class, value)); return true;
        case "organizationlist":
        case "organizationList": target.setOrganizationList(property(camelContext, java.util.List.class, value)); return true;
        case "organizationmembership":
        case "organizationMembership": target.setOrganizationMembership(property(camelContext, org.zendesk.client.v2.model.OrganizationMembership.class, value)); return true;
        case "organizationmembershiplist":
        case "organizationMembershipList": target.setOrganizationMembershipList(property(camelContext, java.util.List.class, value)); return true;
        case "organizationmemberships":
        case "organizationMemberships": target.setOrganizationMemberships(property(camelContext, org.zendesk.client.v2.model.OrganizationMembership[].class, value)); return true;
        case "organization_id": target.setOrganization_id(property(camelContext, java.lang.Long.class, value)); return true;
        case "organization_membership_id": target.setOrganization_membership_id(property(camelContext, java.lang.Long.class, value)); return true;
        case "organizations": target.setOrganizations(property(camelContext, org.zendesk.client.v2.model.Organization[].class, value)); return true;
        case "page": target.setPage(property(camelContext, java.lang.Integer.class, value)); return true;
        case "pagesize":
        case "pageSize": target.setPageSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "password": target.setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "permissiongroup":
        case "permissionGroup": target.setPermissionGroup(property(camelContext, org.zendesk.client.v2.model.hc.PermissionGroup.class, value)); return true;
        case "query": target.setQuery(property(camelContext, java.lang.String.class, value)); return true;
        case "queryparams":
        case "queryParams": target.setQueryParams(property(camelContext, java.util.Map.class, value)); return true;
        case "request": target.setRequest(property(camelContext, org.zendesk.client.v2.model.Request.class, value)); return true;
        case "requestid":
        case "requestId": target.setRequestId(property(camelContext, java.lang.Long.class, value)); return true;
        case "role": target.setRole(property(camelContext, java.lang.String.class, value)); return true;
        case "roles": target.setRoles(property(camelContext, java.lang.String[].class, value)); return true;
        case "satisfactionrating":
        case "satisfactionRating": target.setSatisfactionRating(property(camelContext, org.zendesk.client.v2.model.SatisfactionRating.class, value)); return true;
        case "schedule": target.setSchedule(property(camelContext, org.zendesk.client.v2.model.schedules.Schedule.class, value)); return true;
        case "scheduleid":
        case "scheduleId": target.setScheduleId(property(camelContext, java.lang.Long.class, value)); return true;
        case "searchterm":
        case "searchTerm": target.setSearchTerm(property(camelContext, java.lang.String.class, value)); return true;
        case "section": target.setSection(property(camelContext, org.zendesk.client.v2.model.hc.Section.class, value)); return true;
        case "sectionid":
        case "sectionId": target.setSectionId(property(camelContext, java.lang.Long.class, value)); return true;
        case "sectionid0":
        case "sectionId0": target.setSectionId0(property(camelContext, java.lang.Long.class, value)); return true;
        case "serverurl":
        case "serverUrl": target.setServerUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "sortby":
        case "sortBy": target.setSortBy(property(camelContext, java.lang.String.class, value)); return true;
        case "sortorder":
        case "sortOrder": target.setSortOrder(property(camelContext, org.zendesk.client.v2.model.SortOrder.class, value)); return true;
        case "starttime":
        case "startTime": target.setStartTime(property(camelContext, java.util.Date.class, value)); return true;
        case "status": target.setStatus(property(camelContext, org.zendesk.client.v2.model.JobStatus.class, value)); return true;
        case "statuses": target.setStatuses(property(camelContext, java.util.List.class, value)); return true;
        case "suspendedticket":
        case "suspendedTicket": target.setSuspendedTicket(property(camelContext, org.zendesk.client.v2.model.SuspendedTicket.class, value)); return true;
        case "tags": target.setTags(property(camelContext, java.lang.String[].class, value)); return true;
        case "target": target.setTarget(property(camelContext, org.zendesk.client.v2.model.targets.Target.class, value)); return true;
        case "targetid":
        case "targetId": target.setTargetId(property(camelContext, java.lang.Long.class, value)); return true;
        case "ticket": target.setTicket(property(camelContext, org.zendesk.client.v2.model.Ticket.class, value)); return true;
        case "ticketform":
        case "ticketForm": target.setTicketForm(property(camelContext, org.zendesk.client.v2.model.TicketForm.class, value)); return true;
        case "ticketid":
        case "ticketId": target.setTicketId(property(camelContext, java.lang.Long.class, value)); return true;
        case "ticketid0":
        case "ticketId0": target.setTicketId0(property(camelContext, java.lang.Long.class, value)); return true;
        case "ticketimport":
        case "ticketImport": target.setTicketImport(property(camelContext, org.zendesk.client.v2.model.TicketImport.class, value)); return true;
        case "ticketlist":
        case "ticketList": target.setTicketList(property(camelContext, java.util.List.class, value)); return true;
        case "tickets": target.setTickets(property(camelContext, org.zendesk.client.v2.model.Ticket[].class, value)); return true;
        case "token": target.setToken(property(camelContext, java.lang.String.class, value)); return true;
        case "topic": target.setTopic(property(camelContext, org.zendesk.client.v2.model.Topic.class, value)); return true;
        case "translation": target.setTranslation(property(camelContext, org.zendesk.client.v2.model.hc.Translation.class, value)); return true;
        case "translationid":
        case "translationId": target.setTranslationId(property(camelContext, java.lang.Long.class, value)); return true;
        case "trigger": target.setTrigger(property(camelContext, org.zendesk.client.v2.model.Trigger.class, value)); return true;
        case "triggerid":
        case "triggerId": target.setTriggerId(property(camelContext, java.lang.Long.class, value)); return true;
        case "triggerid0":
        case "triggerId0": target.setTriggerId0(property(camelContext, java.lang.Long.class, value)); return true;
        case "tweetid":
        case "tweetId": target.setTweetId(property(camelContext, java.lang.Long.class, value)); return true;
        case "unixepochtime":
        case "unixEpochTime": target.setUnixEpochTime(property(camelContext, java.lang.Long.class, value)); return true;
        case "upload": target.setUpload(property(camelContext, org.zendesk.client.v2.model.Attachment.Upload.class, value)); return true;
        case "user": target.setUser(property(camelContext, org.zendesk.client.v2.model.User.class, value)); return true;
        case "userid":
        case "userId": target.setUserId(property(camelContext, java.lang.Long.class, value)); return true;
        case "userid0":
        case "userId0": target.setUserId0(property(camelContext, java.lang.Long.class, value)); return true;
        case "useridthatwillbemerged":
        case "userIdThatWillBeMerged": target.setUserIdThatWillBeMerged(property(camelContext, java.lang.Long.class, value)); return true;
        case "useridthatwillremain":
        case "userIdThatWillRemain": target.setUserIdThatWillRemain(property(camelContext, java.lang.Long.class, value)); return true;
        case "userlist":
        case "userList": target.setUserList(property(camelContext, java.util.List.class, value)); return true;
        case "usersegment":
        case "userSegment": target.setUserSegment(property(camelContext, org.zendesk.client.v2.model.hc.UserSegment.class, value)); return true;
        case "user_id": target.setUser_id(property(camelContext, java.lang.Long.class, value)); return true;
        case "username": target.setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "users": target.setUsers(property(camelContext, org.zendesk.client.v2.model.User[].class, value)); return true;
        case "userslist":
        case "usersList": target.setUsersList(property(camelContext, java.util.List.class, value)); return true;
        case "variant": target.setVariant(property(camelContext, org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "active": return java.lang.Boolean.class;
        case "article": return org.zendesk.client.v2.model.hc.Article.class;
        case "articleattachments":
        case "articleAttachments": return org.zendesk.client.v2.model.hc.ArticleAttachments.class;
        case "articleid":
        case "articleId": return java.lang.Long.class;
        case "articleid0":
        case "articleId0": return java.lang.Long.class;
        case "attachment": return org.zendesk.client.v2.model.Attachment.class;
        case "attachments": return java.util.List.class;
        case "audit": return org.zendesk.client.v2.model.Audit.class;
        case "auditid":
        case "auditId": return java.lang.Long.class;
        case "automation": return org.zendesk.client.v2.model.Automation.class;
        case "automationid":
        case "automationId": return java.lang.Long.class;
        case "automationid0":
        case "automationId0": return java.lang.Long.class;
        case "category": return org.zendesk.client.v2.model.hc.Category.class;
        case "categoryid":
        case "categoryId": return java.lang.Long.class;
        case "categoryid0":
        case "categoryId0": return java.lang.String.class;
        case "categoryid1":
        case "categoryId1": return java.lang.Long.class;
        case "category_id": return java.lang.Long.class;
        case "comment": return org.zendesk.client.v2.model.Comment.class;
        case "commentid":
        case "commentId": return java.lang.Long.class;
        case "content": return byte[].class;
        case "contenttag":
        case "contentTag": return org.zendesk.client.v2.model.hc.ContentTag.class;
        case "contenttagid":
        case "contentTagId": return java.lang.String.class;
        case "contenttype":
        case "contentType": return java.lang.String.class;
        case "email": return java.lang.String.class;
        case "endtime":
        case "endTime": return java.util.Date.class;
        case "externalid":
        case "externalId": return java.lang.String.class;
        case "externalid0":
        case "externalId0": return java.lang.Long.class;
        case "externalid0s":
        case "externalId0s": return long[].class;
        case "externalids":
        case "externalIds": return java.lang.String[].class;
        case "field": return org.zendesk.client.v2.model.Field.class;
        case "file": return java.io.File.class;
        case "filename":
        case "fileName": return java.lang.String.class;
        case "forum": return org.zendesk.client.v2.model.Forum.class;
        case "forum_id": return java.lang.Long.class;
        case "group": return org.zendesk.client.v2.model.Group.class;
        case "groupmembership":
        case "groupMembership": return org.zendesk.client.v2.model.GroupMembership.class;
        case "group_id": return java.lang.Long.class;
        case "group_membership_id": return java.lang.Long.class;
        case "id": return java.lang.Long.class;
        case "idarticle":
        case "idArticle": return java.lang.String.class;
        case "identity": return org.zendesk.client.v2.model.Identity.class;
        case "identityid":
        case "identityId": return java.lang.Long.class;
        case "ids": return long[].class;
        case "includearchived":
        case "includeArchived": return java.lang.Boolean.class;
        case "inline": return java.lang.Boolean.class;
        case "installationid":
        case "installationId": return java.lang.Integer.class;
        case "item": return org.zendesk.client.v2.model.dynamic.DynamicContentItem.class;
        case "itemid":
        case "itemId": return java.lang.Long.class;
        case "json": return java.lang.String.class;
        case "labels": return java.util.List.class;
        case "locale": return java.lang.String.class;
        case "macro": return org.zendesk.client.v2.model.Macro.class;
        case "macroid":
        case "macroId": return java.lang.Long.class;
        case "macroid0":
        case "macroId0": return java.lang.Long.class;
        case "methodname":
        case "methodName": return org.apache.camel.component.zendesk.internal.ZendeskApiMethod.class;
        case "monitorid":
        case "monitorId": return java.lang.Long.class;
        case "name": return java.lang.String.class;
        case "nameprefix":
        case "namePrefix": return java.lang.String.class;
        case "newpassword":
        case "newPassword": return java.lang.String.class;
        case "notifysubscribers":
        case "notifySubscribers": return java.lang.Boolean.class;
        case "oauthtoken":
        case "oauthToken": return java.lang.String.class;
        case "oldpassword":
        case "oldPassword": return java.lang.String.class;
        case "order": return org.zendesk.client.v2.model.SortOrder.class;
        case "organization": return org.zendesk.client.v2.model.Organization.class;
        case "organizationid":
        case "organizationId": return java.lang.Long.class;
        case "organizationlist":
        case "organizationList": return java.util.List.class;
        case "organizationmembership":
        case "organizationMembership": return org.zendesk.client.v2.model.OrganizationMembership.class;
        case "organizationmembershiplist":
        case "organizationMembershipList": return java.util.List.class;
        case "organizationmemberships":
        case "organizationMemberships": return org.zendesk.client.v2.model.OrganizationMembership[].class;
        case "organization_id": return java.lang.Long.class;
        case "organization_membership_id": return java.lang.Long.class;
        case "organizations": return org.zendesk.client.v2.model.Organization[].class;
        case "page": return java.lang.Integer.class;
        case "pagesize":
        case "pageSize": return java.lang.Integer.class;
        case "password": return java.lang.String.class;
        case "permissiongroup":
        case "permissionGroup": return org.zendesk.client.v2.model.hc.PermissionGroup.class;
        case "query": return java.lang.String.class;
        case "queryparams":
        case "queryParams": return java.util.Map.class;
        case "request": return org.zendesk.client.v2.model.Request.class;
        case "requestid":
        case "requestId": return java.lang.Long.class;
        case "role": return java.lang.String.class;
        case "roles": return java.lang.String[].class;
        case "satisfactionrating":
        case "satisfactionRating": return org.zendesk.client.v2.model.SatisfactionRating.class;
        case "schedule": return org.zendesk.client.v2.model.schedules.Schedule.class;
        case "scheduleid":
        case "scheduleId": return java.lang.Long.class;
        case "searchterm":
        case "searchTerm": return java.lang.String.class;
        case "section": return org.zendesk.client.v2.model.hc.Section.class;
        case "sectionid":
        case "sectionId": return java.lang.Long.class;
        case "sectionid0":
        case "sectionId0": return java.lang.Long.class;
        case "serverurl":
        case "serverUrl": return java.lang.String.class;
        case "sortby":
        case "sortBy": return java.lang.String.class;
        case "sortorder":
        case "sortOrder": return org.zendesk.client.v2.model.SortOrder.class;
        case "starttime":
        case "startTime": return java.util.Date.class;
        case "status": return org.zendesk.client.v2.model.JobStatus.class;
        case "statuses": return java.util.List.class;
        case "suspendedticket":
        case "suspendedTicket": return org.zendesk.client.v2.model.SuspendedTicket.class;
        case "tags": return java.lang.String[].class;
        case "target": return org.zendesk.client.v2.model.targets.Target.class;
        case "targetid":
        case "targetId": return java.lang.Long.class;
        case "ticket": return org.zendesk.client.v2.model.Ticket.class;
        case "ticketform":
        case "ticketForm": return org.zendesk.client.v2.model.TicketForm.class;
        case "ticketid":
        case "ticketId": return java.lang.Long.class;
        case "ticketid0":
        case "ticketId0": return java.lang.Long.class;
        case "ticketimport":
        case "ticketImport": return org.zendesk.client.v2.model.TicketImport.class;
        case "ticketlist":
        case "ticketList": return java.util.List.class;
        case "tickets": return org.zendesk.client.v2.model.Ticket[].class;
        case "token": return java.lang.String.class;
        case "topic": return org.zendesk.client.v2.model.Topic.class;
        case "translation": return org.zendesk.client.v2.model.hc.Translation.class;
        case "translationid":
        case "translationId": return java.lang.Long.class;
        case "trigger": return org.zendesk.client.v2.model.Trigger.class;
        case "triggerid":
        case "triggerId": return java.lang.Long.class;
        case "triggerid0":
        case "triggerId0": return java.lang.Long.class;
        case "tweetid":
        case "tweetId": return java.lang.Long.class;
        case "unixepochtime":
        case "unixEpochTime": return java.lang.Long.class;
        case "upload": return org.zendesk.client.v2.model.Attachment.Upload.class;
        case "user": return org.zendesk.client.v2.model.User.class;
        case "userid":
        case "userId": return java.lang.Long.class;
        case "userid0":
        case "userId0": return java.lang.Long.class;
        case "useridthatwillbemerged":
        case "userIdThatWillBeMerged": return java.lang.Long.class;
        case "useridthatwillremain":
        case "userIdThatWillRemain": return java.lang.Long.class;
        case "userlist":
        case "userList": return java.util.List.class;
        case "usersegment":
        case "userSegment": return org.zendesk.client.v2.model.hc.UserSegment.class;
        case "user_id": return java.lang.Long.class;
        case "username": return java.lang.String.class;
        case "users": return org.zendesk.client.v2.model.User[].class;
        case "userslist":
        case "usersList": return java.util.List.class;
        case "variant": return org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.zendesk.ZendeskEndpointConfiguration target = (org.apache.camel.component.zendesk.ZendeskEndpointConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "active": return target.getActive();
        case "article": return target.getArticle();
        case "articleattachments":
        case "articleAttachments": return target.getArticleAttachments();
        case "articleid":
        case "articleId": return target.getArticleId();
        case "articleid0":
        case "articleId0": return target.getArticleId0();
        case "attachment": return target.getAttachment();
        case "attachments": return target.getAttachments();
        case "audit": return target.getAudit();
        case "auditid":
        case "auditId": return target.getAuditId();
        case "automation": return target.getAutomation();
        case "automationid":
        case "automationId": return target.getAutomationId();
        case "automationid0":
        case "automationId0": return target.getAutomationId0();
        case "category": return target.getCategory();
        case "categoryid":
        case "categoryId": return target.getCategoryId();
        case "categoryid0":
        case "categoryId0": return target.getCategoryId0();
        case "categoryid1":
        case "categoryId1": return target.getCategoryId1();
        case "category_id": return target.getCategory_id();
        case "comment": return target.getComment();
        case "commentid":
        case "commentId": return target.getCommentId();
        case "content": return target.getContent();
        case "contenttag":
        case "contentTag": return target.getContentTag();
        case "contenttagid":
        case "contentTagId": return target.getContentTagId();
        case "contenttype":
        case "contentType": return target.getContentType();
        case "email": return target.getEmail();
        case "endtime":
        case "endTime": return target.getEndTime();
        case "externalid":
        case "externalId": return target.getExternalId();
        case "externalid0":
        case "externalId0": return target.getExternalId0();
        case "externalid0s":
        case "externalId0s": return target.getExternalId0s();
        case "externalids":
        case "externalIds": return target.getExternalIds();
        case "field": return target.getField();
        case "file": return target.getFile();
        case "filename":
        case "fileName": return target.getFileName();
        case "forum": return target.getForum();
        case "forum_id": return target.getForum_id();
        case "group": return target.getGroup();
        case "groupmembership":
        case "groupMembership": return target.getGroupMembership();
        case "group_id": return target.getGroup_id();
        case "group_membership_id": return target.getGroup_membership_id();
        case "id": return target.getId();
        case "idarticle":
        case "idArticle": return target.getIdArticle();
        case "identity": return target.getIdentity();
        case "identityid":
        case "identityId": return target.getIdentityId();
        case "ids": return target.getIds();
        case "includearchived":
        case "includeArchived": return target.getIncludeArchived();
        case "inline": return target.getInline();
        case "installationid":
        case "installationId": return target.getInstallationId();
        case "item": return target.getItem();
        case "itemid":
        case "itemId": return target.getItemId();
        case "json": return target.getJson();
        case "labels": return target.getLabels();
        case "locale": return target.getLocale();
        case "macro": return target.getMacro();
        case "macroid":
        case "macroId": return target.getMacroId();
        case "macroid0":
        case "macroId0": return target.getMacroId0();
        case "methodname":
        case "methodName": return target.getMethodName();
        case "monitorid":
        case "monitorId": return target.getMonitorId();
        case "name": return target.getName();
        case "nameprefix":
        case "namePrefix": return target.getNamePrefix();
        case "newpassword":
        case "newPassword": return target.getNewPassword();
        case "notifysubscribers":
        case "notifySubscribers": return target.getNotifySubscribers();
        case "oauthtoken":
        case "oauthToken": return target.getOauthToken();
        case "oldpassword":
        case "oldPassword": return target.getOldPassword();
        case "order": return target.getOrder();
        case "organization": return target.getOrganization();
        case "organizationid":
        case "organizationId": return target.getOrganizationId();
        case "organizationlist":
        case "organizationList": return target.getOrganizationList();
        case "organizationmembership":
        case "organizationMembership": return target.getOrganizationMembership();
        case "organizationmembershiplist":
        case "organizationMembershipList": return target.getOrganizationMembershipList();
        case "organizationmemberships":
        case "organizationMemberships": return target.getOrganizationMemberships();
        case "organization_id": return target.getOrganization_id();
        case "organization_membership_id": return target.getOrganization_membership_id();
        case "organizations": return target.getOrganizations();
        case "page": return target.getPage();
        case "pagesize":
        case "pageSize": return target.getPageSize();
        case "password": return target.getPassword();
        case "permissiongroup":
        case "permissionGroup": return target.getPermissionGroup();
        case "query": return target.getQuery();
        case "queryparams":
        case "queryParams": return target.getQueryParams();
        case "request": return target.getRequest();
        case "requestid":
        case "requestId": return target.getRequestId();
        case "role": return target.getRole();
        case "roles": return target.getRoles();
        case "satisfactionrating":
        case "satisfactionRating": return target.getSatisfactionRating();
        case "schedule": return target.getSchedule();
        case "scheduleid":
        case "scheduleId": return target.getScheduleId();
        case "searchterm":
        case "searchTerm": return target.getSearchTerm();
        case "section": return target.getSection();
        case "sectionid":
        case "sectionId": return target.getSectionId();
        case "sectionid0":
        case "sectionId0": return target.getSectionId0();
        case "serverurl":
        case "serverUrl": return target.getServerUrl();
        case "sortby":
        case "sortBy": return target.getSortBy();
        case "sortorder":
        case "sortOrder": return target.getSortOrder();
        case "starttime":
        case "startTime": return target.getStartTime();
        case "status": return target.getStatus();
        case "statuses": return target.getStatuses();
        case "suspendedticket":
        case "suspendedTicket": return target.getSuspendedTicket();
        case "tags": return target.getTags();
        case "target": return target.getTarget();
        case "targetid":
        case "targetId": return target.getTargetId();
        case "ticket": return target.getTicket();
        case "ticketform":
        case "ticketForm": return target.getTicketForm();
        case "ticketid":
        case "ticketId": return target.getTicketId();
        case "ticketid0":
        case "ticketId0": return target.getTicketId0();
        case "ticketimport":
        case "ticketImport": return target.getTicketImport();
        case "ticketlist":
        case "ticketList": return target.getTicketList();
        case "tickets": return target.getTickets();
        case "token": return target.getToken();
        case "topic": return target.getTopic();
        case "translation": return target.getTranslation();
        case "translationid":
        case "translationId": return target.getTranslationId();
        case "trigger": return target.getTrigger();
        case "triggerid":
        case "triggerId": return target.getTriggerId();
        case "triggerid0":
        case "triggerId0": return target.getTriggerId0();
        case "tweetid":
        case "tweetId": return target.getTweetId();
        case "unixepochtime":
        case "unixEpochTime": return target.getUnixEpochTime();
        case "upload": return target.getUpload();
        case "user": return target.getUser();
        case "userid":
        case "userId": return target.getUserId();
        case "userid0":
        case "userId0": return target.getUserId0();
        case "useridthatwillbemerged":
        case "userIdThatWillBeMerged": return target.getUserIdThatWillBeMerged();
        case "useridthatwillremain":
        case "userIdThatWillRemain": return target.getUserIdThatWillRemain();
        case "userlist":
        case "userList": return target.getUserList();
        case "usersegment":
        case "userSegment": return target.getUserSegment();
        case "user_id": return target.getUser_id();
        case "username": return target.getUsername();
        case "users": return target.getUsers();
        case "userslist":
        case "usersList": return target.getUsersList();
        case "variant": return target.getVariant();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "attachments": return org.zendesk.client.v2.model.Attachment.class;
        case "labels": return java.lang.String.class;
        case "organizationlist":
        case "organizationList": return org.zendesk.client.v2.model.Organization.class;
        case "organizationmembershiplist":
        case "organizationMembershipList": return org.zendesk.client.v2.model.OrganizationMembership.class;
        case "queryparams":
        case "queryParams": return java.lang.Object.class;
        case "statuses": return org.zendesk.client.v2.model.JobStatus.class;
        case "ticketlist":
        case "ticketList": return org.zendesk.client.v2.model.Ticket.class;
        case "userlist":
        case "userList": return org.zendesk.client.v2.model.User.class;
        case "userslist":
        case "usersList": return org.zendesk.client.v2.model.User.class;
        default: return null;
        }
    }
}

