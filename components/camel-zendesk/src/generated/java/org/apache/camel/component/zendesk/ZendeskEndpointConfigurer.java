/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.zendesk;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ZendeskEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("methodName", org.apache.camel.component.zendesk.internal.ZendeskApiMethod.class);
        map.put("inBody", java.lang.String.class);
        map.put("serverUrl", java.lang.String.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("sendEmptyMessageWhenIdle", boolean.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("pollStrategy", org.apache.camel.spi.PollingConsumerPollStrategy.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("synchronous", boolean.class);
        map.put("backoffErrorThreshold", int.class);
        map.put("backoffIdleThreshold", int.class);
        map.put("backoffMultiplier", int.class);
        map.put("delay", long.class);
        map.put("greedy", boolean.class);
        map.put("initialDelay", long.class);
        map.put("repeatCount", long.class);
        map.put("runLoggingLevel", org.apache.camel.LoggingLevel.class);
        map.put("scheduledExecutorService", java.util.concurrent.ScheduledExecutorService.class);
        map.put("scheduler", java.lang.Object.class);
        map.put("schedulerProperties", java.util.Map.class);
        map.put("startScheduler", boolean.class);
        map.put("timeUnit", java.util.concurrent.TimeUnit.class);
        map.put("useFixedDelay", boolean.class);
        map.put("oauthToken", java.lang.String.class);
        map.put("password", java.lang.String.class);
        map.put("token", java.lang.String.class);
        map.put("username", java.lang.String.class);
        map.put("article", org.zendesk.client.v2.model.hc.Article.class);
        map.put("articleAttachments", org.zendesk.client.v2.model.hc.ArticleAttachments.class);
        map.put("articleId", java.lang.Long.class);
        map.put("articleId0", java.lang.Long.class);
        map.put("attachment", org.zendesk.client.v2.model.Attachment.class);
        map.put("attachments", java.util.List.class);
        map.put("audit", org.zendesk.client.v2.model.Audit.class);
        map.put("auditId", java.lang.Long.class);
        map.put("automation", org.zendesk.client.v2.model.Automation.class);
        map.put("automationId", java.lang.Long.class);
        map.put("automationId0", java.lang.Long.class);
        map.put("category", org.zendesk.client.v2.model.hc.Category.class);
        map.put("category_id", java.lang.Long.class);
        map.put("categoryId", java.lang.Long.class);
        map.put("comment", org.zendesk.client.v2.model.Comment.class);
        map.put("commentId", java.lang.Long.class);
        map.put("content", byte[].class);
        map.put("contentType", java.lang.String.class);
        map.put("email", java.lang.String.class);
        map.put("endTime", java.util.Date.class);
        map.put("externalId", java.lang.String.class);
        map.put("field", org.zendesk.client.v2.model.Field.class);
        map.put("file", java.io.File.class);
        map.put("fileName", java.lang.String.class);
        map.put("forum", org.zendesk.client.v2.model.Forum.class);
        map.put("forum_id", java.lang.Long.class);
        map.put("group", org.zendesk.client.v2.model.Group.class);
        map.put("group_id", java.lang.Long.class);
        map.put("group_membership_id", java.lang.Long.class);
        map.put("groupMembership", org.zendesk.client.v2.model.GroupMembership.class);
        map.put("id", java.lang.Long.class);
        map.put("idArticle", java.lang.String.class);
        map.put("identity", org.zendesk.client.v2.model.Identity.class);
        map.put("identityId", java.lang.Long.class);
        map.put("ids", long[].class);
        map.put("includeArchived", java.lang.Boolean.class);
        map.put("inline", java.lang.Boolean.class);
        map.put("installationId", java.lang.Integer.class);
        map.put("item", org.zendesk.client.v2.model.dynamic.DynamicContentItem.class);
        map.put("itemId", java.lang.Long.class);
        map.put("json", java.lang.String.class);
        map.put("labels", java.util.List.class);
        map.put("locale", java.lang.String.class);
        map.put("macro", org.zendesk.client.v2.model.Macro.class);
        map.put("macroId", java.lang.Long.class);
        map.put("macroId0", java.lang.Long.class);
        map.put("monitorId", java.lang.Long.class);
        map.put("name", java.lang.String.class);
        map.put("newPassword", java.lang.String.class);
        map.put("notifySubscribers", java.lang.Boolean.class);
        map.put("oldPassword", java.lang.String.class);
        map.put("order", org.zendesk.client.v2.model.SortOrder.class);
        map.put("organization", org.zendesk.client.v2.model.Organization.class);
        map.put("organization_id", java.lang.Long.class);
        map.put("organization_membership_id", java.lang.Long.class);
        map.put("organizationId", java.lang.Long.class);
        map.put("organizationList", java.util.List.class);
        map.put("organizationMembership", org.zendesk.client.v2.model.OrganizationMembership.class);
        map.put("organizationMembershipList", java.util.List.class);
        map.put("organizationMemberships", org.zendesk.client.v2.model.OrganizationMembership[].class);
        map.put("organizations", org.zendesk.client.v2.model.Organization[].class);
        map.put("page", java.lang.Integer.class);
        map.put("parameters", java.lang.String.class);
        map.put("params", java.util.Map.class);
        map.put("password", java.lang.String.class);
        map.put("permissionGroup", org.zendesk.client.v2.model.hc.PermissionGroup.class);
        map.put("query", java.lang.String.class);
        map.put("request", org.zendesk.client.v2.model.Request.class);
        map.put("requestId", java.lang.Long.class);
        map.put("role", java.lang.String.class);
        map.put("roles", java.lang.String[].class);
        map.put("satisfactionRating", org.zendesk.client.v2.model.SatisfactionRating.class);
        map.put("schedule", org.zendesk.client.v2.model.schedules.Schedule.class);
        map.put("scheduleId", java.lang.Long.class);
        map.put("searchTerm", java.lang.String.class);
        map.put("section", org.zendesk.client.v2.model.hc.Section.class);
        map.put("sectionId", java.lang.Long.class);
        map.put("sortBy", java.lang.String.class);
        map.put("sortOrder", org.zendesk.client.v2.model.SortOrder.class);
        map.put("startTime", java.util.Date.class);
        map.put("status", org.zendesk.client.v2.model.JobStatus.class);
        map.put("statuses", java.util.List.class);
        map.put("suspendedTicket", org.zendesk.client.v2.model.SuspendedTicket.class);
        map.put("tags", java.lang.String[].class);
        map.put("target", org.zendesk.client.v2.model.targets.Target.class);
        map.put("targetId", java.lang.Long.class);
        map.put("ticket", org.zendesk.client.v2.model.Ticket.class);
        map.put("ticketForm", org.zendesk.client.v2.model.TicketForm.class);
        map.put("ticketId", java.lang.Long.class);
        map.put("ticketId0", java.lang.Long.class);
        map.put("ticketImport", org.zendesk.client.v2.model.TicketImport.class);
        map.put("ticketList", java.util.List.class);
        map.put("tickets", org.zendesk.client.v2.model.Ticket[].class);
        map.put("token", java.lang.String.class);
        map.put("topic", org.zendesk.client.v2.model.Topic.class);
        map.put("translation", org.zendesk.client.v2.model.hc.Translation.class);
        map.put("translationId", java.lang.Long.class);
        map.put("trigger", org.zendesk.client.v2.model.Trigger.class);
        map.put("triggerId", java.lang.Long.class);
        map.put("triggerId0", java.lang.Long.class);
        map.put("tweetId", java.lang.Long.class);
        map.put("type", java.lang.Class.class);
        map.put("unixEpochTime", java.lang.Long.class);
        map.put("upload", org.zendesk.client.v2.model.Attachment.Upload.class);
        map.put("user", org.zendesk.client.v2.model.User.class);
        map.put("user_id", java.lang.Long.class);
        map.put("userId", java.lang.Long.class);
        map.put("userId0", java.lang.Long.class);
        map.put("userIdThatWillBeMerged", java.lang.Long.class);
        map.put("userIdThatWillRemain", java.lang.Long.class);
        map.put("userList", java.util.List.class);
        map.put("users", org.zendesk.client.v2.model.User[].class);
        map.put("userSegment", org.zendesk.client.v2.model.hc.UserSegment.class);
        map.put("usersList", java.util.List.class);
        map.put("variant", org.zendesk.client.v2.model.dynamic.DynamicContentItemVariant.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ZendeskEndpoint target = (ZendeskEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "backofferrorthreshold":
        case "backoffErrorThreshold": target.setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold":
        case "backoffIdleThreshold": target.setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier":
        case "backoffMultiplier": target.setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "delay": target.setDelay(property(camelContext, long.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "greedy": target.setGreedy(property(camelContext, boolean.class, value)); return true;
        case "inbody":
        case "inBody": target.setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "initialdelay":
        case "initialDelay": target.setInitialDelay(property(camelContext, long.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "oauthtoken":
        case "oauthToken": target.getConfiguration().setOauthToken(property(camelContext, java.lang.String.class, value)); return true;
        case "password": target.getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "pollstrategy":
        case "pollStrategy": target.setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "repeatcount":
        case "repeatCount": target.setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel":
        case "runLoggingLevel": target.setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice":
        case "scheduledExecutorService": target.setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": target.setScheduler(property(camelContext, java.lang.Object.class, value)); return true;
        case "schedulerproperties":
        case "schedulerProperties": target.setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": target.setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "serverurl":
        case "serverUrl": target.getConfiguration().setServerUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "startscheduler":
        case "startScheduler": target.setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "timeunit":
        case "timeUnit": target.setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "token": target.getConfiguration().setToken(property(camelContext, java.lang.String.class, value)); return true;
        case "usefixeddelay":
        case "useFixedDelay": target.setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "username": target.getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ZendeskEndpoint target = (ZendeskEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "backofferrorthreshold":
        case "backoffErrorThreshold": return target.getBackoffErrorThreshold();
        case "backoffidlethreshold":
        case "backoffIdleThreshold": return target.getBackoffIdleThreshold();
        case "backoffmultiplier":
        case "backoffMultiplier": return target.getBackoffMultiplier();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "delay": return target.getDelay();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "greedy": return target.isGreedy();
        case "inbody":
        case "inBody": return target.getInBody();
        case "initialdelay":
        case "initialDelay": return target.getInitialDelay();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "oauthtoken":
        case "oauthToken": return target.getConfiguration().getOauthToken();
        case "password": return target.getConfiguration().getPassword();
        case "pollstrategy":
        case "pollStrategy": return target.getPollStrategy();
        case "repeatcount":
        case "repeatCount": return target.getRepeatCount();
        case "runlogginglevel":
        case "runLoggingLevel": return target.getRunLoggingLevel();
        case "scheduledexecutorservice":
        case "scheduledExecutorService": return target.getScheduledExecutorService();
        case "scheduler": return target.getScheduler();
        case "schedulerproperties":
        case "schedulerProperties": return target.getSchedulerProperties();
        case "sendemptymessagewhenidle":
        case "sendEmptyMessageWhenIdle": return target.isSendEmptyMessageWhenIdle();
        case "serverurl":
        case "serverUrl": return target.getConfiguration().getServerUrl();
        case "startscheduler":
        case "startScheduler": return target.isStartScheduler();
        case "synchronous": return target.isSynchronous();
        case "timeunit":
        case "timeUnit": return target.getTimeUnit();
        case "token": return target.getConfiguration().getToken();
        case "usefixeddelay":
        case "useFixedDelay": return target.isUseFixedDelay();
        case "username": return target.getConfiguration().getUsername();
        default: return null;
        }
    }
}

