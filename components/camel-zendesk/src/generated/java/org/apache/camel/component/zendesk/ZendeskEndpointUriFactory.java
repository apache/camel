/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.zendesk;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class ZendeskEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":methodName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "active", "article", "articleAttachments", "articleId", "articleId0", "attachment", "attachments", "audit",
            "auditId", "automation", "automationId", "automationId0", "backoffErrorThreshold", "backoffIdleThreshold",
            "backoffMultiplier", "bridgeErrorHandler", "category", "categoryId", "categoryId0", "category_id", "comment",
            "commentId", "content", "contentType", "delay", "email", "endTime", "exceptionHandler", "exchangePattern",
            "externalId", "externalId0", "externalId0s", "field", "file", "fileName", "forum", "forum_id", "greedy",
            "group", "groupMembership", "group_id", "group_membership_id", "id", "idArticle", "identity", "identityId",
            "ids", "inBody", "includeArchived", "initialDelay", "inline", "installationId", "item", "itemId", "json",
            "labels", "lazyStartProducer", "locale", "macro", "macroId", "macroId0", "methodName", "monitorId", "name",
            "newPassword", "notifySubscribers", "oauthToken", "oldPassword", "order", "organization", "organizationId",
            "organizationList", "organizationMembership", "organizationMembershipList", "organizationMemberships",
            "organization_id", "organization_membership_id", "organizations", "page", "password", "permissionGroup",
            "pollStrategy", "query", "queryParams", "repeatCount", "request", "requestId", "role", "roles",
            "runLoggingLevel", "satisfactionRating", "schedule", "scheduleId", "scheduledExecutorService", "scheduler",
            "schedulerProperties", "searchTerm", "section", "sectionId", "sendEmptyMessageWhenIdle", "serverUrl", "sortBy",
            "sortOrder", "startScheduler", "startTime", "status", "statuses", "suspendedTicket", "tags", "target",
            "targetId", "ticket", "ticketForm", "ticketId", "ticketId0", "ticketImport", "ticketList", "tickets",
            "timeUnit", "token", "topic", "translation", "translationId", "trigger", "triggerId", "triggerId0", "tweetId",
            "unixEpochTime", "upload", "useFixedDelay", "user", "userId", "userId0", "userIdThatWillBeMerged",
            "userIdThatWillRemain", "userList", "userSegment", "user_id", "username", "users", "usersList", "variant");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "oauthToken", "password", "token", "username");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "scheduler.");

    @Override
    public boolean isEnabled(String scheme) {
        return "zendesk".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

