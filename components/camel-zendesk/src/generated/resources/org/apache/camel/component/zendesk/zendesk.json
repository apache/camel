{
  "component": {
    "kind": "component",
    "name": "zendesk",
    "title": "Zendesk",
    "description": "Manage Zendesk tickets, users, organizations, etc.",
    "deprecated": false,
    "firstVersion": "2.19.0",
    "label": "cloud,api,support",
    "javaType": "org.apache.camel.component.zendesk.ZendeskComponent",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-zendesk",
    "version": "3.5.0-SNAPSHOT",
    "scheme": "zendesk",
    "extendsScheme": "",
    "syntax": "zendesk:methodName",
    "async": false,
    "api": true,
    "apiPropertyQualifier": "methodName",
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": true
  },
  "componentProperties": {
    "bridgeErrorHandler": { "kind": "property", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "lazyStartProducer": { "kind": "property", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "basicPropertyBinding": { "kind": "property", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" },
    "configuration": { "kind": "property", "displayName": "Configuration", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "org.apache.camel.component.zendesk.ZendeskConfiguration", "deprecated": false, "secret": false, "description": "Component configuration" },
    "zendesk": { "kind": "property", "displayName": "Zendesk", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "org.zendesk.client.v2.Zendesk", "deprecated": false, "secret": false, "description": "To use a shared Zendesk instance." }
  },
  "properties": {
    "methodName": { "kind": "path", "displayName": "Method Name", "group": "common", "label": "", "required": true, "type": "object", "javaType": "org.apache.camel.component.zendesk.internal.ZendeskApiMethod", "enum": [ "addTagToOrganisations", "addTagToTicket", "addTagToTopics", "associateAttachmentsToArticle", "changeUserPassword", "createArticle", "createArticleTranslation", "createAutomation", "createCategory", "createCategoryTranslation", "createComment", "createDynamicContentItem", "createDynamicContentItemVariant", "createForum", "createGroup", "createGroupMembership", "createMacro", "createOrUpdateUser", "createOrUpdateUsers", "createOrUpdateUsersAsync", "createOrganization", "createOrganizationMembership", "createOrganizationMemberships", "createOrganizationMembershipsAsync", "createOrganizations", "createOrganizationsAsync", "createPermissionGroup", "createRequest", "createSatisfactionRating", "createSection", "createSectionTranslation", "createTarget", "createTicket", "createTicketAsync", "createTicketField", "createTicketForm", "createTicketFromTweet", "createTickets", "createTicketsAsync", "createTopic", "createTrigger", "createUpload", "createUploadArticle", "createUser", "createUserIdentity", "createUserSegment", "createUsers", "createUsersAsync", "deleteArticle", "deleteArticleAttachment", "deleteAttachment", "deleteAutomation", "deleteCategory", "deleteDynamicContentItem", "deleteDynamicContentItemVariant", "deleteForum", "deleteGroup", "deleteGroupMembership", "deleteOrganization", "deleteOrganizationMembership", "deleteOrganizationMemberships", "deletePermissionGroup", "deleteSection", "deleteSuspendedTicket", "deleteTarget", "deleteTicket", "deleteTicketField", "deleteTickets", "deleteTopic", "deleteTranslation", "deleteTrigger", "deleteUpload", "deleteUser", "deleteUserIdentity", "deleteUserSegment", "getArticle", "getArticleFromSearch", "getArticleSubscriptions", "getArticleTranslations", "getArticles", "getArticlesFromAllLabels", "getArticlesFromAnyLabels", "getArticlesFromPage", "getArticlesIncrementally", "getAssignableGroupMemberships", "getAssignableGroups", "getAttachment", "getAttachmentsFromArticle", "getAuthenticatedUser", "getAutoCompleteOrganizations", "getAutomation", "getAutomations", "getBrands", "getCCRequests", "getCategories", "getCategory", "getCategoryTranslations", "getComplianceDeletionStatuses", "getCurrentUser", "getCustomAgentRoles", "getDeletedTickets", "getDynamicContentItem", "getDynamicContentItemVariant", "getDynamicContentItemVariants", "getDynamicContentItems", "getForum", "getForums", "getGroup", "getGroupMembership", "getGroupMembershipByUser", "getGroupMemberships", "getGroupOrganization", "getGroupUsers", "getGroups", "getHelpCenterLocales", "getHolidaysForSchedule", "getIncrementalTicketsResult", "getJobStatus", "getJobStatusAsync", "getJobStatuses", "getJobStatusesAsync", "getMacro", "getMacros", "getOpenRequests", "getOrganization", "getOrganizationFields", "getOrganizationMembership", "getOrganizationMembershipByUser", "getOrganizationMembershipForUser", "getOrganizationMemberships", "getOrganizationMembershipsForOrg", "getOrganizationMembershipsForUser", "getOrganizationTickets", "getOrganizationUsers", "getOrganizations", "getOrganizationsIncrementally", "getPermissionGroup", "getPermissionGroups", "getRecentTickets", "getRequest", "getRequestComment", "getRequestComments", "getRequests", "getSatisfactionRating", "getSatisfactionRatings", "getSchedule", "getSchedules", "getSearchResults", "getSection", "getSectionSubscriptions", "getSectionTranslations", "getSections", "getSolvedRequests", "getSuspendedTickets", "getTarget", "getTargets", "getTicket", "getTicketAudit", "getTicketAudits", "getTicketCollaborators", "getTicketComments", "getTicketField", "getTicketFields", "getTicketForm", "getTicketForms", "getTicketIncidents", "getTicketMetric", "getTicketMetricByTicket", "getTicketMetrics", "getTickets", "getTicketsByExternalId", "getTicketsFromSearch", "getTicketsIncrementally", "getTopic", "getTopics", "getTopicsByUser", "getTrigger", "getTriggers", "getTwitterMonitors", "getUser", "getUserCCDTickets", "getUserFields", "getUserIdentities", "getUserIdentity", "getUserRelatedInfo", "getUserRequestedTickets", "getUserRequests", "getUserSegment", "getUserSegments", "getUserSegmentsApplicable", "getUserSubscriptions", "getUsers", "getUsersByRole", "getUsersIncrementally", "importTicket", "importTopic", "lookupOrganizationsByExternalId", "lookupUserByEmail", "lookupUserByExternalId", "macrosShowChangesToTicket", "macrosShowTicketAfterChanges", "makePrivateTicketAudit", "markTicketAsSpam", "mergeUsers", "notifyApp", "permanentlyDeleteTicket", "permanentlyDeleteTickets", "permanentlyDeleteUser", "queueCreateTicketAsync", "removeTagFromOrganisations", "removeTagFromTicket", "removeTagFromTopics", "requestVerifyUserIdentity", "resetUserPassword", "setGroupMembershipAsDefault", "setOrganizationMembershipAsDefault", "setTagOnOrganisations", "setTagOnTicket", "setTagOnTopics", "setUserPrimaryIdentity", "suspendUser", "trustTicketAudit", "unsuspendUser", "updateArticle", "updateArticleTranslation", "updateAutomation", "updateCategory", "updateCategoryTranslation", "updateDynamicContentItem", "updateDynamicContentItemVariant", "updateForum", "updateGroup", "updateInstallation", "updateMacro", "updateOrganization", "updateOrganizations", "updateOrganizationsAsync", "updatePermissionGroup", "updateRequest", "updateSection", "updateSectionTranslation", "updateTicket", "updateTicketField", "updateTickets", "updateTicketsAsync", "updateTopic", "updateTrigger", "updateUser", "updateUserIdentity", "updateUserSegment", "updateUsers", "updateUsersAsync", "verifyUserIdentity" ], "deprecated": false, "deprecationNote": "", "secret": false, "configurationClass": "org.apache.camel.component.zendesk.ZendeskConfiguration", "configurationField": "configuration", "description": "What operation to use" },
    "inBody": { "kind": "parameter", "displayName": "In Body", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Sets the name of a parameter to be passed in the exchange In Body" },
    "serverUrl": { "kind": "parameter", "displayName": "Server Url", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "configurationClass": "org.apache.camel.component.zendesk.ZendeskConfiguration", "configurationField": "configuration", "description": "The server URL to connect." },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "displayName": "Send Empty Message When Idle", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead." },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut", "InOptionalOut" ], "deprecated": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "pollStrategy": { "kind": "parameter", "displayName": "Poll Strategy", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "deprecated": false, "secret": false, "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel." },
    "lazyStartProducer": { "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "basicPropertyBinding": { "kind": "parameter", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": "false", "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." },
    "backoffErrorThreshold": { "kind": "parameter", "displayName": "Backoff Error Threshold", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "backoffIdleThreshold": { "kind": "parameter", "displayName": "Backoff Idle Threshold", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffMultiplier": { "kind": "parameter", "displayName": "Backoff Multiplier", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles\/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and\/or backoffErrorThreshold must also be configured." },
    "delay": { "kind": "parameter", "displayName": "Delay", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": "500", "description": "Milliseconds before the next poll." },
    "greedy": { "kind": "parameter", "displayName": "Greedy", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages." },
    "initialDelay": { "kind": "parameter", "displayName": "Initial Delay", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": "1000", "description": "Milliseconds before the first poll starts." },
    "repeatCount": { "kind": "parameter", "displayName": "Repeat Count", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": "0", "description": "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever." },
    "runLoggingLevel": { "kind": "parameter", "displayName": "Run Logging Level", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "deprecated": false, "secret": false, "defaultValue": "TRACE", "description": "The consumer logs a start\/complete log line when it polls. This option allows you to configure the logging level for that." },
    "scheduledExecutorService": { "kind": "parameter", "displayName": "Scheduled Executor Service", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "deprecated": false, "secret": false, "description": "Allows for configuring a custom\/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool." },
    "scheduler": { "kind": "parameter", "displayName": "Scheduler", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "java.lang.Object", "deprecated": false, "secret": false, "defaultValue": "none", "description": "To use a cron scheduler from either camel-spring or camel-quartz component. Use value spring or quartz for built in scheduler" },
    "schedulerProperties": { "kind": "parameter", "displayName": "Scheduler Properties", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "java.util.Map<java.lang.String, java.lang.Object>", "prefix": "scheduler.", "multiValue": true, "deprecated": false, "secret": false, "description": "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler." },
    "startScheduler": { "kind": "parameter", "displayName": "Start Scheduler", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": "true", "description": "Whether the scheduler should be auto started." },
    "timeUnit": { "kind": "parameter", "displayName": "Time Unit", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "deprecated": false, "secret": false, "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "displayName": "Use Fixed Delay", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": "true", "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." },
    "oauthToken": { "kind": "parameter", "displayName": "Oauth Token", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "configurationClass": "org.apache.camel.component.zendesk.ZendeskConfiguration", "configurationField": "configuration", "description": "The OAuth token." },
    "password": { "kind": "parameter", "displayName": "Password", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "configurationClass": "org.apache.camel.component.zendesk.ZendeskConfiguration", "configurationField": "configuration", "description": "The password." },
    "token": { "kind": "parameter", "displayName": "Token", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "configurationClass": "org.apache.camel.component.zendesk.ZendeskConfiguration", "configurationField": "configuration", "description": "The security token." },
    "username": { "kind": "parameter", "displayName": "Username", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "configurationClass": "org.apache.camel.component.zendesk.ZendeskConfiguration", "configurationField": "configuration", "description": "The user name." }
  }
}
