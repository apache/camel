/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.resteasy;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.http.HttpEndpointConfigurer;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ResteasyEndpointConfigurer extends HttpEndpointConfigurer implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("httpUri", java.net.URI.class);
        map.put("chunked", boolean.class);
        map.put("disableStreamCache", boolean.class);
        map.put("resteasyMethod", java.lang.String.class);
        map.put("servletName", java.lang.String.class);
        map.put("transferException", boolean.class);
        map.put("async", boolean.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("httpMethodRestrict", java.lang.String.class);
        map.put("matchOnUriPrefix", boolean.class);
        map.put("muteException", boolean.class);
        map.put("responseBufferSize", java.lang.Integer.class);
        map.put("eagerCheckContentAvailable", boolean.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("optionsEnabled", boolean.class);
        map.put("traceEnabled", boolean.class);
        map.put("bridgeEndpoint", boolean.class);
        map.put("clearExpiredCookies", boolean.class);
        map.put("connectionClose", boolean.class);
        map.put("copyHeaders", boolean.class);
        map.put("customHostHeader", java.lang.String.class);
        map.put("httpMethod", org.apache.camel.http.common.HttpMethods.class);
        map.put("ignoreResponseBody", boolean.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("preserveHostHeader", boolean.class);
        map.put("throwExceptionOnFailure", boolean.class);
        map.put("cookieHandler", org.apache.camel.http.base.cookie.CookieHandler.class);
        map.put("deleteWithBody", boolean.class);
        map.put("getWithBody", boolean.class);
        map.put("okStatusCodeRange", java.lang.String.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("headerFilterStrategy", org.apache.camel.spi.HeaderFilterStrategy.class);
        map.put("mapHttpMessageBody", boolean.class);
        map.put("mapHttpMessageFormUrlEncodedBody", boolean.class);
        map.put("mapHttpMessageHeaders", boolean.class);
        map.put("setHttpResponseDuringProcessing", java.lang.Boolean.class);
        map.put("skipServletProcessing", java.lang.Boolean.class);
        map.put("synchronous", boolean.class);
        map.put("useSystemProperties", boolean.class);
        map.put("proxyClientClass", java.lang.String.class);
        map.put("password", java.lang.String.class);
        map.put("username", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ResteasyEndpoint target = (ResteasyEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "async": target.setAsync(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "eagercheckcontentavailable":
        case "eagerCheckContentAvailable": target.setEagerCheckContentAvailable(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "httpmethodrestrict":
        case "httpMethodRestrict": target.setHttpMethodRestrict(property(camelContext, java.lang.String.class, value)); return true;
        case "matchonuriprefix":
        case "matchOnUriPrefix": target.setMatchOnUriPrefix(property(camelContext, boolean.class, value)); return true;
        case "muteexception":
        case "muteException": target.setMuteException(property(camelContext, boolean.class, value)); return true;
        case "optionsenabled":
        case "optionsEnabled": target.setOptionsEnabled(property(camelContext, boolean.class, value)); return true;
        case "password": target.setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyclientclass":
        case "proxyClientClass": target.setProxyClientClass(property(camelContext, java.lang.String.class, value)); return true;
        case "responsebuffersize":
        case "responseBufferSize": target.setResponseBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "resteasymethod":
        case "resteasyMethod": target.setResteasyMethod(property(camelContext, java.lang.String.class, value)); return true;
        case "servletname":
        case "servletName": target.setServletName(property(camelContext, java.lang.String.class, value)); return true;
        case "sethttpresponseduringprocessing":
        case "setHttpResponseDuringProcessing": target.setSetHttpResponseDuringProcessing(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "skipservletprocessing":
        case "skipServletProcessing": target.setSkipServletProcessing(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "traceenabled":
        case "traceEnabled": target.setTraceEnabled(property(camelContext, boolean.class, value)); return true;
        case "username": target.setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return super.configure(camelContext, obj, name, value, ignoreCase);
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ResteasyEndpoint target = (ResteasyEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "async": return target.isAsync();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "eagercheckcontentavailable":
        case "eagerCheckContentAvailable": return target.isEagerCheckContentAvailable();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "httpmethodrestrict":
        case "httpMethodRestrict": return target.getHttpMethodRestrict();
        case "matchonuriprefix":
        case "matchOnUriPrefix": return target.isMatchOnUriPrefix();
        case "muteexception":
        case "muteException": return target.isMuteException();
        case "optionsenabled":
        case "optionsEnabled": return target.isOptionsEnabled();
        case "password": return target.getPassword();
        case "proxyclientclass":
        case "proxyClientClass": return target.getProxyClientClass();
        case "responsebuffersize":
        case "responseBufferSize": return target.getResponseBufferSize();
        case "resteasymethod":
        case "resteasyMethod": return target.getResteasyMethod();
        case "servletname":
        case "servletName": return target.getServletName();
        case "sethttpresponseduringprocessing":
        case "setHttpResponseDuringProcessing": return target.getSetHttpResponseDuringProcessing();
        case "skipservletprocessing":
        case "skipServletProcessing": return target.getSkipServletProcessing();
        case "traceenabled":
        case "traceEnabled": return target.isTraceEnabled();
        case "username": return target.getUsername();
        default: return super.getOptionValue(obj, name, ignoreCase);
        }
    }
}

