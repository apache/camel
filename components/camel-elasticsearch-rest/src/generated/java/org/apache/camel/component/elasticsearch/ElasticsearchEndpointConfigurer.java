/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.elasticsearch;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ElasticsearchEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "connectionTimeout": ((ElasticsearchEndpoint) target).getConfiguration().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "disconnect": ((ElasticsearchEndpoint) target).getConfiguration().setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "enableSniffer": ((ElasticsearchEndpoint) target).getConfiguration().setEnableSniffer(property(camelContext, boolean.class, value)); return true;
        case "enableSSL": ((ElasticsearchEndpoint) target).getConfiguration().setEnableSSL(property(camelContext, boolean.class, value)); return true;
        case "hostAddresses": ((ElasticsearchEndpoint) target).getConfiguration().setHostAddresses(property(camelContext, java.lang.String.class, value)); return true;
        case "indexName": ((ElasticsearchEndpoint) target).getConfiguration().setIndexName(property(camelContext, java.lang.String.class, value)); return true;
        case "lazyStartProducer": ((ElasticsearchEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxRetryTimeout": ((ElasticsearchEndpoint) target).getConfiguration().setMaxRetryTimeout(property(camelContext, int.class, value)); return true;
        case "operation": ((ElasticsearchEndpoint) target).getConfiguration().setOperation(property(camelContext, org.apache.camel.component.elasticsearch.ElasticsearchOperation.class, value)); return true;
        case "scrollKeepAliveMs": ((ElasticsearchEndpoint) target).getConfiguration().setScrollKeepAliveMs(property(camelContext, int.class, value)); return true;
        case "sniffAfterFailureDelay": ((ElasticsearchEndpoint) target).getConfiguration().setSniffAfterFailureDelay(property(camelContext, int.class, value)); return true;
        case "snifferInterval": ((ElasticsearchEndpoint) target).getConfiguration().setSnifferInterval(property(camelContext, int.class, value)); return true;
        case "socketTimeout": ((ElasticsearchEndpoint) target).getConfiguration().setSocketTimeout(property(camelContext, int.class, value)); return true;
        case "useScroll": ((ElasticsearchEndpoint) target).getConfiguration().setUseScroll(property(camelContext, boolean.class, value)); return true;
        case "waitForActiveShards": ((ElasticsearchEndpoint) target).getConfiguration().setWaitForActiveShards(property(camelContext, int.class, value)); return true;
        case "basicPropertyBinding": ((ElasticsearchEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((ElasticsearchEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "connectiontimeout": ((ElasticsearchEndpoint) target).getConfiguration().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "disconnect": ((ElasticsearchEndpoint) target).getConfiguration().setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "enablesniffer": ((ElasticsearchEndpoint) target).getConfiguration().setEnableSniffer(property(camelContext, boolean.class, value)); return true;
        case "enablessl": ((ElasticsearchEndpoint) target).getConfiguration().setEnableSSL(property(camelContext, boolean.class, value)); return true;
        case "hostaddresses": ((ElasticsearchEndpoint) target).getConfiguration().setHostAddresses(property(camelContext, java.lang.String.class, value)); return true;
        case "indexname": ((ElasticsearchEndpoint) target).getConfiguration().setIndexName(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer": ((ElasticsearchEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxretrytimeout": ((ElasticsearchEndpoint) target).getConfiguration().setMaxRetryTimeout(property(camelContext, int.class, value)); return true;
        case "operation": ((ElasticsearchEndpoint) target).getConfiguration().setOperation(property(camelContext, org.apache.camel.component.elasticsearch.ElasticsearchOperation.class, value)); return true;
        case "scrollkeepalivems": ((ElasticsearchEndpoint) target).getConfiguration().setScrollKeepAliveMs(property(camelContext, int.class, value)); return true;
        case "sniffafterfailuredelay": ((ElasticsearchEndpoint) target).getConfiguration().setSniffAfterFailureDelay(property(camelContext, int.class, value)); return true;
        case "snifferinterval": ((ElasticsearchEndpoint) target).getConfiguration().setSnifferInterval(property(camelContext, int.class, value)); return true;
        case "sockettimeout": ((ElasticsearchEndpoint) target).getConfiguration().setSocketTimeout(property(camelContext, int.class, value)); return true;
        case "usescroll": ((ElasticsearchEndpoint) target).getConfiguration().setUseScroll(property(camelContext, boolean.class, value)); return true;
        case "waitforactiveshards": ((ElasticsearchEndpoint) target).getConfiguration().setWaitForActiveShards(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding": ((ElasticsearchEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((ElasticsearchEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

