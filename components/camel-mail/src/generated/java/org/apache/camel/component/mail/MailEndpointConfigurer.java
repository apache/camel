/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.mail;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class MailEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "bridgeErrorHandler": ((MailEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "closeFolder": ((MailEndpoint) target).getConfiguration().setCloseFolder(property(camelContext, boolean.class, value)); return true;
        case "copyTo": ((MailEndpoint) target).getConfiguration().setCopyTo(property(camelContext, java.lang.String.class, value)); return true;
        case "delete": ((MailEndpoint) target).getConfiguration().setDelete(property(camelContext, boolean.class, value)); return true;
        case "disconnect": ((MailEndpoint) target).getConfiguration().setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "handleFailedMessage": ((MailEndpoint) target).getConfiguration().setHandleFailedMessage(property(camelContext, boolean.class, value)); return true;
        case "maxMessagesPerPoll": ((MailEndpoint) target).setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "mimeDecodeHeaders": ((MailEndpoint) target).getConfiguration().setMimeDecodeHeaders(property(camelContext, boolean.class, value)); return true;
        case "peek": ((MailEndpoint) target).getConfiguration().setPeek(property(camelContext, boolean.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((MailEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "skipFailedMessage": ((MailEndpoint) target).getConfiguration().setSkipFailedMessage(property(camelContext, boolean.class, value)); return true;
        case "unseen": ((MailEndpoint) target).getConfiguration().setUnseen(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((MailEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((MailEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "fetchSize": ((MailEndpoint) target).getConfiguration().setFetchSize(property(camelContext, int.class, value)); return true;
        case "folderName": ((MailEndpoint) target).getConfiguration().setFolderName(property(camelContext, java.lang.String.class, value)); return true;
        case "mailUidGenerator": ((MailEndpoint) target).setMailUidGenerator(property(camelContext, org.apache.camel.component.mail.MailUidGenerator.class, value)); return true;
        case "mapMailMessage": ((MailEndpoint) target).getConfiguration().setMapMailMessage(property(camelContext, boolean.class, value)); return true;
        case "pollStrategy": ((MailEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "postProcessAction": ((MailEndpoint) target).setPostProcessAction(property(camelContext, org.apache.camel.component.mail.MailBoxPostProcessAction.class, value)); return true;
        case "bcc": ((MailEndpoint) target).getConfiguration().setBcc(property(camelContext, java.lang.String.class, value)); return true;
        case "cc": ((MailEndpoint) target).getConfiguration().setCc(property(camelContext, java.lang.String.class, value)); return true;
        case "from": ((MailEndpoint) target).getConfiguration().setFrom(property(camelContext, java.lang.String.class, value)); return true;
        case "lazyStartProducer": ((MailEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "replyTo": ((MailEndpoint) target).getConfiguration().setReplyTo(property(camelContext, java.lang.String.class, value)); return true;
        case "subject": ((MailEndpoint) target).getConfiguration().setSubject(property(camelContext, java.lang.String.class, value)); return true;
        case "to": ((MailEndpoint) target).getConfiguration().setTo(property(camelContext, java.lang.String.class, value)); return true;
        case "javaMailSender": ((MailEndpoint) target).getConfiguration().setJavaMailSender(property(camelContext, org.apache.camel.component.mail.JavaMailSender.class, value)); return true;
        case "additionalJavaMailProperties": ((MailEndpoint) target).getConfiguration().setAdditionalJavaMailProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "alternativeBodyHeader": ((MailEndpoint) target).getConfiguration().setAlternativeBodyHeader(property(camelContext, java.lang.String.class, value)); return true;
        case "attachmentsContentTransferEncodingResolver": ((MailEndpoint) target).getConfiguration().setAttachmentsContentTransferEncodingResolver(property(camelContext, org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver.class, value)); return true;
        case "basicPropertyBinding": ((MailEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "binding": ((MailEndpoint) target).setBinding(property(camelContext, org.apache.camel.component.mail.MailBinding.class, value)); return true;
        case "connectionTimeout": ((MailEndpoint) target).getConfiguration().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "contentType": ((MailEndpoint) target).getConfiguration().setContentType(property(camelContext, java.lang.String.class, value)); return true;
        case "contentTypeResolver": ((MailEndpoint) target).setContentTypeResolver(property(camelContext, org.apache.camel.component.mail.ContentTypeResolver.class, value)); return true;
        case "debugMode": ((MailEndpoint) target).getConfiguration().setDebugMode(property(camelContext, boolean.class, value)); return true;
        case "headerFilterStrategy": ((MailEndpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "ignoreUnsupportedCharset": ((MailEndpoint) target).getConfiguration().setIgnoreUnsupportedCharset(property(camelContext, boolean.class, value)); return true;
        case "ignoreUriScheme": ((MailEndpoint) target).getConfiguration().setIgnoreUriScheme(property(camelContext, boolean.class, value)); return true;
        case "session": ((MailEndpoint) target).getConfiguration().setSession(property(camelContext, javax.mail.Session.class, value)); return true;
        case "synchronous": ((MailEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "useInlineAttachments": ((MailEndpoint) target).getConfiguration().setUseInlineAttachments(property(camelContext, boolean.class, value)); return true;
        case "idempotentRepository": ((MailEndpoint) target).setIdempotentRepository(property(camelContext, org.apache.camel.spi.IdempotentRepository.class, value)); return true;
        case "idempotentRepositoryRemoveOnCommit": ((MailEndpoint) target).setIdempotentRepositoryRemoveOnCommit(property(camelContext, boolean.class, value)); return true;
        case "searchTerm": ((MailEndpoint) target).setSearchTerm(property(camelContext, javax.mail.search.SearchTerm.class, value)); return true;
        case "backoffErrorThreshold": ((MailEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((MailEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((MailEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((MailEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((MailEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((MailEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((MailEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((MailEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((MailEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((MailEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((MailEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((MailEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((MailEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((MailEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "sortTerm": ((MailEndpoint) target).setSortTerm(property(camelContext, com.sun.mail.imap.SortTerm[].class, value)); return true;
        case "password": ((MailEndpoint) target).getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslContextParameters": ((MailEndpoint) target).getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "username": ((MailEndpoint) target).getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "bridgeerrorhandler": ((MailEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "closefolder": ((MailEndpoint) target).getConfiguration().setCloseFolder(property(camelContext, boolean.class, value)); return true;
        case "copyto": ((MailEndpoint) target).getConfiguration().setCopyTo(property(camelContext, java.lang.String.class, value)); return true;
        case "delete": ((MailEndpoint) target).getConfiguration().setDelete(property(camelContext, boolean.class, value)); return true;
        case "disconnect": ((MailEndpoint) target).getConfiguration().setDisconnect(property(camelContext, boolean.class, value)); return true;
        case "handlefailedmessage": ((MailEndpoint) target).getConfiguration().setHandleFailedMessage(property(camelContext, boolean.class, value)); return true;
        case "maxmessagesperpoll": ((MailEndpoint) target).setMaxMessagesPerPoll(property(camelContext, int.class, value)); return true;
        case "mimedecodeheaders": ((MailEndpoint) target).getConfiguration().setMimeDecodeHeaders(property(camelContext, boolean.class, value)); return true;
        case "peek": ((MailEndpoint) target).getConfiguration().setPeek(property(camelContext, boolean.class, value)); return true;
        case "sendemptymessagewhenidle": ((MailEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "skipfailedmessage": ((MailEndpoint) target).getConfiguration().setSkipFailedMessage(property(camelContext, boolean.class, value)); return true;
        case "unseen": ((MailEndpoint) target).getConfiguration().setUnseen(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((MailEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((MailEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "fetchsize": ((MailEndpoint) target).getConfiguration().setFetchSize(property(camelContext, int.class, value)); return true;
        case "foldername": ((MailEndpoint) target).getConfiguration().setFolderName(property(camelContext, java.lang.String.class, value)); return true;
        case "mailuidgenerator": ((MailEndpoint) target).setMailUidGenerator(property(camelContext, org.apache.camel.component.mail.MailUidGenerator.class, value)); return true;
        case "mapmailmessage": ((MailEndpoint) target).getConfiguration().setMapMailMessage(property(camelContext, boolean.class, value)); return true;
        case "pollstrategy": ((MailEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "postprocessaction": ((MailEndpoint) target).setPostProcessAction(property(camelContext, org.apache.camel.component.mail.MailBoxPostProcessAction.class, value)); return true;
        case "bcc": ((MailEndpoint) target).getConfiguration().setBcc(property(camelContext, java.lang.String.class, value)); return true;
        case "cc": ((MailEndpoint) target).getConfiguration().setCc(property(camelContext, java.lang.String.class, value)); return true;
        case "from": ((MailEndpoint) target).getConfiguration().setFrom(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer": ((MailEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "replyto": ((MailEndpoint) target).getConfiguration().setReplyTo(property(camelContext, java.lang.String.class, value)); return true;
        case "subject": ((MailEndpoint) target).getConfiguration().setSubject(property(camelContext, java.lang.String.class, value)); return true;
        case "to": ((MailEndpoint) target).getConfiguration().setTo(property(camelContext, java.lang.String.class, value)); return true;
        case "javamailsender": ((MailEndpoint) target).getConfiguration().setJavaMailSender(property(camelContext, org.apache.camel.component.mail.JavaMailSender.class, value)); return true;
        case "additionaljavamailproperties": ((MailEndpoint) target).getConfiguration().setAdditionalJavaMailProperties(property(camelContext, java.util.Properties.class, value)); return true;
        case "alternativebodyheader": ((MailEndpoint) target).getConfiguration().setAlternativeBodyHeader(property(camelContext, java.lang.String.class, value)); return true;
        case "attachmentscontenttransferencodingresolver": ((MailEndpoint) target).getConfiguration().setAttachmentsContentTransferEncodingResolver(property(camelContext, org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver.class, value)); return true;
        case "basicpropertybinding": ((MailEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "binding": ((MailEndpoint) target).setBinding(property(camelContext, org.apache.camel.component.mail.MailBinding.class, value)); return true;
        case "connectiontimeout": ((MailEndpoint) target).getConfiguration().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "contenttype": ((MailEndpoint) target).getConfiguration().setContentType(property(camelContext, java.lang.String.class, value)); return true;
        case "contenttyperesolver": ((MailEndpoint) target).setContentTypeResolver(property(camelContext, org.apache.camel.component.mail.ContentTypeResolver.class, value)); return true;
        case "debugmode": ((MailEndpoint) target).getConfiguration().setDebugMode(property(camelContext, boolean.class, value)); return true;
        case "headerfilterstrategy": ((MailEndpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "ignoreunsupportedcharset": ((MailEndpoint) target).getConfiguration().setIgnoreUnsupportedCharset(property(camelContext, boolean.class, value)); return true;
        case "ignoreurischeme": ((MailEndpoint) target).getConfiguration().setIgnoreUriScheme(property(camelContext, boolean.class, value)); return true;
        case "session": ((MailEndpoint) target).getConfiguration().setSession(property(camelContext, javax.mail.Session.class, value)); return true;
        case "synchronous": ((MailEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "useinlineattachments": ((MailEndpoint) target).getConfiguration().setUseInlineAttachments(property(camelContext, boolean.class, value)); return true;
        case "idempotentrepository": ((MailEndpoint) target).setIdempotentRepository(property(camelContext, org.apache.camel.spi.IdempotentRepository.class, value)); return true;
        case "idempotentrepositoryremoveoncommit": ((MailEndpoint) target).setIdempotentRepositoryRemoveOnCommit(property(camelContext, boolean.class, value)); return true;
        case "searchterm": ((MailEndpoint) target).setSearchTerm(property(camelContext, javax.mail.search.SearchTerm.class, value)); return true;
        case "backofferrorthreshold": ((MailEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((MailEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((MailEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((MailEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((MailEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((MailEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((MailEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((MailEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((MailEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((MailEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((MailEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((MailEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((MailEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((MailEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "sortterm": ((MailEndpoint) target).setSortTerm(property(camelContext, com.sun.mail.imap.SortTerm[].class, value)); return true;
        case "password": ((MailEndpoint) target).getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslcontextparameters": ((MailEndpoint) target).getConfiguration().setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "username": ((MailEndpoint) target).getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
            default: return false;
        }
    }

}

