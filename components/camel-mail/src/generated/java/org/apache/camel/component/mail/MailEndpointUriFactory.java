/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.mail;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class MailEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":host:port";
    private static final String[] SCHEMES = new String[]{"imap", "imaps", "pop3", "pop3s", "smtp", "smtps"};

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "additionalJavaMailProperties", "alternativeBodyHeader", "attachmentsContentTransferEncodingResolver",
            "authenticator", "backoffErrorThreshold", "backoffIdleThreshold", "backoffMultiplier", "bcc", "binding",
            "bridgeErrorHandler", "cc", "closeFolder", "connectionTimeout", "contentType", "contentTypeResolver", "copyTo",
            "debugMode", "decodeFilename", "delay", "delete", "disconnect", "exceptionHandler", "exchangePattern",
            "failOnDuplicateFileAttachment", "fetchSize", "folderName", "from", "generateMissingAttachmentNames", "greedy",
            "handleDuplicateAttachmentNames", "handleFailedMessage", "headerFilterStrategy", "host",
            "idempotentRepository", "idempotentRepositoryRemoveOnCommit", "ignoreUnsupportedCharset", "ignoreUriScheme",
            "initialDelay", "javaMailProperties", "javaMailSender", "lazyStartProducer", "mailUidGenerator",
            "mapMailMessage", "maxMessagesPerPoll", "mimeDecodeHeaders", "moveTo", "password", "peek", "pollStrategy",
            "port", "postProcessAction", "repeatCount", "replyTo", "runLoggingLevel", "scheduledExecutorService",
            "scheduler", "schedulerProperties", "searchTerm", "sendEmptyMessageWhenIdle", "session", "skipFailedMessage",
            "sortTerm", "sslContextParameters", "startScheduler", "subject", "timeUnit", "to", "unseen", "useFixedDelay",
            "useInlineAttachments", "username");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "password", "username");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of(
            "mail.", "scheduler.", "searchTerm.");

    @Override
    public boolean isEnabled(String scheme) {
        for (String s : SCHEMES) {
            if (s.equals(scheme)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "host", null, true, copy);
        uri = buildPathParameter(syntax, uri, "port", null, false, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

