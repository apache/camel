/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.websocket;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class WebsocketComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "staticResources": ((WebsocketComponent) target).setStaticResources(property(camelContext, java.lang.String.class, value)); return true;
        case "host": ((WebsocketComponent) target).setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "port": ((WebsocketComponent) target).setPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sslKeyPassword": ((WebsocketComponent) target).setSslKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslPassword": ((WebsocketComponent) target).setSslPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslKeystore": ((WebsocketComponent) target).setSslKeystore(property(camelContext, java.lang.String.class, value)); return true;
        case "enableJmx": ((WebsocketComponent) target).setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "minThreads": ((WebsocketComponent) target).setMinThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxThreads": ((WebsocketComponent) target).setMaxThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "threadPool": ((WebsocketComponent) target).setThreadPool(property(camelContext, org.eclipse.jetty.util.thread.ThreadPool.class, value)); return true;
        case "sslContextParameters": ((WebsocketComponent) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "useGlobalSslContextParameters": ((WebsocketComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "socketFactory": ((WebsocketComponent) target).setSocketFactory(property(camelContext, java.util.Map.class, value)); return true;
        case "basicPropertyBinding": ((WebsocketComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((WebsocketComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((WebsocketComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "staticresources": ((WebsocketComponent) target).setStaticResources(property(camelContext, java.lang.String.class, value)); return true;
        case "host": ((WebsocketComponent) target).setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "port": ((WebsocketComponent) target).setPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sslkeypassword": ((WebsocketComponent) target).setSslKeyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslpassword": ((WebsocketComponent) target).setSslPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslkeystore": ((WebsocketComponent) target).setSslKeystore(property(camelContext, java.lang.String.class, value)); return true;
        case "enablejmx": ((WebsocketComponent) target).setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "minthreads": ((WebsocketComponent) target).setMinThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxthreads": ((WebsocketComponent) target).setMaxThreads(property(camelContext, java.lang.Integer.class, value)); return true;
        case "threadpool": ((WebsocketComponent) target).setThreadPool(property(camelContext, org.eclipse.jetty.util.thread.ThreadPool.class, value)); return true;
        case "sslcontextparameters": ((WebsocketComponent) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "useglobalsslcontextparameters": ((WebsocketComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "socketfactory": ((WebsocketComponent) target).setSocketFactory(property(camelContext, java.util.Map.class, value)); return true;
        case "basicpropertybinding": ((WebsocketComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((WebsocketComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((WebsocketComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

