/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.websocket;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class WebsocketEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "maxBinaryMessageSize": ((WebsocketEndpoint) target).setMaxBinaryMessageSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "bridgeErrorHandler": ((WebsocketEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sessionSupport": ((WebsocketEndpoint) target).setSessionSupport(property(camelContext, boolean.class, value)); return true;
        case "staticResources": ((WebsocketEndpoint) target).setStaticResources(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionHandler": ((WebsocketEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((WebsocketEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazyStartProducer": ((WebsocketEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "sendTimeout": ((WebsocketEndpoint) target).setSendTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sendToAll": ((WebsocketEndpoint) target).setSendToAll(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "basicPropertyBinding": ((WebsocketEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bufferSize": ((WebsocketEndpoint) target).setBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxIdleTime": ((WebsocketEndpoint) target).setMaxIdleTime(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxTextMessageSize": ((WebsocketEndpoint) target).setMaxTextMessageSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "minVersion": ((WebsocketEndpoint) target).setMinVersion(property(camelContext, java.lang.Integer.class, value)); return true;
        case "synchronous": ((WebsocketEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "allowedOrigins": ((WebsocketEndpoint) target).setAllowedOrigins(property(camelContext, java.lang.String.class, value)); return true;
        case "crossOriginFilterOn": ((WebsocketEndpoint) target).setCrossOriginFilterOn(property(camelContext, boolean.class, value)); return true;
        case "filterPath": ((WebsocketEndpoint) target).setFilterPath(property(camelContext, java.lang.String.class, value)); return true;
        case "enableJmx": ((WebsocketEndpoint) target).setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "sslContextParameters": ((WebsocketEndpoint) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "maxbinarymessagesize": ((WebsocketEndpoint) target).setMaxBinaryMessageSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "bridgeerrorhandler": ((WebsocketEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "sessionsupport": ((WebsocketEndpoint) target).setSessionSupport(property(camelContext, boolean.class, value)); return true;
        case "staticresources": ((WebsocketEndpoint) target).setStaticResources(property(camelContext, java.lang.String.class, value)); return true;
        case "exceptionhandler": ((WebsocketEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((WebsocketEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazystartproducer": ((WebsocketEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "sendtimeout": ((WebsocketEndpoint) target).setSendTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "sendtoall": ((WebsocketEndpoint) target).setSendToAll(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "basicpropertybinding": ((WebsocketEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "buffersize": ((WebsocketEndpoint) target).setBufferSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxidletime": ((WebsocketEndpoint) target).setMaxIdleTime(property(camelContext, java.lang.Integer.class, value)); return true;
        case "maxtextmessagesize": ((WebsocketEndpoint) target).setMaxTextMessageSize(property(camelContext, java.lang.Integer.class, value)); return true;
        case "minversion": ((WebsocketEndpoint) target).setMinVersion(property(camelContext, java.lang.Integer.class, value)); return true;
        case "synchronous": ((WebsocketEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "allowedorigins": ((WebsocketEndpoint) target).setAllowedOrigins(property(camelContext, java.lang.String.class, value)); return true;
        case "crossoriginfilteron": ((WebsocketEndpoint) target).setCrossOriginFilterOn(property(camelContext, boolean.class, value)); return true;
        case "filterpath": ((WebsocketEndpoint) target).setFilterPath(property(camelContext, java.lang.String.class, value)); return true;
        case "enablejmx": ((WebsocketEndpoint) target).setEnableJmx(property(camelContext, boolean.class, value)); return true;
        case "sslcontextparameters": ((WebsocketEndpoint) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
            default: return false;
        }
    }

}

