/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.salesforce;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class SalesforceEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":operationName:topicName";

    private static final Set<String> PROPERTY_NAMES;
    private static final Set<String> SECRET_PROPERTY_NAMES;
    static {
        Set<String> props = new HashSet<>(47);
        props.add("initialReplayIdMap");
        props.add("notifyForOperations");
        props.add("synchronous");
        props.add("sObjectQuery");
        props.add("notifyForOperationCreate");
        props.add("batchId");
        props.add("notifyForOperationUndelete");
        props.add("sObjectClass");
        props.add("apexUrl");
        props.add("compositeMethod");
        props.add("apexMethod");
        props.add("updateTopic");
        props.add("apiVersion");
        props.add("instanceId");
        props.add("bridgeErrorHandler");
        props.add("notifyForFields");
        props.add("sObjectIdValue");
        props.add("reportMetadata");
        props.add("limit");
        props.add("apexQueryParams");
        props.add("contentType");
        props.add("includeDetails");
        props.add("sObjectFields");
        props.add("sObjectName");
        props.add("httpClient");
        props.add("sObjectBlobFieldName");
        props.add("backoffIncrement");
        props.add("maxBackoff");
        props.add("rawPayload");
        props.add("reportId");
        props.add("resultId");
        props.add("format");
        props.add("exchangePattern");
        props.add("operationName");
        props.add("sObjectId");
        props.add("defaultReplayId");
        props.add("jobId");
        props.add("notFoundBehaviour");
        props.add("lazyStartProducer");
        props.add("objectMapper");
        props.add("sObjectSearch");
        props.add("notifyForOperationUpdate");
        props.add("topicName");
        props.add("sObjectIdName");
        props.add("replayId");
        props.add("exceptionHandler");
        props.add("notifyForOperationDelete");
        PROPERTY_NAMES = Collections.unmodifiableSet(props);
        SECRET_PROPERTY_NAMES = Collections.emptySet();
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "salesforce".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "operationName", null, false, copy);
        uri = buildPathParameter(syntax, uri, "topicName", null, false, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

