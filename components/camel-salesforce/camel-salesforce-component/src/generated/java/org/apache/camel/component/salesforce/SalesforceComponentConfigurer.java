/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.salesforce;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SalesforceComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "authenticationType": ((SalesforceComponent) target).setAuthenticationType(property(camelContext, org.apache.camel.component.salesforce.AuthenticationType.class, value)); return true;
        case "loginConfig": ((SalesforceComponent) target).setLoginConfig(property(camelContext, org.apache.camel.component.salesforce.SalesforceLoginConfig.class, value)); return true;
        case "instanceUrl": ((SalesforceComponent) target).setInstanceUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "loginUrl": ((SalesforceComponent) target).setLoginUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "clientId": ((SalesforceComponent) target).setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "clientSecret": ((SalesforceComponent) target).setClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "keystore": ((SalesforceComponent) target).setKeystore(property(camelContext, org.apache.camel.support.jsse.KeyStoreParameters.class, value)); return true;
        case "refreshToken": ((SalesforceComponent) target).setRefreshToken(property(camelContext, java.lang.String.class, value)); return true;
        case "userName": ((SalesforceComponent) target).setUserName(property(camelContext, java.lang.String.class, value)); return true;
        case "password": ((SalesforceComponent) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "lazyLogin": ((SalesforceComponent) target).setLazyLogin(property(camelContext, boolean.class, value)); return true;
        case "config": ((SalesforceComponent) target).setConfig(property(camelContext, org.apache.camel.component.salesforce.SalesforceEndpointConfig.class, value)); return true;
        case "httpClientProperties": ((SalesforceComponent) target).setHttpClientProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "longPollingTransportProperties": ((SalesforceComponent) target).setLongPollingTransportProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sslContextParameters": ((SalesforceComponent) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "useGlobalSslContextParameters": ((SalesforceComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "httpClientIdleTimeout": ((SalesforceComponent) target).setHttpClientIdleTimeout(property(camelContext, long.class, value)); return true;
        case "httpClientConnectionTimeout": ((SalesforceComponent) target).setHttpClientConnectionTimeout(property(camelContext, long.class, value)); return true;
        case "httpMaxContentLength": ((SalesforceComponent) target).setHttpMaxContentLength(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpProxyHost": ((SalesforceComponent) target).setHttpProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "httpProxyPort": ((SalesforceComponent) target).setHttpProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpProxyUsername": ((SalesforceComponent) target).setHttpProxyUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "httpProxyPassword": ((SalesforceComponent) target).setHttpProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "isHttpProxySocks4": ((SalesforceComponent) target).setIsHttpProxySocks4(property(camelContext, boolean.class, value)); return true;
        case "isHttpProxySecure": ((SalesforceComponent) target).setIsHttpProxySecure(property(camelContext, boolean.class, value)); return true;
        case "httpProxyIncludedAddresses": ((SalesforceComponent) target).setHttpProxyIncludedAddresses(property(camelContext, java.util.Set.class, value)); return true;
        case "httpProxyExcludedAddresses": ((SalesforceComponent) target).setHttpProxyExcludedAddresses(property(camelContext, java.util.Set.class, value)); return true;
        case "httpProxyAuthUri": ((SalesforceComponent) target).setHttpProxyAuthUri(property(camelContext, java.lang.String.class, value)); return true;
        case "httpProxyRealm": ((SalesforceComponent) target).setHttpProxyRealm(property(camelContext, java.lang.String.class, value)); return true;
        case "httpProxyUseDigestAuth": ((SalesforceComponent) target).setHttpProxyUseDigestAuth(property(camelContext, boolean.class, value)); return true;
        case "packages": ((SalesforceComponent) target).setPackages(property(camelContext, java.lang.String[].class, value)); return true;
        case "basicPropertyBinding": ((SalesforceComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((SalesforceComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((SalesforceComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "authenticationtype": ((SalesforceComponent) target).setAuthenticationType(property(camelContext, org.apache.camel.component.salesforce.AuthenticationType.class, value)); return true;
        case "loginconfig": ((SalesforceComponent) target).setLoginConfig(property(camelContext, org.apache.camel.component.salesforce.SalesforceLoginConfig.class, value)); return true;
        case "instanceurl": ((SalesforceComponent) target).setInstanceUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "loginurl": ((SalesforceComponent) target).setLoginUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "clientid": ((SalesforceComponent) target).setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "clientsecret": ((SalesforceComponent) target).setClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "keystore": ((SalesforceComponent) target).setKeystore(property(camelContext, org.apache.camel.support.jsse.KeyStoreParameters.class, value)); return true;
        case "refreshtoken": ((SalesforceComponent) target).setRefreshToken(property(camelContext, java.lang.String.class, value)); return true;
        case "username": ((SalesforceComponent) target).setUserName(property(camelContext, java.lang.String.class, value)); return true;
        case "password": ((SalesforceComponent) target).setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "lazylogin": ((SalesforceComponent) target).setLazyLogin(property(camelContext, boolean.class, value)); return true;
        case "config": ((SalesforceComponent) target).setConfig(property(camelContext, org.apache.camel.component.salesforce.SalesforceEndpointConfig.class, value)); return true;
        case "httpclientproperties": ((SalesforceComponent) target).setHttpClientProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "longpollingtransportproperties": ((SalesforceComponent) target).setLongPollingTransportProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "sslcontextparameters": ((SalesforceComponent) target).setSslContextParameters(property(camelContext, org.apache.camel.support.jsse.SSLContextParameters.class, value)); return true;
        case "useglobalsslcontextparameters": ((SalesforceComponent) target).setUseGlobalSslContextParameters(property(camelContext, boolean.class, value)); return true;
        case "httpclientidletimeout": ((SalesforceComponent) target).setHttpClientIdleTimeout(property(camelContext, long.class, value)); return true;
        case "httpclientconnectiontimeout": ((SalesforceComponent) target).setHttpClientConnectionTimeout(property(camelContext, long.class, value)); return true;
        case "httpmaxcontentlength": ((SalesforceComponent) target).setHttpMaxContentLength(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpproxyhost": ((SalesforceComponent) target).setHttpProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxyport": ((SalesforceComponent) target).setHttpProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "httpproxyusername": ((SalesforceComponent) target).setHttpProxyUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxypassword": ((SalesforceComponent) target).setHttpProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "ishttpproxysocks4": ((SalesforceComponent) target).setIsHttpProxySocks4(property(camelContext, boolean.class, value)); return true;
        case "ishttpproxysecure": ((SalesforceComponent) target).setIsHttpProxySecure(property(camelContext, boolean.class, value)); return true;
        case "httpproxyincludedaddresses": ((SalesforceComponent) target).setHttpProxyIncludedAddresses(property(camelContext, java.util.Set.class, value)); return true;
        case "httpproxyexcludedaddresses": ((SalesforceComponent) target).setHttpProxyExcludedAddresses(property(camelContext, java.util.Set.class, value)); return true;
        case "httpproxyauthuri": ((SalesforceComponent) target).setHttpProxyAuthUri(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxyrealm": ((SalesforceComponent) target).setHttpProxyRealm(property(camelContext, java.lang.String.class, value)); return true;
        case "httpproxyusedigestauth": ((SalesforceComponent) target).setHttpProxyUseDigestAuth(property(camelContext, boolean.class, value)); return true;
        case "packages": ((SalesforceComponent) target).setPackages(property(camelContext, java.lang.String[].class, value)); return true;
        case "basicpropertybinding": ((SalesforceComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((SalesforceComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((SalesforceComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

