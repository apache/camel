/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Mar 09 16:15:49 ART 2017
 */
package $packageName;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;

import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject With_Reference__c
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("With_Reference__c")
public class With_Reference__c extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // account_ref__c
    private String account_ref__c;

    @JsonProperty("account_ref__c")
    public String getaccount_ref__c() {
        return this.account_ref__c;
    }

    @JsonProperty("account_ref__c")
    public void setaccount_ref__c(String account_ref__c) {
        this.account_ref__c = account_ref__c;
    }

    // ProductId__c
    private String ProductId__c;

    @JsonProperty("ProductId__c")
    public String getProductId__c() {
        return this.ProductId__c;
    }

    @JsonProperty("ProductId__c")
    public void setProductId__c(String ProductId__c) {
        this.ProductId__c = ProductId__c;
    }

    // External__c
    private String External__c;

    @JsonProperty("External__c")
    public String getExternal__c() {
        return this.External__c;
    }

    @JsonProperty("External__c")
    public void setExternal__c(String External__c) {
        this.External__c = External__c;
    }

    private With_External_Id__c_Lookup External__r;

    @JsonProperty("External__r")
    public With_External_Id__c_Lookup getExternal__r() {
        return this.External__r;
    }

    @JsonProperty("External__r")
    public void setExternal__r(With_External_Id__c_Lookup External__r) {
        this.External__r = External__r;
    }

    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();


        description.setMergeable(false);
        description.setCreateable(true);
        description.setQueryable(true);
        description.setLabel("With Reference");
        description.setReplicateable(true);

        final List<RecordTypeInfo> recordTypeInfos1 = new ArrayList<>();
        description.setRecordTypeInfos(recordTypeInfos1);

        final RecordTypeInfo recordTypeInfo1 = new RecordTypeInfo();
        recordTypeInfos1.add(recordTypeInfo1);

        recordTypeInfo1.setDefaultRecordTypeMapping(true);
        recordTypeInfo1.setRecordTypeId("012000000000000AAA");
        recordTypeInfo1.setAvailable(true);

        final InfoUrls infoUrls1 = new InfoUrls();
        infoUrls1.setLayout("/services/data/v42.0/sobjects/With_Reference__c/describe/layouts/012000000000000AAA");
        recordTypeInfo1.setUrls(infoUrls1);
        recordTypeInfo1.setName("Master");


        description.setName("With_Reference__c");
        description.setLayoutable(true);
        description.setDeprecatedAndHidden(false);
        description.setMruEnabled(false);
        description.setSearchable(false);
        description.setFeedEnabled(false);
        description.setRetrieveable(true);
        description.setCustomSetting(false);
        description.setKeyPrefix("a04");
        description.setUndeletable(true);
        description.setSearchLayoutable("false");
        description.setTriggerable(true);
        description.setCustom(true);

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v42.0/sobjects/With_Reference__c/describe");
        sObjectDescriptionUrls1.setLayouts("/services/data/v42.0/sobjects/With_Reference__c/describe/layouts");
        sObjectDescriptionUrls1.setSobject("/services/data/v42.0/sobjects/With_Reference__c");
        sObjectDescriptionUrls1.setQuickActions("/services/data/v42.0/sobjects/With_Reference__c/quickActions");
        sObjectDescriptionUrls1.setUiEditTemplate("https://eu11.salesforce.com/{ID}/e");
        sObjectDescriptionUrls1.setDefaultValues("/services/data/v42.0/sobjects/With_Reference__c/defaultValues?recordTypeId&fields");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v42.0/sobjects/With_Reference__c/{ID}");
        sObjectDescriptionUrls1.setCompactLayouts("/services/data/v42.0/sobjects/With_Reference__c/describe/compactLayouts");
        sObjectDescriptionUrls1.setApprovalLayouts("/services/data/v42.0/sobjects/With_Reference__c/describe/approvalLayouts");
        sObjectDescriptionUrls1.setUiNewRecord("https://eu11.salesforce.com/a04/e");
        sObjectDescriptionUrls1.setUiDetailTemplate("https://eu11.salesforce.com/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setCompactLayoutable(true);

        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Record ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("OwnerId", "Owner ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("Name", "With Reference Name", "string", "xsd:string", 80, false, true, true, false, false, false, true);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("account_ref__c", "Account", "reference", "tns:ID", 18, false, true, false, false, true, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("ProductId__c", "Product", "reference", "tns:ID", 18, false, true, false, false, true, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("External__c", "With External Id", "reference", "tns:ID", 18, false, true, false, false, true, false, false);
        fields1.add(sObjectField12);

        description.setActivateable(false);
        description.setLabelPlural("With References");
        description.setUpdateable(true);
        description.setDeletable(true);

        return description;
    }
}
