## ------------------------------------------------------------------------
## Licensed to the Apache Software Foundation (ASF) under one or more
## contributor license agreements.  See the NOTICE file distributed with
## this work for additional information regarding copyright ownership.
## The ASF licenses this file to You under the Apache License, Version 2.0
## (the "License"); you may not use this file except in compliance with
## the License.  You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ------------------------------------------------------------------------
## sobject-picklist.vm
/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: $generatedDate
 */
package $packageName;

import javax.annotation.Generated;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Salesforce Enumeration DTO for picklist $field.Name
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
public enum $enumName {
#set ( $values = $utility.getUniqueValues($field) )

## handle empty picklists
#if ( $values.isEmpty() )
    ; // empty picklist!
#else
#foreach ( $entry in $values)
#set ( $value = $entry.Value )
    // $value
    $utility.getEnumConstant($value)("$esc.escapeJava($value)")#if ( $foreach.hasNext ),#else;#end

#end
#end

    final String value;

    private $enumName(String value) {
        this.value = value;
    }

    @JsonValue
    public String value() {
        return this.value;
    }

    @JsonCreator
    public static $enumName fromValue(String value) {
#set ( $allValues = ".values()" )
        for ($enumName e : $enumName$allValues) {
            if (e.value.equals(value)) {
                return e;
            }
        }
        throw new IllegalArgumentException(value);
    }

}
