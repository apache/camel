/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.file.watch;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class FileWatchEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("path", java.lang.String.class);
        map.put("antInclude", java.lang.String.class);
        map.put("autoCreate", boolean.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("concurrentConsumers", int.class);
        map.put("events", java.util.Set.class);
        map.put("fileHasher", io.methvin.watcher.hashing.FileHasher.class);
        map.put("pollThreads", int.class);
        map.put("queueSize", int.class);
        map.put("recursive", boolean.class);
        map.put("useFileHashing", boolean.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("synchronous", boolean.class);
        ALL_OPTIONS = map;
        ConfigurerStrategy.addBootstrapConfigurerClearer(FileWatchEndpointConfigurer::clearBootstrapConfigurers);
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        FileWatchEndpoint target = (FileWatchEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "antinclude":
        case "antInclude": target.setAntInclude(property(camelContext, java.lang.String.class, value)); return true;
        case "autocreate":
        case "autoCreate": target.setAutoCreate(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "concurrentconsumers":
        case "concurrentConsumers": target.setConcurrentConsumers(property(camelContext, int.class, value)); return true;
        case "events": target.setEvents(property(camelContext, java.util.Set.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "filehasher":
        case "fileHasher": target.setFileHasher(property(camelContext, io.methvin.watcher.hashing.FileHasher.class, value)); return true;
        case "pollthreads":
        case "pollThreads": target.setPollThreads(property(camelContext, int.class, value)); return true;
        case "queuesize":
        case "queueSize": target.setQueueSize(property(camelContext, int.class, value)); return true;
        case "recursive": target.setRecursive(property(camelContext, boolean.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "usefilehashing":
        case "useFileHashing": target.setUseFileHashing(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    public static void clearBootstrapConfigurers() {
        ALL_OPTIONS.clear();
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "antinclude":
        case "antInclude": return java.lang.String.class;
        case "autocreate":
        case "autoCreate": return boolean.class;
        case "basicpropertybinding":
        case "basicPropertyBinding": return boolean.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "concurrentconsumers":
        case "concurrentConsumers": return int.class;
        case "events": return java.util.Set.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "filehasher":
        case "fileHasher": return io.methvin.watcher.hashing.FileHasher.class;
        case "pollthreads":
        case "pollThreads": return int.class;
        case "queuesize":
        case "queueSize": return int.class;
        case "recursive": return boolean.class;
        case "synchronous": return boolean.class;
        case "usefilehashing":
        case "useFileHashing": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        FileWatchEndpoint target = (FileWatchEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "antinclude":
        case "antInclude": return target.getAntInclude();
        case "autocreate":
        case "autoCreate": return target.isAutoCreate();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "concurrentconsumers":
        case "concurrentConsumers": return target.getConcurrentConsumers();
        case "events": return target.getEvents();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "filehasher":
        case "fileHasher": return target.getFileHasher();
        case "pollthreads":
        case "pollThreads": return target.getPollThreads();
        case "queuesize":
        case "queueSize": return target.getQueueSize();
        case "recursive": return target.isRecursive();
        case "synchronous": return target.isSynchronous();
        case "usefilehashing":
        case "useFileHashing": return target.isUseFileHashing();
        default: return null;
        }
    }
}

