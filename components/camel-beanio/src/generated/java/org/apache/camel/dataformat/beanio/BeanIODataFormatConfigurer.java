/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.dataformat.beanio;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class BeanIODataFormatConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("BeanReaderErrorHandlerType", java.lang.String.class);
        map.put("Encoding", java.nio.charset.Charset.class);
        map.put("IgnoreInvalidRecords", boolean.class);
        map.put("IgnoreUnexpectedRecords", boolean.class);
        map.put("IgnoreUnidentifiedRecords", boolean.class);
        map.put("Mapping", java.lang.String.class);
        map.put("StreamName", java.lang.String.class);
        map.put("UnmarshalSingleObject", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        BeanIODataFormat target = (BeanIODataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "beanreadererrorhandlertype":
        case "beanReaderErrorHandlerType": target.setBeanReaderErrorHandlerType(property(camelContext, java.lang.String.class, value)); return true;
        case "encoding": target.setEncoding(property(camelContext, java.nio.charset.Charset.class, value)); return true;
        case "ignoreinvalidrecords":
        case "ignoreInvalidRecords": target.setIgnoreInvalidRecords(property(camelContext, boolean.class, value)); return true;
        case "ignoreunexpectedrecords":
        case "ignoreUnexpectedRecords": target.setIgnoreUnexpectedRecords(property(camelContext, boolean.class, value)); return true;
        case "ignoreunidentifiedrecords":
        case "ignoreUnidentifiedRecords": target.setIgnoreUnidentifiedRecords(property(camelContext, boolean.class, value)); return true;
        case "mapping": target.setMapping(property(camelContext, java.lang.String.class, value)); return true;
        case "streamname":
        case "streamName": target.setStreamName(property(camelContext, java.lang.String.class, value)); return true;
        case "unmarshalsingleobject":
        case "unmarshalSingleObject": target.setUnmarshalSingleObject(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "beanreadererrorhandlertype":
        case "beanReaderErrorHandlerType": return java.lang.String.class;
        case "encoding": return java.nio.charset.Charset.class;
        case "ignoreinvalidrecords":
        case "ignoreInvalidRecords": return boolean.class;
        case "ignoreunexpectedrecords":
        case "ignoreUnexpectedRecords": return boolean.class;
        case "ignoreunidentifiedrecords":
        case "ignoreUnidentifiedRecords": return boolean.class;
        case "mapping": return java.lang.String.class;
        case "streamname":
        case "streamName": return java.lang.String.class;
        case "unmarshalsingleobject":
        case "unmarshalSingleObject": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        BeanIODataFormat target = (BeanIODataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "beanreadererrorhandlertype":
        case "beanReaderErrorHandlerType": return target.getBeanReaderErrorHandlerType();
        case "encoding": return target.getEncoding();
        case "ignoreinvalidrecords":
        case "ignoreInvalidRecords": return target.isIgnoreInvalidRecords();
        case "ignoreunexpectedrecords":
        case "ignoreUnexpectedRecords": return target.isIgnoreUnexpectedRecords();
        case "ignoreunidentifiedrecords":
        case "ignoreUnidentifiedRecords": return target.isIgnoreUnidentifiedRecords();
        case "mapping": return target.getMapping();
        case "streamname":
        case "streamName": return target.getStreamName();
        case "unmarshalsingleobject":
        case "unmarshalSingleObject": return target.isUnmarshalSingleObject();
        default: return null;
        }
    }
}

