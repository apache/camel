/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.cmis;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class CMISEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("cmsUrl", java.lang.String.class);
        map.put("pageSize", int.class);
        map.put("readContent", boolean.class);
        map.put("readCount", int.class);
        map.put("repositoryId", java.lang.String.class);
        map.put("bridgeErrorHandler", boolean.class);
        map.put("query", java.lang.String.class);
        map.put("exceptionHandler", org.apache.camel.spi.ExceptionHandler.class);
        map.put("exchangePattern", org.apache.camel.ExchangePattern.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("queryMode", boolean.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("sessionFacadeFactory", org.apache.camel.component.cmis.CMISSessionFacadeFactory.class);
        map.put("synchronous", boolean.class);
        map.put("password", java.lang.String.class);
        map.put("username", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        CMISEndpoint target = (CMISEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "pagesize":
        case "pageSize": target.getSessionFacade().setPageSize(property(camelContext, int.class, value)); return true;
        case "password": target.getSessionFacade().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "query": target.getSessionFacade().setQuery(property(camelContext, java.lang.String.class, value)); return true;
        case "querymode":
        case "queryMode": target.setQueryMode(property(camelContext, boolean.class, value)); return true;
        case "readcontent":
        case "readContent": target.getSessionFacade().setReadContent(property(camelContext, boolean.class, value)); return true;
        case "readcount":
        case "readCount": target.getSessionFacade().setReadCount(property(camelContext, int.class, value)); return true;
        case "repositoryid":
        case "repositoryId": target.getSessionFacade().setRepositoryId(property(camelContext, java.lang.String.class, value)); return true;
        case "sessionfacadefactory":
        case "sessionFacadeFactory": target.setSessionFacadeFactory(property(camelContext, org.apache.camel.component.cmis.CMISSessionFacadeFactory.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "username": target.getSessionFacade().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        CMISEndpoint target = (CMISEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "pagesize":
        case "pageSize": return target.getSessionFacade().getPageSize();
        case "password": return target.getSessionFacade().getPassword();
        case "query": return target.getSessionFacade().getQuery();
        case "querymode":
        case "queryMode": return target.isQueryMode();
        case "readcontent":
        case "readContent": return target.getSessionFacade().isReadContent();
        case "readcount":
        case "readCount": return target.getSessionFacade().getReadCount();
        case "repositoryid":
        case "repositoryId": return target.getSessionFacade().getRepositoryId();
        case "sessionfacadefactory":
        case "sessionFacadeFactory": return target.getSessionFacadeFactory();
        case "synchronous": return target.isSynchronous();
        case "username": return target.getSessionFacade().getUsername();
        default: return null;
        }
    }
}

