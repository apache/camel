/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.jcache;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class JCacheComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "cachingProvider": ((JCacheComponent) target).setCachingProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "cacheConfiguration": ((JCacheComponent) target).setCacheConfiguration(property(camelContext, javax.cache.configuration.Configuration.class, value)); return true;
        case "cacheConfigurationProperties": ((JCacheComponent) target).setCacheConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "cacheConfigurationPropertiesRef": ((JCacheComponent) target).setCacheConfigurationPropertiesRef(property(camelContext, java.lang.String.class, value)); return true;
        case "configurationUri": ((JCacheComponent) target).setConfigurationUri(property(camelContext, java.lang.String.class, value)); return true;
        case "basicPropertyBinding": ((JCacheComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((JCacheComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((JCacheComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "cachingprovider": ((JCacheComponent) target).setCachingProvider(property(camelContext, java.lang.String.class, value)); return true;
        case "cacheconfiguration": ((JCacheComponent) target).setCacheConfiguration(property(camelContext, javax.cache.configuration.Configuration.class, value)); return true;
        case "cacheconfigurationproperties": ((JCacheComponent) target).setCacheConfigurationProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "cacheconfigurationpropertiesref": ((JCacheComponent) target).setCacheConfigurationPropertiesRef(property(camelContext, java.lang.String.class, value)); return true;
        case "configurationuri": ((JCacheComponent) target).setConfigurationUri(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding": ((JCacheComponent) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((JCacheComponent) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((JCacheComponent) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

