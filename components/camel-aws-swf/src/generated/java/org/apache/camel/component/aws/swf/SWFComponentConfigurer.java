/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.aws.swf;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SWFComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.aws.swf.SWFConfiguration getOrCreateConfiguration(SWFComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.aws.swf.SWFConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        SWFComponent target = (SWFComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesskey":
        case "accessKey": getOrCreateConfiguration(target).setAccessKey(property(camelContext, java.lang.String.class, value)); return true;
        case "activitylist":
        case "activityList": getOrCreateConfiguration(target).setActivityList(property(camelContext, java.lang.String.class, value)); return true;
        case "activityschedulingoptions":
        case "activitySchedulingOptions": getOrCreateConfiguration(target).setActivitySchedulingOptions(property(camelContext, com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions.class, value)); return true;
        case "activitythreadpoolsize":
        case "activityThreadPoolSize": getOrCreateConfiguration(target).setActivityThreadPoolSize(property(camelContext, int.class, value)); return true;
        case "activitytypeexecutionoptions":
        case "activityTypeExecutionOptions": getOrCreateConfiguration(target).setActivityTypeExecutionOptions(property(camelContext, com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeExecutionOptions.class, value)); return true;
        case "activitytyperegistrationoptions":
        case "activityTypeRegistrationOptions": getOrCreateConfiguration(target).setActivityTypeRegistrationOptions(property(camelContext, com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeRegistrationOptions.class, value)); return true;
        case "amazonswclient":
        case "amazonSWClient": getOrCreateConfiguration(target).setAmazonSWClient(property(camelContext, com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflow.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "childpolicy":
        case "childPolicy": getOrCreateConfiguration(target).setChildPolicy(property(camelContext, java.lang.String.class, value)); return true;
        case "clientconfigurationparameters":
        case "clientConfigurationParameters": getOrCreateConfiguration(target).setClientConfigurationParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.aws.swf.SWFConfiguration.class, value)); return true;
        case "dataconverter":
        case "dataConverter": getOrCreateConfiguration(target).setDataConverter(property(camelContext, com.amazonaws.services.simpleworkflow.flow.DataConverter.class, value)); return true;
        case "domainname":
        case "domainName": getOrCreateConfiguration(target).setDomainName(property(camelContext, java.lang.String.class, value)); return true;
        case "eventname":
        case "eventName": getOrCreateConfiguration(target).setEventName(property(camelContext, java.lang.String.class, value)); return true;
        case "executionstarttoclosetimeout":
        case "executionStartToCloseTimeout": getOrCreateConfiguration(target).setExecutionStartToCloseTimeout(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "operation": getOrCreateConfiguration(target).setOperation(property(camelContext, java.lang.String.class, value)); return true;
        case "region": getOrCreateConfiguration(target).setRegion(property(camelContext, java.lang.String.class, value)); return true;
        case "swclientparameters":
        case "sWClientParameters": getOrCreateConfiguration(target).setSWClientParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "secretkey":
        case "secretKey": getOrCreateConfiguration(target).setSecretKey(property(camelContext, java.lang.String.class, value)); return true;
        case "signalname":
        case "signalName": getOrCreateConfiguration(target).setSignalName(property(camelContext, java.lang.String.class, value)); return true;
        case "startworkflowoptionsparameters":
        case "startWorkflowOptionsParameters": getOrCreateConfiguration(target).setStartWorkflowOptionsParameters(property(camelContext, java.util.Map.class, value)); return true;
        case "stateresulttype":
        case "stateResultType": getOrCreateConfiguration(target).setStateResultType(property(camelContext, java.lang.String.class, value)); return true;
        case "taskstarttoclosetimeout":
        case "taskStartToCloseTimeout": getOrCreateConfiguration(target).setTaskStartToCloseTimeout(property(camelContext, java.lang.String.class, value)); return true;
        case "terminationdetails":
        case "terminationDetails": getOrCreateConfiguration(target).setTerminationDetails(property(camelContext, java.lang.String.class, value)); return true;
        case "terminationreason":
        case "terminationReason": getOrCreateConfiguration(target).setTerminationReason(property(camelContext, java.lang.String.class, value)); return true;
        case "version": getOrCreateConfiguration(target).setVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "workflowlist":
        case "workflowList": getOrCreateConfiguration(target).setWorkflowList(property(camelContext, java.lang.String.class, value)); return true;
        case "workflowtyperegistrationoptions":
        case "workflowTypeRegistrationOptions": getOrCreateConfiguration(target).setWorkflowTypeRegistrationOptions(property(camelContext, com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("accessKey", java.lang.String.class);
        answer.put("activityList", java.lang.String.class);
        answer.put("activitySchedulingOptions", com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions.class);
        answer.put("activityThreadPoolSize", int.class);
        answer.put("activityTypeExecutionOptions", com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeExecutionOptions.class);
        answer.put("activityTypeRegistrationOptions", com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeRegistrationOptions.class);
        answer.put("amazonSWClient", com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflow.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("childPolicy", java.lang.String.class);
        answer.put("clientConfigurationParameters", java.util.Map.class);
        answer.put("configuration", org.apache.camel.component.aws.swf.SWFConfiguration.class);
        answer.put("dataConverter", com.amazonaws.services.simpleworkflow.flow.DataConverter.class);
        answer.put("domainName", java.lang.String.class);
        answer.put("eventName", java.lang.String.class);
        answer.put("executionStartToCloseTimeout", java.lang.String.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("operation", java.lang.String.class);
        answer.put("region", java.lang.String.class);
        answer.put("sWClientParameters", java.util.Map.class);
        answer.put("secretKey", java.lang.String.class);
        answer.put("signalName", java.lang.String.class);
        answer.put("startWorkflowOptionsParameters", java.util.Map.class);
        answer.put("stateResultType", java.lang.String.class);
        answer.put("taskStartToCloseTimeout", java.lang.String.class);
        answer.put("terminationDetails", java.lang.String.class);
        answer.put("terminationReason", java.lang.String.class);
        answer.put("version", java.lang.String.class);
        answer.put("workflowList", java.lang.String.class);
        answer.put("workflowTypeRegistrationOptions", com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        SWFComponent target = (SWFComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesskey":
        case "accessKey": getOrCreateConfiguration(target).getAccessKey(); return true;
        case "activitylist":
        case "activityList": getOrCreateConfiguration(target).getActivityList(); return true;
        case "activityschedulingoptions":
        case "activitySchedulingOptions": getOrCreateConfiguration(target).getActivitySchedulingOptions(); return true;
        case "activitythreadpoolsize":
        case "activityThreadPoolSize": getOrCreateConfiguration(target).getActivityThreadPoolSize(); return true;
        case "activitytypeexecutionoptions":
        case "activityTypeExecutionOptions": getOrCreateConfiguration(target).getActivityTypeExecutionOptions(); return true;
        case "activitytyperegistrationoptions":
        case "activityTypeRegistrationOptions": getOrCreateConfiguration(target).getActivityTypeRegistrationOptions(); return true;
        case "amazonswclient":
        case "amazonSWClient": getOrCreateConfiguration(target).getAmazonSWClient(); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.isBasicPropertyBinding(); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.isBridgeErrorHandler(); return true;
        case "childpolicy":
        case "childPolicy": getOrCreateConfiguration(target).getChildPolicy(); return true;
        case "clientconfigurationparameters":
        case "clientConfigurationParameters": getOrCreateConfiguration(target).getClientConfigurationParameters(); return true;
        case "configuration": target.getConfiguration(); return true;
        case "dataconverter":
        case "dataConverter": getOrCreateConfiguration(target).getDataConverter(); return true;
        case "domainname":
        case "domainName": getOrCreateConfiguration(target).getDomainName(); return true;
        case "eventname":
        case "eventName": getOrCreateConfiguration(target).getEventName(); return true;
        case "executionstarttoclosetimeout":
        case "executionStartToCloseTimeout": getOrCreateConfiguration(target).getExecutionStartToCloseTimeout(); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.isLazyStartProducer(); return true;
        case "operation": getOrCreateConfiguration(target).getOperation(); return true;
        case "region": getOrCreateConfiguration(target).getRegion(); return true;
        case "swclientparameters":
        case "sWClientParameters": getOrCreateConfiguration(target).getSWClientParameters(); return true;
        case "secretkey":
        case "secretKey": getOrCreateConfiguration(target).getSecretKey(); return true;
        case "signalname":
        case "signalName": getOrCreateConfiguration(target).getSignalName(); return true;
        case "startworkflowoptionsparameters":
        case "startWorkflowOptionsParameters": getOrCreateConfiguration(target).getStartWorkflowOptionsParameters(); return true;
        case "stateresulttype":
        case "stateResultType": getOrCreateConfiguration(target).getStateResultType(); return true;
        case "taskstarttoclosetimeout":
        case "taskStartToCloseTimeout": getOrCreateConfiguration(target).getTaskStartToCloseTimeout(); return true;
        case "terminationdetails":
        case "terminationDetails": getOrCreateConfiguration(target).getTerminationDetails(); return true;
        case "terminationreason":
        case "terminationReason": getOrCreateConfiguration(target).getTerminationReason(); return true;
        case "version": getOrCreateConfiguration(target).getVersion(); return true;
        case "workflowlist":
        case "workflowList": getOrCreateConfiguration(target).getWorkflowList(); return true;
        case "workflowtyperegistrationoptions":
        case "workflowTypeRegistrationOptions": getOrCreateConfiguration(target).getWorkflowTypeRegistrationOptions(); return true;
        default: return null;
        }
    }
}

