{
  "dataformat": {
    "kind": "dataformat",
    "name": "pgp",
    "title": "PGP",
    "description": "Encrypt and decrypt messages using Java Cryptographic Extension (JCE) and PGP.",
    "deprecated": false,
    "firstVersion": "2.9.0",
    "label": "dataformat,transformation,security",
    "javaType": "org.apache.camel.converter.crypto.PGPDataFormat",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-crypto",
    "version": "3.7.0-SNAPSHOT",
    "modelName": "pgp",
    "modelJavaType": "org.apache.camel.model.dataformat.PGPDataFormat"
  },
  "properties": {
    "keyUserid": { "kind": "attribute", "displayName": "Key Userid", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "The user ID of the key in the PGP keyring used during encryption. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the user ID." },
    "signatureKeyUserid": { "kind": "attribute", "displayName": "Signature Key Userid", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "User ID of the key in the PGP keyring used for signing (during encryption) or signature verification (during decryption). During the signature verification process the specified User ID restricts the public keys from the public keyring which can be used for the verification. If no User ID is specified for the signature verficiation then any public key in the public keyring can be used for the verification. Can also be only a part of a user ID. For example, if the user ID is Test User then you can use the part Test User or to address the User ID." },
    "password": { "kind": "attribute", "displayName": "Password", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Password used when opening the private key (not used for encryption)." },
    "signaturePassword": { "kind": "attribute", "displayName": "Signature Password", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Password used when opening the private key used for signing (during encryption)." },
    "keyFileName": { "kind": "attribute", "displayName": "Key File Name", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Filename of the keyring; must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix)." },
    "signatureKeyFileName": { "kind": "attribute", "displayName": "Signature Key File Name", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Filename of the keyring to use for signing (during encryption) or for signature verification (during decryption); must be accessible as a classpath resource (but you can specify a location in the file system by using the file: prefix)." },
    "signatureKeyRing": { "kind": "attribute", "displayName": "Signature Key Ring", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Keyring used for signing\/verifying as byte array. You can not set the signatureKeyFileName and signatureKeyRing at the same time." },
    "armored": { "kind": "attribute", "displayName": "Armored", "required": false, "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "This option will cause PGP to base64 encode the encrypted text, making it available for copy\/paste, etc." },
    "integrity": { "kind": "attribute", "displayName": "Integrity", "required": false, "type": "boolean", "javaType": "java.lang.Boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Adds an integrity check\/sign into the encryption file. The default value is true." },
    "provider": { "kind": "attribute", "displayName": "Provider", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Java Cryptography Extension (JCE) provider, default is Bouncy Castle (BC). Alternatively you can use, for example, the IAIK JCE provider; in this case the provider must be registered beforehand and the Bouncy Castle provider must not be registered beforehand. The Sun JCE provider does not work." },
    "algorithm": { "kind": "attribute", "displayName": "Algorithm", "required": false, "type": "integer", "javaType": "java.lang.Integer", "deprecated": false, "autowired": false, "secret": false, "description": "Symmetric key encryption algorithm; possible values are defined in org.bouncycastle.bcpg.SymmetricKeyAlgorithmTags; for example 2 (= TRIPLE DES), 3 (= CAST5), 4 (= BLOWFISH), 6 (= DES), 7 (= AES_128). Only relevant for encrypting." },
    "compressionAlgorithm": { "kind": "attribute", "displayName": "Compression Algorithm", "required": false, "type": "integer", "javaType": "java.lang.Integer", "deprecated": false, "autowired": false, "secret": false, "description": "Compression algorithm; possible values are defined in org.bouncycastle.bcpg.CompressionAlgorithmTags; for example 0 (= UNCOMPRESSED), 1 (= ZIP), 2 (= ZLIB), 3 (= BZIP2). Only relevant for encrypting." },
    "hashAlgorithm": { "kind": "attribute", "displayName": "Hash Algorithm", "required": false, "type": "integer", "javaType": "java.lang.Integer", "deprecated": false, "autowired": false, "secret": false, "description": "Signature hash algorithm; possible values are defined in org.bouncycastle.bcpg.HashAlgorithmTags; for example 2 (= SHA1), 8 (= SHA256), 9 (= SHA384), 10 (= SHA512), 11 (=SHA224). Only relevant for signing." },
    "signatureVerificationOption": { "kind": "attribute", "displayName": "Signature Verification Option", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Controls the behavior for verifying the signature during unmarshaling. There are 4 values possible: optional: The PGP message may or may not contain signatures; if it does contain signatures, then a signature verification is executed. required: The PGP message must contain at least one signature; if this is not the case an exception (PGPException) is thrown. A signature verification is executed. ignore: Contained signatures in the PGP message are ignored; no signature verification is executed. no_signature_allowed: The PGP message must not contain a signature; otherwise an exception (PGPException) is thrown." },
    "id": { "kind": "attribute", "displayName": "Id", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "The id of this node" }
  }
}
