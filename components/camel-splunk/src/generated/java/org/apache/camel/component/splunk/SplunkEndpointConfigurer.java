/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.splunk;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class SplunkEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "app": ((SplunkEndpoint) target).getConfiguration().setApp(property(camelContext, java.lang.String.class, value)); return true;
        case "connectionTimeout": ((SplunkEndpoint) target).getConfiguration().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "host": ((SplunkEndpoint) target).getConfiguration().setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "owner": ((SplunkEndpoint) target).getConfiguration().setOwner(property(camelContext, java.lang.String.class, value)); return true;
        case "port": ((SplunkEndpoint) target).getConfiguration().setPort(property(camelContext, int.class, value)); return true;
        case "scheme": ((SplunkEndpoint) target).getConfiguration().setScheme(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeErrorHandler": ((SplunkEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "count": ((SplunkEndpoint) target).getConfiguration().setCount(property(camelContext, int.class, value)); return true;
        case "earliestTime": ((SplunkEndpoint) target).getConfiguration().setEarliestTime(property(camelContext, java.lang.String.class, value)); return true;
        case "initEarliestTime": ((SplunkEndpoint) target).getConfiguration().setInitEarliestTime(property(camelContext, java.lang.String.class, value)); return true;
        case "latestTime": ((SplunkEndpoint) target).getConfiguration().setLatestTime(property(camelContext, java.lang.String.class, value)); return true;
        case "savedSearch": ((SplunkEndpoint) target).getConfiguration().setSavedSearch(property(camelContext, java.lang.String.class, value)); return true;
        case "search": ((SplunkEndpoint) target).getConfiguration().setSearch(property(camelContext, java.lang.String.class, value)); return true;
        case "sendEmptyMessageWhenIdle": ((SplunkEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "streaming": ((SplunkEndpoint) target).getConfiguration().setStreaming(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((SplunkEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((SplunkEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollStrategy": ((SplunkEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "eventHost": ((SplunkEndpoint) target).getConfiguration().setEventHost(property(camelContext, java.lang.String.class, value)); return true;
        case "index": ((SplunkEndpoint) target).getConfiguration().setIndex(property(camelContext, java.lang.String.class, value)); return true;
        case "lazyStartProducer": ((SplunkEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "raw": ((SplunkEndpoint) target).getConfiguration().setRaw(property(camelContext, boolean.class, value)); return true;
        case "source": ((SplunkEndpoint) target).getConfiguration().setSource(property(camelContext, java.lang.String.class, value)); return true;
        case "sourceType": ((SplunkEndpoint) target).getConfiguration().setSourceType(property(camelContext, java.lang.String.class, value)); return true;
        case "tcpReceiverPort": ((SplunkEndpoint) target).getConfiguration().setTcpReceiverPort(property(camelContext, int.class, value)); return true;
        case "basicPropertyBinding": ((SplunkEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((SplunkEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backoffErrorThreshold": ((SplunkEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffIdleThreshold": ((SplunkEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffMultiplier": ((SplunkEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((SplunkEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((SplunkEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialDelay": ((SplunkEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatCount": ((SplunkEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runLoggingLevel": ((SplunkEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledExecutorService": ((SplunkEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((SplunkEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerProperties": ((SplunkEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startScheduler": ((SplunkEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeUnit": ((SplunkEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "useFixedDelay": ((SplunkEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "password": ((SplunkEndpoint) target).getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslProtocol": ((SplunkEndpoint) target).getConfiguration().setSslProtocol(property(camelContext, com.splunk.SSLSecurityProtocol.class, value)); return true;
        case "username": ((SplunkEndpoint) target).getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "useSunHttpsHandler": ((SplunkEndpoint) target).getConfiguration().setUseSunHttpsHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "app": ((SplunkEndpoint) target).getConfiguration().setApp(property(camelContext, java.lang.String.class, value)); return true;
        case "connectiontimeout": ((SplunkEndpoint) target).getConfiguration().setConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "host": ((SplunkEndpoint) target).getConfiguration().setHost(property(camelContext, java.lang.String.class, value)); return true;
        case "owner": ((SplunkEndpoint) target).getConfiguration().setOwner(property(camelContext, java.lang.String.class, value)); return true;
        case "port": ((SplunkEndpoint) target).getConfiguration().setPort(property(camelContext, int.class, value)); return true;
        case "scheme": ((SplunkEndpoint) target).getConfiguration().setScheme(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler": ((SplunkEndpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "count": ((SplunkEndpoint) target).getConfiguration().setCount(property(camelContext, int.class, value)); return true;
        case "earliesttime": ((SplunkEndpoint) target).getConfiguration().setEarliestTime(property(camelContext, java.lang.String.class, value)); return true;
        case "initearliesttime": ((SplunkEndpoint) target).getConfiguration().setInitEarliestTime(property(camelContext, java.lang.String.class, value)); return true;
        case "latesttime": ((SplunkEndpoint) target).getConfiguration().setLatestTime(property(camelContext, java.lang.String.class, value)); return true;
        case "savedsearch": ((SplunkEndpoint) target).getConfiguration().setSavedSearch(property(camelContext, java.lang.String.class, value)); return true;
        case "search": ((SplunkEndpoint) target).getConfiguration().setSearch(property(camelContext, java.lang.String.class, value)); return true;
        case "sendemptymessagewhenidle": ((SplunkEndpoint) target).setSendEmptyMessageWhenIdle(property(camelContext, boolean.class, value)); return true;
        case "streaming": ((SplunkEndpoint) target).getConfiguration().setStreaming(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((SplunkEndpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((SplunkEndpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "pollstrategy": ((SplunkEndpoint) target).setPollStrategy(property(camelContext, org.apache.camel.spi.PollingConsumerPollStrategy.class, value)); return true;
        case "eventhost": ((SplunkEndpoint) target).getConfiguration().setEventHost(property(camelContext, java.lang.String.class, value)); return true;
        case "index": ((SplunkEndpoint) target).getConfiguration().setIndex(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer": ((SplunkEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "raw": ((SplunkEndpoint) target).getConfiguration().setRaw(property(camelContext, boolean.class, value)); return true;
        case "source": ((SplunkEndpoint) target).getConfiguration().setSource(property(camelContext, java.lang.String.class, value)); return true;
        case "sourcetype": ((SplunkEndpoint) target).getConfiguration().setSourceType(property(camelContext, java.lang.String.class, value)); return true;
        case "tcpreceiverport": ((SplunkEndpoint) target).getConfiguration().setTcpReceiverPort(property(camelContext, int.class, value)); return true;
        case "basicpropertybinding": ((SplunkEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((SplunkEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "backofferrorthreshold": ((SplunkEndpoint) target).setBackoffErrorThreshold(property(camelContext, int.class, value)); return true;
        case "backoffidlethreshold": ((SplunkEndpoint) target).setBackoffIdleThreshold(property(camelContext, int.class, value)); return true;
        case "backoffmultiplier": ((SplunkEndpoint) target).setBackoffMultiplier(property(camelContext, int.class, value)); return true;
        case "delay": ((SplunkEndpoint) target).setDelay(property(camelContext, long.class, value)); return true;
        case "greedy": ((SplunkEndpoint) target).setGreedy(property(camelContext, boolean.class, value)); return true;
        case "initialdelay": ((SplunkEndpoint) target).setInitialDelay(property(camelContext, long.class, value)); return true;
        case "repeatcount": ((SplunkEndpoint) target).setRepeatCount(property(camelContext, long.class, value)); return true;
        case "runlogginglevel": ((SplunkEndpoint) target).setRunLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "scheduledexecutorservice": ((SplunkEndpoint) target).setScheduledExecutorService(property(camelContext, java.util.concurrent.ScheduledExecutorService.class, value)); return true;
        case "scheduler": ((SplunkEndpoint) target).setScheduler(property(camelContext, java.lang.String.class, value)); return true;
        case "schedulerproperties": ((SplunkEndpoint) target).setSchedulerProperties(property(camelContext, java.util.Map.class, value)); return true;
        case "startscheduler": ((SplunkEndpoint) target).setStartScheduler(property(camelContext, boolean.class, value)); return true;
        case "timeunit": ((SplunkEndpoint) target).setTimeUnit(property(camelContext, java.util.concurrent.TimeUnit.class, value)); return true;
        case "usefixeddelay": ((SplunkEndpoint) target).setUseFixedDelay(property(camelContext, boolean.class, value)); return true;
        case "password": ((SplunkEndpoint) target).getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "sslprotocol": ((SplunkEndpoint) target).getConfiguration().setSslProtocol(property(camelContext, com.splunk.SSLSecurityProtocol.class, value)); return true;
        case "username": ((SplunkEndpoint) target).getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "usesunhttpshandler": ((SplunkEndpoint) target).getConfiguration().setUseSunHttpsHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

