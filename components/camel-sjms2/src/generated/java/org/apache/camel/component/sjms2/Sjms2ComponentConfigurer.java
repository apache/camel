/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.sjms2;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class Sjms2ComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "connectionFactory": ((Sjms2Component) target).setConnectionFactory(property(camelContext, javax.jms.ConnectionFactory.class, value)); return true;
        case "connectionResource": ((Sjms2Component) target).setConnectionResource(property(camelContext, org.apache.camel.component.sjms.jms.ConnectionResource.class, value)); return true;
        case "connectionCount": ((Sjms2Component) target).setConnectionCount(property(camelContext, java.lang.Integer.class, value)); return true;
        case "jmsKeyFormatStrategy": ((Sjms2Component) target).setJmsKeyFormatStrategy(property(camelContext, org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy.class, value)); return true;
        case "transactionCommitStrategy": ((Sjms2Component) target).setTransactionCommitStrategy(property(camelContext, org.apache.camel.component.sjms.TransactionCommitStrategy.class, value)); return true;
        case "destinationCreationStrategy": ((Sjms2Component) target).setDestinationCreationStrategy(property(camelContext, org.apache.camel.component.sjms.jms.DestinationCreationStrategy.class, value)); return true;
        case "timedTaskManager": ((Sjms2Component) target).setTimedTaskManager(property(camelContext, org.apache.camel.component.sjms.taskmanager.TimedTaskManager.class, value)); return true;
        case "messageCreatedStrategy": ((Sjms2Component) target).setMessageCreatedStrategy(property(camelContext, org.apache.camel.component.sjms.jms.MessageCreatedStrategy.class, value)); return true;
        case "connectionTestOnBorrow": ((Sjms2Component) target).setConnectionTestOnBorrow(property(camelContext, boolean.class, value)); return true;
        case "connectionUsername": ((Sjms2Component) target).setConnectionUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "connectionPassword": ((Sjms2Component) target).setConnectionPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "connectionClientId": ((Sjms2Component) target).setConnectionClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "connectionMaxWait": ((Sjms2Component) target).setConnectionMaxWait(property(camelContext, long.class, value)); return true;
        case "headerFilterStrategy": ((Sjms2Component) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicPropertyBinding": ((Sjms2Component) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazyStartProducer": ((Sjms2Component) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeErrorHandler": ((Sjms2Component) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "connectionfactory": ((Sjms2Component) target).setConnectionFactory(property(camelContext, javax.jms.ConnectionFactory.class, value)); return true;
        case "connectionresource": ((Sjms2Component) target).setConnectionResource(property(camelContext, org.apache.camel.component.sjms.jms.ConnectionResource.class, value)); return true;
        case "connectioncount": ((Sjms2Component) target).setConnectionCount(property(camelContext, java.lang.Integer.class, value)); return true;
        case "jmskeyformatstrategy": ((Sjms2Component) target).setJmsKeyFormatStrategy(property(camelContext, org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy.class, value)); return true;
        case "transactioncommitstrategy": ((Sjms2Component) target).setTransactionCommitStrategy(property(camelContext, org.apache.camel.component.sjms.TransactionCommitStrategy.class, value)); return true;
        case "destinationcreationstrategy": ((Sjms2Component) target).setDestinationCreationStrategy(property(camelContext, org.apache.camel.component.sjms.jms.DestinationCreationStrategy.class, value)); return true;
        case "timedtaskmanager": ((Sjms2Component) target).setTimedTaskManager(property(camelContext, org.apache.camel.component.sjms.taskmanager.TimedTaskManager.class, value)); return true;
        case "messagecreatedstrategy": ((Sjms2Component) target).setMessageCreatedStrategy(property(camelContext, org.apache.camel.component.sjms.jms.MessageCreatedStrategy.class, value)); return true;
        case "connectiontestonborrow": ((Sjms2Component) target).setConnectionTestOnBorrow(property(camelContext, boolean.class, value)); return true;
        case "connectionusername": ((Sjms2Component) target).setConnectionUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "connectionpassword": ((Sjms2Component) target).setConnectionPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "connectionclientid": ((Sjms2Component) target).setConnectionClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "connectionmaxwait": ((Sjms2Component) target).setConnectionMaxWait(property(camelContext, long.class, value)); return true;
        case "headerfilterstrategy": ((Sjms2Component) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "basicpropertybinding": ((Sjms2Component) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "lazystartproducer": ((Sjms2Component) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler": ((Sjms2Component) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

