/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.sjms2;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class Sjms2EndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "acknowledgementMode": ((Sjms2Endpoint) target).setAcknowledgementMode(property(camelContext, org.apache.camel.component.sjms.jms.SessionAcknowledgementType.class, value)); return true;
        case "bridgeErrorHandler": ((Sjms2Endpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "consumerCount": ((Sjms2Endpoint) target).setConsumerCount(property(camelContext, int.class, value)); return true;
        case "durable": ((Sjms2Endpoint) target).setDurable(property(camelContext, boolean.class, value)); return true;
        case "durableSubscriptionId": ((Sjms2Endpoint) target).setDurableSubscriptionId(property(camelContext, java.lang.String.class, value)); return true;
        case "shared": ((Sjms2Endpoint) target).setShared(property(camelContext, boolean.class, value)); return true;
        case "subscriptionId": ((Sjms2Endpoint) target).setSubscriptionId(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((Sjms2Endpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "exceptionHandler": ((Sjms2Endpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangePattern": ((Sjms2Endpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "messageSelector": ((Sjms2Endpoint) target).setMessageSelector(property(camelContext, java.lang.String.class, value)); return true;
        case "lazyStartProducer": ((Sjms2Endpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "namedReplyTo": ((Sjms2Endpoint) target).setNamedReplyTo(property(camelContext, java.lang.String.class, value)); return true;
        case "persistent": ((Sjms2Endpoint) target).setPersistent(property(camelContext, boolean.class, value)); return true;
        case "producerCount": ((Sjms2Endpoint) target).setProducerCount(property(camelContext, int.class, value)); return true;
        case "ttl": ((Sjms2Endpoint) target).setTtl(property(camelContext, long.class, value)); return true;
        case "allowNullBody": ((Sjms2Endpoint) target).setAllowNullBody(property(camelContext, boolean.class, value)); return true;
        case "prefillPool": ((Sjms2Endpoint) target).setPrefillPool(property(camelContext, boolean.class, value)); return true;
        case "responseTimeOut": ((Sjms2Endpoint) target).setResponseTimeOut(property(camelContext, long.class, value)); return true;
        case "asyncStartListener": ((Sjms2Endpoint) target).setAsyncStartListener(property(camelContext, boolean.class, value)); return true;
        case "asyncStopListener": ((Sjms2Endpoint) target).setAsyncStopListener(property(camelContext, boolean.class, value)); return true;
        case "basicPropertyBinding": ((Sjms2Endpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "connectionCount": ((Sjms2Endpoint) target).setConnectionCount(property(camelContext, java.lang.Integer.class, value)); return true;
        case "connectionFactory": ((Sjms2Endpoint) target).setConnectionFactory(property(camelContext, javax.jms.ConnectionFactory.class, value)); return true;
        case "connectionResource": ((Sjms2Endpoint) target).setConnectionResource(property(camelContext, org.apache.camel.component.sjms.jms.ConnectionResource.class, value)); return true;
        case "destinationCreationStrategy": ((Sjms2Endpoint) target).setDestinationCreationStrategy(property(camelContext, org.apache.camel.component.sjms.jms.DestinationCreationStrategy.class, value)); return true;
        case "exceptionListener": ((Sjms2Endpoint) target).setExceptionListener(property(camelContext, javax.jms.ExceptionListener.class, value)); return true;
        case "headerFilterStrategy": ((Sjms2Endpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "includeAllJMSXProperties": ((Sjms2Endpoint) target).setIncludeAllJMSXProperties(property(camelContext, boolean.class, value)); return true;
        case "jmsKeyFormatStrategy": ((Sjms2Endpoint) target).setJmsKeyFormatStrategy(property(camelContext, org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy.class, value)); return true;
        case "mapJmsMessage": ((Sjms2Endpoint) target).setMapJmsMessage(property(camelContext, boolean.class, value)); return true;
        case "messageCreatedStrategy": ((Sjms2Endpoint) target).setMessageCreatedStrategy(property(camelContext, org.apache.camel.component.sjms.jms.MessageCreatedStrategy.class, value)); return true;
        case "errorHandlerLoggingLevel": ((Sjms2Endpoint) target).setErrorHandlerLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "errorHandlerLogStackTrace": ((Sjms2Endpoint) target).setErrorHandlerLogStackTrace(property(camelContext, boolean.class, value)); return true;
        case "transacted": ((Sjms2Endpoint) target).setTransacted(property(camelContext, boolean.class, value)); return true;
        case "transactionBatchCount": ((Sjms2Endpoint) target).setTransactionBatchCount(property(camelContext, int.class, value)); return true;
        case "transactionBatchTimeout": ((Sjms2Endpoint) target).setTransactionBatchTimeout(property(camelContext, long.class, value)); return true;
        case "transactionCommitStrategy": ((Sjms2Endpoint) target).setTransactionCommitStrategy(property(camelContext, org.apache.camel.component.sjms.TransactionCommitStrategy.class, value)); return true;
        case "sharedJMSSession": ((Sjms2Endpoint) target).setSharedJMSSession(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "acknowledgementmode": ((Sjms2Endpoint) target).setAcknowledgementMode(property(camelContext, org.apache.camel.component.sjms.jms.SessionAcknowledgementType.class, value)); return true;
        case "bridgeerrorhandler": ((Sjms2Endpoint) target).setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "consumercount": ((Sjms2Endpoint) target).setConsumerCount(property(camelContext, int.class, value)); return true;
        case "durable": ((Sjms2Endpoint) target).setDurable(property(camelContext, boolean.class, value)); return true;
        case "durablesubscriptionid": ((Sjms2Endpoint) target).setDurableSubscriptionId(property(camelContext, java.lang.String.class, value)); return true;
        case "shared": ((Sjms2Endpoint) target).setShared(property(camelContext, boolean.class, value)); return true;
        case "subscriptionid": ((Sjms2Endpoint) target).setSubscriptionId(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": ((Sjms2Endpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "exceptionhandler": ((Sjms2Endpoint) target).setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern": ((Sjms2Endpoint) target).setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "messageselector": ((Sjms2Endpoint) target).setMessageSelector(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer": ((Sjms2Endpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "namedreplyto": ((Sjms2Endpoint) target).setNamedReplyTo(property(camelContext, java.lang.String.class, value)); return true;
        case "persistent": ((Sjms2Endpoint) target).setPersistent(property(camelContext, boolean.class, value)); return true;
        case "producercount": ((Sjms2Endpoint) target).setProducerCount(property(camelContext, int.class, value)); return true;
        case "ttl": ((Sjms2Endpoint) target).setTtl(property(camelContext, long.class, value)); return true;
        case "allownullbody": ((Sjms2Endpoint) target).setAllowNullBody(property(camelContext, boolean.class, value)); return true;
        case "prefillpool": ((Sjms2Endpoint) target).setPrefillPool(property(camelContext, boolean.class, value)); return true;
        case "responsetimeout": ((Sjms2Endpoint) target).setResponseTimeOut(property(camelContext, long.class, value)); return true;
        case "asyncstartlistener": ((Sjms2Endpoint) target).setAsyncStartListener(property(camelContext, boolean.class, value)); return true;
        case "asyncstoplistener": ((Sjms2Endpoint) target).setAsyncStopListener(property(camelContext, boolean.class, value)); return true;
        case "basicpropertybinding": ((Sjms2Endpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "connectioncount": ((Sjms2Endpoint) target).setConnectionCount(property(camelContext, java.lang.Integer.class, value)); return true;
        case "connectionfactory": ((Sjms2Endpoint) target).setConnectionFactory(property(camelContext, javax.jms.ConnectionFactory.class, value)); return true;
        case "connectionresource": ((Sjms2Endpoint) target).setConnectionResource(property(camelContext, org.apache.camel.component.sjms.jms.ConnectionResource.class, value)); return true;
        case "destinationcreationstrategy": ((Sjms2Endpoint) target).setDestinationCreationStrategy(property(camelContext, org.apache.camel.component.sjms.jms.DestinationCreationStrategy.class, value)); return true;
        case "exceptionlistener": ((Sjms2Endpoint) target).setExceptionListener(property(camelContext, javax.jms.ExceptionListener.class, value)); return true;
        case "headerfilterstrategy": ((Sjms2Endpoint) target).setHeaderFilterStrategy(property(camelContext, org.apache.camel.spi.HeaderFilterStrategy.class, value)); return true;
        case "includealljmsxproperties": ((Sjms2Endpoint) target).setIncludeAllJMSXProperties(property(camelContext, boolean.class, value)); return true;
        case "jmskeyformatstrategy": ((Sjms2Endpoint) target).setJmsKeyFormatStrategy(property(camelContext, org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy.class, value)); return true;
        case "mapjmsmessage": ((Sjms2Endpoint) target).setMapJmsMessage(property(camelContext, boolean.class, value)); return true;
        case "messagecreatedstrategy": ((Sjms2Endpoint) target).setMessageCreatedStrategy(property(camelContext, org.apache.camel.component.sjms.jms.MessageCreatedStrategy.class, value)); return true;
        case "errorhandlerlogginglevel": ((Sjms2Endpoint) target).setErrorHandlerLoggingLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "errorhandlerlogstacktrace": ((Sjms2Endpoint) target).setErrorHandlerLogStackTrace(property(camelContext, boolean.class, value)); return true;
        case "transacted": ((Sjms2Endpoint) target).setTransacted(property(camelContext, boolean.class, value)); return true;
        case "transactionbatchcount": ((Sjms2Endpoint) target).setTransactionBatchCount(property(camelContext, int.class, value)); return true;
        case "transactionbatchtimeout": ((Sjms2Endpoint) target).setTransactionBatchTimeout(property(camelContext, long.class, value)); return true;
        case "transactioncommitstrategy": ((Sjms2Endpoint) target).setTransactionCommitStrategy(property(camelContext, org.apache.camel.component.sjms.TransactionCommitStrategy.class, value)); return true;
        case "sharedjmssession": ((Sjms2Endpoint) target).setSharedJMSSession(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

