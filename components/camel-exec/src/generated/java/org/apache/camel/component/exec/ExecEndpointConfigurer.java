/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.exec;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ExecEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("executable", java.lang.String.class);
        map.put("args", java.lang.String.class);
        map.put("binding", org.apache.camel.component.exec.ExecBinding.class);
        map.put("commandExecutor", org.apache.camel.component.exec.ExecCommandExecutor.class);
        map.put("commandLogLevel", org.apache.camel.LoggingLevel.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("outFile", java.lang.String.class);
        map.put("timeout", long.class);
        map.put("useStderrOnEmptyStdout", boolean.class);
        map.put("workingDir", java.lang.String.class);
        map.put("basicPropertyBinding", boolean.class);
        map.put("synchronous", boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        ExecEndpoint target = (ExecEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "args": target.setArgs(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "binding": target.setBinding(property(camelContext, org.apache.camel.component.exec.ExecBinding.class, value)); return true;
        case "commandexecutor":
        case "commandExecutor": target.setCommandExecutor(property(camelContext, org.apache.camel.component.exec.ExecCommandExecutor.class, value)); return true;
        case "commandloglevel":
        case "commandLogLevel": target.setCommandLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "outfile":
        case "outFile": target.setOutFile(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "timeout": target.setTimeout(property(camelContext, java.time.Duration.class, value).toMillis()); return true;
        case "usestderronemptystdout":
        case "useStderrOnEmptyStdout": target.setUseStderrOnEmptyStdout(property(camelContext, boolean.class, value)); return true;
        case "workingdir":
        case "workingDir": target.setWorkingDir(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        ExecEndpoint target = (ExecEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "args": return target.getArgs();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "binding": return target.getBinding();
        case "commandexecutor":
        case "commandExecutor": return target.getCommandExecutor();
        case "commandloglevel":
        case "commandLogLevel": return target.getCommandLogLevel();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "outfile":
        case "outFile": return target.getOutFile();
        case "synchronous": return target.isSynchronous();
        case "timeout": return target.getTimeout();
        case "usestderronemptystdout":
        case "useStderrOnEmptyStdout": return target.isUseStderrOnEmptyStdout();
        case "workingdir":
        case "workingDir": return target.getWorkingDir();
        default: return null;
        }
    }
}

