/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.exec;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class ExecEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        if (ignoreCase) {
            return doConfigureIgnoreCase(camelContext, target, name, value);
        } else {
            return doConfigure(camelContext, target, name, value);
        }
    }

    private static boolean doConfigure(CamelContext camelContext, Object target, String name, Object value) {
        switch (name) {
        case "args": ((ExecEndpoint) target).setArgs(property(camelContext, java.lang.String.class, value)); return true;
        case "binding": ((ExecEndpoint) target).setBinding(property(camelContext, org.apache.camel.component.exec.ExecBinding.class, value)); return true;
        case "commandExecutor": ((ExecEndpoint) target).setCommandExecutor(property(camelContext, org.apache.camel.component.exec.ExecCommandExecutor.class, value)); return true;
        case "commandLogLevel": ((ExecEndpoint) target).setCommandLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "lazyStartProducer": ((ExecEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "outFile": ((ExecEndpoint) target).setOutFile(property(camelContext, java.lang.String.class, value)); return true;
        case "timeout": ((ExecEndpoint) target).setTimeout(property(camelContext, long.class, value)); return true;
        case "useStderrOnEmptyStdout": ((ExecEndpoint) target).setUseStderrOnEmptyStdout(property(camelContext, boolean.class, value)); return true;
        case "workingDir": ((ExecEndpoint) target).setWorkingDir(property(camelContext, java.lang.String.class, value)); return true;
        case "basicPropertyBinding": ((ExecEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((ExecEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

    private static boolean doConfigureIgnoreCase(CamelContext camelContext, Object target, String name, Object value) {
        switch (name.toLowerCase()) {
        case "args": ((ExecEndpoint) target).setArgs(property(camelContext, java.lang.String.class, value)); return true;
        case "binding": ((ExecEndpoint) target).setBinding(property(camelContext, org.apache.camel.component.exec.ExecBinding.class, value)); return true;
        case "commandexecutor": ((ExecEndpoint) target).setCommandExecutor(property(camelContext, org.apache.camel.component.exec.ExecCommandExecutor.class, value)); return true;
        case "commandloglevel": ((ExecEndpoint) target).setCommandLogLevel(property(camelContext, org.apache.camel.LoggingLevel.class, value)); return true;
        case "lazystartproducer": ((ExecEndpoint) target).setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "outfile": ((ExecEndpoint) target).setOutFile(property(camelContext, java.lang.String.class, value)); return true;
        case "timeout": ((ExecEndpoint) target).setTimeout(property(camelContext, long.class, value)); return true;
        case "usestderronemptystdout": ((ExecEndpoint) target).setUseStderrOnEmptyStdout(property(camelContext, boolean.class, value)); return true;
        case "workingdir": ((ExecEndpoint) target).setWorkingDir(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding": ((ExecEndpoint) target).setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "synchronous": ((ExecEndpoint) target).setSynchronous(property(camelContext, boolean.class, value)); return true;
            default: return false;
        }
    }

}

