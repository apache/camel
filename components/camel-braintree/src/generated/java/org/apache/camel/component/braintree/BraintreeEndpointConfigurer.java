/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.braintree;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class BraintreeEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("apiName", org.apache.camel.component.braintree.internal.BraintreeApiName.class);
        map.put("methodName", java.lang.String.class);
        map.put("environment", java.lang.String.class);
        map.put("inBody", java.lang.String.class);
        map.put("lazyStartProducer", boolean.class);
        map.put("merchantId", java.lang.String.class);
        map.put("httpReadTimeout", java.lang.Integer.class);
        map.put("synchronous", boolean.class);
        map.put("httpLogLevel", java.lang.String.class);
        map.put("httpLogName", java.lang.String.class);
        map.put("logHandlerEnabled", boolean.class);
        map.put("proxyHost", java.lang.String.class);
        map.put("proxyPort", java.lang.Integer.class);
        map.put("accessToken", java.lang.String.class);
        map.put("privateKey", java.lang.String.class);
        map.put("publicKey", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        BraintreeEndpoint target = (BraintreeEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesstoken":
        case "accessToken": target.getConfiguration().setAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "environment": target.getConfiguration().setEnvironment(property(camelContext, java.lang.String.class, value)); return true;
        case "httploglevel":
        case "httpLogLevel": target.getConfiguration().setHttpLogLevel(property(camelContext, java.lang.String.class, value)); return true;
        case "httplogname":
        case "httpLogName": target.getConfiguration().setHttpLogName(property(camelContext, java.lang.String.class, value)); return true;
        case "httpreadtimeout":
        case "httpReadTimeout": target.getConfiguration().setHttpReadTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "inbody":
        case "inBody": target.setInBody(property(camelContext, java.lang.String.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "loghandlerenabled":
        case "logHandlerEnabled": target.getConfiguration().setLogHandlerEnabled(property(camelContext, boolean.class, value)); return true;
        case "merchantid":
        case "merchantId": target.getConfiguration().setMerchantId(property(camelContext, java.lang.String.class, value)); return true;
        case "privatekey":
        case "privateKey": target.getConfiguration().setPrivateKey(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyhost":
        case "proxyHost": target.getConfiguration().setProxyHost(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyport":
        case "proxyPort": target.getConfiguration().setProxyPort(property(camelContext, java.lang.Integer.class, value)); return true;
        case "publickey":
        case "publicKey": target.getConfiguration().setPublicKey(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesstoken":
        case "accessToken": return java.lang.String.class;
        case "environment": return java.lang.String.class;
        case "httploglevel":
        case "httpLogLevel": return java.lang.String.class;
        case "httplogname":
        case "httpLogName": return java.lang.String.class;
        case "httpreadtimeout":
        case "httpReadTimeout": return java.lang.Integer.class;
        case "inbody":
        case "inBody": return java.lang.String.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "loghandlerenabled":
        case "logHandlerEnabled": return boolean.class;
        case "merchantid":
        case "merchantId": return java.lang.String.class;
        case "privatekey":
        case "privateKey": return java.lang.String.class;
        case "proxyhost":
        case "proxyHost": return java.lang.String.class;
        case "proxyport":
        case "proxyPort": return java.lang.Integer.class;
        case "publickey":
        case "publicKey": return java.lang.String.class;
        case "synchronous": return boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        BraintreeEndpoint target = (BraintreeEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesstoken":
        case "accessToken": return target.getConfiguration().getAccessToken();
        case "environment": return target.getConfiguration().getEnvironment();
        case "httploglevel":
        case "httpLogLevel": return target.getConfiguration().getHttpLogLevel();
        case "httplogname":
        case "httpLogName": return target.getConfiguration().getHttpLogName();
        case "httpreadtimeout":
        case "httpReadTimeout": return target.getConfiguration().getHttpReadTimeout();
        case "inbody":
        case "inBody": return target.getInBody();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "loghandlerenabled":
        case "logHandlerEnabled": return target.getConfiguration().isLogHandlerEnabled();
        case "merchantid":
        case "merchantId": return target.getConfiguration().getMerchantId();
        case "privatekey":
        case "privateKey": return target.getConfiguration().getPrivateKey();
        case "proxyhost":
        case "proxyHost": return target.getConfiguration().getProxyHost();
        case "proxyport":
        case "proxyPort": return target.getConfiguration().getProxyPort();
        case "publickey":
        case "publicKey": return target.getConfiguration().getPublicKey();
        case "synchronous": return target.isSynchronous();
        default: return null;
        }
    }
}

