/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.braintree;

import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class BraintreeEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":apiName/methodName";

    private static final Set<String> PROPERTY_NAMES;
    static {
        Set<String> set = new HashSet<>(46);
        set.add("apiName");
        set.add("methodName");
        set.add("environment");
        set.add("inBody");
        set.add("lazyStartProducer");
        set.add("merchantId");
        set.add("basicPropertyBinding");
        set.add("httpReadTimeout");
        set.add("synchronous");
        set.add("httpLogLevel");
        set.add("httpLogName");
        set.add("logHandlerEnabled");
        set.add("proxyHost");
        set.add("proxyPort");
        set.add("accessToken");
        set.add("privateKey");
        set.add("publicKey");
        set.add("amount");
        set.add("associationFilterId");
        set.add("challenge");
        set.add("cloneRequest");
        set.add("content");
        set.add("currencyRequest");
        set.add("customerId");
        set.add("deleteRequest");
        set.add("disputeId");
        set.add("documentId");
        set.add("evidenceId");
        set.add("fileEvidenceRequest");
        set.add("grantRequest");
        set.add("groupByCustomField");
        set.add("id");
        set.add("page");
        set.add("payload");
        set.add("paymentMethodNonce");
        set.add("paymentMethodToken");
        set.add("query");
        set.add("refundRequest");
        set.add("request");
        set.add("searchRequest");
        set.add("settlementDate");
        set.add("signature");
        set.add("submitForSettlement");
        set.add("subscriptionId");
        set.add("textEvidenceRequest");
        set.add("token");
        PROPERTY_NAMES = set;
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "braintree".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "apiName", null, true, copy);
        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

