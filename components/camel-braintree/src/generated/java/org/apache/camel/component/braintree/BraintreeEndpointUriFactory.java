/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.braintree;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class BraintreeEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":apiName/methodName";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "accessToken", "amount", "apiName", "associationFilterId", "challenge", "cloneRequest", "content",
            "currencyRequest", "customerId", "deleteRequest", "disputeId", "documentId", "environment", "evidenceId",
            "fileEvidenceRequest", "grantRequest", "groupByCustomField", "httpLogLevel", "httpLogName", "httpReadTimeout",
            "id", "inBody", "lazyStartProducer", "logHandlerEnabled", "merchantId", "methodName", "page", "payload",
            "paymentMethodNonce", "paymentMethodToken", "privateKey", "proxyHost", "proxyPort", "publicKey", "query",
            "refundRequest", "request", "searchRequest", "settlementDate", "signature", "submitForSettlement",
            "subscriptionId", "textEvidenceRequest", "token");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "accessToken", "privateKey", "publicKey");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of();

    @Override
    public boolean isEnabled(String scheme) {
        return "braintree".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "apiName", null, true, copy);
        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

