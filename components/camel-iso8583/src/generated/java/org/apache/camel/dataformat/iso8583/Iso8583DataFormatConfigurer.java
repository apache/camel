/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.dataformat.iso8583;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.dataformat.iso8583.Iso8583DataFormat;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class Iso8583DataFormatConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("ConfigFile", java.lang.String.class);
        map.put("IsoType", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        Iso8583DataFormat target = (Iso8583DataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "configfile":
        case "configFile": target.setConfigFile(property(camelContext, java.lang.String.class, value)); return true;
        case "isotype":
        case "isoType": target.setIsoType(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "configfile":
        case "configFile": return java.lang.String.class;
        case "isotype":
        case "isoType": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        Iso8583DataFormat target = (Iso8583DataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "configfile":
        case "configFile": return target.getConfigFile();
        case "isotype":
        case "isoType": return target.getIsoType();
        default: return null;
        }
    }
}

