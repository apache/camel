/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.dataformat.univocity;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class UniVocityFixedWidthDataFormatConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer {

    @Override
    public boolean configure(CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase) {
        UniVocityFixedWidthDataFormat dataformat = (UniVocityFixedWidthDataFormat) target;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "skiptrailingcharsuntilnewline":
        case "skipTrailingCharsUntilNewline": dataformat.setSkipTrailingCharsUntilNewline(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "recordendsonnewline":
        case "recordEndsOnNewline": dataformat.setRecordEndsOnNewline(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "padding": dataformat.setPadding(property(camelContext, java.lang.Character.class, value)); return true;
        case "nullvalue":
        case "nullValue": dataformat.setNullValue(property(camelContext, java.lang.String.class, value)); return true;
        case "skipemptylines":
        case "skipEmptyLines": dataformat.setSkipEmptyLines(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "ignoretrailingwhitespaces":
        case "ignoreTrailingWhitespaces": dataformat.setIgnoreTrailingWhitespaces(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "ignoreleadingwhitespaces":
        case "ignoreLeadingWhitespaces": dataformat.setIgnoreLeadingWhitespaces(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "headersdisabled":
        case "headersDisabled": dataformat.setHeadersDisabled(property(camelContext, boolean.class, value)); return true;
        case "headerextractionenabled":
        case "headerExtractionEnabled": dataformat.setHeaderExtractionEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "numberofrecordstoread":
        case "numberOfRecordsToRead": dataformat.setNumberOfRecordsToRead(property(camelContext, java.lang.Integer.class, value)); return true;
        case "emptyvalue":
        case "emptyValue": dataformat.setEmptyValue(property(camelContext, java.lang.String.class, value)); return true;
        case "lineseparator":
        case "lineSeparator": dataformat.setLineSeparator(property(camelContext, java.lang.String.class, value)); return true;
        case "normalizedlineseparator":
        case "normalizedLineSeparator": dataformat.setNormalizedLineSeparator(property(camelContext, java.lang.Character.class, value)); return true;
        case "comment": dataformat.setComment(property(camelContext, java.lang.Character.class, value)); return true;
        case "lazyload":
        case "lazyLoad": dataformat.setLazyLoad(property(camelContext, boolean.class, value)); return true;
        case "asmap":
        case "asMap": dataformat.setAsMap(property(camelContext, boolean.class, value)); return true;
        default: return false;
        }
    }

}

