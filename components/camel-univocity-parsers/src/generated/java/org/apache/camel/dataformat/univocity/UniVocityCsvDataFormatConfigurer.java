/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.dataformat.univocity;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.dataformat.univocity.UniVocityCsvDataFormat;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.PackageDataFormatMojo")
@SuppressWarnings("unchecked")
public class UniVocityCsvDataFormatConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("AsMap", boolean.class);
        map.put("Comment", java.lang.Character.class);
        map.put("Delimiter", java.lang.Character.class);
        map.put("EmptyValue", java.lang.String.class);
        map.put("HeaderExtractionEnabled", java.lang.Boolean.class);
        map.put("HeadersDisabled", boolean.class);
        map.put("IgnoreLeadingWhitespaces", java.lang.Boolean.class);
        map.put("IgnoreTrailingWhitespaces", java.lang.Boolean.class);
        map.put("LazyLoad", boolean.class);
        map.put("LineSeparator", java.lang.String.class);
        map.put("NormalizedLineSeparator", java.lang.Character.class);
        map.put("NullValue", java.lang.String.class);
        map.put("NumberOfRecordsToRead", java.lang.Integer.class);
        map.put("Quote", java.lang.Character.class);
        map.put("QuoteAllFields", java.lang.Boolean.class);
        map.put("QuoteEscape", java.lang.Character.class);
        map.put("SkipEmptyLines", java.lang.Boolean.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        UniVocityCsvDataFormat target = (UniVocityCsvDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "asmap":
        case "asMap": target.setAsMap(property(camelContext, boolean.class, value)); return true;
        case "comment": target.setComment(property(camelContext, java.lang.Character.class, value)); return true;
        case "delimiter": target.setDelimiter(property(camelContext, java.lang.Character.class, value)); return true;
        case "emptyvalue":
        case "emptyValue": target.setEmptyValue(property(camelContext, java.lang.String.class, value)); return true;
        case "headerextractionenabled":
        case "headerExtractionEnabled": target.setHeaderExtractionEnabled(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "headersdisabled":
        case "headersDisabled": target.setHeadersDisabled(property(camelContext, boolean.class, value)); return true;
        case "ignoreleadingwhitespaces":
        case "ignoreLeadingWhitespaces": target.setIgnoreLeadingWhitespaces(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "ignoretrailingwhitespaces":
        case "ignoreTrailingWhitespaces": target.setIgnoreTrailingWhitespaces(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "lazyload":
        case "lazyLoad": target.setLazyLoad(property(camelContext, boolean.class, value)); return true;
        case "lineseparator":
        case "lineSeparator": target.setLineSeparator(property(camelContext, java.lang.String.class, value)); return true;
        case "normalizedlineseparator":
        case "normalizedLineSeparator": target.setNormalizedLineSeparator(property(camelContext, java.lang.Character.class, value)); return true;
        case "nullvalue":
        case "nullValue": target.setNullValue(property(camelContext, java.lang.String.class, value)); return true;
        case "numberofrecordstoread":
        case "numberOfRecordsToRead": target.setNumberOfRecordsToRead(property(camelContext, java.lang.Integer.class, value)); return true;
        case "quote": target.setQuote(property(camelContext, java.lang.Character.class, value)); return true;
        case "quoteallfields":
        case "quoteAllFields": target.setQuoteAllFields(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "quoteescape":
        case "quoteEscape": target.setQuoteEscape(property(camelContext, java.lang.Character.class, value)); return true;
        case "skipemptylines":
        case "skipEmptyLines": target.setSkipEmptyLines(property(camelContext, java.lang.Boolean.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "asmap":
        case "asMap": return boolean.class;
        case "comment": return java.lang.Character.class;
        case "delimiter": return java.lang.Character.class;
        case "emptyvalue":
        case "emptyValue": return java.lang.String.class;
        case "headerextractionenabled":
        case "headerExtractionEnabled": return java.lang.Boolean.class;
        case "headersdisabled":
        case "headersDisabled": return boolean.class;
        case "ignoreleadingwhitespaces":
        case "ignoreLeadingWhitespaces": return java.lang.Boolean.class;
        case "ignoretrailingwhitespaces":
        case "ignoreTrailingWhitespaces": return java.lang.Boolean.class;
        case "lazyload":
        case "lazyLoad": return boolean.class;
        case "lineseparator":
        case "lineSeparator": return java.lang.String.class;
        case "normalizedlineseparator":
        case "normalizedLineSeparator": return java.lang.Character.class;
        case "nullvalue":
        case "nullValue": return java.lang.String.class;
        case "numberofrecordstoread":
        case "numberOfRecordsToRead": return java.lang.Integer.class;
        case "quote": return java.lang.Character.class;
        case "quoteallfields":
        case "quoteAllFields": return java.lang.Boolean.class;
        case "quoteescape":
        case "quoteEscape": return java.lang.Character.class;
        case "skipemptylines":
        case "skipEmptyLines": return java.lang.Boolean.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        UniVocityCsvDataFormat target = (UniVocityCsvDataFormat) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "asmap":
        case "asMap": return target.isAsMap();
        case "comment": return target.getComment();
        case "delimiter": return target.getDelimiter();
        case "emptyvalue":
        case "emptyValue": return target.getEmptyValue();
        case "headerextractionenabled":
        case "headerExtractionEnabled": return target.getHeaderExtractionEnabled();
        case "headersdisabled":
        case "headersDisabled": return target.isHeadersDisabled();
        case "ignoreleadingwhitespaces":
        case "ignoreLeadingWhitespaces": return target.getIgnoreLeadingWhitespaces();
        case "ignoretrailingwhitespaces":
        case "ignoreTrailingWhitespaces": return target.getIgnoreTrailingWhitespaces();
        case "lazyload":
        case "lazyLoad": return target.isLazyLoad();
        case "lineseparator":
        case "lineSeparator": return target.getLineSeparator();
        case "normalizedlineseparator":
        case "normalizedLineSeparator": return target.getNormalizedLineSeparator();
        case "nullvalue":
        case "nullValue": return target.getNullValue();
        case "numberofrecordstoread":
        case "numberOfRecordsToRead": return target.getNumberOfRecordsToRead();
        case "quote": return target.getQuote();
        case "quoteallfields":
        case "quoteAllFields": return target.getQuoteAllFields();
        case "quoteescape":
        case "quoteEscape": return target.getQuoteEscape();
        case "skipemptylines":
        case "skipEmptyLines": return target.getSkipEmptyLines();
        default: return null;
        }
    }
}

