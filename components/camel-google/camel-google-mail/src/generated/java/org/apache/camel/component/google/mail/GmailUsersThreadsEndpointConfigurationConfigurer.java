/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.google.mail;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.component.google.mail.GmailUsersThreadsEndpointConfiguration;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class GmailUsersThreadsEndpointConfigurationConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, ExtendedPropertyConfigurerGetter {

    private static final Map<String, Object> ALL_OPTIONS;
    static {
        Map<String, Object> map = new CaseInsensitiveMap();
        map.put("AccessToken", java.lang.String.class);
        map.put("ApiName", org.apache.camel.component.google.mail.internal.GoogleMailApiName.class);
        map.put("ApplicationName", java.lang.String.class);
        map.put("ClientId", java.lang.String.class);
        map.put("ClientSecret", java.lang.String.class);
        map.put("Content", com.google.api.services.gmail.model.ModifyThreadRequest.class);
        map.put("Delegate", java.lang.String.class);
        map.put("Format", java.lang.String.class);
        map.put("Id", java.lang.String.class);
        map.put("IncludeSpamTrash", java.lang.Boolean.class);
        map.put("LabelIds", java.util.List.class);
        map.put("MaxResults", java.lang.Long.class);
        map.put("MetadataHeaders", java.util.List.class);
        map.put("MethodName", java.lang.String.class);
        map.put("PageToken", java.lang.String.class);
        map.put("Q", java.lang.String.class);
        map.put("RefreshToken", java.lang.String.class);
        map.put("Scopes", java.util.Collection.class);
        map.put("ServiceAccountKey", java.lang.String.class);
        map.put("UserId", java.lang.String.class);
        ALL_OPTIONS = map;
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        org.apache.camel.component.google.mail.GmailUsersThreadsEndpointConfiguration target = (org.apache.camel.component.google.mail.GmailUsersThreadsEndpointConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesstoken":
        case "accessToken": target.setAccessToken(property(camelContext, java.lang.String.class, value)); return true;
        case "apiname":
        case "apiName": target.setApiName(property(camelContext, org.apache.camel.component.google.mail.internal.GoogleMailApiName.class, value)); return true;
        case "applicationname":
        case "applicationName": target.setApplicationName(property(camelContext, java.lang.String.class, value)); return true;
        case "clientid":
        case "clientId": target.setClientId(property(camelContext, java.lang.String.class, value)); return true;
        case "clientsecret":
        case "clientSecret": target.setClientSecret(property(camelContext, java.lang.String.class, value)); return true;
        case "content": target.setContent(property(camelContext, com.google.api.services.gmail.model.ModifyThreadRequest.class, value)); return true;
        case "delegate": target.setDelegate(property(camelContext, java.lang.String.class, value)); return true;
        case "format": target.setFormat(property(camelContext, java.lang.String.class, value)); return true;
        case "id": target.setId(property(camelContext, java.lang.String.class, value)); return true;
        case "includespamtrash":
        case "includeSpamTrash": target.setIncludeSpamTrash(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "labelids":
        case "labelIds": target.setLabelIds(property(camelContext, java.util.List.class, value)); return true;
        case "maxresults":
        case "maxResults": target.setMaxResults(property(camelContext, java.lang.Long.class, value)); return true;
        case "metadataheaders":
        case "metadataHeaders": target.setMetadataHeaders(property(camelContext, java.util.List.class, value)); return true;
        case "methodname":
        case "methodName": target.setMethodName(property(camelContext, java.lang.String.class, value)); return true;
        case "pagetoken":
        case "pageToken": target.setPageToken(property(camelContext, java.lang.String.class, value)); return true;
        case "q": target.setQ(property(camelContext, java.lang.String.class, value)); return true;
        case "refreshtoken":
        case "refreshToken": target.setRefreshToken(property(camelContext, java.lang.String.class, value)); return true;
        case "scopes": target.setScopes(property(camelContext, java.util.Collection.class, value)); return true;
        case "serviceaccountkey":
        case "serviceAccountKey": target.setServiceAccountKey(property(camelContext, java.lang.String.class, value)); return true;
        case "userid":
        case "userId": target.setUserId(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        return ALL_OPTIONS;
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesstoken":
        case "accessToken": return java.lang.String.class;
        case "apiname":
        case "apiName": return org.apache.camel.component.google.mail.internal.GoogleMailApiName.class;
        case "applicationname":
        case "applicationName": return java.lang.String.class;
        case "clientid":
        case "clientId": return java.lang.String.class;
        case "clientsecret":
        case "clientSecret": return java.lang.String.class;
        case "content": return com.google.api.services.gmail.model.ModifyThreadRequest.class;
        case "delegate": return java.lang.String.class;
        case "format": return java.lang.String.class;
        case "id": return java.lang.String.class;
        case "includespamtrash":
        case "includeSpamTrash": return java.lang.Boolean.class;
        case "labelids":
        case "labelIds": return java.util.List.class;
        case "maxresults":
        case "maxResults": return java.lang.Long.class;
        case "metadataheaders":
        case "metadataHeaders": return java.util.List.class;
        case "methodname":
        case "methodName": return java.lang.String.class;
        case "pagetoken":
        case "pageToken": return java.lang.String.class;
        case "q": return java.lang.String.class;
        case "refreshtoken":
        case "refreshToken": return java.lang.String.class;
        case "scopes": return java.util.Collection.class;
        case "serviceaccountkey":
        case "serviceAccountKey": return java.lang.String.class;
        case "userid":
        case "userId": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        org.apache.camel.component.google.mail.GmailUsersThreadsEndpointConfiguration target = (org.apache.camel.component.google.mail.GmailUsersThreadsEndpointConfiguration) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesstoken":
        case "accessToken": return target.getAccessToken();
        case "apiname":
        case "apiName": return target.getApiName();
        case "applicationname":
        case "applicationName": return target.getApplicationName();
        case "clientid":
        case "clientId": return target.getClientId();
        case "clientsecret":
        case "clientSecret": return target.getClientSecret();
        case "content": return target.getContent();
        case "delegate": return target.getDelegate();
        case "format": return target.getFormat();
        case "id": return target.getId();
        case "includespamtrash":
        case "includeSpamTrash": return target.getIncludeSpamTrash();
        case "labelids":
        case "labelIds": return target.getLabelIds();
        case "maxresults":
        case "maxResults": return target.getMaxResults();
        case "metadataheaders":
        case "metadataHeaders": return target.getMetadataHeaders();
        case "methodname":
        case "methodName": return target.getMethodName();
        case "pagetoken":
        case "pageToken": return target.getPageToken();
        case "q": return target.getQ();
        case "refreshtoken":
        case "refreshToken": return target.getRefreshToken();
        case "scopes": return target.getScopes();
        case "serviceaccountkey":
        case "serviceAccountKey": return target.getServiceAccountKey();
        case "userid":
        case "userId": return target.getUserId();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "scopes": return java.lang.String.class;
        default: return null;
        }
    }
}

