/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.google.drive;

import javax.annotation.processing.Generated;
import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateEndpointUriFactoryMojo")
public class GoogleDriveEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":apiName/methodName";

    private static final Set<String> PROPERTY_NAMES;
    private static final Set<String> SECRET_PROPERTY_NAMES;
    private static final Set<String> MULTI_VALUE_PREFIXES;
    static {
        Set<String> props = new HashSet<>(85);
        props.add("accessToken");
        props.add("acknowledgeAbuse");
        props.add("addParents");
        props.add("allowItemDeletion");
        props.add("apiName");
        props.add("applicationName");
        props.add("backoffErrorThreshold");
        props.add("backoffIdleThreshold");
        props.add("backoffMultiplier");
        props.add("bridgeErrorHandler");
        props.add("channel");
        props.add("clientFactory");
        props.add("clientId");
        props.add("clientSecret");
        props.add("commentId");
        props.add("content");
        props.add("contentChannel");
        props.add("corpora");
        props.add("corpus");
        props.add("count");
        props.add("delay");
        props.add("delegate");
        props.add("driveId");
        props.add("emailMessage");
        props.add("enforceExpansiveAccess");
        props.add("enforceSingleParent");
        props.add("exceptionHandler");
        props.add("exchangePattern");
        props.add("file");
        props.add("fileId");
        props.add("greedy");
        props.add("ignoreDefaultVisibility");
        props.add("inBody");
        props.add("includeCorpusRemovals");
        props.add("includeDeleted");
        props.add("includeItemsFromAllDrives");
        props.add("includeLabels");
        props.add("includePermissionsForView");
        props.add("includeRemoved");
        props.add("includeTeamDriveItems");
        props.add("initialDelay");
        props.add("keepRevisionForever");
        props.add("lazyStartProducer");
        props.add("maxResults");
        props.add("mediaContent");
        props.add("methodName");
        props.add("mimeType");
        props.add("modifyLabelsRequest");
        props.add("moveToNewOwnersRoot");
        props.add("ocrLanguage");
        props.add("orderBy");
        props.add("pageSize");
        props.add("pageToken");
        props.add("permissionId");
        props.add("pollStrategy");
        props.add("q");
        props.add("refreshToken");
        props.add("removeExpiration");
        props.add("removeParents");
        props.add("repeatCount");
        props.add("replyId");
        props.add("requestId");
        props.add("restrictToMyDrive");
        props.add("revisionId");
        props.add("runLoggingLevel");
        props.add("scheduledExecutorService");
        props.add("scheduler");
        props.add("schedulerProperties");
        props.add("scopes");
        props.add("sendEmptyMessageWhenIdle");
        props.add("sendNotificationEmail");
        props.add("serviceAccountKey");
        props.add("space");
        props.add("spaces");
        props.add("startModifiedTime");
        props.add("startScheduler");
        props.add("supportsAllDrives");
        props.add("supportsTeamDrives");
        props.add("teamDriveId");
        props.add("timeUnit");
        props.add("transferOwnership");
        props.add("type");
        props.add("useContentAsIndexableText");
        props.add("useDomainAdminAccess");
        props.add("useFixedDelay");
        PROPERTY_NAMES = Collections.unmodifiableSet(props);
        Set<String> secretProps = new HashSet<>(3);
        secretProps.add("accessToken");
        secretProps.add("clientSecret");
        secretProps.add("refreshToken");
        SECRET_PROPERTY_NAMES = Collections.unmodifiableSet(secretProps);
        Set<String> prefixes = new HashSet<>(1);
        prefixes.add("scheduler.");
        MULTI_VALUE_PREFIXES = Collections.unmodifiableSet(prefixes);
    }

    @Override
    public boolean isEnabled(String scheme) {
        return "google-drive".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "apiName", null, true, copy);
        uri = buildPathParameter(syntax, uri, "methodName", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

