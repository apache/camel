<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd 
    ">
    <!-- START SNIPPET: e1 -->

    <!-- here we define a spring bean that is our container wide interceptor
         its important to notice that the class ContainerWideInterceptor implements
         org.apache.camel.spi.InterceptStrategy that allows us to plugin our interceptors
         Camel will at startup automatic look for any beans in spring registry that is an
         instance of org.apache.camel.spi.InterceptStrategy and add it as interceptor
         to all its routes. Using this we are capable of defining container wide interceptors
         that gets used in all camel contests we define with spring -->
    <bean id="myInterceptor" class="org.apache.camel.spring.interceptor.ContainerWideInterceptor"/>

    <!-- here we have the 1st CamelContext -->
    <camelContext id="camel1" xmlns="http://camel.apache.org/schema/spring">
        <route>
            <from uri="direct:one"/>
            <to uri="mock:result"/>
        </route>
    </camelContext>

    <!-- and there we have the 2nd CamelContext -->
    <camelContext id="camel2" xmlns="http://camel.apache.org/schema/spring">
        <route>
            <from uri="direct:two"/>
            <to uri="log:two"/>
            <to uri="mock:result"/>
        </route>
    </camelContext>
    <!-- END SNIPPET: e1 -->

</beans>
