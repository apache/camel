<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    ">

	<!-- START SNIPPET: e1 -->
	<!-- this is the processor that will fail the first 2 attempts -->
	<bean id="myProcessor" class="org.apache.camel.processor.RedeliverToSubRouteTest.MyProcessor"/>

	<camelContext xmlns="http://camel.apache.org/schema/spring">

		<!-- setup no error handler with an id, we refer to from the 2nd route -->
		<errorHandler id="noErrorHandler" type="NoErrorHandler"/>

		<!-- configure on exception to redelivery at most 2 times when an IOException was thrown
		     do not use redelivery delay to run unit test faster -->
		<onException>
			<exception>java.io.IOException</exception>
			<redeliveryPolicy maximumRedeliveries="2" redeliveryDelay="0"/>
		</onException>

		<!-- 1st route, no need to setup error handler, as it will use the default error handler -->
		<route>
			<from uri="direct:start"/>
			<to uri="mock:a"/>
			<to uri="direct:sub"/>
			<to uri="mock:c"/>
		</route>

		<!-- disable error handler on this route, so the entire route can be redelivered
		     when called from the 1st route -->
		<route errorHandlerRef="noErrorHandler">
			<from uri="direct:sub"/>
			<to uri="mock:b"/>
			<process ref="myProcessor"/>
		</route>
	</camelContext>
	<!-- END SNIPPET: e1 -->

</beans>
