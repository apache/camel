/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.kubernetes.customresources;

import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.camel.spi.EndpointUriFactory;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
public class KubernetesCustomResourcesEndpointUriFactory extends org.apache.camel.support.component.EndpointUriFactorySupport implements EndpointUriFactory {

    private static final String BASE = ":masterUrl";

    private static final Set<String> PROPERTY_NAMES = Set.of(
            "apiVersion", "bridgeErrorHandler", "caCertData", "caCertFile", "clientCertData", "clientCertFile",
            "clientKeyAlgo", "clientKeyData", "clientKeyFile", "clientKeyPassphrase", "connectionTimeout", "crdGroup",
            "crdName", "crdPlural", "crdScope", "crdVersion", "dnsDomain", "exceptionHandler", "exchangePattern",
            "kubernetesClient", "labelKey", "labelValue", "lazyStartProducer", "masterUrl", "namespace", "oauthToken",
            "operation", "password", "poolSize", "portName", "portProtocol", "resourceName", "trustCerts", "username");
    private static final Set<String> SECRET_PROPERTY_NAMES = Set.of(
            "caCertData", "caCertFile", "clientCertData", "clientCertFile", "clientKeyAlgo", "clientKeyData",
            "clientKeyFile", "clientKeyPassphrase", "oauthToken", "password", "trustCerts", "username");
    private static final Set<String> MULTI_VALUE_PREFIXES = Set.of();

    @Override
    public boolean isEnabled(String scheme) {
        return "kubernetes-custom-resources".equals(scheme);
    }

    @Override
    public String buildUri(String scheme, Map<String, Object> properties, boolean encode) throws URISyntaxException {
        String syntax = scheme + BASE;
        String uri = syntax;

        Map<String, Object> copy = new HashMap<>(properties);

        uri = buildPathParameter(syntax, uri, "masterUrl", null, true, copy);
        uri = buildQueryParameters(uri, copy, encode);
        return uri;
    }

    @Override
    public Set<String> propertyNames() {
        return PROPERTY_NAMES;
    }

    @Override
    public Set<String> secretPropertyNames() {
        return SECRET_PROPERTY_NAMES;
    }

    @Override
    public Set<String> multiValuePrefixes() {
        return MULTI_VALUE_PREFIXES;
    }

    @Override
    public boolean isLenientProperties() {
        return false;
    }
}

