/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.kubernetes.persistent_volumes;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class KubernetesPersistentVolumesEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        KubernetesPersistentVolumesEndpoint target = (KubernetesPersistentVolumesEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apiversion":
        case "apiVersion": target.getConfiguration().setApiVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "cacertdata":
        case "caCertData": target.getConfiguration().setCaCertData(property(camelContext, java.lang.String.class, value)); return true;
        case "cacertfile":
        case "caCertFile": target.getConfiguration().setCaCertFile(property(camelContext, java.lang.String.class, value)); return true;
        case "clientcertdata":
        case "clientCertData": target.getConfiguration().setClientCertData(property(camelContext, java.lang.String.class, value)); return true;
        case "clientcertfile":
        case "clientCertFile": target.getConfiguration().setClientCertFile(property(camelContext, java.lang.String.class, value)); return true;
        case "clientkeyalgo":
        case "clientKeyAlgo": target.getConfiguration().setClientKeyAlgo(property(camelContext, java.lang.String.class, value)); return true;
        case "clientkeydata":
        case "clientKeyData": target.getConfiguration().setClientKeyData(property(camelContext, java.lang.String.class, value)); return true;
        case "clientkeyfile":
        case "clientKeyFile": target.getConfiguration().setClientKeyFile(property(camelContext, java.lang.String.class, value)); return true;
        case "clientkeypassphrase":
        case "clientKeyPassphrase": target.getConfiguration().setClientKeyPassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.getConfiguration().setConnectionTimeout(property(camelContext, java.lang.Integer.class, value)); return true;
        case "dnsdomain":
        case "dnsDomain": target.getConfiguration().setDnsDomain(property(camelContext, java.lang.String.class, value)); return true;
        case "kubernetesclient":
        case "kubernetesClient": target.getConfiguration().setKubernetesClient(property(camelContext, io.fabric8.kubernetes.client.KubernetesClient.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "oauthtoken":
        case "oauthToken": target.getConfiguration().setOauthToken(property(camelContext, java.lang.String.class, value)); return true;
        case "operation": target.getConfiguration().setOperation(property(camelContext, java.lang.String.class, value)); return true;
        case "password": target.getConfiguration().setPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "portname":
        case "portName": target.getConfiguration().setPortName(property(camelContext, java.lang.String.class, value)); return true;
        case "portprotocol":
        case "portProtocol": target.getConfiguration().setPortProtocol(property(camelContext, java.lang.String.class, value)); return true;
        case "synchronous": target.setSynchronous(property(camelContext, boolean.class, value)); return true;
        case "trustcerts":
        case "trustCerts": target.getConfiguration().setTrustCerts(property(camelContext, java.lang.Boolean.class, value)); return true;
        case "username": target.getConfiguration().setUsername(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("apiVersion", java.lang.String.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("caCertData", java.lang.String.class);
        answer.put("caCertFile", java.lang.String.class);
        answer.put("clientCertData", java.lang.String.class);
        answer.put("clientCertFile", java.lang.String.class);
        answer.put("clientKeyAlgo", java.lang.String.class);
        answer.put("clientKeyData", java.lang.String.class);
        answer.put("clientKeyFile", java.lang.String.class);
        answer.put("clientKeyPassphrase", java.lang.String.class);
        answer.put("connectionTimeout", java.lang.Integer.class);
        answer.put("dnsDomain", java.lang.String.class);
        answer.put("kubernetesClient", io.fabric8.kubernetes.client.KubernetesClient.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("oauthToken", java.lang.String.class);
        answer.put("operation", java.lang.String.class);
        answer.put("password", java.lang.String.class);
        answer.put("portName", java.lang.String.class);
        answer.put("portProtocol", java.lang.String.class);
        answer.put("synchronous", boolean.class);
        answer.put("trustCerts", java.lang.Boolean.class);
        answer.put("username", java.lang.String.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        KubernetesPersistentVolumesEndpoint target = (KubernetesPersistentVolumesEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apiversion":
        case "apiVersion": return target.getConfiguration().getApiVersion();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "cacertdata":
        case "caCertData": return target.getConfiguration().getCaCertData();
        case "cacertfile":
        case "caCertFile": return target.getConfiguration().getCaCertFile();
        case "clientcertdata":
        case "clientCertData": return target.getConfiguration().getClientCertData();
        case "clientcertfile":
        case "clientCertFile": return target.getConfiguration().getClientCertFile();
        case "clientkeyalgo":
        case "clientKeyAlgo": return target.getConfiguration().getClientKeyAlgo();
        case "clientkeydata":
        case "clientKeyData": return target.getConfiguration().getClientKeyData();
        case "clientkeyfile":
        case "clientKeyFile": return target.getConfiguration().getClientKeyFile();
        case "clientkeypassphrase":
        case "clientKeyPassphrase": return target.getConfiguration().getClientKeyPassphrase();
        case "connectiontimeout":
        case "connectionTimeout": return target.getConfiguration().getConnectionTimeout();
        case "dnsdomain":
        case "dnsDomain": return target.getConfiguration().getDnsDomain();
        case "kubernetesclient":
        case "kubernetesClient": return target.getConfiguration().getKubernetesClient();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "oauthtoken":
        case "oauthToken": return target.getConfiguration().getOauthToken();
        case "operation": return target.getConfiguration().getOperation();
        case "password": return target.getConfiguration().getPassword();
        case "portname":
        case "portName": return target.getConfiguration().getPortName();
        case "portprotocol":
        case "portProtocol": return target.getConfiguration().getPortProtocol();
        case "synchronous": return target.isSynchronous();
        case "trustcerts":
        case "trustCerts": return target.getConfiguration().getTrustCerts();
        case "username": return target.getConfiguration().getUsername();
        default: return null;
        }
    }
}

