/* Generated by camel build tools - do NOT edit this file! */
package io.fabric8.kubernetes.client;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import io.fabric8.kubernetes.client.ConfigBuilder;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.GenerateConfigurerMojo")
@SuppressWarnings("unchecked")
public class ConfigFluentImplConfigurer extends org.apache.camel.support.component.PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        io.fabric8.kubernetes.client.ConfigBuilder target = (io.fabric8.kubernetes.client.ConfigBuilder) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apiversion":
        case "apiVersion": target.withApiVersion(property(camelContext, java.lang.String.class, value)); return true;
        case "authprovider":
        case "authProvider": target.withAuthProvider(property(camelContext, io.fabric8.kubernetes.api.model.AuthProviderConfig.class, value)); return true;
        case "autoconfigure":
        case "autoConfigure": target.withAutoConfigure(property(camelContext, boolean.class, value)); return true;
        case "autooauthtoken":
        case "autoOAuthToken": target.withAutoOAuthToken(property(camelContext, java.lang.String.class, value)); return true;
        case "cacertdata":
        case "caCertData": target.withCaCertData(property(camelContext, java.lang.String.class, value)); return true;
        case "cacertfile":
        case "caCertFile": target.withCaCertFile(property(camelContext, java.lang.String.class, value)); return true;
        case "clientcertdata":
        case "clientCertData": target.withClientCertData(property(camelContext, java.lang.String.class, value)); return true;
        case "clientcertfile":
        case "clientCertFile": target.withClientCertFile(property(camelContext, java.lang.String.class, value)); return true;
        case "clientkeyalgo":
        case "clientKeyAlgo": target.withClientKeyAlgo(property(camelContext, java.lang.String.class, value)); return true;
        case "clientkeydata":
        case "clientKeyData": target.withClientKeyData(property(camelContext, java.lang.String.class, value)); return true;
        case "clientkeyfile":
        case "clientKeyFile": target.withClientKeyFile(property(camelContext, java.lang.String.class, value)); return true;
        case "clientkeypassphrase":
        case "clientKeyPassphrase": target.withClientKeyPassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "connectiontimeout":
        case "connectionTimeout": target.withConnectionTimeout(property(camelContext, int.class, value)); return true;
        case "contexts": target.withContexts(property(camelContext, java.util.List.class, value)); return true;
        case "currentcontext":
        case "currentContext": target.withCurrentContext(property(camelContext, io.fabric8.kubernetes.api.model.NamedContext.class, value)); return true;
        case "customheaders":
        case "customHeaders": target.withCustomHeaders(property(camelContext, java.util.Map.class, value)); return true;
        case "defaultnamespace":
        case "defaultNamespace": target.withDefaultNamespace(property(camelContext, boolean.class, value)); return true;
        case "disablehostnameverification":
        case "disableHostnameVerification": target.withDisableHostnameVerification(property(camelContext, boolean.class, value)); return true;
        case "file": target.withFile(property(camelContext, java.io.File.class, value)); return true;
        case "http2disable":
        case "http2Disable": target.withHttp2Disable(property(camelContext, boolean.class, value)); return true;
        case "httpproxy":
        case "httpProxy": target.withHttpProxy(property(camelContext, java.lang.String.class, value)); return true;
        case "httpsproxy":
        case "httpsProxy": target.withHttpsProxy(property(camelContext, java.lang.String.class, value)); return true;
        case "impersonateextras":
        case "impersonateExtras": target.withImpersonateExtras(property(camelContext, java.util.Map.class, value)); return true;
        case "impersonategroups":
        case "impersonateGroups": target.withImpersonateGroups(property(camelContext, java.lang.String[].class, value)); return true;
        case "impersonateusername":
        case "impersonateUsername": target.withImpersonateUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "keystorefile":
        case "keyStoreFile": target.withKeyStoreFile(property(camelContext, java.lang.String.class, value)); return true;
        case "keystorepassphrase":
        case "keyStorePassphrase": target.withKeyStorePassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "logginginterval":
        case "loggingInterval": target.withLoggingInterval(property(camelContext, int.class, value)); return true;
        case "masterurl":
        case "masterUrl": target.withMasterUrl(property(camelContext, java.lang.String.class, value)); return true;
        case "maxconcurrentrequests":
        case "maxConcurrentRequests": target.withMaxConcurrentRequests(property(camelContext, int.class, value)); return true;
        case "maxconcurrentrequestsperhost":
        case "maxConcurrentRequestsPerHost": target.withMaxConcurrentRequestsPerHost(property(camelContext, int.class, value)); return true;
        case "namespace": target.withNamespace(property(camelContext, java.lang.String.class, value)); return true;
        case "noproxy":
        case "noProxy": target.withNoProxy(property(camelContext, java.lang.String[].class, value)); return true;
        case "oauthtoken":
        case "oauthToken": target.withOauthToken(property(camelContext, java.lang.String.class, value)); return true;
        case "oauthtokenprovider":
        case "oauthTokenProvider": target.withOauthTokenProvider(property(camelContext, io.fabric8.kubernetes.client.OAuthTokenProvider.class, value)); return true;
        case "onlyhttpwatches":
        case "onlyHttpWatches": target.withOnlyHttpWatches(property(camelContext, boolean.class, value)); return true;
        case "password": target.withPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "proxypassword":
        case "proxyPassword": target.withProxyPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "proxyusername":
        case "proxyUsername": target.withProxyUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "requestretrybackoffinterval":
        case "requestRetryBackoffInterval": target.withRequestRetryBackoffInterval(property(camelContext, int.class, value)); return true;
        case "requestretrybackofflimit":
        case "requestRetryBackoffLimit": target.withRequestRetryBackoffLimit(property(camelContext, int.class, value)); return true;
        case "requesttimeout":
        case "requestTimeout": target.withRequestTimeout(property(camelContext, int.class, value)); return true;
        case "scaletimeout":
        case "scaleTimeout": target.withScaleTimeout(property(camelContext, long.class, value)); return true;
        case "tlsversions":
        case "tlsVersions": target.withTlsVersions(property(camelContext, io.fabric8.kubernetes.client.http.TlsVersion[].class, value)); return true;
        case "trustcerts":
        case "trustCerts": target.withTrustCerts(property(camelContext, boolean.class, value)); return true;
        case "truststorefile":
        case "trustStoreFile": target.withTrustStoreFile(property(camelContext, java.lang.String.class, value)); return true;
        case "truststorepassphrase":
        case "trustStorePassphrase": target.withTrustStorePassphrase(property(camelContext, java.lang.String.class, value)); return true;
        case "uploadrequesttimeout":
        case "uploadRequestTimeout": target.withUploadRequestTimeout(property(camelContext, int.class, value)); return true;
        case "useragent":
        case "userAgent": target.withUserAgent(property(camelContext, java.lang.String.class, value)); return true;
        case "username": target.withUsername(property(camelContext, java.lang.String.class, value)); return true;
        case "watchreconnectinterval":
        case "watchReconnectInterval": target.withWatchReconnectInterval(property(camelContext, int.class, value)); return true;
        case "watchreconnectlimit":
        case "watchReconnectLimit": target.withWatchReconnectLimit(property(camelContext, int.class, value)); return true;
        case "websocketpinginterval":
        case "websocketPingInterval": target.withWebsocketPingInterval(property(camelContext, long.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apiversion":
        case "apiVersion": return java.lang.String.class;
        case "authprovider":
        case "authProvider": return io.fabric8.kubernetes.api.model.AuthProviderConfig.class;
        case "autoconfigure":
        case "autoConfigure": return boolean.class;
        case "autooauthtoken":
        case "autoOAuthToken": return java.lang.String.class;
        case "cacertdata":
        case "caCertData": return java.lang.String.class;
        case "cacertfile":
        case "caCertFile": return java.lang.String.class;
        case "clientcertdata":
        case "clientCertData": return java.lang.String.class;
        case "clientcertfile":
        case "clientCertFile": return java.lang.String.class;
        case "clientkeyalgo":
        case "clientKeyAlgo": return java.lang.String.class;
        case "clientkeydata":
        case "clientKeyData": return java.lang.String.class;
        case "clientkeyfile":
        case "clientKeyFile": return java.lang.String.class;
        case "clientkeypassphrase":
        case "clientKeyPassphrase": return java.lang.String.class;
        case "connectiontimeout":
        case "connectionTimeout": return int.class;
        case "contexts": return java.util.List.class;
        case "currentcontext":
        case "currentContext": return io.fabric8.kubernetes.api.model.NamedContext.class;
        case "customheaders":
        case "customHeaders": return java.util.Map.class;
        case "defaultnamespace":
        case "defaultNamespace": return boolean.class;
        case "disablehostnameverification":
        case "disableHostnameVerification": return boolean.class;
        case "file": return java.io.File.class;
        case "http2disable":
        case "http2Disable": return boolean.class;
        case "httpproxy":
        case "httpProxy": return java.lang.String.class;
        case "httpsproxy":
        case "httpsProxy": return java.lang.String.class;
        case "impersonateextras":
        case "impersonateExtras": return java.util.Map.class;
        case "impersonategroups":
        case "impersonateGroups": return java.lang.String[].class;
        case "impersonateusername":
        case "impersonateUsername": return java.lang.String.class;
        case "keystorefile":
        case "keyStoreFile": return java.lang.String.class;
        case "keystorepassphrase":
        case "keyStorePassphrase": return java.lang.String.class;
        case "logginginterval":
        case "loggingInterval": return int.class;
        case "masterurl":
        case "masterUrl": return java.lang.String.class;
        case "maxconcurrentrequests":
        case "maxConcurrentRequests": return int.class;
        case "maxconcurrentrequestsperhost":
        case "maxConcurrentRequestsPerHost": return int.class;
        case "namespace": return java.lang.String.class;
        case "noproxy":
        case "noProxy": return java.lang.String[].class;
        case "oauthtoken":
        case "oauthToken": return java.lang.String.class;
        case "oauthtokenprovider":
        case "oauthTokenProvider": return io.fabric8.kubernetes.client.OAuthTokenProvider.class;
        case "onlyhttpwatches":
        case "onlyHttpWatches": return boolean.class;
        case "password": return java.lang.String.class;
        case "proxypassword":
        case "proxyPassword": return java.lang.String.class;
        case "proxyusername":
        case "proxyUsername": return java.lang.String.class;
        case "requestretrybackoffinterval":
        case "requestRetryBackoffInterval": return int.class;
        case "requestretrybackofflimit":
        case "requestRetryBackoffLimit": return int.class;
        case "requesttimeout":
        case "requestTimeout": return int.class;
        case "scaletimeout":
        case "scaleTimeout": return long.class;
        case "tlsversions":
        case "tlsVersions": return io.fabric8.kubernetes.client.http.TlsVersion[].class;
        case "trustcerts":
        case "trustCerts": return boolean.class;
        case "truststorefile":
        case "trustStoreFile": return java.lang.String.class;
        case "truststorepassphrase":
        case "trustStorePassphrase": return java.lang.String.class;
        case "uploadrequesttimeout":
        case "uploadRequestTimeout": return int.class;
        case "useragent":
        case "userAgent": return java.lang.String.class;
        case "username": return java.lang.String.class;
        case "watchreconnectinterval":
        case "watchReconnectInterval": return int.class;
        case "watchreconnectlimit":
        case "watchReconnectLimit": return int.class;
        case "websocketpinginterval":
        case "websocketPingInterval": return long.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        io.fabric8.kubernetes.client.ConfigBuilder target = (io.fabric8.kubernetes.client.ConfigBuilder) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "apiversion":
        case "apiVersion": return target.getApiVersion();
        case "authprovider":
        case "authProvider": return target.getAuthProvider();
        case "autoconfigure":
        case "autoConfigure": return target.isAutoConfigure();
        case "autooauthtoken":
        case "autoOAuthToken": return target.getAutoOAuthToken();
        case "cacertdata":
        case "caCertData": return target.getCaCertData();
        case "cacertfile":
        case "caCertFile": return target.getCaCertFile();
        case "clientcertdata":
        case "clientCertData": return target.getClientCertData();
        case "clientcertfile":
        case "clientCertFile": return target.getClientCertFile();
        case "clientkeyalgo":
        case "clientKeyAlgo": return target.getClientKeyAlgo();
        case "clientkeydata":
        case "clientKeyData": return target.getClientKeyData();
        case "clientkeyfile":
        case "clientKeyFile": return target.getClientKeyFile();
        case "clientkeypassphrase":
        case "clientKeyPassphrase": return target.getClientKeyPassphrase();
        case "connectiontimeout":
        case "connectionTimeout": return target.getConnectionTimeout();
        case "contexts": return target.getContexts();
        case "currentcontext":
        case "currentContext": return target.getCurrentContext();
        case "customheaders":
        case "customHeaders": return target.getCustomHeaders();
        case "defaultnamespace":
        case "defaultNamespace": return target.isDefaultNamespace();
        case "disablehostnameverification":
        case "disableHostnameVerification": return target.isDisableHostnameVerification();
        case "file": return target.getFile();
        case "http2disable":
        case "http2Disable": return target.isHttp2Disable();
        case "httpproxy":
        case "httpProxy": return target.getHttpProxy();
        case "httpsproxy":
        case "httpsProxy": return target.getHttpsProxy();
        case "impersonateextras":
        case "impersonateExtras": return target.getImpersonateExtras();
        case "impersonategroups":
        case "impersonateGroups": return target.getImpersonateGroups();
        case "impersonateusername":
        case "impersonateUsername": return target.getImpersonateUsername();
        case "keystorefile":
        case "keyStoreFile": return target.getKeyStoreFile();
        case "keystorepassphrase":
        case "keyStorePassphrase": return target.getKeyStorePassphrase();
        case "logginginterval":
        case "loggingInterval": return target.getLoggingInterval();
        case "masterurl":
        case "masterUrl": return target.getMasterUrl();
        case "maxconcurrentrequests":
        case "maxConcurrentRequests": return target.getMaxConcurrentRequests();
        case "maxconcurrentrequestsperhost":
        case "maxConcurrentRequestsPerHost": return target.getMaxConcurrentRequestsPerHost();
        case "namespace": return target.getNamespace();
        case "noproxy":
        case "noProxy": return target.getNoProxy();
        case "oauthtoken":
        case "oauthToken": return target.getOauthToken();
        case "oauthtokenprovider":
        case "oauthTokenProvider": return target.getOauthTokenProvider();
        case "onlyhttpwatches":
        case "onlyHttpWatches": return target.isOnlyHttpWatches();
        case "password": return target.getPassword();
        case "proxypassword":
        case "proxyPassword": return target.getProxyPassword();
        case "proxyusername":
        case "proxyUsername": return target.getProxyUsername();
        case "requestretrybackoffinterval":
        case "requestRetryBackoffInterval": return target.getRequestRetryBackoffInterval();
        case "requestretrybackofflimit":
        case "requestRetryBackoffLimit": return target.getRequestRetryBackoffLimit();
        case "requesttimeout":
        case "requestTimeout": return target.getRequestTimeout();
        case "scaletimeout":
        case "scaleTimeout": return target.getScaleTimeout();
        case "tlsversions":
        case "tlsVersions": return target.getTlsVersions();
        case "trustcerts":
        case "trustCerts": return target.isTrustCerts();
        case "truststorefile":
        case "trustStoreFile": return target.getTrustStoreFile();
        case "truststorepassphrase":
        case "trustStorePassphrase": return target.getTrustStorePassphrase();
        case "uploadrequesttimeout":
        case "uploadRequestTimeout": return target.getUploadRequestTimeout();
        case "useragent":
        case "userAgent": return target.getUserAgent();
        case "username": return target.getUsername();
        case "watchreconnectinterval":
        case "watchReconnectInterval": return target.getWatchReconnectInterval();
        case "watchreconnectlimit":
        case "watchReconnectLimit": return target.getWatchReconnectLimit();
        case "websocketpinginterval":
        case "websocketPingInterval": return target.getWebsocketPingInterval();
        default: return null;
        }
    }

    @Override
    public Object getCollectionValueType(Object target, String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "contexts": return io.fabric8.kubernetes.api.model.NamedContext.class;
        default: return null;
        }
    }
}

