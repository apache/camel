/* Generated by camel build tools - do NOT edit this file! */
package org.apache.camel.component.azure.storage.queue;

import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@SuppressWarnings("unchecked")
public class QueueComponentConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    private org.apache.camel.component.azure.storage.queue.QueueConfiguration getOrCreateConfiguration(QueueComponent target) {
        if (target.getConfiguration() == null) {
            target.setConfiguration(new org.apache.camel.component.azure.storage.queue.QueueConfiguration());
        }
        return target.getConfiguration();
    }

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        QueueComponent target = (QueueComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesskey":
        case "accessKey": getOrCreateConfiguration(target).setAccessKey(property(camelContext, java.lang.String.class, value)); return true;
        case "basicpropertybinding":
        case "basicPropertyBinding": target.setBasicPropertyBinding(property(camelContext, boolean.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "configuration": target.setConfiguration(property(camelContext, org.apache.camel.component.azure.storage.queue.QueueConfiguration.class, value)); return true;
        case "credentials": getOrCreateConfiguration(target).setCredentials(property(camelContext, com.azure.storage.common.StorageSharedKeyCredential.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "maxmessages":
        case "maxMessages": getOrCreateConfiguration(target).setMaxMessages(property(camelContext, java.lang.Integer.class, value)); return true;
        case "operation": getOrCreateConfiguration(target).setOperation(property(camelContext, org.apache.camel.component.azure.storage.queue.QueueOperationDefinition.class, value)); return true;
        case "serviceclient":
        case "serviceClient": getOrCreateConfiguration(target).setServiceClient(property(camelContext, com.azure.storage.queue.QueueServiceClient.class, value)); return true;
        case "timetolive":
        case "timeToLive": getOrCreateConfiguration(target).setTimeToLive(property(camelContext, java.time.Duration.class, value)); return true;
        case "timeout": getOrCreateConfiguration(target).setTimeout(property(camelContext, java.time.Duration.class, value)); return true;
        case "visibilitytimeout":
        case "visibilityTimeout": getOrCreateConfiguration(target).setVisibilityTimeout(property(camelContext, java.time.Duration.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Map<String, Object> getAllOptions(Object target) {
        Map<String, Object> answer = new CaseInsensitiveMap();
        answer.put("accessKey", java.lang.String.class);
        answer.put("basicPropertyBinding", boolean.class);
        answer.put("bridgeErrorHandler", boolean.class);
        answer.put("configuration", org.apache.camel.component.azure.storage.queue.QueueConfiguration.class);
        answer.put("credentials", com.azure.storage.common.StorageSharedKeyCredential.class);
        answer.put("lazyStartProducer", boolean.class);
        answer.put("maxMessages", java.lang.Integer.class);
        answer.put("operation", org.apache.camel.component.azure.storage.queue.QueueOperationDefinition.class);
        answer.put("serviceClient", com.azure.storage.queue.QueueServiceClient.class);
        answer.put("timeToLive", java.time.Duration.class);
        answer.put("timeout", java.time.Duration.class);
        answer.put("visibilityTimeout", java.time.Duration.class);
        return answer;
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        QueueComponent target = (QueueComponent) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "accesskey":
        case "accessKey": return getOrCreateConfiguration(target).getAccessKey();
        case "basicpropertybinding":
        case "basicPropertyBinding": return target.isBasicPropertyBinding();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "configuration": return target.getConfiguration();
        case "credentials": return getOrCreateConfiguration(target).getCredentials();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "maxmessages":
        case "maxMessages": return getOrCreateConfiguration(target).getMaxMessages();
        case "operation": return getOrCreateConfiguration(target).getOperation();
        case "serviceclient":
        case "serviceClient": return getOrCreateConfiguration(target).getServiceClient();
        case "timetolive":
        case "timeToLive": return getOrCreateConfiguration(target).getTimeToLive();
        case "timeout": return getOrCreateConfiguration(target).getTimeout();
        case "visibilitytimeout":
        case "visibilityTimeout": return getOrCreateConfiguration(target).getVisibilityTimeout();
        default: return null;
        }
    }
}

