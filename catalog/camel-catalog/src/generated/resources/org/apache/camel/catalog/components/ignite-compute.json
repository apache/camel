{
  "component": {
    "kind": "component",
    "name": "ignite-compute",
    "title": "Ignite Compute",
    "description": "Run compute operations on an Ignite cluster.",
    "deprecated": false,
    "firstVersion": "2.17.0",
    "label": "compute",
    "javaType": "org.apache.camel.component.ignite.compute.IgniteComputeComponent",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-ignite",
    "version": "3.7.0-SNAPSHOT",
    "scheme": "ignite-compute",
    "extendsScheme": "",
    "syntax": "ignite-compute:endpointId",
    "async": false,
    "api": false,
    "consumerOnly": false,
    "producerOnly": true,
    "lenientProperties": false
  },
  "componentProperties": {
    "configurationResource": { "kind": "property", "displayName": "Configuration Resource", "group": "producer", "label": "", "required": false, "type": "object", "javaType": "java.lang.Object", "deprecated": false, "autowired": false, "secret": false, "description": "The resource from where to load the configuration. It can be a: URL, String or InputStream type." },
    "ignite": { "kind": "property", "displayName": "Ignite", "group": "producer", "label": "", "required": false, "type": "object", "javaType": "org.apache.ignite.Ignite", "deprecated": false, "autowired": false, "secret": false, "description": "To use an existing Ignite instance." },
    "igniteConfiguration": { "kind": "property", "displayName": "Ignite Configuration", "group": "producer", "label": "", "required": false, "type": "object", "javaType": "org.apache.ignite.configuration.IgniteConfiguration", "deprecated": false, "autowired": false, "secret": false, "description": "Allows the user to set a programmatic ignite configuration." },
    "lazyStartProducer": { "kind": "property", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "autowiredEnabled": { "kind": "property", "displayName": "Autowired Enabled", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc." }
  },
  "properties": {
    "endpointId": { "kind": "path", "displayName": "Endpoint Id", "group": "producer", "label": "", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The endpoint ID (not used)." },
    "clusterGroupExpression": { "kind": "parameter", "displayName": "Cluster Group Expression", "group": "producer", "label": "producer", "required": false, "type": "object", "javaType": "org.apache.camel.component.ignite.ClusterGroupExpression", "deprecated": false, "autowired": false, "secret": false, "description": "An expression that returns the Cluster Group for the IgniteCompute instance." },
    "computeName": { "kind": "parameter", "displayName": "Compute Name", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "The name of the compute job, which will be set via IgniteCompute#withName(String)." },
    "executionType": { "kind": "parameter", "displayName": "Execution Type", "group": "producer", "label": "producer", "required": true, "type": "object", "javaType": "org.apache.camel.component.ignite.compute.IgniteComputeExecutionType", "enum": [ "CALL", "BROADCAST", "APPLY", "EXECUTE", "RUN", "AFFINITY_CALL", "AFFINITY_RUN" ], "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The compute operation to perform. Possible values: CALL, BROADCAST, APPLY, EXECUTE, RUN, AFFINITY_CALL, AFFINITY_RUN. The component expects different payload types depending on the operation." },
    "lazyStartProducer": { "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "propagateIncomingBodyIfNoReturnValue": { "kind": "parameter", "displayName": "Propagate Incoming Body If No Return Value", "group": "producer", "label": "", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Sets whether to propagate the incoming body if the return type of the underlying Ignite operation is void." },
    "taskName": { "kind": "parameter", "displayName": "Task Name", "group": "producer", "label": "producer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "The task name, only applicable if using the IgniteComputeExecutionType#EXECUTE execution type." },
    "timeoutMillis": { "kind": "parameter", "displayName": "Timeout Millis", "group": "producer", "label": "producer", "required": false, "type": "integer", "javaType": "java.lang.Long", "deprecated": false, "autowired": false, "secret": false, "description": "The timeout interval for triggered jobs, in milliseconds, which will be set via IgniteCompute#withTimeout(long)." },
    "treatCollectionsAsCacheObjects": { "kind": "parameter", "displayName": "Treat Collections As Cache Objects", "group": "producer", "label": "", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Sets whether to treat Collections as cache objects or as Collections of items to insert\/update\/compute, etc." },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." }
  }
}
