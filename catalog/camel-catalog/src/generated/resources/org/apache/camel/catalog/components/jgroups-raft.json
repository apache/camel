{
  "component": {
    "kind": "component",
    "name": "jgroups-raft",
    "title": "JGroups raft",
    "description": "Exchange messages with JGroups-raft clusters.",
    "deprecated": false,
    "firstVersion": "2.24.0",
    "label": "clustering,messaging",
    "javaType": "org.apache.camel.component.jgroups.raft.JGroupsRaftComponent",
    "supportLevel": "Stable",
    "groupId": "org.apache.camel",
    "artifactId": "camel-jgroups-raft",
    "version": "4.0.0-SNAPSHOT",
    "scheme": "jgroups-raft",
    "extendsScheme": "",
    "syntax": "jgroups-raft:clusterName",
    "async": false,
    "api": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": false
  },
  "componentProperties": {
    "channelProperties": { "index": 0, "kind": "property", "displayName": "Channel Properties", "group": "common", "label": "", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "raft.xml", "description": "Specifies configuration properties of the RaftHandle JChannel used by the endpoint (ignored if raftHandle ref is provided)." },
    "raftHandle": { "index": 1, "kind": "property", "displayName": "Raft Handle", "group": "common", "label": "", "required": false, "type": "object", "javaType": "org.jgroups.raft.RaftHandle", "deprecated": false, "autowired": false, "secret": false, "description": "RaftHandle to use." },
    "raftId": { "index": 2, "kind": "property", "displayName": "Raft Id", "group": "common", "label": "", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "autowired": false, "secret": false, "description": "Unique raftId to use." },
    "stateMachine": { "index": 3, "kind": "property", "displayName": "State Machine", "group": "common", "label": "", "required": false, "type": "object", "javaType": "org.jgroups.raft.StateMachine", "deprecated": false, "autowired": false, "secret": false, "defaultValue": "NopStateMachine", "description": "StateMachine to use." },
    "bridgeErrorHandler": { "index": 4, "kind": "property", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "lazyStartProducer": { "index": 5, "kind": "property", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "autowiredEnabled": { "index": 6, "kind": "property", "displayName": "Autowired Enabled", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": true, "description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc." }
  },
  "headers": {
    "JGROUPSRAFT_LOG_SIZE": { "index": 0, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The Raft log size in number of entries.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_LOG_SIZE" },
    "JGROUPSRAFT_COMMIT_INDEX": { "index": 1, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The commit index.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_COMMIT_INDEX" },
    "JGROUPSRAFT_CURRENT_TERM": { "index": 2, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The current raft term.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_CURRENT_TERM" },
    "JGROUPSRAFT_IS_LEADER": { "index": 3, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "boolean", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Whether the node is the Raft Leader or not.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_IS_LEADER" },
    "JGROUPSRAFT_LAST_APPLIED": { "index": 4, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "int", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The index of the last log entry that was appended to the log.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_LAST_APPLIED" },
    "JGROUPSRAFT_LEADER_ADDRESS": { "index": 5, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "org.jgroups.Address", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The Address ot Raft Leader or not.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_LEADER_ADDRESS" },
    "JGROUPSRAFT_RAFT_ID": { "index": 6, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The Raft id of the node.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_RAFT_ID" },
    "JGROUPSRAFT_EVENT_TYPE": { "index": 7, "kind": "header", "displayName": "", "group": "consumer", "label": "consumer", "required": false, "javaType": "org.apache.camel.component.jgroups.raft.JGroupsRaftEventType", "enum": [ "LEADER", "FOLLOWER", "APPLY", "READ_CONTENT_FROM", "WRITE_CONTENT_TO" ], "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The event type", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_EVENT_TYPE" },
    "JGROUPSRAFT_SET_OFFSET": { "index": 8, "kind": "header", "displayName": "", "group": "producer", "label": "producer", "required": false, "javaType": "Integer", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Offset to use in the byte buffer to be set().", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_SET_OFFSET" },
    "JGROUPSRAFT_SET_LENGTH": { "index": 9, "kind": "header", "displayName": "", "group": "producer", "label": "producer", "required": false, "javaType": "Integer", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Length to use in the byte buffer to be set().", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_SET_LENGTH" },
    "JGROUPSRAFT_SET_TIMEOUT": { "index": 10, "kind": "header", "displayName": "", "group": "producer", "label": "producer", "required": false, "javaType": "Long", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Timeout to be used in set() operation.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_SET_TIMEOUT" },
    "JGROUPSRAFT_SET_TIMEUNIT": { "index": 11, "kind": "header", "displayName": "", "group": "producer", "label": "producer", "required": false, "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "Timeunit to be used in set() operation.", "constantName": "org.apache.camel.component.jgroups.raft.JGroupsRaftConstants#HEADER_JGROUPSRAFT_SET_TIMEUNIT" }
  },
  "properties": {
    "clusterName": { "index": 0, "kind": "path", "displayName": "Cluster Name", "group": "common", "label": "", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "deprecationNote": "", "autowired": false, "secret": false, "description": "The name of the JGroupsraft cluster the component should connect to." },
    "enableRoleChangeEvents": { "index": 1, "kind": "parameter", "displayName": "Enable Role Change Events", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "If set to true, the consumer endpoint will receive roleChange event as well (not just connecting and\/or using the state machine). By default it is set to false." },
    "bridgeErrorHandler": { "index": 2, "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exceptionHandler": { "index": 3, "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "autowired": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "index": 4, "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut" ], "deprecated": false, "autowired": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "lazyStartProducer": { "index": 5, "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer (advanced)", "label": "producer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "autowired": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." }
  }
}
